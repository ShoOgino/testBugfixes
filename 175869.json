{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","commits":[{"id":"6013b4c7388f1627659c8f96c44abd10a294d3a6","date":1346343796,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,String> props = new HashMap<String,String>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6378064655e76cd7b908b1cab4ce425b384b508","date":1347656715,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc, afterExpiration);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"88f39c3b3a16aebc5a91335341c7ad5b560e2277","date":1350066344,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d82832af39f94dbb58a3130fd216ff1d49435589","date":1350147242,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","date":1361851792,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getCoreNodeName(cd);\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getNodeName() + \"_\" + cd.getName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"849494cf2f3a96af5c8c84995108ddd8456fcd04","date":1372277913,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getCoreNodeName(cd);\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreZkNodeName = getCoreNodeName(cd);\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreZkNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreZkNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6b012dfd51a5cec1d2c107f29f562cb937de636","date":1379475473,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(new ContextKey(collection, coreNodeName), context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(coreNodeName, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f","date":1389198917,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    ZkNodeProps ourProps = new ZkNodeProps(props);\n    String collection = cd.getCloudDescriptor()\n        .getCollectionName();\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(new ContextKey(collection, coreNodeName), context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":["9813dd0748537c429b7c0a9b4723ea1ba496c047","849494cf2f3a96af5c8c84995108ddd8456fcd04","c6b012dfd51a5cec1d2c107f29f562cb937de636"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<String,Object>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5455c7b3fed6c1671990a44c19071cb0488c2c25","date":1413557414,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#joinElection(CoreDescriptor,boolean).mjava","sourceNew":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration, boolean joinAtHead)\n      throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false, joinAtHead);\n  }\n\n","sourceOld":"  private void joinElection(CoreDescriptor cd, boolean afterExpiration) throws InterruptedException, KeeperException, IOException {\n    // look for old context - if we find it, cancel it\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    final String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    \n    ContextKey contextKey = new ContextKey(collection, coreNodeName);\n    \n    ElectionContext prevContext = electionContexts.get(contextKey);\n    \n    if (prevContext != null) {\n      prevContext.cancelElection();\n    }\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    \n    Map<String,Object> props = new HashMap<>();\n    // we only put a subset of props into the leader node\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    \n \n    ZkNodeProps ourProps = new ZkNodeProps(props);\n\n    \n    ElectionContext context = new ShardLeaderElectionContext(leaderElector, shardId,\n        collection, coreNodeName, ourProps, this, cc);\n\n    leaderElector.setup(context);\n    electionContexts.put(contextKey, context);\n    leaderElector.joinElection(context, false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"fa64435b5902ce266c23755a4a00691a3285dab8":["6013b4c7388f1627659c8f96c44abd10a294d3a6"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"a6378064655e76cd7b908b1cab4ce425b384b508":["fa64435b5902ce266c23755a4a00691a3285dab8"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","5455c7b3fed6c1671990a44c19071cb0488c2c25"],"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f":["c6b012dfd51a5cec1d2c107f29f562cb937de636"],"d82832af39f94dbb58a3130fd216ff1d49435589":["a6378064655e76cd7b908b1cab4ce425b384b508","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"c6b012dfd51a5cec1d2c107f29f562cb937de636":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["a6378064655e76cd7b908b1cab4ce425b384b508"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5455c7b3fed6c1671990a44c19071cb0488c2c25"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5455c7b3fed6c1671990a44c19071cb0488c2c25","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["a6378064655e76cd7b908b1cab4ce425b384b508"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"5455c7b3fed6c1671990a44c19071cb0488c2c25":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"6013b4c7388f1627659c8f96c44abd10a294d3a6":["fa64435b5902ce266c23755a4a00691a3285dab8","05a14b2611ead08655a2b2bdc61632eb31316e57"],"849494cf2f3a96af5c8c84995108ddd8456fcd04":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c6b012dfd51a5cec1d2c107f29f562cb937de636"],"a6378064655e76cd7b908b1cab4ce425b384b508":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","88f39c3b3a16aebc5a91335341c7ad5b560e2277"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"5be2ff5f99976897aa35a6ce84f61b0a2b45d91f":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d82832af39f94dbb58a3130fd216ff1d49435589":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["05a14b2611ead08655a2b2bdc61632eb31316e57","6013b4c7388f1627659c8f96c44abd10a294d3a6"],"c6b012dfd51a5cec1d2c107f29f562cb937de636":["5be2ff5f99976897aa35a6ce84f61b0a2b45d91f"],"88f39c3b3a16aebc5a91335341c7ad5b560e2277":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","d82832af39f94dbb58a3130fd216ff1d49435589","cb4a195b8dc1808cd01748bd2e0fba26ca915d4d"],"cb4a195b8dc1808cd01748bd2e0fba26ca915d4d":["37a0f60745e53927c4c876cfe5b5a58170f0646c","849494cf2f3a96af5c8c84995108ddd8456fcd04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","db4fdbf3d262768eabc027cd8321edca0cd11fa8","05a14b2611ead08655a2b2bdc61632eb31316e57","0a22eafe3f72a4c2945eaad9547e6c78816978f4","d82832af39f94dbb58a3130fd216ff1d49435589","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}