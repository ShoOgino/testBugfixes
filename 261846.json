{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws Exception {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = stateManager.listData(dir, watcher);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (NoSuchElementException e) {\n        try {\n          stateManager.makePath(dir);\n        } catch (AlreadyExistsException e2) {\n          // ignore\n        }\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws Exception {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = stateManager.listData(dir, watcher);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            log.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (NoSuchElementException e) {\n        try {\n          stateManager.makePath(dir);\n        } catch (AlreadyExistsException e2) {\n          // ignore\n        }\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws Exception {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = stateManager.listData(dir, watcher);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            LOG.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (NoSuchElementException e) {\n        try {\n          stateManager.makePath(dir);\n        } catch (AlreadyExistsException e2) {\n          // ignore\n        }\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/GenericDistributedQueue#fetchZkChildren(Watcher).mjava","sourceNew":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws Exception {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = stateManager.listData(dir, watcher);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            log.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (NoSuchElementException e) {\n        try {\n          stateManager.makePath(dir);\n        } catch (AlreadyExistsException e2) {\n          // ignore\n        }\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Return the current set of children from ZK; does not change internal state.\n   */\n  TreeSet<String> fetchZkChildren(Watcher watcher) throws Exception {\n    while (true) {\n      try {\n        TreeSet<String> orderedChildren = new TreeSet<>();\n\n        List<String> childNames = stateManager.listData(dir, watcher);\n        stats.setQueueLength(childNames.size());\n        for (String childName : childNames) {\n          // Check format\n          if (!childName.regionMatches(0, PREFIX, 0, PREFIX.length())) {\n            log.debug(\"Found child node with improper name: \" + childName);\n            continue;\n          }\n          orderedChildren.add(childName);\n        }\n        return orderedChildren;\n      } catch (NoSuchElementException e) {\n        try {\n          stateManager.makePath(dir);\n        } catch (AlreadyExistsException e2) {\n          // ignore\n        }\n        // go back to the loop and try again\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}