{"path":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) throws IOException {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","date":1379624229,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n\n    termComp = getComparator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.lightAutomaton = compiled.lightAutomaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.lightAutomaton = compiled.lightAutomaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.allTransitions = compiled.sortedTransitions;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   * <p>\n   * @lucene.experimental \n   * <p>\n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"416de39807c400e5400ec132ecd8a6078545204c","date":1483732201,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c345f5347fceb645ca443185876d778e86e4c18f","date":1483740200,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","date":1582882926,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/AutomatonTermsEnum#AutomatonTermsEnum(TermsEnum,CompiledAutomaton).mjava","sourceNew":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // No need to track visited states for a finite language without loops.\n    visited = finite ? null : new short[runAutomaton.getSize()];\n  }\n\n","sourceOld":"  /**\n   * Construct an enumerator based upon an automaton, enumerating the specified\n   * field, working on a supplied TermsEnum\n   *\n   * @lucene.experimental \n   * @param compiled CompiledAutomaton\n   */\n  public AutomatonTermsEnum(TermsEnum tenum, CompiledAutomaton compiled) {\n    super(tenum);\n    if (compiled.type != CompiledAutomaton.AUTOMATON_TYPE.NORMAL) {\n      throw new IllegalArgumentException(\"please use CompiledAutomaton.getTermsEnum instead\");\n    }\n    this.finite = compiled.finite;\n    this.runAutomaton = compiled.runAutomaton;\n    assert this.runAutomaton != null;\n    this.commonSuffixRef = compiled.commonSuffixRef;\n    this.automaton = compiled.automaton;\n\n    // used for path tracking, where each bit is a numbered state.\n    visited = new long[runAutomaton.getSize()];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"416de39807c400e5400ec132ecd8a6078545204c":["3e8715d826e588419327562287d5d6a8040d63d6"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["416de39807c400e5400ec132ecd8a6078545204c"],"c345f5347fceb645ca443185876d778e86e4c18f":["3e8715d826e588419327562287d5d6a8040d63d6","416de39807c400e5400ec132ecd8a6078545204c"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"d2638f781be724518ff6c2263d14a48cf6e68017":["5c84485629d80d203608e8975a1139de9933cc38","3e8715d826e588419327562287d5d6a8040d63d6"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3e8715d826e588419327562287d5d6a8040d63d6":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14"]},"commit2Childs":{"416de39807c400e5400ec132ecd8a6078545204c":["20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14","c345f5347fceb645ca443185876d778e86e4c18f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"20a5c56c8be07b6993c34c9f1a02fe0ff4cc6f14":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c345f5347fceb645ca443185876d778e86e4c18f":[],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["fe33227f6805edab2036cbb80645cc4e2d1fa424","519bac5f6a2dc1779d2fe8e51d9e1762ec94b4a5"],"3e8715d826e588419327562287d5d6a8040d63d6":["416de39807c400e5400ec132ecd8a6078545204c","c345f5347fceb645ca443185876d778e86e4c18f","d2638f781be724518ff6c2263d14a48cf6e68017"],"5c84485629d80d203608e8975a1139de9933cc38":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c345f5347fceb645ca443185876d778e86e4c18f","fe33227f6805edab2036cbb80645cc4e2d1fa424","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}