{"path":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/Searcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n  throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7","date":1294253125,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"/dev/null","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30da203d7de68a87a16025523a483a96c24f4291","date":1296686055,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * Searcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7fee42303a18cc146043c96f66491311b345d9","date":1308246904,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","date":1308291005,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), filter, results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(query), filter, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/IndexSearcher#search(Query,Filter,Collector).mjava","sourceNew":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","sourceOld":"  /** Lower-level search API.\n   *\n   * <p>{@link Collector#collect(int)} is called for every matching\n   * document.\n   * <br>Collector-based access to remote indexes is discouraged.\n   *\n   * <p>Applications should only use this if they need <i>all</i> of the\n   * matching documents.  The high-level search API ({@link\n   * IndexSearcher#search(Query, Filter, int)}) is usually more efficient, as it skips\n   * non-high-scoring hits.\n   *\n   * @param query to match documents\n   * @param filter if non-null, used to permit documents to be collected.\n   * @param results to receive hits\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public void search(Query query, Filter filter, Collector results)\n    throws IOException {\n    search(leafContexts, createNormalizedWeight(wrapFilter(query, filter)), results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"6620df8541b174097b1133a4fc370adb2e570524":["6f7fee42303a18cc146043c96f66491311b345d9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["6620df8541b174097b1133a4fc370adb2e570524"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":["30da203d7de68a87a16025523a483a96c24f4291","6f7fee42303a18cc146043c96f66491311b345d9"],"6f7fee42303a18cc146043c96f66491311b345d9":["30da203d7de68a87a16025523a483a96c24f4291"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","30da203d7de68a87a16025523a483a96c24f4291"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"30da203d7de68a87a16025523a483a96c24f4291":["8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","30da203d7de68a87a16025523a483a96c24f4291"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"6620df8541b174097b1133a4fc370adb2e570524":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0a2903ea38ae3e636b93a08c52a5e37ae939cf6b":[],"6f7fee42303a18cc146043c96f66491311b345d9":["6620df8541b174097b1133a4fc370adb2e570524","0a2903ea38ae3e636b93a08c52a5e37ae939cf6b"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","8a1aa37d6135cf6c605c23e4ff9becf07f6049c7"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"8a1aa37d6135cf6c605c23e4ff9becf07f6049c7":["30da203d7de68a87a16025523a483a96c24f4291","868da859b43505d9d2a023bfeae6dd0c795f5295"],"30da203d7de68a87a16025523a483a96c24f4291":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","6f7fee42303a18cc146043c96f66491311b345d9","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a2903ea38ae3e636b93a08c52a5e37ae939cf6b","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}