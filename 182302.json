{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","commits":[{"id":"73d216e8a31fcc28595d9f9518b2f081d9379789","date":1333813682,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenfilterSpec = newFilterChain(random, tokenizerSpec.tokenizer);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenfilterSpec.toString);\n      return sb.toString();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b9812246deee2216de0db0ea556e1ff163f5793","date":1333820236,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charfilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charfilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charfilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenfilterSpec = newFilterChain(random, tokenizerSpec.tokenizer);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenfilterSpec.toString);\n      return sb.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, new StringReader(\"\"));\n      StringBuilder sb = new StringBuilder();\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenfilterSpec = newFilterChain(random, tokenizerSpec.tokenizer);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenfilterSpec.toString);\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"888c2d6bca1edd8d9293631d6e1d188b036e0f05","date":1334076894,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charFilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charFilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charFilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenFilterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenFilterSpec.toString);\n      sb.append(\"\\n\");\n      sb.append(\"offsetsAreCorrect=\" + tokenFilterSpec.offsetsAreCorrect);\n      return sb.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charfilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charfilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charfilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenfilterSpec = newFilterChain(random, tokenizerSpec.tokenizer);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenfilterSpec.toString);\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":["ad55dd51ee5593c207639943b98a58782872b232"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e","date":1334174049,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charFilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charFilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charFilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenFilterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenFilterSpec.toString);\n      sb.append(\"\\n\");\n      sb.append(\"offsetsAreCorrect=\" + tokenFilterSpec.offsetsAreCorrect);\n      return sb.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charfilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charfilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charfilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenfilterSpec = newFilterChain(random, tokenizerSpec.tokenizer);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenfilterSpec.toString);\n      return sb.toString();\n    }\n\n","bugFix":["73d216e8a31fcc28595d9f9518b2f081d9379789","2b9812246deee2216de0db0ea556e1ff163f5793"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestRandomChains.MockRandomAnalyzer#toString().mjava","sourceNew":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charFilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charFilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charFilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenFilterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenFilterSpec.toString);\n      sb.append(\"\\n\");\n      sb.append(\"offsetsAreCorrect=\" + tokenFilterSpec.offsetsAreCorrect);\n      return sb.toString();\n    }\n\n","sourceOld":"    @Override\n    public String toString() {\n      Random random = new Random(seed);\n      StringBuilder sb = new StringBuilder();\n      CharFilterSpec charFilterSpec = newCharFilterChain(random, new StringReader(\"\"));\n      sb.append(\"\\ncharfilters=\");\n      sb.append(charFilterSpec.toString);\n      // intentional: initReader gets its own separate random\n      random = new Random(seed);\n      TokenizerSpec tokenizerSpec = newTokenizer(random, charFilterSpec.reader);\n      sb.append(\"\\n\");\n      sb.append(\"tokenizer=\");\n      sb.append(tokenizerSpec.toString);\n      TokenFilterSpec tokenFilterSpec = newFilterChain(random, tokenizerSpec.tokenizer, tokenizerSpec.offsetsAreCorrect);\n      sb.append(\"\\n\");\n      sb.append(\"filters=\");\n      sb.append(tokenFilterSpec.toString);\n      sb.append(\"\\n\");\n      sb.append(\"offsetsAreCorrect=\" + tokenFilterSpec.offsetsAreCorrect);\n      return sb.toString();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["2b9812246deee2216de0db0ea556e1ff163f5793"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["2b9812246deee2216de0db0ea556e1ff163f5793","888c2d6bca1edd8d9293631d6e1d188b036e0f05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b9812246deee2216de0db0ea556e1ff163f5793":["73d216e8a31fcc28595d9f9518b2f081d9379789"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"73d216e8a31fcc28595d9f9518b2f081d9379789":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"888c2d6bca1edd8d9293631d6e1d188b036e0f05":["ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["73d216e8a31fcc28595d9f9518b2f081d9379789"],"2b9812246deee2216de0db0ea556e1ff163f5793":["888c2d6bca1edd8d9293631d6e1d188b036e0f05","ad9e3deabce40d9849c1b75ef706bfa79f4f0d1e"],"73d216e8a31fcc28595d9f9518b2f081d9379789":["2b9812246deee2216de0db0ea556e1ff163f5793"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}