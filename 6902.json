{"path":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","sourceNew":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","sourceNew":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","pathOld":"solr/src/common/org/apache/solr/common/util/Base64#base64toInt(char,byte[]).mjava","sourceNew":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Translates the specified character, which is assumed to be in the\n   * \"Base 64 Alphabet\" into its equivalent 6-bit positive integer.\n   *\n   * @throw IllegalArgumentException or ArrayOutOfBoundsException if\n   * c is not in the Base64 Alphabet.\n   */\n  private static int base64toInt(char c, byte[] alphaToInt) {\n    int result = alphaToInt[c];\n    if (result < 0)\n      throw new IllegalArgumentException(\"Illegal character \" + c);\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}