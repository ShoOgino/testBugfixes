{"path":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          BytesRef [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            BytesRef [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector[] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n      \n      boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n      assertTrue((shouldBePosVector == false)\n          || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n      assertTrue((shouldBeOffVector == false)\n          || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        TermPositionVector posVec = (TermPositionVector) vector[0];\n        BytesRef[] terms = posVec.getTerms();\n        assertTrue(terms != null && terms.length > 0);\n        \n        for (int j = 0; j < terms.length; j++) {\n          int[] positions = posVec.getTermPositions(j);\n          TermVectorOffsetInfo[] offsets = posVec.getOffsets(j);\n          \n          if (shouldBePosVector) {\n            assertTrue(positions != null);\n            assertTrue(positions.length > 0);\n          } else assertTrue(positions == null);\n          \n          if (shouldBeOffVector) {\n            assertTrue(offsets != null);\n            assertTrue(offsets.length > 0);\n          } else assertTrue(offsets == null);\n        }\n      } else {\n        try {\n          assertTrue(false);\n        } catch (ClassCastException ignore) {\n          TermFreqVector freqVec = vector[0];\n          BytesRef[] terms = freqVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          BytesRef [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            BytesRef [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector[] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n      \n      boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n      assertTrue((shouldBePosVector == false)\n          || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n      assertTrue((shouldBeOffVector == false)\n          || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        TermPositionVector posVec = (TermPositionVector) vector[0];\n        BytesRef[] terms = posVec.getTerms();\n        assertTrue(terms != null && terms.length > 0);\n        \n        for (int j = 0; j < terms.length; j++) {\n          int[] positions = posVec.getTermPositions(j);\n          TermVectorOffsetInfo[] offsets = posVec.getOffsets(j);\n          \n          if (shouldBePosVector) {\n            assertTrue(positions != null);\n            assertTrue(positions.length > 0);\n          } else assertTrue(positions == null);\n          \n          if (shouldBeOffVector) {\n            assertTrue(offsets != null);\n            assertTrue(offsets.length > 0);\n          } else assertTrue(offsets == null);\n        }\n      } else {\n        try {\n          assertTrue(false);\n        } catch (ClassCastException ignore) {\n          TermFreqVector freqVec = vector[0];\n          BytesRef[] terms = freqVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n        }\n        \n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    try {\n      ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n      assertEquals(1, hits.length);\n      \n      for (int i = 0; i < hits.length; i++)\n      {\n        TermFreqVector [] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n        assertTrue(vector != null);\n        assertTrue(vector.length == 1);\n        \n        boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n        assertTrue((shouldBePosVector == false) || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n       \n        boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n        assertTrue((shouldBeOffVector == false) || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n        \n        if(shouldBePosVector || shouldBeOffVector){\n          TermPositionVector posVec = (TermPositionVector)vector[0];\n          String [] terms = posVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n          \n          for (int j = 0; j < terms.length; j++) {\n            int [] positions = posVec.getTermPositions(j);\n            TermVectorOffsetInfo [] offsets = posVec.getOffsets(j);\n            \n            if(shouldBePosVector){\n              assertTrue(positions != null);\n              assertTrue(positions.length > 0);\n            }\n            else\n              assertTrue(positions == null);\n            \n            if(shouldBeOffVector){\n              assertTrue(offsets != null);\n              assertTrue(offsets.length > 0);\n            }\n            else\n              assertTrue(offsets == null);\n          }\n        }\n        else{\n          try{\n            assertTrue(false);\n          }\n          catch(ClassCastException ignore){\n            TermFreqVector freqVec = vector[0];\n            String [] terms = freqVec.getTerms();\n            assertTrue(terms != null && terms.length > 0);\n          }\n          \n        }\n       \n      }\n    } catch (IOException e) {\n      assertTrue(false);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      OffsetAttribute offsetAtt = dpEnum == null ? null : dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      assertTrue(!shouldBePosVector\n                 || (shouldBePosVector && dpEnum != null));\n      \n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      assertTrue(!shouldBeOffVector\n                 || (shouldBeOffVector && offsetAtt != null));\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n          if (shouldBePosVector) {\n            assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n          }\n          \n          if (shouldBeOffVector) {\n            assertNotNull(offsetAtt);\n          } else {\n            assertNull(offsetAtt);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    \n    for (int i = 0; i < hits.length; i++) {\n      TermFreqVector[] vector = searcher.reader.getTermFreqVectors(hits[i].doc);\n      assertTrue(vector != null);\n      assertTrue(vector.length == 1);\n      \n      boolean shouldBePosVector = (hits[i].doc % 2 == 0) ? true : false;\n      assertTrue((shouldBePosVector == false)\n          || (shouldBePosVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      boolean shouldBeOffVector = (hits[i].doc % 3 == 0) ? true : false;\n      assertTrue((shouldBeOffVector == false)\n          || (shouldBeOffVector == true && (vector[0] instanceof TermPositionVector == true)));\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        TermPositionVector posVec = (TermPositionVector) vector[0];\n        BytesRef[] terms = posVec.getTerms();\n        assertTrue(terms != null && terms.length > 0);\n        \n        for (int j = 0; j < terms.length; j++) {\n          int[] positions = posVec.getTermPositions(j);\n          TermVectorOffsetInfo[] offsets = posVec.getOffsets(j);\n          \n          if (shouldBePosVector) {\n            assertTrue(positions != null);\n            assertTrue(positions.length > 0);\n          } else assertTrue(positions == null);\n          \n          if (shouldBeOffVector) {\n            assertTrue(offsets != null);\n            assertTrue(offsets.length > 0);\n          } else assertTrue(offsets == null);\n        }\n      } else {\n        try {\n          assertTrue(false);\n        } catch (ClassCastException ignore) {\n          TermFreqVector freqVec = vector[0];\n          BytesRef[] terms = freqVec.getTerms();\n          assertTrue(terms != null && terms.length > 0);\n        }\n        \n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31f025ae60076ae95274433f3fe8e6ace2857a87","date":1326669465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n      dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n      OffsetAttribute offsetAtt = dpEnum == null ? null : dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      assertTrue(!shouldBePosVector\n                 || (shouldBePosVector && dpEnum != null));\n      \n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      assertTrue(!shouldBeOffVector\n                 || (shouldBeOffVector && offsetAtt != null));\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum);\n          assertNotNull(dpEnum);\n          offsetAtt = dpEnum.attributes().getAttribute(OffsetAttribute.class);\n\n          if (shouldBePosVector) {\n            assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n          }\n          \n          if (shouldBeOffVector) {\n            assertNotNull(offsetAtt);\n          } else {\n            assertNull(offsetAtt);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestTermVectors#testTermPositionVectors().mjava","sourceNew":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","sourceOld":"  public void testTermPositionVectors() throws IOException {\n    Query query = new TermQuery(new Term(\"field\", \"zero\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n\n    DocsAndPositionsEnum dpEnum = null;\n    for (int i = 0; i < hits.length; i++) {\n      Fields vectors = searcher.reader.getTermVectors(hits[i].doc);\n      assertNotNull(vectors);\n      assertEquals(1, vectors.getUniqueFieldCount());\n      \n      TermsEnum termsEnum = vectors.terms(\"field\").iterator(null);\n      assertNotNull(termsEnum.next());\n\n      boolean shouldBePosVector = hits[i].doc % 2 == 0;\n      boolean shouldBeOffVector = hits[i].doc % 3 == 0;\n      \n      if (shouldBePosVector || shouldBeOffVector) {\n        while(true) {\n          dpEnum = termsEnum.docsAndPositions(null, dpEnum, shouldBeOffVector);\n          assertNotNull(dpEnum);\n          assertTrue(dpEnum.nextDoc() != DocsEnum.NO_MORE_DOCS);\n\n          dpEnum.nextPosition();\n\n          if (shouldBeOffVector) {\n            assertTrue(dpEnum.startOffset() != -1);\n            assertTrue(dpEnum.endOffset() != -1);\n          }\n\n          if (termsEnum.next() == null) {\n            break;\n          }\n        }\n      } else {\n        fail();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c084e47df29de3330311d69dabf515ceaa989512":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["c084e47df29de3330311d69dabf515ceaa989512"],"5f4e87790277826a2aea119328600dfb07761f32":["9454a6510e2db155fb01faa5c049b06ece95fab9","c084e47df29de3330311d69dabf515ceaa989512"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3cc749c053615f5871f3b95715fe292f34e70a53"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c084e47df29de3330311d69dabf515ceaa989512":["3cc749c053615f5871f3b95715fe292f34e70a53","5f4e87790277826a2aea119328600dfb07761f32"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["c084e47df29de3330311d69dabf515ceaa989512"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["31f025ae60076ae95274433f3fe8e6ace2857a87"],"5f4e87790277826a2aea119328600dfb07761f32":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"31f025ae60076ae95274433f3fe8e6ace2857a87":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}