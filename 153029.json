{"path":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCloseWithThreads().mjava","commits":[{"id":"3215ae1377fc1ca1790921d75dd39cb764743b85","date":1237371771,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void xxxtestCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c482d1e63332617181729a225b215c452d8a79","date":1237396006,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriter#testCloseWithThreads().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriter#xxxtestCloseWithThreads().mjava","sourceNew":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void testCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","sourceOld":"  // LUCENE-1130: make sure we can close() even while\n  // threads are trying to add documents.  Strictly\n  // speaking, this isn't valid us of Lucene's APIs, but we\n  // still want to be robust to this case:\n  public void xxxtestCloseWithThreads() throws IOException {\n    int NUM_THREADS = 3;\n\n    for(int iter=0;iter<20;iter++) {\n      MockRAMDirectory dir = new MockRAMDirectory();\n      IndexWriter writer = new IndexWriter(dir, new WhitespaceAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n\n      // We expect AlreadyClosedException\n      cms.setSuppressExceptions();\n\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(10);\n      writer.setMergeFactor(4);\n\n      IndexerThread[] threads = new IndexerThread[NUM_THREADS];\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i] = new IndexerThread(writer, false);\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n\n      boolean done = false;\n      while(!done) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException ie) {\n          Thread.currentThread().interrupt();\n        }\n        for(int i=0;i<NUM_THREADS;i++)\n          // only stop when at least one thread has added a doc\n          if (threads[i].addCount > 0) {\n            done = true;\n            break;\n          }\n      }\n\n      writer.close(false);\n\n      // Make sure threads that are adding docs are not hung:\n      for(int i=0;i<NUM_THREADS;i++) {\n        while(true) {\n          try {\n            // Without fix for LUCENE-1130: one of the\n            // threads will hang\n            threads[i].join();\n            break;\n          } catch (InterruptedException ie) {\n            Thread.currentThread().interrupt();\n          }\n        }\n        if (threads[i].isAlive())\n          fail(\"thread seems to be hung\");\n      }\n\n      // Quick test to make sure index is not corrupt:\n      IndexReader reader = IndexReader.open(dir);\n      TermDocs tdocs = reader.termDocs(new Term(\"field\", \"aaa\"));\n      int count = 0;\n      while(tdocs.next()) {\n        count++;\n      }\n      assertTrue(count > 0);\n      reader.close();\n      \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3215ae1377fc1ca1790921d75dd39cb764743b85":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"09c482d1e63332617181729a225b215c452d8a79":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c482d1e63332617181729a225b215c452d8a79"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3215ae1377fc1ca1790921d75dd39cb764743b85"],"3215ae1377fc1ca1790921d75dd39cb764743b85":["09c482d1e63332617181729a225b215c452d8a79"],"09c482d1e63332617181729a225b215c452d8a79":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}