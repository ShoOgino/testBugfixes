{"path":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#test().mjava","commits":[{"id":"543992c52fe295c8b15aafe4b066e7e3a9a42c48","date":1510862949,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    // First create a config using REST API.  To do this, we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete it the collection, leaving a config with the same name behind.\n    // Then when we create the \"real\" collections referencing this config.\n    CollectionAdminRequest.createCollection(configName, 1, 1).process(solrClient);\n    // manipulate the config...\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'timePartitionAliasName':'\" + alias + \"'},\" + // no data driven\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + intField + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'inc,tolerant'}\" +\n            \"  }\" +\n            \"}\").build()));\n    CollectionAdminRequest.deleteCollection(configName).process(solrClient);\n\n    // start with one collection and an alias for it\n    final String col23rd = alias + \"_2017-10-23\";\n    CollectionAdminRequest.createCollection(col23rd, configName, 1, 1)\n        .withProperty(TimePartitionedUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, alias)\n        .process(solrClient);\n\n    assertEquals(\"We only expect 2 configSets\",\n        Arrays.asList(\"_default\", configName), new ConfigSetAdminRequest.List().process(solrClient).getConfigSets());\n\n    CollectionAdminRequest.createAlias(alias, col23rd).process(solrClient);\n    //TODO use SOLR-11617 client API to set alias metadata\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    UnaryOperator<Aliases> op = a -> a.cloneWithCollectionAliasMetadata(alias, TimePartitionedUpdateProcessor.ROUTER_FIELD_METADATA, timeField);\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(op);\n\n\n    // now we index a document\n    solrClient.add(alias, newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")));\n    solrClient.commit(alias);\n    //assertDocRoutedToCol(lastDocId, col23rd);\n    assertInvariants();\n\n    // a document that is too old (throws exception... if we have a TolerantUpdateProcessor then we see it there)\n    try {\n      final UpdateResponse resp = solrClient.add(alias, newDoc(Instant.parse(\"2017-10-01T00:00:00Z\")));\n      final Object errors = resp.getResponseHeader().get(\"errors\");\n      assertTrue(errors != null && errors.toString().contains(\"couldn't be routed\"));\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().contains(\"couldn't be routed\"));\n    }\n    numDocsDeletedOrFailed++;\n\n    // add another collection, add to alias  (soonest comes first)\n    final String col24th = alias + \"_2017-10-24\";\n    CollectionAdminRequest.createCollection(col24th, configName,  2, 2) // more shards and replicas now\n        .setMaxShardsPerNode(2)\n        .withProperty(\"timePartitionAliasName\", alias)\n        .process(solrClient);\n    CollectionAdminRequest.createAlias(alias, col24th + \",\" + col23rd).process(solrClient);\n\n    // index 3 documents in a random fashion\n    addDocsAndCommit(\n        newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T01:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T02:00:00Z\"))\n    );\n    assertInvariants();\n\n    // assert that the IncrementURP has updated all '0' to '1'\n    final SolrDocumentList checkIncResults = solrClient.query(alias, params(\"q\", \"NOT \" + intField + \":1\")).getResults();\n    assertEquals(checkIncResults.toString(), 0, checkIncResults.getNumFound());\n\n    //delete a random document id; ensure we don't find it\n    int idToDelete = 1 + random().nextInt(lastDocId);\n    if (idToDelete == 2) { // #2 didn't make it\n      idToDelete++;\n    }\n    solrClient.deleteById(alias, Integer.toString(idToDelete));\n    solrClient.commit(alias);\n    numDocsDeletedOrFailed++;\n    assertInvariants();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a980795a56f2fcbc94caeb3233071312d5684d59","ca55a3e50e219d5a29f5cf027c67b3891c57d5b9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5613a70439d5d429f0689c2c5a21615e58deff97","date":1512102314,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/TimeRoutedAliasUpdateProcessorTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/TimePartitionedUpdateProcessorTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    // First create a config using REST API.  To do this, we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete it the collection, leaving a config with the same name behind.\n    // Then when we create the \"real\" collections referencing this config.\n    CollectionAdminRequest.createCollection(configName, 1, 1).process(solrClient);\n    // manipulate the config...\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'timePartitionAliasName':'\" + alias + \"'},\" + // no data driven\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + intField + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'inc,tolerant'}\" +\n            \"  }\" +\n            \"}\").build()));\n    CollectionAdminRequest.deleteCollection(configName).process(solrClient);\n\n    // start with one collection and an alias for it\n    final String col23rd = alias + \"_2017-10-23\";\n    CollectionAdminRequest.createCollection(col23rd, configName, 1, 1)\n        .withProperty(TimeRoutedAliasUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, alias)\n        .process(solrClient);\n\n    assertEquals(\"We only expect 2 configSets\",\n        Arrays.asList(\"_default\", configName), new ConfigSetAdminRequest.List().process(solrClient).getConfigSets());\n\n    CollectionAdminRequest.createAlias(alias, col23rd).process(solrClient);\n    //TODO use SOLR-11617 client API to set alias metadata\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    UnaryOperator<Aliases> op = a -> a.cloneWithCollectionAliasMetadata(alias, TimeRoutedAliasUpdateProcessor.ROUTER_FIELD_METADATA, timeField);\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(op);\n\n\n    // now we index a document\n    solrClient.add(alias, newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")));\n    solrClient.commit(alias);\n    //assertDocRoutedToCol(lastDocId, col23rd);\n    assertInvariants();\n\n    // a document that is too old (throws exception... if we have a TolerantUpdateProcessor then we see it there)\n    try {\n      final UpdateResponse resp = solrClient.add(alias, newDoc(Instant.parse(\"2017-10-01T00:00:00Z\")));\n      final Object errors = resp.getResponseHeader().get(\"errors\");\n      assertTrue(errors != null && errors.toString().contains(\"couldn't be routed\"));\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().contains(\"couldn't be routed\"));\n    }\n    numDocsDeletedOrFailed++;\n\n    // add another collection, add to alias  (soonest comes first)\n    final String col24th = alias + \"_2017-10-24\";\n    CollectionAdminRequest.createCollection(col24th, configName,  2, 2) // more shards and replicas now\n        .setMaxShardsPerNode(2)\n        .withProperty(\"timePartitionAliasName\", alias)\n        .process(solrClient);\n    CollectionAdminRequest.createAlias(alias, col24th + \",\" + col23rd).process(solrClient);\n\n    // index 3 documents in a random fashion\n    addDocsAndCommit(\n        newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T01:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T02:00:00Z\"))\n    );\n    assertInvariants();\n\n    // assert that the IncrementURP has updated all '0' to '1'\n    final SolrDocumentList checkIncResults = solrClient.query(alias, params(\"q\", \"NOT \" + intField + \":1\")).getResults();\n    assertEquals(checkIncResults.toString(), 0, checkIncResults.getNumFound());\n\n    //delete a random document id; ensure we don't find it\n    int idToDelete = 1 + random().nextInt(lastDocId);\n    if (idToDelete == 2) { // #2 didn't make it\n      idToDelete++;\n    }\n    solrClient.deleteById(alias, Integer.toString(idToDelete));\n    solrClient.commit(alias);\n    numDocsDeletedOrFailed++;\n    assertInvariants();\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    // First create a config using REST API.  To do this, we create a collection with the name of the eventual config.\n    // We configure it, and ultimately delete it the collection, leaving a config with the same name behind.\n    // Then when we create the \"real\" collections referencing this config.\n    CollectionAdminRequest.createCollection(configName, 1, 1).process(solrClient);\n    // manipulate the config...\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set-user-property' : {'timePartitionAliasName':'\" + alias + \"'},\" + // no data driven\n            \"  'set-user-property' : {'update.autoCreateFields':false},\" + // no data driven\n            \"  'add-updateprocessor' : {\" +\n            \"    'name':'tolerant', 'class':'solr.TolerantUpdateProcessorFactory'\" +\n            \"  },\" +\n            \"  'add-updateprocessor' : {\" + // for testing\n            \"    'name':'inc', 'class':'\" + IncrementURPFactory.class.getName() + \"',\" +\n            \"    'fieldName':'\" + intField + \"'\" +\n            \"  },\" +\n            \"}\").build()));\n    checkNoError(solrClient.request(new V2Request.Builder(\"/collections/\" + configName + \"/config/params\")\n        .withMethod(SolrRequest.METHOD.POST)\n        .withPayload(\"{\" +\n            \"  'set' : {\" +\n            \"    '_UPDATE' : {'processor':'inc,tolerant'}\" +\n            \"  }\" +\n            \"}\").build()));\n    CollectionAdminRequest.deleteCollection(configName).process(solrClient);\n\n    // start with one collection and an alias for it\n    final String col23rd = alias + \"_2017-10-23\";\n    CollectionAdminRequest.createCollection(col23rd, configName, 1, 1)\n        .withProperty(TimePartitionedUpdateProcessor.TIME_PARTITION_ALIAS_NAME_CORE_PROP, alias)\n        .process(solrClient);\n\n    assertEquals(\"We only expect 2 configSets\",\n        Arrays.asList(\"_default\", configName), new ConfigSetAdminRequest.List().process(solrClient).getConfigSets());\n\n    CollectionAdminRequest.createAlias(alias, col23rd).process(solrClient);\n    //TODO use SOLR-11617 client API to set alias metadata\n    final ZkStateReader zkStateReader = cluster.getSolrClient().getZkStateReader();\n    UnaryOperator<Aliases> op = a -> a.cloneWithCollectionAliasMetadata(alias, TimePartitionedUpdateProcessor.ROUTER_FIELD_METADATA, timeField);\n    zkStateReader.aliasesHolder.applyModificationAndExportToZk(op);\n\n\n    // now we index a document\n    solrClient.add(alias, newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")));\n    solrClient.commit(alias);\n    //assertDocRoutedToCol(lastDocId, col23rd);\n    assertInvariants();\n\n    // a document that is too old (throws exception... if we have a TolerantUpdateProcessor then we see it there)\n    try {\n      final UpdateResponse resp = solrClient.add(alias, newDoc(Instant.parse(\"2017-10-01T00:00:00Z\")));\n      final Object errors = resp.getResponseHeader().get(\"errors\");\n      assertTrue(errors != null && errors.toString().contains(\"couldn't be routed\"));\n    } catch (SolrException e) {\n      assertTrue(e.getMessage().contains(\"couldn't be routed\"));\n    }\n    numDocsDeletedOrFailed++;\n\n    // add another collection, add to alias  (soonest comes first)\n    final String col24th = alias + \"_2017-10-24\";\n    CollectionAdminRequest.createCollection(col24th, configName,  2, 2) // more shards and replicas now\n        .setMaxShardsPerNode(2)\n        .withProperty(\"timePartitionAliasName\", alias)\n        .process(solrClient);\n    CollectionAdminRequest.createAlias(alias, col24th + \",\" + col23rd).process(solrClient);\n\n    // index 3 documents in a random fashion\n    addDocsAndCommit(\n        newDoc(Instant.parse(\"2017-10-23T00:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T01:00:00Z\")),\n        newDoc(Instant.parse(\"2017-10-24T02:00:00Z\"))\n    );\n    assertInvariants();\n\n    // assert that the IncrementURP has updated all '0' to '1'\n    final SolrDocumentList checkIncResults = solrClient.query(alias, params(\"q\", \"NOT \" + intField + \":1\")).getResults();\n    assertEquals(checkIncResults.toString(), 0, checkIncResults.getNumFound());\n\n    //delete a random document id; ensure we don't find it\n    int idToDelete = 1 + random().nextInt(lastDocId);\n    if (idToDelete == 2) { // #2 didn't make it\n      idToDelete++;\n    }\n    solrClient.deleteById(alias, Integer.toString(idToDelete));\n    solrClient.commit(alias);\n    numDocsDeletedOrFailed++;\n    assertInvariants();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5613a70439d5d429f0689c2c5a21615e58deff97":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5613a70439d5d429f0689c2c5a21615e58deff97"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["543992c52fe295c8b15aafe4b066e7e3a9a42c48"],"5613a70439d5d429f0689c2c5a21615e58deff97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"543992c52fe295c8b15aafe4b066e7e3a9a42c48":["5613a70439d5d429f0689c2c5a21615e58deff97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}