{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testMultipleSuggestFieldsPerDoc().mjava","commits":[{"id":"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a","date":1427495869,"type":0,"author":"Areek Zillur","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testMultipleSuggestFieldsPerDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleSuggestFieldsPerDoc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"sug_field_1\", \"sug_field_2\"));\n\n    Document document = new Document();\n    document.add(newSuggestField(\"sug_field_1\", \"apple\", 4));\n    document.add(newSuggestField(\"sug_field_2\", \"april\", 3));\n    iw.addDocument(document);\n    document.clear();\n    document.add(newSuggestField(\"sug_field_1\", \"aples\", 3));\n    document.add(newSuggestField(\"sug_field_2\", \"apartment\", 2));\n    iw.addDocument(document);\n\n    if (rarely()) {\n      iw.commit();\n    }\n\n    DirectoryReader reader = iw.getReader();\n\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader, analyzer);\n    TopSuggestDocs suggestDocs1 = suggestIndexSearcher.suggest(\"sug_field_1\", \"ap\", 4);\n    assertSuggestions(suggestDocs1, new Entry(\"apple\", 4), new Entry(\"aples\", 3));\n    TopSuggestDocs suggestDocs2 = suggestIndexSearcher.suggest(\"sug_field_2\", \"ap\", 4);\n    assertSuggestions(suggestDocs2, new Entry(\"april\", 3), new Entry(\"apartment\", 2));\n\n    // check that the doc ids are consistent\n    for (int i = 0; i < suggestDocs1.scoreDocs.length; i++) {\n      ScoreDoc suggestScoreDoc = suggestDocs1.scoreDocs[i];\n      assertThat(suggestScoreDoc.doc, equalTo(suggestDocs2.scoreDocs[i].doc));\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testMultipleSuggestFieldsPerDoc().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testMultipleSuggestFieldsPerDoc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"sug_field_1\", \"sug_field_2\"));\n\n    Document document = new Document();\n    document.add(newSuggestField(\"sug_field_1\", \"apple\", 4));\n    document.add(newSuggestField(\"sug_field_2\", \"april\", 3));\n    iw.addDocument(document);\n    document.clear();\n    document.add(newSuggestField(\"sug_field_1\", \"aples\", 3));\n    document.add(newSuggestField(\"sug_field_2\", \"apartment\", 2));\n    iw.addDocument(document);\n\n    if (rarely()) {\n      iw.commit();\n    }\n\n    DirectoryReader reader = iw.getReader();\n\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader, analyzer);\n    TopSuggestDocs suggestDocs1 = suggestIndexSearcher.suggest(\"sug_field_1\", \"ap\", 4);\n    assertSuggestions(suggestDocs1, new Entry(\"apple\", 4), new Entry(\"aples\", 3));\n    TopSuggestDocs suggestDocs2 = suggestIndexSearcher.suggest(\"sug_field_2\", \"ap\", 4);\n    assertSuggestions(suggestDocs2, new Entry(\"april\", 3), new Entry(\"apartment\", 2));\n\n    // check that the doc ids are consistent\n    for (int i = 0; i < suggestDocs1.scoreDocs.length; i++) {\n      ScoreDoc suggestScoreDoc = suggestDocs1.scoreDocs[i];\n      assertThat(suggestScoreDoc.doc, equalTo(suggestDocs2.scoreDocs[i].doc));\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c33f6677a2078739058f81eca1df69d12cd62b0","date":1432799589,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/TestSuggestField#testMultipleSuggestFieldsPerDoc().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/document/SuggestFieldTest#testMultipleSuggestFieldsPerDoc().mjava","sourceNew":"  @Test\n  public void testMultipleSuggestFieldsPerDoc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"sug_field_1\", \"sug_field_2\"));\n\n    Document document = new Document();\n    document.add(new SuggestField(\"sug_field_1\", \"apple\", 4));\n    document.add(new SuggestField(\"sug_field_2\", \"april\", 3));\n    iw.addDocument(document);\n    document.clear();\n    document.add(new SuggestField(\"sug_field_1\", \"aples\", 3));\n    document.add(new SuggestField(\"sug_field_2\", \"apartment\", 2));\n    iw.addDocument(document);\n\n    if (rarely()) {\n      iw.commit();\n    }\n\n    DirectoryReader reader = iw.getReader();\n\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader);\n    PrefixCompletionQuery query = new PrefixCompletionQuery(analyzer, new Term(\"sug_field_1\", \"ap\"));\n    TopSuggestDocs suggestDocs1 = suggestIndexSearcher.suggest(query, 4);\n    assertSuggestions(suggestDocs1, new Entry(\"apple\", 4), new Entry(\"aples\", 3));\n    query = new PrefixCompletionQuery(analyzer, new Term(\"sug_field_2\", \"ap\"));\n    TopSuggestDocs suggestDocs2 = suggestIndexSearcher.suggest(query, 4);\n    assertSuggestions(suggestDocs2, new Entry(\"april\", 3), new Entry(\"apartment\", 2));\n\n    // check that the doc ids are consistent\n    for (int i = 0; i < suggestDocs1.scoreDocs.length; i++) {\n      ScoreDoc suggestScoreDoc = suggestDocs1.scoreDocs[i];\n      assertThat(suggestScoreDoc.doc, equalTo(suggestDocs2.scoreDocs[i].doc));\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleSuggestFieldsPerDoc() throws Exception {\n    Analyzer analyzer = new MockAnalyzer(random());\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir, iwcWithSuggestField(analyzer, \"sug_field_1\", \"sug_field_2\"));\n\n    Document document = new Document();\n    document.add(newSuggestField(\"sug_field_1\", \"apple\", 4));\n    document.add(newSuggestField(\"sug_field_2\", \"april\", 3));\n    iw.addDocument(document);\n    document.clear();\n    document.add(newSuggestField(\"sug_field_1\", \"aples\", 3));\n    document.add(newSuggestField(\"sug_field_2\", \"apartment\", 2));\n    iw.addDocument(document);\n\n    if (rarely()) {\n      iw.commit();\n    }\n\n    DirectoryReader reader = iw.getReader();\n\n    SuggestIndexSearcher suggestIndexSearcher = new SuggestIndexSearcher(reader, analyzer);\n    TopSuggestDocs suggestDocs1 = suggestIndexSearcher.suggest(\"sug_field_1\", \"ap\", 4);\n    assertSuggestions(suggestDocs1, new Entry(\"apple\", 4), new Entry(\"aples\", 3));\n    TopSuggestDocs suggestDocs2 = suggestIndexSearcher.suggest(\"sug_field_2\", \"ap\", 4);\n    assertSuggestions(suggestDocs2, new Entry(\"april\", 3), new Entry(\"apartment\", 2));\n\n    // check that the doc ids are consistent\n    for (int i = 0; i < suggestDocs1.scoreDocs.length; i++) {\n      ScoreDoc suggestScoreDoc = suggestDocs1.scoreDocs[i];\n      assertThat(suggestScoreDoc.doc, equalTo(suggestDocs2.scoreDocs[i].doc));\n    }\n\n    reader.close();\n    iw.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8c33f6677a2078739058f81eca1df69d12cd62b0":["07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8c33f6677a2078739058f81eca1df69d12cd62b0"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","8c33f6677a2078739058f81eca1df69d12cd62b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","07e29e9a1cbba8cc30091c3e4f8e9eac7ec7d22a"],"8c33f6677a2078739058f81eca1df69d12cd62b0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}