{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<String, FieldInfo>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<String, FieldTypeInfo>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7e0c9c309a906dacb9ed97bcfa4c884c5912394","date":1479257880,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    NamedList<Object> dynamicFlds = (NamedList<Object>) res.get(\"dynamicFields\");\n\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if (dynamicFlds == null && schema != null) {\n      dynamicFlds = (NamedList<Object>) schema.get(\"dynamicFields\");\n    }\n    if (dynamicFlds != null) {\n      dynamicFieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> dynamicField : dynamicFlds) {\n        FieldInfo f = new FieldInfo(dynamicField.getKey());\n        f.read((NamedList<Object>) dynamicField.getValue());\n        dynamicFieldInfo.put(dynamicField.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/response/LukeResponse#setResponse(NamedList[Object]).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    NamedList<Object> dynamicFlds = (NamedList<Object>) res.get(\"dynamicFields\");\n\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if (dynamicFlds == null && schema != null) {\n      dynamicFlds = (NamedList<Object>) schema.get(\"dynamicFields\");\n    }\n    if (dynamicFlds != null) {\n      dynamicFieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> dynamicField : dynamicFlds) {\n        FieldInfo f = new FieldInfo(dynamicField.getKey());\n        f.read((NamedList<Object>) dynamicField.getValue());\n        dynamicFieldInfo.put(dynamicField.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void setResponse(NamedList<Object> res) {\n    super.setResponse(res);\n\n    // Parse indexinfo\n    indexInfo = (NamedList<Object>) res.get(\"index\");\n\n    NamedList<Object> schema = (NamedList<Object>) res.get(\"schema\");\n    NamedList<Object> flds = (NamedList<Object>) res.get(\"fields\");\n    if (flds == null && schema != null ) {\n      flds = (NamedList<Object>) schema.get(\"fields\");\n    }\n    if (flds != null) {\n      fieldInfo = new HashMap<>();\n      for (Map.Entry<String, Object> field : flds) {\n        FieldInfo f = new FieldInfo(field.getKey());\n        f.read((NamedList<Object>) field.getValue());\n        fieldInfo.put(field.getKey(), f);\n      }\n    }\n\n    if( schema != null ) {\n      NamedList<Object> fldTypes = (NamedList<Object>) schema.get(\"types\");\n      if (fldTypes != null) {\n        fieldTypeInfo = new HashMap<>();\n        for (Map.Entry<String, Object> fieldType : fldTypes) {\n          FieldTypeInfo ft = new FieldTypeInfo(fieldType.getKey());\n          ft.read((NamedList<Object>) fieldType.getValue());\n          fieldTypeInfo.put(fieldType.getKey(), ft);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","c7e0c9c309a906dacb9ed97bcfa4c884c5912394"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7e0c9c309a906dacb9ed97bcfa4c884c5912394":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7e0c9c309a906dacb9ed97bcfa4c884c5912394"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","c7e0c9c309a906dacb9ed97bcfa4c884c5912394"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"c7e0c9c309a906dacb9ed97bcfa4c884c5912394":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}