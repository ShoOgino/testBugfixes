{"path":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().length == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().isOptimized())  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","date":1340090669,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().length == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ced66195b26fdb1f77ee00e2a77ec6918dedd766","date":1344948886,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","date":1345029782,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b05c56a41b733e02a189c48895922b5bd8c7f3d1","date":1345033322,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().getSequentialSubReaders().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          LOG.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          log.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            log.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          LOG.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          LOG.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            LOG.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.SpellCheckerListener#newSearcher(SolrIndexSearcher,SolrIndexSearcher).mjava","sourceNew":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          if (log.isInfoEnabled()) {\n            log.info(\"Loading spell index for spellchecker: {}\", checker.getDictionaryName());\n          }\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: {}\", checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            if (log.isInfoEnabled()) {\n              log.info(\"Index is not optimized therefore skipping building spell check index for: {}\"\n                  , checker.getDictionaryName());\n            }\n          }\n        }\n      }\n\n    }\n\n","sourceOld":"    @Override\n    public void newSearcher(SolrIndexSearcher newSearcher,\n                            SolrIndexSearcher currentSearcher) {\n      if (currentSearcher == null) {\n        // firstSearcher event\n        try {\n          log.info(\"Loading spell index for spellchecker: \"\n                  + checker.getDictionaryName());\n          checker.reload(core, newSearcher);\n        } catch (IOException e) {\n          log.error( \"Exception in reloading spell check index for spellchecker: \" + checker.getDictionaryName(), e);\n        }\n      } else {\n        // newSearcher event\n        if (buildOnCommit)  {\n          buildSpellIndex(newSearcher);\n        } else if (buildOnOptimize) {\n          if (newSearcher.getIndexReader().leaves().size() == 1)  {\n            buildSpellIndex(newSearcher);\n          } else  {\n            log.info(\"Index is not optimized therefore skipping building spell check index for: \" + checker.getDictionaryName());\n          }\n        }\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","7530de27b87b961b51f01bd1299b7004d46e8823"],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["c26f00b574427b55127e869b935845554afde1fa"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["9367dbf5b00d7764583d991c1888f4acc9c9991a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c":["b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"b05c56a41b733e02a189c48895922b5bd8c7f3d1":[],"c26f00b574427b55127e869b935845554afde1fa":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["4c5ae929ce8aa0c4856f0d6bfd4c196bc2d3eb9c"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198":[],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","9367dbf5b00d7764583d991c1888f4acc9c9991a"],"ced66195b26fdb1f77ee00e2a77ec6918dedd766":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","7530de27b87b961b51f01bd1299b7004d46e8823"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b05c56a41b733e02a189c48895922b5bd8c7f3d1","c1fe8ee1a5a1ef00a9c4793ec26f17bd90342198","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}