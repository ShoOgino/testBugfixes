{"path":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testWhiteboxIndexReader().mjava","commits":[{"id":"09db84b25dda87b73022d145a68f14c86a3a552d","date":1517506829,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/TestSortableTextField#testWhiteboxIndexReader().mjava","pathOld":"/dev/null","sourceNew":"  public void testWhiteboxIndexReader() throws Exception {\n    assertU(adoc(\"id\",\"1\",\n                 \"whitespace_stxt\", \"how now brown cow ?\",\n                 \"whitespace_m_stxt\", \"xxx\",\n                 \"whitespace_m_stxt\", \"yyy\",\n                 \"whitespace_f_stxt\", \"aaa bbb\",\n                 \"keyword_stxt\", \"Blarggghhh!\"));\n    assertU(commit());\n\n    final RefCounted<SolrIndexSearcher> searcher = h.getCore().getNewestSearcher(false);\n    try {\n      final LeafReader r = searcher.get().getSlowAtomicReader();\n\n      // common cases...\n      for (String field : Arrays.asList(\"keyword_stxt\", \"keyword_dv_stxt\",\n                                        \"whitespace_stxt\", \"whitespace_f_stxt\", \"whitespace_l_stxt\")) {\n        assertNotNull(\"FieldInfos: \" + field, r.getFieldInfos().fieldInfo(field));\n        assertEquals(\"DocValuesType: \" + field,\n                     DocValuesType.SORTED, r.getFieldInfos().fieldInfo(field).getDocValuesType());\n        assertNotNull(\"DocValues: \" + field, r.getSortedDocValues(field));\n        assertNotNull(\"Terms: \" + field, r.terms(field));\n                      \n      }\n      \n      // special cases...\n      assertNotNull(r.getFieldInfos().fieldInfo(\"whitespace_nodv_stxt\"));\n      assertEquals(DocValuesType.NONE,\n                   r.getFieldInfos().fieldInfo(\"whitespace_nodv_stxt\").getDocValuesType());\n      assertNull(r.getSortedDocValues(\"whitespace_nodv_stxt\"));\n      assertNotNull(r.terms(\"whitespace_nodv_stxt\"));\n      // \n      assertNotNull(r.getFieldInfos().fieldInfo(\"whitespace_nois_stxt\"));\n      assertEquals(DocValuesType.SORTED,\n                   r.getFieldInfos().fieldInfo(\"whitespace_nois_stxt\").getDocValuesType());\n      assertNotNull(r.getSortedDocValues(\"whitespace_nois_stxt\"));\n      assertNull(r.terms(\"whitespace_nois_stxt\"));\n      //\n      assertNotNull(r.getFieldInfos().fieldInfo(\"whitespace_m_stxt\"));\n      assertEquals(DocValuesType.SORTED_SET,\n                   r.getFieldInfos().fieldInfo(\"whitespace_m_stxt\").getDocValuesType());\n      assertNotNull(r.getSortedSetDocValues(\"whitespace_m_stxt\"));\n      assertNotNull(r.terms(\"whitespace_m_stxt\"));\n        \n    } finally {\n      if (null != searcher) {\n        searcher.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09db84b25dda87b73022d145a68f14c86a3a552d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09db84b25dda87b73022d145a68f14c86a3a552d"]},"commit2Childs":{"09db84b25dda87b73022d145a68f14c86a3a552d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09db84b25dda87b73022d145a68f14c86a3a552d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}