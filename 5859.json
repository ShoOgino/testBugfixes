{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","commits":[{"id":"c215736a9e29403edd2132d9f0829a287b428df4","date":1354641965,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  private int msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.parseInt(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4f762b78b5a7fc5814208ae853b54d0041b2e2b1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","pathOld":"/dev/null","sourceNew":"  private int msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.parseInt(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f762b78b5a7fc5814208ae853b54d0041b2e2b1","date":1366742925,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","sourceNew":"  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.parseInt(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","sourceOld":"  private int msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.parseInt(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","bugFix":["c215736a9e29403edd2132d9f0829a287b428df4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56097405e40714e426bd1733d1d103128b8d770d","date":1371148974,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","sourceNew":"  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.valueOf(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","sourceOld":"  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.parseInt(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1eeda7e62e149f90eee8895af874c74efa7d4852","date":1375293182,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","sourceNew":null,"sourceOld":"  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.valueOf(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":4,"author":"Han Jiang","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#msgStrToInt(ZkNodeProps,String,Integer).mjava","sourceNew":null,"sourceOld":"  private Integer msgStrToInt(ZkNodeProps message, String key, Integer def)\n      throws Exception {\n    String str = message.getStr(key);\n    try {\n      return str == null ? def : Integer.valueOf(str);\n    } catch (Exception ex) {\n      SolrException.log(log, \"Could not parse \" + key, ex);\n      throw ex;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["56097405e40714e426bd1733d1d103128b8d770d","1eeda7e62e149f90eee8895af874c74efa7d4852"],"56097405e40714e426bd1733d1d103128b8d770d":["4f762b78b5a7fc5814208ae853b54d0041b2e2b1"],"c215736a9e29403edd2132d9f0829a287b428df4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c215736a9e29403edd2132d9f0829a287b428df4"],"4f762b78b5a7fc5814208ae853b54d0041b2e2b1":["c215736a9e29403edd2132d9f0829a287b428df4"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["56097405e40714e426bd1733d1d103128b8d770d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1eeda7e62e149f90eee8895af874c74efa7d4852"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"56097405e40714e426bd1733d1d103128b8d770d":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","1eeda7e62e149f90eee8895af874c74efa7d4852"],"c215736a9e29403edd2132d9f0829a287b428df4":["407687e67faf6e1f02a211ca078d8e3eed631027","4f762b78b5a7fc5814208ae853b54d0041b2e2b1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c215736a9e29403edd2132d9f0829a287b428df4","407687e67faf6e1f02a211ca078d8e3eed631027"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"4f762b78b5a7fc5814208ae853b54d0041b2e2b1":["56097405e40714e426bd1733d1d103128b8d770d"],"1eeda7e62e149f90eee8895af874c74efa7d4852":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}