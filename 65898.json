{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test\n  public void testGeneralSynchronization() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random, 2, 4),\n                                  random.nextBoolean() ? -1 : _TestUtil.nextInt(random, 1, 10),\n                                  _TestUtil.nextInt(random, 0, 3));\n    }\n  }\n\n","sourceOld":"  /**\n   * Run many instances of {@link MultiCLSearcher} in parallel, results should\n   * be sane. Each instance has a random delay for reading bytes, to ensure\n   * that threads finish in different order than started.\n   */\n  @Test\n  public void testGeneralSynchronization() throws Exception {\n    int[] numThreads = new int[] { 2, 3, 5, 8 };\n    int[] sleepMillis = new int[] { -1, 1, 20, 33 };\n    int[] cacheSize = new int[] { 0,1,2,3,5 };\n    for (int size : cacheSize) {\n      for (int sleep : sleepMillis) {\n        for (int nThreads : numThreads) {\n          doTestGeneralSynchronization(nThreads, sleep, size);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random, 2, 4),\n                                  random.nextBoolean() ? -1 : _TestUtil.nextInt(random, 1, 10),\n                                  _TestUtil.nextInt(random, 0, 3));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"/dev/null","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random, 2, 4),\n                                  random.nextBoolean() ? -1 : _TestUtil.nextInt(random, 1, 10),\n                                  _TestUtil.nextInt(random, 0, 3));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","sourceOld":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random, 2, 4),\n                                  random.nextBoolean() ? -1 : _TestUtil.nextInt(random, 1, 10),\n                                  _TestUtil.nextInt(random, 0, 3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCountsCache#testGeneralSynchronization().mjava","sourceNew":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","sourceOld":"  /** runs a few instances of {@link MultiCLSearcher} in parallel */\n  public void testGeneralSynchronization() throws Exception {\n    int numIters = atLeast(2);\n    for (int i = 0; i < numIters; i++) {\n      doTestGeneralSynchronization(_TestUtil.nextInt(random(), 2, 4),\n                                  random().nextBoolean() ? -1 : _TestUtil.nextInt(random(), 1, 10),\n                                  _TestUtil.nextInt(random(), 0, 3));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}