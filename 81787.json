{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","commits":[{"id":"6f26f74e4969851a019d28f10315cb1c77786f22","date":1400539241,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    private void resetTaskWithException(String id, String asyncId, String collectionName) {\n      log.warn(\"Resetting task: {}, requestid: {}, collectionName: {}\", id, asyncId, collectionName);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        if (collectionName != null) {\n          synchronized (collectionWip) {\n            collectionWip.remove(collectionName);\n          }\n        }\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","pathOld":"/dev/null","sourceNew":"    private void resetTaskWithException(String id, String asyncId, String collectionName) {\n      log.warn(\"Resetting task: {}, requestid: {}, collectionName: {}\", id, asyncId, collectionName);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        if (collectionName != null) {\n          synchronized (collectionWip) {\n            collectionWip.remove(collectionName);\n          }\n        }\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ff2ea054f72177967223fb032d708ad8020e80a","date":1401922976,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","sourceNew":"    private void resetTaskWithException(String id, String asyncId, String collectionName) {\n      log.warn(\"Resetting task: {}, requestid: {}, collectionName: {}\", id, asyncId, collectionName);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        if (!CLUSTERSTATUS.isEqual(operation) && collectionName != null) {\n          synchronized (collectionWip) {\n            collectionWip.remove(collectionName);\n          }\n        }\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(String id, String asyncId, String collectionName) {\n      log.warn(\"Resetting task: {}, requestid: {}, collectionName: {}\", id, asyncId, collectionName);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        if (collectionName != null) {\n          synchronized (collectionWip) {\n            collectionWip.remove(collectionName);\n          }\n        }\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerProcessor.Runner#resetTaskWithException(OverseerMessageHandler,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor.Runner#resetTaskWithException(String,String,String).mjava","sourceNew":"    private void resetTaskWithException(OverseerMessageHandler messageHandler, String id, String asyncId, String taskKey) {\n      log.warn(\"Resetting task: {}, requestid: {}, taskKey: {}\", id, asyncId, taskKey);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        messageHandler.unmarkExclusiveTask(taskKey, operation);\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","sourceOld":"    private void resetTaskWithException(String id, String asyncId, String collectionName) {\n      log.warn(\"Resetting task: {}, requestid: {}, collectionName: {}\", id, asyncId, collectionName);\n      try {\n        if (asyncId != null)\n          runningMap.remove(asyncId);\n\n        synchronized (runningTasks) {\n          runningTasks.remove(id);\n        }\n\n        if (!CLUSTERSTATUS.isEqual(operation) && collectionName != null) {\n          synchronized (collectionWip) {\n            collectionWip.remove(collectionName);\n          }\n        }\n      } catch (KeeperException e) {\n        SolrException.log(log, \"\", e);\n      } catch (InterruptedException e) {\n        Thread.currentThread().interrupt();\n      }\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["8ff2ea054f72177967223fb032d708ad8020e80a"],"8ff2ea054f72177967223fb032d708ad8020e80a":["6f26f74e4969851a019d28f10315cb1c77786f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f26f74e4969851a019d28f10315cb1c77786f22"],"6f26f74e4969851a019d28f10315cb1c77786f22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8ff2ea054f72177967223fb032d708ad8020e80a":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b7605579001505896d48b07160075a5c8b8e128e","6f26f74e4969851a019d28f10315cb1c77786f22"],"b7605579001505896d48b07160075a5c8b8e128e":[],"6f26f74e4969851a019d28f10315cb1c77786f22":["8ff2ea054f72177967223fb032d708ad8020e80a","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}