{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","commits":[{"id":"e68ffa1d3fb1890f32fe313f88b57877cf76eb87","date":1388983068,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.SHARD_PARENT_PROP, cd.getCloudDescriptor().getShardParent(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a234e8fc54f31f81256b691a1a134f969ef3d01c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a234e8fc54f31f81256b691a1a134f969ef3d01c","date":1392683993,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.SHARD_RANGE_PROP, cd.getCloudDescriptor().getShardRange(),\n        ZkStateReader.SHARD_STATE_PROP, cd.getCloudDescriptor().getShardState(),\n        ZkStateReader.SHARD_PARENT_PROP, cd.getCloudDescriptor().getShardParent(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6df412542f3e2161f4bc2b13357b4a973195bfb7","date":1394040511,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96ea64d994d340044e0d57aeb6a5871539d10ca5","date":1394225445,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    log.info(\"publishing core={} state={}\", cd.getName(), state);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert cd.getCloudDescriptor().getCollectionName() != null && cd.getCloudDescriptor()\n        .getCollectionName().length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, cd.getCloudDescriptor()\n            .getCollectionName(),\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString()\n            : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName\n            : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e332392bbbdd01cb69ad6a89051f483cda38e15e","date":1395758779,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      SolrCore core = cc.getCore(cd.getName());\n      if (core == null) {\n        return;\n      }\n      try {\n        if (core.isClosed()) {\n          return;\n        }\n      } finally {\n        core.close();\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14d5815ecbef89580f5c48990bcd433f04f8563a","date":1399564106,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, cd.getName());\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, cd.getName(), ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, cd.getName(), ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"07c824e7f6927860d366e4888be45e4db8c9e03b","date":1405193679,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, cd.getName());\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, cd.getName(), ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, cd.getName(), ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    //assert cd.getCloudDescriptor().getShardId() != null;\n    ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, \"state\", \n        ZkStateReader.STATE_PROP, state, \n        ZkStateReader.BASE_URL_PROP, getBaseUrl(), \n        ZkStateReader.CORE_NAME_PROP, cd.getName(),\n        ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles(),\n        ZkStateReader.NODE_NAME_PROP, getNodeName(),\n        ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId(),\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.NUM_SHARDS_PROP, numShards != null ? numShards.toString() : null,\n        ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName != null ? coreNodeName : null);\n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","date":1426444850,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (ZkStateReader.ACTIVE.equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":["07c824e7f6927860d366e4888be45e4db8c9e03b","0ad7bdba3e91cf3373cda2e52239cb761fc0b452","14d5815ecbef89580f5c48990bcd433f04f8563a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0932eb10135843758b2ca508d5aa2b4798aa07f9","date":1426947197,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (ZkStateReader.ACTIVE.equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null, true);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null, true);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (ZkStateReader.ACTIVE.equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dbf528c0e702c5cbd1339b2da1cdc823fd44a925","date":1427230904,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setCollection(collection);\n\n    try {\n      if (cd != null && cd.getName() != null)\n        MDCUtils.setCore(cd.getName());\n      log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n      //System.out.println(Thread.currentThread().getStackTrace()[3]);\n      Integer numShards = cd.getCloudDescriptor().getNumShards();\n      if (numShards == null) { //XXX sys prop hack\n        log.info(\"numShards not found on descriptor - reading it from system property\");\n        numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n      }\n\n      assert collection != null && collection.length() > 0;\n\n      String shardId = cd.getCloudDescriptor().getShardId();\n      MDCUtils.setShard(shardId);\n      String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n      // If the leader initiated recovery, then verify that this replica has performed\n      // recovery as requested before becoming active; don't even look at lirState if going down\n      if (!ZkStateReader.DOWN.equals(state)) {\n        String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n        if (lirState != null) {\n          if (ZkStateReader.ACTIVE.equals(state)) {\n            // trying to become active, so leader-initiated state must be recovering\n            if (ZkStateReader.RECOVERING.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null, true);\n            } else if (ZkStateReader.DOWN.equals(lirState)) {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Cannot publish state of core '\" + cd.getName() + \"' as active without recovering first!\");\n            }\n          } else if (ZkStateReader.RECOVERING.equals(state)) {\n            // if it is currently DOWN, then trying to enter into recovering state is good\n            if (ZkStateReader.DOWN.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null, true);\n            }\n          }\n        }\n      }\n\n      Map<String, Object> props = new HashMap<>();\n      props.put(Overseer.QUEUE_OPERATION, \"state\");\n      props.put(ZkStateReader.STATE_PROP, state);\n      props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n      props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n      props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n      props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n      props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n      props.put(ZkStateReader.COLLECTION_PROP, collection);\n      if (numShards != null) {\n        props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n      }\n      if (coreNodeName != null) {\n        props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      }\n\n      if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) {\n        try (SolrCore core = cc.getCore(cd.getName())) {\n          if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n            props.put(\"dataDir\", core.getDataDir());\n            UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n            if (ulog != null) {\n              props.put(\"ulogDir\", ulog.getLogDir());\n            }\n          }\n        }\n      }\n\n      ZkNodeProps m = new ZkNodeProps(props);\n\n      if (updateLastState) {\n        cd.getCloudDescriptor().lastPublished = state;\n      }\n      overseerJobQueue.offer(ZkStateReader.toJSON(m));\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (ZkStateReader.ACTIVE.equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null, true);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null, true);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setCollection(collection);\n\n    try {\n      if (cd != null && cd.getName() != null)\n        MDCUtils.setCore(cd.getName());\n      log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n      //System.out.println(Thread.currentThread().getStackTrace()[3]);\n      Integer numShards = cd.getCloudDescriptor().getNumShards();\n      if (numShards == null) { //XXX sys prop hack\n        log.info(\"numShards not found on descriptor - reading it from system property\");\n        numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n      }\n\n      assert collection != null && collection.length() > 0;\n\n      String shardId = cd.getCloudDescriptor().getShardId();\n      MDCUtils.setShard(shardId);\n      String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n      // If the leader initiated recovery, then verify that this replica has performed\n      // recovery as requested before becoming active; don't even look at lirState if going down\n      if (!ZkStateReader.DOWN.equals(state)) {\n        String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n        if (lirState != null) {\n          if (ZkStateReader.ACTIVE.equals(state)) {\n            // trying to become active, so leader-initiated state must be recovering\n            if (ZkStateReader.RECOVERING.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null, true);\n            } else if (ZkStateReader.DOWN.equals(lirState)) {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Cannot publish state of core '\" + cd.getName() + \"' as active without recovering first!\");\n            }\n          } else if (ZkStateReader.RECOVERING.equals(state)) {\n            // if it is currently DOWN, then trying to enter into recovering state is good\n            if (ZkStateReader.DOWN.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null, true);\n            }\n          }\n        }\n      }\n\n      Map<String, Object> props = new HashMap<>();\n      props.put(Overseer.QUEUE_OPERATION, \"state\");\n      props.put(ZkStateReader.STATE_PROP, state);\n      props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n      props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n      props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n      props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n      props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n      props.put(ZkStateReader.COLLECTION_PROP, collection);\n      if (numShards != null) {\n        props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n      }\n      if (coreNodeName != null) {\n        props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      }\n\n      if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) {\n        try (SolrCore core = cc.getCore(cd.getName())) {\n          if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n            props.put(\"dataDir\", core.getDataDir());\n            UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n            if (ulog != null) {\n              props.put(\"ulogDir\", ulog.getLogDir());\n            }\n          }\n        }\n      }\n\n      ZkNodeProps m = new ZkNodeProps(props);\n\n      if (updateLastState) {\n        cd.getCloudDescriptor().lastPublished = state;\n      }\n      overseerJobQueue.offer(ZkStateReader.toJSON(m));\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n    log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n    //System.out.println(Thread.currentThread().getStackTrace()[3]);\n    Integer numShards = cd.getCloudDescriptor().getNumShards();\n    if (numShards == null) { //XXX sys prop hack\n      log.info(\"numShards not found on descriptor - reading it from system property\");\n      numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n    }\n    \n    assert collection != null && collection.length() > 0;\n    \n    String shardId = cd.getCloudDescriptor().getShardId();\n    String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();    \n    // If the leader initiated recovery, then verify that this replica has performed\n    // recovery as requested before becoming active; don't even look at lirState if going down\n    if (!ZkStateReader.DOWN.equals(state)) {\n      String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n      if (lirState != null) {\n        if (\"active\".equals(state)) {\n          // trying to become active, so leader-initiated state must be recovering\n          if (ZkStateReader.RECOVERING.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE);\n          } else if (ZkStateReader.DOWN.equals(lirState)) {\n            throw new SolrException(ErrorCode.INVALID_STATE, \n                \"Cannot publish state of core '\"+cd.getName()+\"' as active without recovering first!\");\n          }\n        } else if (ZkStateReader.RECOVERING.equals(state)) {\n          // if it is currently DOWN, then trying to enter into recovering state is good\n          if (ZkStateReader.DOWN.equals(lirState)) {\n            updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING);\n          }\n        }\n      }\n    }\n    \n    Map<String, Object> props = new HashMap<String, Object>();\n    props.put(Overseer.QUEUE_OPERATION, \"state\");\n    props.put(ZkStateReader.STATE_PROP, state);\n    props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n    props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n    props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n    props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n    props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n    props.put(ZkStateReader.COLLECTION_PROP, collection);\n    if (numShards != null) {\n      props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n    }\n    if (coreNodeName != null) {\n      props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n    }\n    \n    if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) { \n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n          props.put(\"dataDir\", core.getDataDir());\n          UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n          if (ulog != null) {\n            props.put(\"ulogDir\", ulog.getLogDir());\n          }\n        }\n      }\n    }\n    \n    ZkNodeProps m = new ZkNodeProps(props);\n    \n    if (updateLastState) {\n      cd.getCloudDescriptor().lastPublished = state;\n    }\n    overseerJobQueue.offer(ZkStateReader.toJSON(m));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,Replica.State,boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#publish(CoreDescriptor,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final Replica.State state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setCollection(collection);\n\n    try {\n      if (cd != null && cd.getName() != null)\n        MDCUtils.setCore(cd.getName());\n      log.info(\"publishing core={} state={} collection={}\", cd.getName(), state.toString(), collection);\n      //System.out.println(Thread.currentThread().getStackTrace()[3]);\n      Integer numShards = cd.getCloudDescriptor().getNumShards();\n      if (numShards == null) { //XXX sys prop hack\n        log.info(\"numShards not found on descriptor - reading it from system property\");\n        numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n      }\n\n      assert collection != null && collection.length() > 0;\n\n      String shardId = cd.getCloudDescriptor().getShardId();\n      MDCUtils.setShard(shardId);\n      String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n      // If the leader initiated recovery, then verify that this replica has performed\n      // recovery as requested before becoming active; don't even look at lirState if going down\n      if (state != Replica.State.DOWN) {\n        final Replica.State lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n        if (lirState != null) {\n          if (state == Replica.State.ACTIVE) {\n            // trying to become active, so leader-initiated state must be recovering\n            if (lirState == Replica.State.RECOVERING) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, Replica.State.ACTIVE, null);\n            } else if (lirState == Replica.State.DOWN) {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Cannot publish state of core '\" + cd.getName() + \"' as active without recovering first!\");\n            }\n          } else if (state == Replica.State.RECOVERING) {\n            // if it is currently DOWN, then trying to enter into recovering state is good\n            if (lirState == Replica.State.DOWN) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, Replica.State.RECOVERING, null);\n            }\n          }\n        }\n      }\n\n      Map<String, Object> props = new HashMap<>();\n      props.put(Overseer.QUEUE_OPERATION, \"state\");\n      props.put(ZkStateReader.STATE_PROP, state.toString());\n      props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n      props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n      props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n      props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n      props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n      props.put(ZkStateReader.COLLECTION_PROP, collection);\n      if (numShards != null) {\n        props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n      }\n      if (coreNodeName != null) {\n        props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      }\n\n      if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) {\n        try (SolrCore core = cc.getCore(cd.getName())) {\n          if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n            props.put(\"dataDir\", core.getDataDir());\n            UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n            if (ulog != null) {\n              props.put(\"ulogDir\", ulog.getLogDir());\n            }\n          }\n        }\n      }\n\n      ZkNodeProps m = new ZkNodeProps(props);\n\n      if (updateLastState) {\n        cd.getCloudDescriptor().lastPublished = state;\n      }\n      overseerJobQueue.offer(ZkStateReader.toJSON(m));\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","sourceOld":"  /**\n   * Publish core state to overseer.\n   */\n  public void publish(final CoreDescriptor cd, final String state, boolean updateLastState, boolean forcePublish) throws KeeperException, InterruptedException {\n    if (!forcePublish) {\n      try (SolrCore core = cc.getCore(cd.getName())) {\n        if (core == null || core.isClosed()) {\n          return;\n        }\n      }\n    }\n    String collection = cd.getCloudDescriptor().getCollectionName();\n\n    Map previousMDCContext = MDC.getCopyOfContextMap();\n    MDCUtils.setCollection(collection);\n\n    try {\n      if (cd != null && cd.getName() != null)\n        MDCUtils.setCore(cd.getName());\n      log.info(\"publishing core={} state={} collection={}\", cd.getName(), state, collection);\n      //System.out.println(Thread.currentThread().getStackTrace()[3]);\n      Integer numShards = cd.getCloudDescriptor().getNumShards();\n      if (numShards == null) { //XXX sys prop hack\n        log.info(\"numShards not found on descriptor - reading it from system property\");\n        numShards = Integer.getInteger(ZkStateReader.NUM_SHARDS_PROP);\n      }\n\n      assert collection != null && collection.length() > 0;\n\n      String shardId = cd.getCloudDescriptor().getShardId();\n      MDCUtils.setShard(shardId);\n      String coreNodeName = cd.getCloudDescriptor().getCoreNodeName();\n      // If the leader initiated recovery, then verify that this replica has performed\n      // recovery as requested before becoming active; don't even look at lirState if going down\n      if (!ZkStateReader.DOWN.equals(state)) {\n        String lirState = getLeaderInitiatedRecoveryState(collection, shardId, coreNodeName);\n        if (lirState != null) {\n          if (ZkStateReader.ACTIVE.equals(state)) {\n            // trying to become active, so leader-initiated state must be recovering\n            if (ZkStateReader.RECOVERING.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.ACTIVE, null, true);\n            } else if (ZkStateReader.DOWN.equals(lirState)) {\n              throw new SolrException(ErrorCode.INVALID_STATE,\n                  \"Cannot publish state of core '\" + cd.getName() + \"' as active without recovering first!\");\n            }\n          } else if (ZkStateReader.RECOVERING.equals(state)) {\n            // if it is currently DOWN, then trying to enter into recovering state is good\n            if (ZkStateReader.DOWN.equals(lirState)) {\n              updateLeaderInitiatedRecoveryState(collection, shardId, coreNodeName, ZkStateReader.RECOVERING, null, true);\n            }\n          }\n        }\n      }\n\n      Map<String, Object> props = new HashMap<>();\n      props.put(Overseer.QUEUE_OPERATION, \"state\");\n      props.put(ZkStateReader.STATE_PROP, state);\n      props.put(ZkStateReader.BASE_URL_PROP, getBaseUrl());\n      props.put(ZkStateReader.CORE_NAME_PROP, cd.getName());\n      props.put(ZkStateReader.ROLES_PROP, cd.getCloudDescriptor().getRoles());\n      props.put(ZkStateReader.NODE_NAME_PROP, getNodeName());\n      props.put(ZkStateReader.SHARD_ID_PROP, cd.getCloudDescriptor().getShardId());\n      props.put(ZkStateReader.COLLECTION_PROP, collection);\n      if (numShards != null) {\n        props.put(ZkStateReader.NUM_SHARDS_PROP, numShards.toString());\n      }\n      if (coreNodeName != null) {\n        props.put(ZkStateReader.CORE_NODE_NAME_PROP, coreNodeName);\n      }\n\n      if (ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection)) {\n        try (SolrCore core = cc.getCore(cd.getName())) {\n          if (core != null && core.getDirectoryFactory().isSharedStorage()) {\n            props.put(\"dataDir\", core.getDataDir());\n            UpdateLog ulog = core.getUpdateHandler().getUpdateLog();\n            if (ulog != null) {\n              props.put(\"ulogDir\", ulog.getLogDir());\n            }\n          }\n        }\n      }\n\n      ZkNodeProps m = new ZkNodeProps(props);\n\n      if (updateLastState) {\n        cd.getCloudDescriptor().lastPublished = state;\n      }\n      overseerJobQueue.offer(ZkStateReader.toJSON(m));\n    } finally {\n      MDCUtils.cleanupMDC(previousMDCContext);\n    }\n  }\n\n","bugFix":null,"bugIntro":["22859cb40e09867e7da8de84a31956c07259f82f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":["a234e8fc54f31f81256b691a1a134f969ef3d01c","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"07c824e7f6927860d366e4888be45e4db8c9e03b":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["07c824e7f6927860d366e4888be45e4db8c9e03b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["6df412542f3e2161f4bc2b13357b4a973195bfb7"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["a234e8fc54f31f81256b691a1a134f969ef3d01c"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["e332392bbbdd01cb69ad6a89051f483cda38e15e"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc"],"a234e8fc54f31f81256b691a1a134f969ef3d01c":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["0932eb10135843758b2ca508d5aa2b4798aa07f9"]},"commit2Childs":{"dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc":["0932eb10135843758b2ca508d5aa2b4798aa07f9"],"96ea64d994d340044e0d57aeb6a5871539d10ca5":[],"e68ffa1d3fb1890f32fe313f88b57877cf76eb87":["a234e8fc54f31f81256b691a1a134f969ef3d01c"],"a219f1dcad1700e84807666bdbd2b573e8de7021":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"07c824e7f6927860d366e4888be45e4db8c9e03b":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["dd042b1ba3cc0f8bc92f7896c2c51438ba60e4fc","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e68ffa1d3fb1890f32fe313f88b57877cf76eb87"],"6df412542f3e2161f4bc2b13357b4a973195bfb7":["96ea64d994d340044e0d57aeb6a5871539d10ca5","e332392bbbdd01cb69ad6a89051f483cda38e15e"],"e332392bbbdd01cb69ad6a89051f483cda38e15e":["14d5815ecbef89580f5c48990bcd433f04f8563a"],"14d5815ecbef89580f5c48990bcd433f04f8563a":["07c824e7f6927860d366e4888be45e4db8c9e03b"],"0932eb10135843758b2ca508d5aa2b4798aa07f9":["dbf528c0e702c5cbd1339b2da1cdc823fd44a925"],"a234e8fc54f31f81256b691a1a134f969ef3d01c":["96ea64d994d340044e0d57aeb6a5871539d10ca5","6df412542f3e2161f4bc2b13357b4a973195bfb7"],"dbf528c0e702c5cbd1339b2da1cdc823fd44a925":["a219f1dcad1700e84807666bdbd2b573e8de7021","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["96ea64d994d340044e0d57aeb6a5871539d10ca5","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}