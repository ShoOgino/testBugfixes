{"path":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String).mjava","commits":[{"id":"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","date":1342989037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String).mjava","sourceNew":"  private void requestSync(String replica, String leaderUrl, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",leaderUrl);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  private void requestSync(String replica, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",replica);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String).mjava","sourceNew":"  private void requestSync(String replica, String leaderUrl, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",leaderUrl);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  private void requestSync(String replica, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",replica);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce9115008b2600dda16a6765e06b6b380458c02f","date":1343435746,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String).mjava","sourceNew":"  private void requestSync(String baseUrl, String replica, String leaderUrl, String coreName) {\n    ShardCoreRequest sreq = new ShardCoreRequest();\n    sreq.coreName = coreName;\n    sreq.baseUrl = baseUrl;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",leaderUrl);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","sourceOld":"  private void requestSync(String replica, String leaderUrl, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",leaderUrl);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/SyncStrategy#requestSync(String,String,String).mjava","sourceNew":null,"sourceOld":"  private void requestSync(String replica, String leaderUrl, String coreName) {\n    SyncShardRequest sreq = new SyncShardRequest();\n    sreq.coreName = coreName;\n    sreq.purpose = 1;\n    // TODO: this sucks\n    if (replica.startsWith(\"http://\"))\n      replica = replica.substring(7);\n    sreq.shards = new String[]{replica};\n    sreq.actualShards = sreq.shards;\n    sreq.params = new ModifiableSolrParams();\n    sreq.params.set(\"qt\",\"/get\");\n    sreq.params.set(\"distrib\",false);\n    sreq.params.set(\"getVersions\",Integer.toString(100));\n    sreq.params.set(\"sync\",leaderUrl);\n    \n    shardHandler.submit(sreq, replica, sreq.params);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ce9115008b2600dda16a6765e06b6b380458c02f":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","ce9115008b2600dda16a6765e06b6b380458c02f"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","933fa8f09adfcd1a858cd0fc7912e21ee993b7fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ce9115008b2600dda16a6765e06b6b380458c02f"]},"commit2Childs":{"933fa8f09adfcd1a858cd0fc7912e21ee993b7fc":["ce9115008b2600dda16a6765e06b6b380458c02f","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["933fa8f09adfcd1a858cd0fc7912e21ee993b7fc","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"ce9115008b2600dda16a6765e06b6b380458c02f":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}