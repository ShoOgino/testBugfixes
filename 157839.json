{"path":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_binarySearch(FST[T],FST.Arc[T],int).mjava","commits":[{"id":"b115f25f829e48473723bb73c2c09e29f0a3ed0d","date":1564170556,"type":0,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_binarySearch(FST[T],FST.Arc[T],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform a binary search of Arcs encoded as a packed array\n   * @param fst the FST from which to read\n   * @param arc the starting arc; sibling arcs greater than this will be searched. Usually the first arc in the array.\n   * @param targetLabel the label to search for\n   * @param <T> the output type of the FST\n   * @return the index of the Arc having the target label, or if no Arc has the matching label, {@code -1 - idx)},\n   * where {@code idx} is the index of the Arc with the next highest label, or the total number of arcs\n   * if the target label exceeds the maximum.\n   * @throws IOException when the FST reader does\n   */\n  static <T> int binarySearch(FST<T> fst, FST.Arc<T> arc, int targetLabel) throws IOException {\n    BytesReader in = fst.getBytesReader();\n    int low = arc.arcIdx();\n    int mid = 0;\n    int high = arc.numArcs() -1;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      if (cmp < 0) {\n        low = mid + 1;\n      } else if (cmp > 0) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -1 - low;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":0,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_binarySearch(FST[T],FST.Arc[T],int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Perform a binary search of Arcs encoded as a packed array\n   * @param fst the FST from which to read\n   * @param arc the starting arc; sibling arcs greater than this will be searched. Usually the first arc in the array.\n   * @param targetLabel the label to search for\n   * @param <T> the output type of the FST\n   * @return the index of the Arc having the target label, or if no Arc has the matching label, {@code -1 - idx)},\n   * where {@code idx} is the index of the Arc with the next highest label, or the total number of arcs\n   * if the target label exceeds the maximum.\n   * @throws IOException when the FST reader does\n   */\n  static <T> int binarySearch(FST<T> fst, FST.Arc<T> arc, int targetLabel) throws IOException {\n    BytesReader in = fst.getBytesReader();\n    int low = arc.arcIdx();\n    int mid = 0;\n    int high = arc.numArcs() -1;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      if (cmp < 0) {\n        low = mid + 1;\n      } else if (cmp > 0) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -1 - low;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71d31a7d5773508492505519bb5230b87c8937ad","date":1573681693,"type":3,"author":"Bruno Roustant","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_binarySearch(FST[T],FST.Arc[T],int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/Util#[T]_binarySearch(FST[T],FST.Arc[T],int).mjava","sourceNew":"  /**\n   * Perform a binary search of Arcs encoded as a packed array\n   * @param fst the FST from which to read\n   * @param arc the starting arc; sibling arcs greater than this will be searched. Usually the first arc in the array.\n   * @param targetLabel the label to search for\n   * @param <T> the output type of the FST\n   * @return the index of the Arc having the target label, or if no Arc has the matching label, {@code -1 - idx)},\n   * where {@code idx} is the index of the Arc with the next highest label, or the total number of arcs\n   * if the target label exceeds the maximum.\n   * @throws IOException when the FST reader does\n   */\n  static <T> int binarySearch(FST<T> fst, FST.Arc<T> arc, int targetLabel) throws IOException {\n    assert arc.nodeFlags() == FST.ARCS_FOR_BINARY_SEARCH : \"Arc is not encoded as packed array for binary search (nodeFlags=\" + arc.nodeFlags() + \")\";\n    BytesReader in = fst.getBytesReader();\n    int low = arc.arcIdx();\n    int mid = 0;\n    int high = arc.numArcs() -1;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      if (cmp < 0) {\n        low = mid + 1;\n      } else if (cmp > 0) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -1 - low;\n  }\n\n","sourceOld":"  /**\n   * Perform a binary search of Arcs encoded as a packed array\n   * @param fst the FST from which to read\n   * @param arc the starting arc; sibling arcs greater than this will be searched. Usually the first arc in the array.\n   * @param targetLabel the label to search for\n   * @param <T> the output type of the FST\n   * @return the index of the Arc having the target label, or if no Arc has the matching label, {@code -1 - idx)},\n   * where {@code idx} is the index of the Arc with the next highest label, or the total number of arcs\n   * if the target label exceeds the maximum.\n   * @throws IOException when the FST reader does\n   */\n  static <T> int binarySearch(FST<T> fst, FST.Arc<T> arc, int targetLabel) throws IOException {\n    BytesReader in = fst.getBytesReader();\n    int low = arc.arcIdx();\n    int mid = 0;\n    int high = arc.numArcs() -1;\n    while (low <= high) {\n      mid = (low + high) >>> 1;\n      in.setPosition(arc.posArcsStart());\n      in.skipBytes(arc.bytesPerArc() * mid + 1);\n      final int midLabel = fst.readLabel(in);\n      final int cmp = midLabel - targetLabel;\n      if (cmp < 0) {\n        low = mid + 1;\n      } else if (cmp > 0) {\n        high = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -1 - low;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71d31a7d5773508492505519bb5230b87c8937ad":["b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"f8061ddd97f3352007d927dae445884a6f3d857b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b115f25f829e48473723bb73c2c09e29f0a3ed0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71d31a7d5773508492505519bb5230b87c8937ad"]},"commit2Childs":{"b115f25f829e48473723bb73c2c09e29f0a3ed0d":["71d31a7d5773508492505519bb5230b87c8937ad","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b115f25f829e48473723bb73c2c09e29f0a3ed0d","f8061ddd97f3352007d927dae445884a6f3d857b"],"71d31a7d5773508492505519bb5230b87c8937ad":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}