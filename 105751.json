{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","commits":[{"id":"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6","date":1353340695,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(CompressionMode compressionMode, int chunkSize) {\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25308800fd7565ab31e6353077a56bba68fb0668","date":1355337658,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an empty segment \n   * suffix.\n   * \n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String, String, CompressionMode, int)\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this(formatName, \"\", compressionMode, chunkSize);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6","7d1467e0527cb2aeb9d7a05c26948ac9d82d81fa","0a96cceee825e15cd8e042b683d404086e2a58d1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an empty segment \n   * suffix.\n   * \n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String, String, CompressionMode, int)\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this(formatName, \"\", compressionMode, chunkSize);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat}.\n   * <p>\n   * <code>formatName</code> is the name of the format. This name will be used\n   * in the file formats to perform\n   * {@link CodecUtil#checkHeader(org.apache.lucene.store.DataInput, String, int, int) codec header checks}.\n   * <p>\n   * The <code>compressionMode</code> parameter allows you to choose between\n   * compression algorithms that have various compression and decompression\n   * speeds so that you can pick the one that best fits your indexing and\n   * searching throughput. You should never instantiate two\n   * {@link CompressingStoredFieldsFormat}s that have the same name but\n   * different {@link CompressionMode}s.\n   * <p>\n   * <code>chunkSize</code> is the minimum byte size of a chunk of documents.\n   * A value of <code>1</code> can make sense if there is redundancy across\n   * fields. In that case, both performance and compression ratio should be\n   * better than with {@link Lucene40StoredFieldsFormat} with compressed\n   * fields.\n   * <p>\n   * Higher values of <code>chunkSize</code> should improve the compression\n   * ratio but will require more memory at indexing time and might make document\n   * loading a little slower (depending on the size of your OS cache compared\n   * to the size of your index).\n   *\n   * @param formatName the name of the {@link StoredFieldsFormat}\n   * @param compressionMode the {@link CompressionMode} to use\n   * @param chunkSize the minimum number of bytes of a single chunk of stored documents\n   * @see CompressionMode\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this.formatName = formatName;\n    this.compressionMode = compressionMode;\n    if (chunkSize < 1) {\n      throw new IllegalArgumentException(\"chunkSize must be >= 1\");\n    }\n    this.chunkSize = chunkSize;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"699a2199028b8eadcc558eebcf669e5fc708524a","date":1417544403,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String,CompressionMode,int).mjava","sourceNew":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an empty segment \n   * suffix.\n   * \n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String, String, CompressionMode, int, int)\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize, int maxDocsPerChunk) {\n    this(formatName, \"\", compressionMode, chunkSize, maxDocsPerChunk);\n  }\n\n","sourceOld":"  /**\n   * Create a new {@link CompressingStoredFieldsFormat} with an empty segment \n   * suffix.\n   * \n   * @see CompressingStoredFieldsFormat#CompressingStoredFieldsFormat(String, String, CompressionMode, int)\n   */\n  public CompressingStoredFieldsFormat(String formatName, CompressionMode compressionMode, int chunkSize) {\n    this(formatName, \"\", compressionMode, chunkSize);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","25308800fd7565ab31e6353077a56bba68fb0668"],"25308800fd7565ab31e6353077a56bba68fb0668":["672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"699a2199028b8eadcc558eebcf669e5fc708524a":["25308800fd7565ab31e6353077a56bba68fb0668"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["699a2199028b8eadcc558eebcf669e5fc708524a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"25308800fd7565ab31e6353077a56bba68fb0668":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","699a2199028b8eadcc558eebcf669e5fc708524a"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","672d7b75cc3198c053fd48a3138a50f4ec7bf4c6"],"672d7b75cc3198c053fd48a3138a50f4ec7bf4c6":["25308800fd7565ab31e6353077a56bba68fb0668","407687e67faf6e1f02a211ca078d8e3eed631027"],"699a2199028b8eadcc558eebcf669e5fc708524a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}