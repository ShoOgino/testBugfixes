{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestCompoundFile#testRandomFiles().mjava","sourceNew":null,"sourceOld":"    /** This test creates a compound file based on a large number of files of\n     *  various length. The file content is generated randomly. The sizes range\n     *  from 0 to 1Mb. Some of the sizes are selected to test the buffering\n     *  logic in the file reading code. For this the chunk variable is set to\n     *  the length of the buffer used internally by the compound file logic.\n     */\n    public void testRandomFiles() throws IOException {\n        // Setup the test segment\n        String segment = \"test\";\n        int chunk = 1024; // internal buffer size used by the stream\n        createRandomFile(dir, segment + \".zero\", 0);\n        createRandomFile(dir, segment + \".one\", 1);\n        createRandomFile(dir, segment + \".ten\", 10);\n        createRandomFile(dir, segment + \".hundred\", 100);\n        createRandomFile(dir, segment + \".big1\", chunk);\n        createRandomFile(dir, segment + \".big2\", chunk - 1);\n        createRandomFile(dir, segment + \".big3\", chunk + 1);\n        createRandomFile(dir, segment + \".big4\", 3 * chunk);\n        createRandomFile(dir, segment + \".big5\", 3 * chunk - 1);\n        createRandomFile(dir, segment + \".big6\", 3 * chunk + 1);\n        createRandomFile(dir, segment + \".big7\", 1000 * chunk);\n\n        // Setup extraneous files\n        createRandomFile(dir, \"onetwothree\", 100);\n        createRandomFile(dir, segment + \".notIn\", 50);\n        createRandomFile(dir, segment + \".notIn2\", 51);\n\n        // Now test\n        CompoundFileWriter csw = new CompoundFileWriter(dir, \"test.cfs\");\n        final String data[] = new String[] {\n            \".zero\", \".one\", \".ten\", \".hundred\", \".big1\", \".big2\", \".big3\",\n            \".big4\", \".big5\", \".big6\", \".big7\"\n        };\n        for (int i=0; i<data.length; i++) {\n            csw.addFile(segment + data[i]);\n        }\n        csw.close();\n\n        CompoundFileReader csr = new CompoundFileReader(dir, \"test.cfs\");\n        for (int i=0; i<data.length; i++) {\n            IndexInput check = dir.openInput(segment + data[i]);\n            IndexInput test = csr.openInput(segment + data[i]);\n            assertSameStreams(data[i], check, test);\n            assertSameSeekBehavior(data[i], check, test);\n            test.close();\n            check.close();\n        }\n        csr.close();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}