{"path":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).intValue(), fooNorms.get(i) & 0xff);\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).intValue(), fooNorms.get(i) & 0xff);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7649a7f5af3862074b213bfad955681cf4a14f1e","date":1358289993,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiSimpleDocValues.simpleNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    byte fooNorms[] = (byte[])MultiDocValues.getNormDocValues(reader, \"foo\").getSource().getArray();\n    for (int i = 0; i < reader.maxDoc(); i++)\n      assertEquals(expected.get(i).intValue(), fooNorms[i] & 0xff);\n  }\n\n","bugFix":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","f4f2f9fd0a641ccc0cc6a4fb4e53d7ec1ab14a94"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(expected.get(i).longValue(), fooNorms.longValue());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(expected.get(i).longValue(), fooNorms.longValue());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestUniqueTermCount#test().mjava","sourceNew":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(i, fooNorms.nextDoc());\n      assertEquals(expected.get(i).longValue(), fooNorms.longValue());\n    }\n  }\n\n","sourceOld":"  public void test() throws Exception {\n    NumericDocValues fooNorms = MultiDocValues.getNormValues(reader, \"foo\");\n    assertNotNull(fooNorms);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      assertEquals(expected.get(i).longValue(), fooNorms.get(i));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["7649a7f5af3862074b213bfad955681cf4a14f1e"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["d4d69c535930b5cce125cff868d40f6373dc27d4","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"7649a7f5af3862074b213bfad955681cf4a14f1e":["0837ab0472feecb3a54260729d845f839e1cbd72"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["d4d69c535930b5cce125cff868d40f6373dc27d4","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0837ab0472feecb3a54260729d845f839e1cbd72":["7649a7f5af3862074b213bfad955681cf4a14f1e"],"7649a7f5af3862074b213bfad955681cf4a14f1e":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}