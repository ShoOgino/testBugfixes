{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","sourceNew":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","sourceOld":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/synonym/SolrSynonymParser#split(String,String).mjava","sourceNew":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","sourceOld":"  private static String[] split(String s, String separator) {\n    ArrayList<String> list = new ArrayList<String>(2);\n    StringBuilder sb = new StringBuilder();\n    int pos=0, end=s.length();\n    while (pos < end) {\n      if (s.startsWith(separator,pos)) {\n        if (sb.length() > 0) {\n          list.add(sb.toString());\n          sb=new StringBuilder();\n        }\n        pos+=separator.length();\n        continue;\n      }\n\n      char ch = s.charAt(pos++);\n      if (ch=='\\\\') {\n        sb.append(ch);\n        if (pos>=end) break;  // ERROR, or let it go?\n        ch = s.charAt(pos++);\n      }\n\n      sb.append(ch);\n    }\n\n    if (sb.length() > 0) {\n      list.add(sb.toString());\n    }\n\n    return list.toArray(new String[list.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}