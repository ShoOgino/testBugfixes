{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","commits":[{"id":"29baaefef1b62d76a3370ff72a0fe5f9bd84e365","date":1348949582,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options, final IndexOptions maxIndexOptions) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4108b7b6cc881d8b7c6ba2df50010b7bc581a39","date":1348960504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    // TODO: turn threads back on!\n    if (false && options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"932f8bd50a005a7ebff09b5ed8f577ab843025b3","date":1349011503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(this, fieldsSource, options, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    // TODO: turn threads back on!\n    if (false && options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new Thread() {\n            @Override\n            public void run() {\n              try {\n                testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n              } catch (Throwable t) {\n                throw new RuntimeException(t);\n              }\n            }\n          };\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTerms(Fields,EnumSet[Option],IndexOptions,boolean).mjava","sourceNew":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxTestOptions,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(this, fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxTestOptions, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","sourceOld":"  private void testTerms(final Fields fieldsSource, final EnumSet<Option> options,\n                         final IndexOptions maxIndexOptions,\n                         final boolean alwaysTestMax) throws Exception {\n\n    if (options.contains(Option.THREADS)) {\n      int numThreads = _TestUtil.nextInt(random(), 2, 5);\n      Thread[] threads = new Thread[numThreads];\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto] = new TestThread(this, fieldsSource, options, maxIndexOptions, alwaysTestMax);\n        threads[threadUpto].start();\n      }\n      for(int threadUpto=0;threadUpto<numThreads;threadUpto++) {\n        threads[threadUpto].join();\n      }\n    } else {\n      testTermsOneThread(fieldsSource, options, maxIndexOptions, alwaysTestMax);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c4108b7b6cc881d8b7c6ba2df50010b7bc581a39":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"932f8bd50a005a7ebff09b5ed8f577ab843025b3":["c4108b7b6cc881d8b7c6ba2df50010b7bc581a39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["932f8bd50a005a7ebff09b5ed8f577ab843025b3"]},"commit2Childs":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["c4108b7b6cc881d8b7c6ba2df50010b7bc581a39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"c4108b7b6cc881d8b7c6ba2df50010b7bc581a39":["932f8bd50a005a7ebff09b5ed8f577ab843025b3"],"932f8bd50a005a7ebff09b5ed8f577ab843025b3":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}