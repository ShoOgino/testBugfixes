{"path":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","commits":[{"id":"4a470c93b2b0f8f51241f52705fc110a01f27ad2","date":1337969379,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, float acceptableOverheadRatio)\n  throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, boolean fasterButMoreRAM)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03","date":1353235561,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, float acceptableOverheadRatio)\n  throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2dd9934a49477c83301120ba51827d91eb3606d5","date":1353767072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public DocTerms getTerms (AtomicReader reader, String field, float acceptableOverheadRatio)\n  throws IOException;\n\n","bugFix":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","be20f9fed1d3edcb1c84abcc39df87a90fab22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldCache#getTerms(AtomicReader,String,float).mjava","sourceNew":"  /** Expert: just like {@link #getTerms(AtomicReader,String,boolean)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, boolean setDocsWithField, float acceptableOverheadRatio) throws IOException;\n\n","sourceOld":"  /** Expert: just like {@link #getTerms(AtomicReader,String)},\n   *  but you can specify whether more RAM should be consumed in exchange for\n   *  faster lookups (default is \"true\").  Note that the\n   *  first call for a given reader and field \"wins\",\n   *  subsequent calls will share the same cache entry. */\n  public BinaryDocValues getTerms (AtomicReader reader, String field, float acceptableOverheadRatio) throws IOException;\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["4a470c93b2b0f8f51241f52705fc110a01f27ad2","2dd9934a49477c83301120ba51827d91eb3606d5"],"2dd9934a49477c83301120ba51827d91eb3606d5":["34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["87d6f9603307ae2ad642fb01deedf031320fd0c3"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"2dd9934a49477c83301120ba51827d91eb3606d5":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"34a3cb4eb36d5e20abde21f4d8fe5442588e7e03":["2dd9934a49477c83301120ba51827d91eb3606d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4a470c93b2b0f8f51241f52705fc110a01f27ad2"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4a470c93b2b0f8f51241f52705fc110a01f27ad2":["d4d69c535930b5cce125cff868d40f6373dc27d4","34a3cb4eb36d5e20abde21f4d8fe5442588e7e03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}