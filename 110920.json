{"path":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","commits":[{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(new Field(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"/dev/null","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    doc.add(newField(\"content\", \"aaa\", Field.Store.YES, Field.Index.ANALYZED, Field.TermVector.WITH_POSITIONS_OFFSETS));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSnapshotDeletionPolicy#runTest(Random,Directory).mjava","sourceNew":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","sourceOld":"  private void runTest(Random random, Directory dir) throws Exception {\n    // Run for ~1 seconds\n    final long stopTime = System.currentTimeMillis() + 1000;\n\n    SnapshotDeletionPolicy dp = getDeletionPolicy();\n    final IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)).setIndexDeletionPolicy(dp)\n        .setMaxBufferedDocs(2));\n    writer.commit();\n    \n    final Thread t = new Thread() {\n        @Override\n        public void run() {\n          Document doc = new Document();\n          FieldType customType = new FieldType(TextField.TYPE_STORED);\n          customType.setStoreTermVectors(true);\n          customType.setStoreTermVectorPositions(true);\n          customType.setStoreTermVectorOffsets(true);\n          doc.add(newField(\"content\", \"aaa\", customType));\n          do {\n            for(int i=0;i<27;i++) {\n              try {\n                writer.addDocument(doc);\n              } catch (Throwable t) {\n                t.printStackTrace(System.out);\n                fail(\"addDocument failed\");\n              }\n              if (i%2 == 0) {\n                try {\n                  writer.commit();\n                } catch (Exception e) {\n                  throw new RuntimeException(e);\n                }\n              }\n            }\n            try {\n              Thread.sleep(1);\n            } catch (InterruptedException ie) {\n              throw new ThreadInterruptedException(ie);\n            }\n          } while(System.currentTimeMillis() < stopTime);\n        }\n      };\n\n    t.start();\n\n    // While the above indexing thread is running, take many\n    // backups:\n    do {\n      backupIndex(dir, dp);\n      Thread.sleep(20);\n    } while(t.isAlive());\n\n    t.join();\n\n    // Add one more document to force writer to commit a\n    // final segment, so deletion policy has a chance to\n    // delete again:\n    Document doc = new Document();\n    FieldType customType = new FieldType(TextField.TYPE_STORED);\n    customType.setStoreTermVectors(true);\n    customType.setStoreTermVectorPositions(true);\n    customType.setStoreTermVectorOffsets(true);\n    doc.add(newField(\"content\", \"aaa\", customType));\n    writer.addDocument(doc);\n\n    // Make sure we don't have any leftover files in the\n    // directory:\n    writer.close();\n    TestIndexWriter.assertNoUnreferencedFiles(dir, \"some files were not deleted but should have been\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","132903c28af3aa6f67284b78de91c0f0a99488c2"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"f2c5f0cb44df114db4228c8f77861714b5cabaea":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","b21422ff1d1d56499dec481f193b402e5e8def5b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"132903c28af3aa6f67284b78de91c0f0a99488c2":["f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}