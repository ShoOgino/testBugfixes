{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    SegmentReader instance = readOnly ? new ReadOnlySegmentReader() : new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a493e6d0c3ad86bd55c0a1360d110142e948f2bd","date":1289406991,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85a883878c0af761245ab048babc63d099f835f3","date":1289553330,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int,CodecProvider).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  CodecProvider codecs)\n    throws CorruptIndexException, IOException {\n    if (codecs == null)  {\n      codecs = CodecProvider.getDefault();\n    }\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor, codecs);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe19cbe25754c715a0232f453039383119fc122c","date":1306110991,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae132b768aece5bf21cda14e2f17fba66eb6f7d6","date":1306128032,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","date":1306150983,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new CoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,boolean,int,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#get(boolean,Directory,SegmentInfo,int,boolean,int).mjava","sourceNew":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor,\n                                  IOContext context)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, context, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, context);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","sourceOld":"  /**\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public static SegmentReader get(boolean readOnly,\n                                  Directory dir,\n                                  SegmentInfo si,\n                                  int readBufferSize,\n                                  boolean doOpenStores,\n                                  int termInfosIndexDivisor)\n    throws CorruptIndexException, IOException {\n    \n    SegmentReader instance = new SegmentReader();\n    instance.readOnly = readOnly;\n    instance.si = si;\n    instance.readBufferSize = readBufferSize;\n\n    boolean success = false;\n\n    try {\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadLiveDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n      success = true;\n    } finally {\n\n      // With lock-less commits, it's entirely possible (and\n      // fine) to hit a FileNotFound exception above.  In\n      // this case, we want to explicitly close any subset\n      // of things that were opened so that we don't have to\n      // wait for a GC to do so.\n      if (!success) {\n        instance.doClose();\n      }\n    }\n    return instance;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","fe19cbe25754c715a0232f453039383119fc122c"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":["85a883878c0af761245ab048babc63d099f835f3","fe19cbe25754c715a0232f453039383119fc122c"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["fe19cbe25754c715a0232f453039383119fc122c"],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"85a883878c0af761245ab048babc63d099f835f3":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["fe19cbe25754c715a0232f453039383119fc122c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"fe19cbe25754c715a0232f453039383119fc122c":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae132b768aece5bf21cda14e2f17fba66eb6f7d6":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a":[],"a493e6d0c3ad86bd55c0a1360d110142e948f2bd":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","fe19cbe25754c715a0232f453039383119fc122c"],"85a883878c0af761245ab048babc63d099f835f3":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a493e6d0c3ad86bd55c0a1360d110142e948f2bd","85a883878c0af761245ab048babc63d099f835f3","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"fe19cbe25754c715a0232f453039383119fc122c":["ae132b768aece5bf21cda14e2f17fba66eb6f7d6","5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5c698c0cb88bac4bcd36a1b1001a0c6a2163ea2a","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}