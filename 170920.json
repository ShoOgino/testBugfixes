{"path":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(String).mjava","commits":[{"id":"a799d5c6eb6dd4c46e099b34640cc369f6db9155","date":1318737330,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected List<DetectedLanguage> detectLanguage(String content) {\n    if (content.trim().length() == 0) { // to be consistent with the tika impl?\n      log.debug(\"No input text to detect language from, returning empty list\");\n      return Collections.emptyList();\n    }\n    \n    try {\n      Detector detector = DetectorFactory.create();\n      detector.append(content);\n      ArrayList<Language> langlist = detector.getProbabilities();\n      ArrayList<DetectedLanguage> solrLangList = new ArrayList<DetectedLanguage>();\n      for (Language l: langlist) {\n        solrLangList.add(new DetectedLanguage(l.lang, l.prob));\n      }\n      return solrLangList;\n    } catch (LangDetectException e) {\n      log.debug(\"Could not determine language, returning empty list: \", e);\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(String).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(String).mjava","sourceNew":"  @Override\n  protected List<DetectedLanguage> detectLanguage(String content) {\n    if (content.trim().length() == 0) { // to be consistent with the tika impl?\n      log.debug(\"No input text to detect language from, returning empty list\");\n      return Collections.emptyList();\n    }\n    \n    try {\n      Detector detector = DetectorFactory.create();\n      detector.append(content);\n      ArrayList<Language> langlist = detector.getProbabilities();\n      ArrayList<DetectedLanguage> solrLangList = new ArrayList<>();\n      for (Language l: langlist) {\n        solrLangList.add(new DetectedLanguage(l.lang, l.prob));\n      }\n      return solrLangList;\n    } catch (LangDetectException e) {\n      log.debug(\"Could not determine language, returning empty list: \", e);\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected List<DetectedLanguage> detectLanguage(String content) {\n    if (content.trim().length() == 0) { // to be consistent with the tika impl?\n      log.debug(\"No input text to detect language from, returning empty list\");\n      return Collections.emptyList();\n    }\n    \n    try {\n      Detector detector = DetectorFactory.create();\n      detector.append(content);\n      ArrayList<Language> langlist = detector.getProbabilities();\n      ArrayList<DetectedLanguage> solrLangList = new ArrayList<DetectedLanguage>();\n      for (Language l: langlist) {\n        solrLangList.add(new DetectedLanguage(l.lang, l.prob));\n      }\n      return solrLangList;\n    } catch (LangDetectException e) {\n      log.debug(\"Could not determine language, returning empty list: \", e);\n      return Collections.emptyList();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ff1a276d1c94e9393032df34ad607eda09ee3a6","date":1417803750,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(SolrInputDocument).mjava","pathOld":"solr/contrib/langid/src/java/org/apache/solr/update/processor/LangDetectLanguageIdentifierUpdateProcessor#detectLanguage(String).mjava","sourceNew":"  @Override\n  protected List<DetectedLanguage> detectLanguage(SolrInputDocument doc) {\n    try {\n      Detector detector = DetectorFactory.create();\n      detector.setMaxTextLength(maxTotalChars);\n\n      for (String fieldName : inputFields) {\n        log.debug(\"Appending field \" + fieldName);\n        if (doc.containsKey(fieldName)) {\n          Collection<Object> fieldValues = doc.getFieldValues(fieldName);\n          if (fieldValues != null) {\n            for (Object content : fieldValues) {\n              if (content instanceof String) {\n                String stringContent = (String) content;\n                if (stringContent.length() > maxFieldValueChars) {\n                  detector.append(stringContent.substring(0, maxFieldValueChars));\n                } else {\n                  detector.append(stringContent);\n                }\n                detector.append(\" \");\n              } else {\n                log.warn(\"Field \" + fieldName + \" not a String value, not including in detection\");\n              }\n            }\n          }\n        }\n      }\n      ArrayList<Language> langlist = detector.getProbabilities();\n      ArrayList<DetectedLanguage> solrLangList = new ArrayList<>();\n      for (Language l: langlist) {\n        solrLangList.add(new DetectedLanguage(l.lang, l.prob));\n      }\n      return solrLangList;\n    } catch (LangDetectException e) {\n      log.debug(\"Could not determine language, returning empty list: \", e);\n      return Collections.emptyList();\n    }\n  }\n\n","sourceOld":"  @Override\n  protected List<DetectedLanguage> detectLanguage(String content) {\n    if (content.trim().length() == 0) { // to be consistent with the tika impl?\n      log.debug(\"No input text to detect language from, returning empty list\");\n      return Collections.emptyList();\n    }\n    \n    try {\n      Detector detector = DetectorFactory.create();\n      detector.append(content);\n      ArrayList<Language> langlist = detector.getProbabilities();\n      ArrayList<DetectedLanguage> solrLangList = new ArrayList<>();\n      for (Language l: langlist) {\n        solrLangList.add(new DetectedLanguage(l.lang, l.prob));\n      }\n      return solrLangList;\n    } catch (LangDetectException e) {\n      log.debug(\"Could not determine language, returning empty list: \", e);\n      return Collections.emptyList();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3ff1a276d1c94e9393032df34ad607eda09ee3a6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ff1a276d1c94e9393032df34ad607eda09ee3a6"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3ff1a276d1c94e9393032df34ad607eda09ee3a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a799d5c6eb6dd4c46e099b34640cc369f6db9155"],"a799d5c6eb6dd4c46e099b34640cc369f6db9155":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3ff1a276d1c94e9393032df34ad607eda09ee3a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}