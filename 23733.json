{"path":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","commits":[{"id":"e55782fb51a6e9789542818eb2161a3247f39ace","date":1489707707,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c03778630c4604270d88c148afb8c7de35b51d3c","date":1490280010,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","pathOld":"/dev/null","sourceNew":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4260b228cfff6ad78ac88d519f0f7746529c3c","date":1493136145,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","sourceNew":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n  }\n\n","sourceOld":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestSolrQueryParser#testSplitOnWhitespace_Comments().mjava","sourceNew":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=false\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n  }\n\n","sourceOld":"  public void testSplitOnWhitespace_Comments() throws Exception {\n    // The \"syn\" field has synonyms loaded from synonyms.txt\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wifi\", \"sow\", \"true\") // retrieve the single document containing literal \"wifi\"\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi fi /* bar */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \" /* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"false\") // trigger the \"wi fi => wifi\" synonym\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\", \"sow\", \"true\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=false}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==1\"\n        , \"/response/docs/[0]/id=='20'\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}wi /* foo */ /* bar */ fi\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi fi /* bar */\")\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene sow=true}/* foo */ wi /* bar */ fi /* baz */\")\n        , \"/response/numFound==0\"\n    );\n\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}wi /* foo */ /* bar */ fi\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi fi /* bar */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n    assertJQ(req(\"df\", \"syn\", \"q\", \"{!lucene}/* foo */ wi /* bar */ fi /* baz */\") // default sow=true\n        , \"/response/numFound==0\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["c03778630c4604270d88c148afb8c7de35b51d3c","7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c03778630c4604270d88c148afb8c7de35b51d3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e55782fb51a6e9789542818eb2161a3247f39ace":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["e55782fb51a6e9789542818eb2161a3247f39ace"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c03778630c4604270d88c148afb8c7de35b51d3c","e55782fb51a6e9789542818eb2161a3247f39ace"],"c03778630c4604270d88c148afb8c7de35b51d3c":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"e55782fb51a6e9789542818eb2161a3247f39ace":["7a4260b228cfff6ad78ac88d519f0f7746529c3c"],"7a4260b228cfff6ad78ac88d519f0f7746529c3c":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}