{"path":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"796d3633cb23320001cb91b7036b0621b009f6f0","date":1323995113,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, null);\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, \"lucene\");\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":["f8f944ac3fe3f9d40d825177507fb381d2b106b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e","date":1337006761,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n\n        if (fromIndex != null) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        QParser fromQueryParser = subQuery(v, null);\n        Query fromQuery = fromQueryParser.getQuery();\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":["8563a28e2d7edf4dd73a4148584ac67f2e84cf7a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8563a28e2d7edf4dd73a4148584ac67f2e84cf7a","date":1337271838,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n\n        if (fromIndex != null) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n\n        if (fromIndex != null) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da22fc4f0d847980f460da30f3b68afbf2249d70","date":1422932846,"type":3,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Cross-core join: no such core \" + fromIndex);\n          }\n\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd","date":1438089844,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      @Override\n      public Query parse() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"118ba480e87dfe453a6b47a320429be33f1d1653","date":1440320558,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        String fromField = getParam(\"from\");\n        String fromIndex = getParam(\"fromIndex\");\n        String toField = getParam(\"to\");\n        String v = localParams.get(\"v\");\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          if (container.isZooKeeperAware()) {\n            ZkController zkController = container.getZkController();\n            if (!zkController.getClusterState().hasCollection(fromIndex)) {\n              // collection not found ... but it might be an alias?\n              String resolved = null;\n              Aliases aliases = zkController.getZkStateReader().getAliases();\n              if (aliases != null) {\n                Map<String, String> collectionAliases = aliases.getCollectionAliasMap();\n                resolved = (collectionAliases != null) ? collectionAliases.get(fromIndex) : null;\n                if (resolved != null) {\n                  // ok, was an alias, but if the alias points to multiple collections, then we don't support that yet\n                  if (resolved.split(\",\").length > 1)\n                    throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                        \"SolrCloud join: Collection alias '\" + fromIndex +\n                            \"' maps to multiple collections (\"+resolved+\n                            \"), which is not currently supported for joins.\");\n                }\n              }\n\n              if (resolved == null)\n                throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                  \"SolrCloud join: Collection '\" + fromIndex + \"' not found!\");\n\n              // ok, resolved to an alias\n              fromIndex = resolved;\n            }\n\n            // the fromIndex is a local replica for a single-sharded collection with replicas\n            // across all nodes that have replicas for the collection we're joining with\n            fromIndex = findLocalReplicaForFromIndex(zkController, fromIndex);\n          }\n\n          final SolrCore fromCore = container.getCore(fromIndex);\n          if (fromCore == null)\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + fromIndex);\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, fromIndex, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","date":1470751445,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8bca25eefa1f2205e2b0ef713701dc3a0fecd702","date":1470810578,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, \"lucene\", otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790316f977e4507e4a1c7fc3d33104a568f7fa35","date":1479872665,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreDescriptor().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83b987bcc75aaccfc3495fcc98472a4402cae7d1","date":1580487661,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n\n      @Override\n      public Query parse() throws SyntaxError {\n        if (localParams != null && localParams.get(METHOD) != null) {\n          // TODO Make sure 'method' is valid value here and give users a nice error\n          final Method explicitMethod = Method.valueOf(localParams.get(METHOD));\n          return explicitMethod.makeFilter(this);\n        }\n\n        // Legacy join behavior before introduction of SOLR-13892\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null) {\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        } else {\n          return Method.index.makeFilter(this);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      \n      @Override\n      public Query parse() throws SyntaxError {\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null){\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        }else{\n          return parseJoin();\n        }\n      }\n      \n      Query parseJoin() throws SyntaxError {\n        final String fromField = getParam(\"from\");\n        final String fromIndex = getParam(\"fromIndex\");\n        final String toField = getParam(\"to\");\n        final String v = localParams.get(\"v\");\n        final String coreName;\n\n        Query fromQuery;\n        long fromCoreOpenTime = 0;\n\n        if (fromIndex != null && !fromIndex.equals(req.getCore().getCoreDescriptor().getName()) ) {\n          CoreContainer container = req.getCore().getCoreContainer();\n\n          // if in SolrCloud mode, fromIndex should be the name of a single-sharded collection\n          coreName = ScoreJoinQParserPlugin.getCoreName(fromIndex, container);\n\n          final SolrCore fromCore = container.getCore(coreName);\n          if (fromCore == null) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Cross-core join: no such core \" + coreName);\n          }\n\n          RefCounted<SolrIndexSearcher> fromHolder = null;\n          LocalSolrQueryRequest otherReq = new LocalSolrQueryRequest(fromCore, params);\n          try {\n            QParser parser = QParser.getParser(v, otherReq);\n            fromQuery = parser.getQuery();\n            fromHolder = fromCore.getRegisteredSearcher();\n            if (fromHolder != null) fromCoreOpenTime = fromHolder.get().getOpenNanoTime();\n          } finally {\n            otherReq.close();\n            fromCore.close();\n            if (fromHolder != null) fromHolder.decref();\n          }\n        } else {\n          coreName = null;\n          QParser fromQueryParser = subQuery(v, null);\n          fromQueryParser.setIsFilter(true);\n          fromQuery = fromQueryParser.getQuery();\n        }\n\n        JoinQuery jq = new JoinQuery(fromField, toField, coreName == null ? fromIndex : coreName, fromQuery);\n        jq.fromCoreOpenTime = fromCoreOpenTime;\n        return jq;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e62a54d8f17b7c7b5d395bad453c470cf4039a6f","date":1593091560,"type":3,"author":"Dan Fox","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/JoinQParserPlugin#createParser(String,SolrParams,SolrParams,SolrQueryRequest).mjava","sourceNew":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    final JoinQParserPlugin plugin = this;\n\n    return new QParser(qstr, localParams, params, req) {\n\n      @Override\n      public Query parse() throws SyntaxError {\n        if (localParams != null && localParams.get(METHOD) != null) {\n          // TODO Make sure 'method' is valid value here and give users a nice error\n          final Method explicitMethod = Method.valueOf(localParams.get(METHOD));\n          return explicitMethod.makeFilter(this, plugin);\n        }\n\n        // Legacy join behavior before introduction of SOLR-13892\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null) {\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        } else {\n          return Method.index.makeFilter(this, plugin);\n        }\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n\n      @Override\n      public Query parse() throws SyntaxError {\n        if (localParams != null && localParams.get(METHOD) != null) {\n          // TODO Make sure 'method' is valid value here and give users a nice error\n          final Method explicitMethod = Method.valueOf(localParams.get(METHOD));\n          return explicitMethod.makeFilter(this);\n        }\n\n        // Legacy join behavior before introduction of SOLR-13892\n        if(localParams!=null && localParams.get(ScoreJoinQParserPlugin.SCORE)!=null) {\n          return new ScoreJoinQParserPlugin().createParser(qstr, localParams, params, req).parse();\n        } else {\n          return Method.index.makeFilter(this);\n        }\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["790316f977e4507e4a1c7fc3d33104a568f7fa35"],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"118ba480e87dfe453a6b47a320429be33f1d1653":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"790316f977e4507e4a1c7fc3d33104a568f7fa35":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"8563a28e2d7edf4dd73a4148584ac67f2e84cf7a":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"796d3633cb23320001cb91b7036b0621b009f6f0":["c26f00b574427b55127e869b935845554afde1fa"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["118ba480e87dfe453a6b47a320429be33f1d1653","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f"],"da22fc4f0d847980f460da30f3b68afbf2249d70":["7530de27b87b961b51f01bd1299b7004d46e8823"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["da22fc4f0d847980f460da30f3b68afbf2249d70"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e","8563a28e2d7edf4dd73a4148584ac67f2e84cf7a"],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"3cdb67100dc016748799a77218aa409478372d79":["8563a28e2d7edf4dd73a4148584ac67f2e84cf7a"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["796d3633cb23320001cb91b7036b0621b009f6f0"],"407687e67faf6e1f02a211ca078d8e3eed631027":["8563a28e2d7edf4dd73a4148584ac67f2e84cf7a","3cdb67100dc016748799a77218aa409478372d79"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["118ba480e87dfe453a6b47a320429be33f1d1653"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["790316f977e4507e4a1c7fc3d33104a568f7fa35"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["118ba480e87dfe453a6b47a320429be33f1d1653","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","790316f977e4507e4a1c7fc3d33104a568f7fa35"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"7530de27b87b961b51f01bd1299b7004d46e8823":["3cdb67100dc016748799a77218aa409478372d79"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["118ba480e87dfe453a6b47a320429be33f1d1653","8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"c26f00b574427b55127e869b935845554afde1fa":["796d3633cb23320001cb91b7036b0621b009f6f0"],"118ba480e87dfe453a6b47a320429be33f1d1653":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702","cc5ee54a993d26579e3fe1f8f2a696b46b61c48f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"790316f977e4507e4a1c7fc3d33104a568f7fa35":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","727bb765ff2542275f6d31f67be18d7104bae148"],"8563a28e2d7edf4dd73a4148584ac67f2e84cf7a":["ef0d8a69209261514c5739c770bba706c2308450","3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"796d3633cb23320001cb91b7036b0621b009f6f0":["83185943f2dc5f3a0bf6c461c2cbcc284e756d2e"],"8bca25eefa1f2205e2b0ef713701dc3a0fecd702":["790316f977e4507e4a1c7fc3d33104a568f7fa35","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"da22fc4f0d847980f460da30f3b68afbf2249d70":["6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"6eecfe8d494cb2e3ead94e9cdb9381bfe4993dcd":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"ef0d8a69209261514c5739c770bba706c2308450":[],"83b987bcc75aaccfc3495fcc98472a4402cae7d1":["e62a54d8f17b7c7b5d395bad453c470cf4039a6f"],"3cdb67100dc016748799a77218aa409478372d79":["407687e67faf6e1f02a211ca078d8e3eed631027","7530de27b87b961b51f01bd1299b7004d46e8823"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"83185943f2dc5f3a0bf6c461c2cbcc284e756d2e":["8563a28e2d7edf4dd73a4148584ac67f2e84cf7a","ef0d8a69209261514c5739c770bba706c2308450"],"cc5ee54a993d26579e3fe1f8f2a696b46b61c48f":["8bca25eefa1f2205e2b0ef713701dc3a0fecd702"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["83b987bcc75aaccfc3495fcc98472a4402cae7d1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["118ba480e87dfe453a6b47a320429be33f1d1653"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","da22fc4f0d847980f460da30f3b68afbf2249d70"],"e62a54d8f17b7c7b5d395bad453c470cf4039a6f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ef0d8a69209261514c5739c770bba706c2308450","727bb765ff2542275f6d31f67be18d7104bae148","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}