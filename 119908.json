{"path":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","commits":[{"id":"183f03e816db8a4c3db0ede28b1679d50aee7f52","date":1405935700,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","pathOld":"/dev/null","sourceNew":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newTextField(\"field\", term + \" \" + term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","sourceNew":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newTextField(\"field\", term + \" \" + term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newTextField(\"field\", term + \" \" + term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator(null);\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"165c905a42bedc7c7d1acb37b177498306b7e866","date":1518704038,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","sourceNew":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      doc.add(newStringField(\"field\", term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newTextField(\"field\", term + \" \" + term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04e775de416dd2d8067b10db1c8af975a1d5017e","date":1539906554,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/blocktreeords/TestOrdsBlockTree#testSeekCeilNotFound().mjava","sourceNew":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      doc.add(newStringField(\"field\", term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiTerms.getTerms(r, \"field\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSeekCeilNotFound() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    // Get empty string in there!\n    doc.add(newStringField(\"field\", \"\", Field.Store.NO));\n    w.addDocument(doc);\n    \n    for(int i=0;i<36;i++) {\n      doc = new Document();\n      String term = \"\" + (char) (97+i);\n      String term2 = \"a\" + (char) (97+i);\n      doc.add(newStringField(\"field\", term, Field.Store.NO));\n      doc.add(newStringField(\"field\", term2, Field.Store.NO));\n      w.addDocument(doc);\n    }\n\n    w.forceMerge(1);\n    IndexReader r = w.getReader();\n    TermsEnum te = MultiFields.getTerms(r, \"field\").iterator();\n    assertEquals(TermsEnum.SeekStatus.NOT_FOUND, te.seekCeil(new BytesRef(new byte[] {0x22})));\n    assertEquals(\"a\", te.term().utf8ToString());\n    assertEquals(1L, te.ord());\n    r.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["183f03e816db8a4c3db0ede28b1679d50aee7f52"],"165c905a42bedc7c7d1acb37b177498306b7e866":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"183f03e816db8a4c3db0ede28b1679d50aee7f52":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"04e775de416dd2d8067b10db1c8af975a1d5017e":["165c905a42bedc7c7d1acb37b177498306b7e866"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["04e775de416dd2d8067b10db1c8af975a1d5017e"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["165c905a42bedc7c7d1acb37b177498306b7e866"],"165c905a42bedc7c7d1acb37b177498306b7e866":["04e775de416dd2d8067b10db1c8af975a1d5017e"],"183f03e816db8a4c3db0ede28b1679d50aee7f52":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["183f03e816db8a4c3db0ede28b1679d50aee7f52"],"04e775de416dd2d8067b10db1c8af975a1d5017e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}