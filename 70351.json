{"path":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalValueSourceStats(DocSet).mjava","commits":[{"id":"283ff02f401ec3e7a2fad73643970f052383fb0c","date":1411407953,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalValueSourceStats(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField[StatsComponent]#getFieldCacheStats(DocSet).mjava","sourceNew":"  private StatsValues computeLocalValueSourceStats(DocSet base) throws IOException {\n\n    IndexSchema schema = searcher.getSchema();\n\n    final StatsValues allstats = StatsValuesFactory.createStatsValues(this);\n\n    List<FieldFacetStats> facetStats = new ArrayList<>();\n    for( String facetField : facets ) {\n      SchemaField fsf = schema.getField(facetField);\n\n      if ( fsf.multiValued()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Stats can only facet on single-valued fields, not: \" + facetField );\n      }\n\n      facetStats.add(new FieldFacetStats(searcher, fsf, this));\n    }\n\n    final Iterator<AtomicReaderContext> ctxIt = searcher.getIndexReader().leaves().iterator();\n    AtomicReaderContext ctx = null;\n    for (DocIterator docsIt = base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc()) {\n        // advance\n        do {\n          ctx = ctxIt.next();\n        } while (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc());\n        assert doc >= ctx.docBase;\n\n        // propagate the context among accumulators.\n        allstats.setNextReader(ctx);\n        for (FieldFacetStats f : facetStats) {\n          f.setNextReader(ctx);\n        }\n      }\n\n      // accumulate\n      allstats.accumulate(doc - ctx.docBase);\n      for (FieldFacetStats f : facetStats) {\n        f.facet(doc - ctx.docBase);\n      }\n    }\n\n    for (FieldFacetStats f : facetStats) {\n      allstats.addFacet(f.name, f.facetStatsValues);\n    }\n    return allstats;\n  }\n\n","sourceOld":"  private StatsValues getFieldCacheStats(DocSet base) throws IOException {\n    IndexSchema schema = searcher.getSchema();\n    final StatsValues allstats = StatsValuesFactory.createStatsValues(sf, calcDistinct);\n\n    List<FieldFacetStats> facetStats = new ArrayList<>();\n    for( String facetField : facets ) {\n      SchemaField fsf = schema.getField(facetField);\n\n      if ( fsf.multiValued()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Stats can only facet on single-valued fields, not: \" + facetField );\n      }\n\n      facetStats.add(new FieldFacetStats(searcher, facetField, sf, fsf, calcDistinct));\n    }\n\n    final Iterator<AtomicReaderContext> ctxIt = searcher.getIndexReader().leaves().iterator();\n    AtomicReaderContext ctx = null;\n    for (DocIterator docsIt = base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc()) {\n        // advance\n        do {\n          ctx = ctxIt.next();\n        } while (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc());\n        assert doc >= ctx.docBase;\n\n        // propagate the context among accumulators.\n        allstats.setNextReader(ctx);\n        for (FieldFacetStats f : facetStats) {\n          f.setNextReader(ctx);\n        }\n      }\n\n      // accumulate\n      allstats.accumulate(doc - ctx.docBase);\n      for (FieldFacetStats f : facetStats) {\n        f.facet(doc - ctx.docBase);\n      }\n    }\n\n    for (FieldFacetStats f : facetStats) {\n      allstats.addFacet(f.name, f.facetStatsValues);\n    }\n    return allstats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalValueSourceStats(DocSet).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/StatsField#computeLocalValueSourceStats(DocSet).mjava","sourceNew":"  private StatsValues computeLocalValueSourceStats(DocSet base) throws IOException {\n\n    IndexSchema schema = searcher.getSchema();\n\n    final StatsValues allstats = StatsValuesFactory.createStatsValues(this);\n\n    List<FieldFacetStats> facetStats = new ArrayList<>();\n    for( String facetField : facets ) {\n      SchemaField fsf = schema.getField(facetField);\n\n      if ( fsf.multiValued()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Stats can only facet on single-valued fields, not: \" + facetField );\n      }\n\n      facetStats.add(new FieldFacetStats(searcher, fsf, this));\n    }\n\n    final Iterator<LeafReaderContext> ctxIt = searcher.getIndexReader().leaves().iterator();\n    LeafReaderContext ctx = null;\n    for (DocIterator docsIt = base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc()) {\n        // advance\n        do {\n          ctx = ctxIt.next();\n        } while (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc());\n        assert doc >= ctx.docBase;\n\n        // propagate the context among accumulators.\n        allstats.setNextReader(ctx);\n        for (FieldFacetStats f : facetStats) {\n          f.setNextReader(ctx);\n        }\n      }\n\n      // accumulate\n      allstats.accumulate(doc - ctx.docBase);\n      for (FieldFacetStats f : facetStats) {\n        f.facet(doc - ctx.docBase);\n      }\n    }\n\n    for (FieldFacetStats f : facetStats) {\n      allstats.addFacet(f.name, f.facetStatsValues);\n    }\n    return allstats;\n  }\n\n","sourceOld":"  private StatsValues computeLocalValueSourceStats(DocSet base) throws IOException {\n\n    IndexSchema schema = searcher.getSchema();\n\n    final StatsValues allstats = StatsValuesFactory.createStatsValues(this);\n\n    List<FieldFacetStats> facetStats = new ArrayList<>();\n    for( String facetField : facets ) {\n      SchemaField fsf = schema.getField(facetField);\n\n      if ( fsf.multiValued()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Stats can only facet on single-valued fields, not: \" + facetField );\n      }\n\n      facetStats.add(new FieldFacetStats(searcher, fsf, this));\n    }\n\n    final Iterator<AtomicReaderContext> ctxIt = searcher.getIndexReader().leaves().iterator();\n    AtomicReaderContext ctx = null;\n    for (DocIterator docsIt = base.iterator(); docsIt.hasNext(); ) {\n      final int doc = docsIt.nextDoc();\n      if (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc()) {\n        // advance\n        do {\n          ctx = ctxIt.next();\n        } while (ctx == null || doc >= ctx.docBase + ctx.reader().maxDoc());\n        assert doc >= ctx.docBase;\n\n        // propagate the context among accumulators.\n        allstats.setNextReader(ctx);\n        for (FieldFacetStats f : facetStats) {\n          f.setNextReader(ctx);\n        }\n      }\n\n      // accumulate\n      allstats.accumulate(doc - ctx.docBase);\n      for (FieldFacetStats f : facetStats) {\n        f.facet(doc - ctx.docBase);\n      }\n    }\n\n    for (FieldFacetStats f : facetStats) {\n      allstats.addFacet(f.name, f.facetStatsValues);\n    }\n    return allstats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"283ff02f401ec3e7a2fad73643970f052383fb0c":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["283ff02f401ec3e7a2fad73643970f052383fb0c"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}