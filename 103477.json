{"path":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4","date":1413466868,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/util/OpenBitSetIterator#advance(int).mjava","sourceNew":null,"sourceOld":"  @Override\n  public int advance(int target) {\n    indexArray = 0;\n    i = target >> 6;\n    if (i >= words) {\n      word = 0; // setup so next() will also return -1\n      return curDocId = NO_MORE_DOCS;\n    }\n    wordShift = target & 0x3f;\n    word = arr[i] >>> wordShift;\n    if (word != 0) {\n      wordShift--; // compensate for 1 based arrIndex\n    } else {\n      while (word == 0) {\n        if (++i >= words) {\n          return curDocId = NO_MORE_DOCS;\n        }\n        word = arr[i];\n      }\n      wordShift = -1;\n    }\n\n    shift();\n\n    int bitIndex = (indexArray & 0x0f) + wordShift;\n    indexArray >>>= 4;\n    // should i<<6 be cached as a separate variable?\n    // it would only save one cycle in the best circumstances.\n    return curDocId = (i<<6) + bitIndex;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"]},"commit2Childs":{"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","a3d7af8c4d849bdb50dbc2e78e88495a22c008f4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a3d7af8c4d849bdb50dbc2e78e88495a22c008f4":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0a22eafe3f72a4c2945eaad9547e6c78816978f4","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}