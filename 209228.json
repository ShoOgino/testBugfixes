{"path":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","commits":[{"id":"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","date":1400613895,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        // TODO: this scores the required clauses (which is stupid). but we always did this.\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        return new ReqExclScorer(main, new DisjunctionSumScorer(this, \n                                                                prohibited.toArray(new Scorer[prohibited.size()]), \n                                                                coords));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2cdc8a177cc608482424e349819a116a88f53152","date":1400638515,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        // TODO: don't score here.\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","sourceOld":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        // TODO: this scores the required clauses (which is stupid). but we always did this.\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        return new ReqExclScorer(main, new DisjunctionSumScorer(this, \n                                                                prohibited.toArray(new Scorer[prohibited.size()]), \n                                                                coords));\n      }\n    }\n\n","bugFix":null,"bugIntro":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d","date":1400696679,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        // TODO: don't score here.\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"/dev/null","sourceNew":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        // TODO: don't score here.\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a74e723ad6f1491f36039f9fe6af13a530f8135d","date":1400774466,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","sourceOld":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        // TODO: don't score here.\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","bugFix":["2cdc8a177cc608482424e349819a116a88f53152"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18a03f140cbd3f78694787c9f98cf452aab7b7f","date":1423241474,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/BooleanQuery.BooleanWeight#excl(Scorer,List[Scorer]).mjava","sourceNew":null,"sourceOld":"    private Scorer excl(Scorer main, List<Scorer> prohibited) throws IOException {\n      if (prohibited.isEmpty()) {\n        return main;\n      } else if (prohibited.size() == 1) {\n        return new ReqExclScorer(main, prohibited.get(0));\n      } else {\n        float coords[] = new float[prohibited.size()+1];\n        Arrays.fill(coords, 1F);\n        return new ReqExclScorer(main, \n                                 new DisjunctionSumScorer(this, \n                                                          prohibited.toArray(new Scorer[prohibited.size()]), \n                                                          coords));\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a74e723ad6f1491f36039f9fe6af13a530f8135d":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2cdc8a177cc608482424e349819a116a88f53152":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["a74e723ad6f1491f36039f9fe6af13a530f8135d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2cdc8a177cc608482424e349819a116a88f53152"]},"commit2Childs":{"a74e723ad6f1491f36039f9fe6af13a530f8135d":["a18a03f140cbd3f78694787c9f98cf452aab7b7f"],"d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240":["2cdc8a177cc608482424e349819a116a88f53152"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9c2895bfaa94bdbd1fd5a1b1522f6310c91d240","b7605579001505896d48b07160075a5c8b8e128e","38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"2cdc8a177cc608482424e349819a116a88f53152":["38fa8e2c4105a7dd15d7e9260afa3b41a560d51d"],"b7605579001505896d48b07160075a5c8b8e128e":[],"a18a03f140cbd3f78694787c9f98cf452aab7b7f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"38fa8e2c4105a7dd15d7e9260afa3b41a560d51d":["a74e723ad6f1491f36039f9fe6af13a530f8135d","b7605579001505896d48b07160075a5c8b8e128e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}