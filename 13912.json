{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"2e18c86f811939bfa8cd24046c96ed026f2e9b34","date":1393893071,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f5a7a379c47cb10a09ea1ff0b2460819a73c5988","date":1394142503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, null);\n      if (scorer == null) {\n        return null;\n      }\n\n      if (scorerFirst) {\n        return new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acf00221f44c5f08ccea014f2492b53af15ecd66","date":1394568293,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,boolean,boolean,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, null);\n      if (scorer == null) {\n        return null;\n      }\n\n      if (scorerFirst) {\n        return new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        boolean scoreDocsInOrder, boolean topScorer, Weight weight,\n        DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, true, false, null);\n      if (scorerFirst) {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.LeapFrogFilterStrategy#filteredScorer(AtomicReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer filteredScorer(AtomicReaderContext context,\n        Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }\n      // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n      final Scorer scorer = weight.scorer(context, null);\n      if (scorer == null) {\n        return null;\n      }\n\n      if (scorerFirst) {\n        return new LeapFrogScorer(weight, scorer, filterIter, scorer);  \n      } else {\n        return new LeapFrogScorer(weight, filterIter, scorer, scorer);  \n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["2e18c86f811939bfa8cd24046c96ed026f2e9b34"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"acf00221f44c5f08ccea014f2492b53af15ecd66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"2e18c86f811939bfa8cd24046c96ed026f2e9b34":["f5a7a379c47cb10a09ea1ff0b2460819a73c5988"],"f5a7a379c47cb10a09ea1ff0b2460819a73c5988":["acf00221f44c5f08ccea014f2492b53af15ecd66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2e18c86f811939bfa8cd24046c96ed026f2e9b34","acf00221f44c5f08ccea014f2492b53af15ecd66"],"acf00221f44c5f08ccea014f2492b53af15ecd66":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}