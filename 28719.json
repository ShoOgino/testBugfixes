{"path":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter#incrementToken().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter#incrementToken().mjava","pathOld":"modules/analysis/phonetic/src/java/org/apache/lucene/analysis/phonetic/PhoneticFilter#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if( save != null ) {\n      // clearAttributes();  // not currently necessary\n      restoreState(save);\n      save = null;\n      return true;\n    }\n\n    if (!input.incrementToken()) return false;\n\n    // pass through zero-length terms\n    if (termAtt.length() == 0) return true;\n\n    String value = termAtt.toString();\n    String phonetic = null;\n    try {\n     String v = encoder.encode(value).toString();\n     if (v.length() > 0 && !value.equals(v)) phonetic = v;\n    } catch (Exception ignored) {} // just use the direct text\n\n    if (phonetic == null) return true;\n\n    if (!inject) {\n      // just modify this token\n      termAtt.setEmpty().append(phonetic);\n      return true;\n    }\n\n    // We need to return both the original and the phonetic tokens.\n    // to avoid a orig=captureState() change_to_phonetic() saved=captureState()  restoreState(orig)\n    // we return the phonetic alternative first\n\n    int origOffset = posAtt.getPositionIncrement();\n    posAtt.setPositionIncrement(0);\n    save = captureState();\n\n    posAtt.setPositionIncrement(origOffset);\n    termAtt.setEmpty().append(phonetic);\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}