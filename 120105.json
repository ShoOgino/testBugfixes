{"path":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a121769840c8d93ec99800c02d0611ade27780a","date":1302913529,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":["9ccf1a425d8699b7df67dc5e22765fcc448e8f44","0a12d3c6475f1b99b086e4ca6b9ba34e65081859"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n \n    _httpClient = (client == null) ? new HttpClient(new MultiThreadedHttpConnectionManager()) : client;\n\n    if (client == null) {\n      // set some better defaults if we created a new connection manager and client\n      \n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/impl/CommonsHttpSolrServer#CommonsHttpSolrServer(URL,HttpClient,ResponseParser,boolean).mjava","sourceNew":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","sourceOld":"  /**\n   * @see #useMultiPartPost\n   * @see #_parser\n   */\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client, ResponseParser parser, boolean useMultiPartPost) {\n    _baseURL = baseURL.toExternalForm();\n    if( _baseURL.endsWith( \"/\" ) ) {\n      _baseURL = _baseURL.substring( 0, _baseURL.length()-1 );\n    }\n    if( _baseURL.indexOf( '?' ) >=0 ) {\n      throw new RuntimeException( \"Invalid base url for solrj.  The base URL must not contain parameters: \"+_baseURL );\n    }\n\n    if (client == null) {\n      _httpClient = new HttpClient(new MultiThreadedHttpConnectionManager()) ;\n\n      // prevent retries  (note: this didn't work when set on mgr.. needed to be set on client)\n      DefaultHttpMethodRetryHandler retryhandler = new DefaultHttpMethodRetryHandler(0, false);\n      _httpClient.getParams().setParameter(HttpMethodParams.RETRY_HANDLER, retryhandler);\n\n      // set some better defaults if we created a new connection manager and client\n\n      // increase the default connections\n      this.setDefaultMaxConnectionsPerHost( 32 );  // 2\n      this.setMaxTotalConnections( 128 ); // 20\n    } else {\n      _httpClient = client;\n    }\n\n    _parser = parser;\n    \n    this.useMultiPartPost = useMultiPartPost;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"c26f00b574427b55127e869b935845554afde1fa":["3a121769840c8d93ec99800c02d0611ade27780a","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1da8d55113b689b06716246649de6f62430f15c0","3a121769840c8d93ec99800c02d0611ade27780a"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["1da8d55113b689b06716246649de6f62430f15c0","3a121769840c8d93ec99800c02d0611ade27780a"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1da8d55113b689b06716246649de6f62430f15c0","3a121769840c8d93ec99800c02d0611ade27780a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3a121769840c8d93ec99800c02d0611ade27780a":["1da8d55113b689b06716246649de6f62430f15c0"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["3a121769840c8d93ec99800c02d0611ade27780a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"1da8d55113b689b06716246649de6f62430f15c0":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","3a121769840c8d93ec99800c02d0611ade27780a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a3776dccca01c11e7046323cfad46a3b4a471233":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3a121769840c8d93ec99800c02d0611ade27780a":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a3776dccca01c11e7046323cfad46a3b4a471233","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","d493718201f0d0c54c773fb323d87bbd2fbffe41","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}