{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","commits":[{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = GeoTestUtil.nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = GeoTestUtil.nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe","date":1459623422,"type":3,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = GeoTestUtil.nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = GeoTestUtil.nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = GeoTestUtil.nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"86979a945891cffd49f9634fac5d16ebfe47c541","date":1459704804,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/geo/TestPolygon#testBoundingBoxEdgeCases().mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon#testBoundingBoxEdgeCases().mjava","sourceNew":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void testBoundingBoxEdgeCases() throws Exception {\n    for (int i = 0; i < 100; i++) {\n      Polygon polygon = nextPolygon();\n      \n      for (int j = 0; j < 100; j++) {\n        double latitude = nextLatitudeAround(polygon.minLat, polygon.maxLat);\n        double longitude = nextLongitudeAround(polygon.minLon, polygon.maxLon);\n        // if the point is within poly, then it should be in our bounding box\n        if (polygon.contains(latitude, longitude)) {\n          assertTrue(latitude >= polygon.minLat && latitude <= polygon.maxLat);\n          assertTrue(longitude >= polygon.minLon && longitude <= polygon.maxLon);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"86979a945891cffd49f9634fac5d16ebfe47c541":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["86979a945891cffd49f9634fac5d16ebfe47c541"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["546f71f5b1e19230d6e7e59f117d08dbcf59fbfe"],"86979a945891cffd49f9634fac5d16ebfe47c541":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"546f71f5b1e19230d6e7e59f117d08dbcf59fbfe":["86979a945891cffd49f9634fac5d16ebfe47c541"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}