{"path":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","commits":[{"id":"86658da8ce1e761bc0f5a05cf8795d1f78c388e2","date":1365796110,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#setUp().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = 1000;\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.shutdown();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new DefaultSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlyLeafReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlySegmentReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":["2e327741cef719817558806865704ff0864d12fd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"02e175abd2c4c1611c5a9647486ae8ba249a94c1","date":1468327116,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlyLeafReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlyLeafReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlyLeafReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity());\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    final int numDocs = atLeast(300);\n    for (int i = 0; i < numDocs; i++) {\n      Document doc = new Document();\n      \n      addSome(doc, alwaysTerms);\n      \n      if (random().nextInt(100) < 90) {\n        addSome(doc, commonTerms);\n      }\n      if (random().nextInt(100) < 50) {\n        addSome(doc, mediumTerms);\n      }\n      if (random().nextInt(100) < 10) {\n        addSome(doc, rareTerms);\n      }\n      iw.addDocument(doc);\n    }\n    iw.forceMerge(1);\n    iw.close();\n    r = DirectoryReader.open(dir);\n    reader = getOnlyLeafReader(r);\n    searcher = new IndexSearcher(reader);\n    searcher.setSimilarity(new ClassicSimilarity() {\n      @Override\n      public float queryNorm(float sumOfSquaredWeights) {\n        return 1; // we disable queryNorm, both for debugging and ease of impl\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["02e175abd2c4c1611c5a9647486ae8ba249a94c1"],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["02e175abd2c4c1611c5a9647486ae8ba249a94c1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86658da8ce1e761bc0f5a05cf8795d1f78c388e2"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"02e175abd2c4c1611c5a9647486ae8ba249a94c1":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"86658da8ce1e761bc0f5a05cf8795d1f78c388e2":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}