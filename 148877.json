{"path":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cdb67100dc016748799a77218aa409478372d79","date":1353699950,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (ParseException e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr,\n                                                       rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n      \n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n        \n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr, rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n\n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n\n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/FacetComponent.FacetBase#FacetBase(ResponseBuilder,String,String).mjava","sourceNew":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr,\n                                                       rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n      \n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n        \n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n\n        String tagStr = localParams.get(CommonParams.TAG);\n        this.tags = tagStr == null ? Collections.<String>emptyList() : StrUtils.splitSmart(tagStr,',');\n\n        String threadStr = localParams.get(CommonParams.THREADS);\n        this.threadCount = threadStr != null ? Integer.parseInt(threadStr) : -1;\n\n        String excludeStr = localParams.get(CommonParams.EXCLUDE);\n        if (StringUtils.isEmpty(excludeStr))  {\n          this.excludeTags = Collections.emptyList();\n        } else {\n          this.excludeTags = StrUtils.splitSmart(excludeStr,',');\n        }\n      }\n    }\n\n","sourceOld":"    public FacetBase(ResponseBuilder rb, String facetType, String facetStr) {\n      this.facetType = facetType;\n      this.facetStr = facetStr;\n      try {\n        this.localParams = QueryParsing.getLocalParams(facetStr,\n                                                       rb.req.getParams());\n      } catch (SyntaxError e) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, e);\n      }\n      this.facetOn = facetStr;\n      this.key = facetStr;\n      \n      if (localParams != null) {\n        // remove local params unless it's a query\n        if (!facetType.equals(FacetParams.FACET_QUERY)) {\n          facetOn = localParams.get(CommonParams.VALUE);\n          key = facetOn;\n        }\n        \n        key = localParams.get(CommonParams.OUTPUT_KEY, key);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["3cdb67100dc016748799a77218aa409478372d79"],"3cdb67100dc016748799a77218aa409478372d79":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["c26f00b574427b55127e869b935845554afde1fa","3cdb67100dc016748799a77218aa409478372d79"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"92751ba9273251eab6a2e379ec42a1697a32ff96":["22d0a81a05eba47d5e18976f17d88306b218cc22"],"3cdb67100dc016748799a77218aa409478372d79":["92751ba9273251eab6a2e379ec42a1697a32ff96","407687e67faf6e1f02a211ca078d8e3eed631027"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["3cdb67100dc016748799a77218aa409478372d79","407687e67faf6e1f02a211ca078d8e3eed631027"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["407687e67faf6e1f02a211ca078d8e3eed631027","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}