{"path":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","commits":[{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\r\n    int count = 0;\r\n    Token token;\r\n    while ((token = stream.next()) != null) {\r\n      assertTrue(count < tokens.length);\r\n      assertEquals(tokens[count], token.termText);\r\n      count++;\r\n    }\r\n    \r\n    assertEquals(tokens.length, count);\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\r\n    int count = 0;\r\n    Token token;\r\n    while ((token = stream.next()) != null) {\r\n      assertTrue(count < tokens.length);\r\n      assertEquals(tokens[count], token.termText());\r\n      count++;\r\n    }\r\n    \r\n    assertEquals(tokens.length, count);\r\n  }\r\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\r\n    int count = 0;\r\n    Token token;\r\n    while ((token = stream.next()) != null) {\r\n      assertTrue(count < tokens.length);\r\n      assertEquals(tokens[count], token.termText);\r\n      count++;\r\n    }\r\n    \r\n    assertEquals(tokens.length, count);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2123bddbd65dea198cac380540636ce43a880403","date":1211269254,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    Token token;\n    while ((token = stream.next()) != null) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], token.termText());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\r\n    int count = 0;\r\n    Token token;\r\n    while ((token = stream.next()) != null) {\r\n      assertTrue(count < tokens.length);\r\n      assertEquals(tokens[count], token.termText());\r\n      count++;\r\n    }\r\n    \r\n    assertEquals(tokens.length, count);\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], nextToken.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    Token token;\n    while ((token = stream.next()) != null) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], token.termText());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223","date":1227051709,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = stream.next(reusableToken); nextToken != null; nextToken = stream.next(reusableToken)) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], nextToken.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d78f014fded44fbde905f4f84cdc21907b371e8","date":1254383623,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = (TermAttribute) stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/analysis/TestCachingTokenFilter#checkTokens(TokenStream).mjava","sourceNew":null,"sourceOld":"  private void checkTokens(TokenStream stream) throws IOException {\n    int count = 0;\n    \n    TermAttribute termAtt = stream.getAttribute(TermAttribute.class);\n    assertNotNull(termAtt);\n    while (stream.incrementToken()) {\n      assertTrue(count < tokens.length);\n      assertEquals(tokens[count], termAtt.term());\n      count++;\n    }\n    \n    assertEquals(tokens.length, count);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["2123bddbd65dea198cac380540636ce43a880403"],"6864413dbc0c12104c978c05456f3da1d45adb03":["42579622cc27f9908e64f29fa1130bfc28306009"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2123bddbd65dea198cac380540636ce43a880403":["6864413dbc0c12104c978c05456f3da1d45adb03"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"42579622cc27f9908e64f29fa1130bfc28306009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8d78f014fded44fbde905f4f84cdc21907b371e8"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["74a5e7f20b4a444da9df3b2c0f331fa7a1f64223"],"6864413dbc0c12104c978c05456f3da1d45adb03":["2123bddbd65dea198cac380540636ce43a880403"],"74a5e7f20b4a444da9df3b2c0f331fa7a1f64223":["8d78f014fded44fbde905f4f84cdc21907b371e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42579622cc27f9908e64f29fa1130bfc28306009"],"2123bddbd65dea198cac380540636ce43a880403":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"8d78f014fded44fbde905f4f84cdc21907b371e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"42579622cc27f9908e64f29fa1130bfc28306009":["6864413dbc0c12104c978c05456f3da1d45adb03"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}