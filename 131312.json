{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","pathOld":"solr/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5436756e1a3ea4cf3e2fd8ae7f4c4c58ccea9052","date":1316003309,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id4\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23","date":1317007809,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    if(rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower machines\n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id4\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"818d704eaaf0fba0561d0d2752832e1015053482","date":1327419676,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithinOnAdd().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithinOnAdd() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n  }\n\n","sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":null,"sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleTests#testCommitWithin().mjava","sourceNew":null,"sourceOld":"  /**\n   * query the example\n   */\n @Test\n public void testCommitWithin() throws Exception\n  {    \n    // make sure it is empty...\n    SolrServer server = getSolrServer();\n    server.deleteByQuery( \"*:*\" );// delete everything!\n    server.commit();\n    QueryResponse rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n\n    // Now try a timed commit...\n    SolrInputDocument doc3 = new SolrInputDocument();\n    doc3.addField( \"id\", \"id3\", 1.0f );\n    doc3.addField( \"name\", \"doc3\", 1.0f );\n    doc3.addField( \"price\", 10 );\n    UpdateRequest up = new UpdateRequest();\n    up.add( doc3 );\n    up.setCommitWithin( 500 );  // a smaller commitWithin caused failures on the following assert\n    up.process( server );\n    \n    rsp = server.query( new SolrQuery( \"*:*\") );\n    Assert.assertEquals( 0, rsp.getResults().getNumFound() );\n    \n    // TODO: not a great way to test this - timing is easily out\n    // of whack due to parallel tests and various computer specs/load\n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id3\") );\n    \n    int cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n    \n\n    // Now test the new convenience parameter on the add() for commitWithin\n    SolrInputDocument doc4 = new SolrInputDocument();\n    doc4.addField( \"id\", \"id4\", 1.0f );\n    doc4.addField( \"name\", \"doc4\", 1.0f );\n    doc4.addField( \"price\", 10 );\n    server.add(doc4, 500);\n    \n    Thread.sleep( 1000 ); // wait 1 sec\n\n    // now check that it comes out...\n    rsp = server.query( new SolrQuery( \"id:id4\") );\n\n    cnt = 0;\n    while (rsp.getResults().getNumFound() == 0) {\n      // wait and try again for slower/busier machines\n      // and/or parallel test effects.\n      \n      if (cnt++ == 10) {\n        break;\n      }\n      \n      Thread.sleep( 2000 ); // wait 2 seconds...\n      \n      rsp = server.query( new SolrQuery( \"id:id3\") );\n    }\n    \n    Assert.assertEquals( 1, rsp.getResults().getNumFound() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23":["5436756e1a3ea4cf3e2fd8ae7f4c4c58ccea9052"],"5436756e1a3ea4cf3e2fd8ae7f4c4c58ccea9052":["c26f00b574427b55127e869b935845554afde1fa"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23","818d704eaaf0fba0561d0d2752832e1015053482"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23","818d704eaaf0fba0561d0d2752832e1015053482"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"818d704eaaf0fba0561d0d2752832e1015053482":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["818d704eaaf0fba0561d0d2752832e1015053482"]},"commit2Childs":{"09d02225ad8c7d4b2af4b84d1c965a791b7d4a23":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","818d704eaaf0fba0561d0d2752832e1015053482"],"5436756e1a3ea4cf3e2fd8ae7f4c4c58ccea9052":["09d02225ad8c7d4b2af4b84d1c965a791b7d4a23"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["5436756e1a3ea4cf3e2fd8ae7f4c4c58ccea9052"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"818d704eaaf0fba0561d0d2752832e1015053482":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}