{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,boolean).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,boolean).mjava","sourceNew":"  public RandomCodec(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Lucene40PostingsFormat(minItemsPerBlock, maxItemsPerBlock));\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Pulsing40PostingsFormat(1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    formats.add(new MockSepPostingsFormat());\n    formats.add(new MockFixedIntBlockPostingsFormat(_TestUtil.nextInt(random, 1, 2000)));\n    formats.add(new MockVariableIntBlockPostingsFormat( _TestUtil.nextInt(random, 1, 127)));\n    formats.add(new MockRandomPostingsFormat(random));\n    formats.add(new NestedPulsingPostingsFormat());\n    formats.add(new Lucene40WithOrds());\n    if (!useNoMemoryExpensiveCodec) {\n      formats.add(new SimpleTextPostingsFormat());\n      formats.add(new MemoryPostingsFormat(random.nextBoolean()));\n    }\n    Collections.shuffle(formats, random);\n  }\n\n","sourceOld":"  public RandomCodec(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Lucene40PostingsFormat(minItemsPerBlock, maxItemsPerBlock));\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Pulsing40PostingsFormat(1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    formats.add(new MockSepPostingsFormat());\n    formats.add(new MockFixedIntBlockPostingsFormat(_TestUtil.nextInt(random, 1, 2000)));\n    formats.add(new MockVariableIntBlockPostingsFormat( _TestUtil.nextInt(random, 1, 127)));\n    formats.add(new MockRandomPostingsFormat(random));\n    formats.add(new NestedPulsingPostingsFormat());\n    formats.add(new Lucene40WithOrds());\n    if (!useNoMemoryExpensiveCodec) {\n      formats.add(new SimpleTextPostingsFormat());\n      formats.add(new MemoryPostingsFormat(random.nextBoolean()));\n    }\n    Collections.shuffle(formats, random);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75b4d037d2c8fd7d68c07be61d25c0260cf8091e","date":1336829560,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,Set[String]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomCodec#RandomCodec(Random,boolean).mjava","sourceNew":"  public RandomCodec(Random random, Set<String> avoidCodecs) {\n    this.avoidCodecs = avoidCodecs;\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    add(new Lucene40PostingsFormat(minItemsPerBlock, maxItemsPerBlock));\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    add(new Pulsing40PostingsFormat(1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    add(new MockSepPostingsFormat());\n    add(new MockFixedIntBlockPostingsFormat(_TestUtil.nextInt(random, 1, 2000)));\n    add(new MockVariableIntBlockPostingsFormat( _TestUtil.nextInt(random, 1, 127)));\n    add(new MockRandomPostingsFormat(random));\n    add(new NestedPulsingPostingsFormat());\n    add(new Lucene40WithOrds());\n    add(new SimpleTextPostingsFormat());\n    add(new MemoryPostingsFormat(random.nextBoolean()));\n    Collections.shuffle(formats, random);\n  }\n\n","sourceOld":"  public RandomCodec(Random random, boolean useNoMemoryExpensiveCodec) {\n    this.perFieldSeed = random.nextInt();\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    int minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    int maxItemsPerBlock = 2*(Math.max(2, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Lucene40PostingsFormat(minItemsPerBlock, maxItemsPerBlock));\n    // TODO: make it possible to specify min/max iterms per\n    // block via CL:\n    minItemsPerBlock = _TestUtil.nextInt(random, 2, 100);\n    maxItemsPerBlock = 2*(Math.max(1, minItemsPerBlock-1)) + random.nextInt(100);\n    formats.add(new Pulsing40PostingsFormat(1 + random.nextInt(20), minItemsPerBlock, maxItemsPerBlock));\n    formats.add(new MockSepPostingsFormat());\n    formats.add(new MockFixedIntBlockPostingsFormat(_TestUtil.nextInt(random, 1, 2000)));\n    formats.add(new MockVariableIntBlockPostingsFormat( _TestUtil.nextInt(random, 1, 127)));\n    formats.add(new MockRandomPostingsFormat(random));\n    formats.add(new NestedPulsingPostingsFormat());\n    formats.add(new Lucene40WithOrds());\n    if (!useNoMemoryExpensiveCodec) {\n      formats.add(new SimpleTextPostingsFormat());\n      formats.add(new MemoryPostingsFormat(random.nextBoolean()));\n    }\n    Collections.shuffle(formats, random);\n  }\n\n","bugFix":null,"bugIntro":["b0c99c9b095ebe88603d5dc33606fdfe7782cb2f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["75b4d037d2c8fd7d68c07be61d25c0260cf8091e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"75b4d037d2c8fd7d68c07be61d25c0260cf8091e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}