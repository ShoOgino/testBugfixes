{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","commits":[{"id":"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","date":1394784078,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void requestStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    log.info(\"Request status invoked\");\n    String requestId = message.getStr(REQUESTID);\n\n    // Special taskId (-1), clears up the request state maps.\n    if(requestId.equals(\"-1\")) {\n      completedMap.clear();\n      failureMap.clear();\n      return;\n    }\n\n    if(completedMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"completed\");\n      success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n      results.add(\"status\", success);\n    } else if (runningMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"running\");\n      success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n      results.add(\"status\", success);\n    } else if (failureMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"failed\");\n      success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n      results.add(\"status\", success);\n    } else {\n      SimpleOrderedMap failure = new SimpleOrderedMap();\n      failure.add(\"state\", \"notfound\");\n      failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n      results.add(\"status\", failure);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb7299fddbea34e76b950854f150f14b895ba68","date":1396327974,"type":4,"author":"Anshum Gupta","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void requestStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    log.info(\"Request status invoked\");\n    String requestId = message.getStr(REQUESTID);\n\n    // Special taskId (-1), clears up the request state maps.\n    if(requestId.equals(\"-1\")) {\n      completedMap.clear();\n      failureMap.clear();\n      return;\n    }\n\n    if(completedMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"completed\");\n      success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n      results.add(\"status\", success);\n    } else if (runningMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"running\");\n      success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n      results.add(\"status\", success);\n    } else if (failureMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"failed\");\n      success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n      results.add(\"status\", success);\n    } else {\n      SimpleOrderedMap failure = new SimpleOrderedMap();\n      failure.add(\"state\", \"notfound\");\n      failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n      results.add(\"status\", failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b15576cafd8b5d06857055c28f26912321937e3","date":1396452121,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void requestStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    log.info(\"Request status invoked\");\n    String requestId = message.getStr(REQUESTID);\n\n    // Special taskId (-1), clears up the request state maps.\n    if(requestId.equals(\"-1\")) {\n      completedMap.clear();\n      failureMap.clear();\n      return;\n    }\n\n    if(completedMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"completed\");\n      success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n      results.add(\"status\", success);\n    } else if (runningMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"running\");\n      success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n      results.add(\"status\", success);\n    } else if (failureMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"failed\");\n      success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n      results.add(\"status\", success);\n    } else {\n      SimpleOrderedMap failure = new SimpleOrderedMap();\n      failure.add(\"state\", \"notfound\");\n      failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n      results.add(\"status\", failure);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3ebc36c5479f702461eb39aae47dfa1e0a4962a","date":1396462206,"type":4,"author":"Noble Paul","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void requestStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    log.info(\"Request status invoked\");\n    String requestId = message.getStr(REQUESTID);\n\n    // Special taskId (-1), clears up the request state maps.\n    if(requestId.equals(\"-1\")) {\n      completedMap.clear();\n      failureMap.clear();\n      return;\n    }\n\n    if(completedMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"completed\");\n      success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n      results.add(\"status\", success);\n    } else if (runningMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"running\");\n      success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n      results.add(\"status\", success);\n    } else if (failureMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"failed\");\n      success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n      results.add(\"status\", success);\n    } else {\n      SimpleOrderedMap failure = new SimpleOrderedMap();\n      failure.add(\"state\", \"notfound\");\n      failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n      results.add(\"status\", failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#requestStatus(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void requestStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    log.info(\"Request status invoked\");\n    String requestId = message.getStr(REQUESTID);\n\n    // Special taskId (-1), clears up the request state maps.\n    if(requestId.equals(\"-1\")) {\n      completedMap.clear();\n      failureMap.clear();\n      return;\n    }\n\n    if(completedMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"completed\");\n      success.add(\"msg\", \"found \" + requestId + \" in completed tasks\");\n      results.add(\"status\", success);\n    } else if (runningMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"running\");\n      success.add(\"msg\", \"found \" + requestId + \" in submitted tasks\");\n      results.add(\"status\", success);\n    } else if (failureMap.contains(requestId)) {\n      SimpleOrderedMap success = new SimpleOrderedMap();\n      success.add(\"state\", \"failed\");\n      success.add(\"msg\", \"found \" + requestId + \" in failed tasks\");\n      results.add(\"status\", success);\n    } else {\n      SimpleOrderedMap failure = new SimpleOrderedMap();\n      failure.add(\"state\", \"notfound\");\n      failure.add(\"msg\", \"Did not find taskid [\" + requestId + \"] in any tasks queue\");\n      results.add(\"status\", failure);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb7299fddbea34e76b950854f150f14b895ba68":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"5eb2511ababf862ea11e10761c70ee560cd84510":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211","a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"5b15576cafd8b5d06857055c28f26912321937e3":["5eb7299fddbea34e76b950854f150f14b895ba68"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"a3ebc36c5479f702461eb39aae47dfa1e0a4962a":["5b15576cafd8b5d06857055c28f26912321937e3"]},"commit2Childs":{"5eb7299fddbea34e76b950854f150f14b895ba68":["5b15576cafd8b5d06857055c28f26912321937e3"],"5eb2511ababf862ea11e10761c70ee560cd84510":[],"5b15576cafd8b5d06857055c28f26912321937e3":["a3ebc36c5479f702461eb39aae47dfa1e0a4962a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["058f5a3debcfa0ea477da3eabb4cbe2ec0fac211"],"058f5a3debcfa0ea477da3eabb4cbe2ec0fac211":["5eb7299fddbea34e76b950854f150f14b895ba68","5eb2511ababf862ea11e10761c70ee560cd84510"],"a3ebc36c5479f702461eb39aae47dfa1e0a4962a":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}