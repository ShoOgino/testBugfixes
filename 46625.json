{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testWithOptionalPayload().mjava","commits":[{"id":"ee590759ca28a3f2599ba7608ea0a50be4f540f6","date":1432142966,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testWithOptionalPayload().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testWithOptionalPayload() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    // Create a document that is missing the payload field\n    Document doc = new Document();\n    Field field = new TextField(FIELD_NAME, \"some field\", Field.Store.YES);\n    doc.add(field);\n    // do not store the payload or the contexts\n    Field weight = new NumericDocValuesField(WEIGHT_FIELD_NAME, 100);\n    doc.add(weight);\n    writer.addDocument(doc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n\n    // Even though the payload field is missing, the dictionary iterator should not skip the document\n    // because the payload field is optional.\n    Dictionary dictionaryOptionalPayload =\n        new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionaryOptionalPayload.getEntryIterator();\n    BytesRef f = inputIterator.next();\n    assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n    Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n    assertEquals(inputIterator.weight(), weightField.numericValue().longValue());\n    Field payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n    assertNull(payloadField);\n    assertTrue(inputIterator.payload().length == 0);\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testWithOptionalPayload().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/DocumentDictionaryTest#testWithOptionalPayload().mjava","sourceNew":"  @Test\n  public void testWithOptionalPayload() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    // Create a document that is missing the payload field\n    Document doc = new Document();\n    Field field = new TextField(FIELD_NAME, \"some field\", Field.Store.YES);\n    doc.add(field);\n    // do not store the payload or the contexts\n    Field weight = new NumericDocValuesField(WEIGHT_FIELD_NAME, 100);\n    doc.add(weight);\n    writer.addDocument(doc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n\n    // Even though the payload field is missing, the dictionary iterator should not skip the document\n    // because the payload field is optional.\n    Dictionary dictionaryOptionalPayload =\n        new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionaryOptionalPayload.getEntryIterator();\n    BytesRef f = inputIterator.next();\n    assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n    IndexableField weightField = doc.getField(WEIGHT_FIELD_NAME);\n    assertEquals(inputIterator.weight(), weightField.numericValue().longValue());\n    IndexableField payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n    assertNull(payloadField);\n    assertTrue(inputIterator.payload().length == 0);\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","sourceOld":"  @Test\n  public void testWithOptionalPayload() throws IOException {\n    Directory dir = newDirectory();\n    Analyzer analyzer = new MockAnalyzer(random());\n    IndexWriterConfig iwc = newIndexWriterConfig(analyzer);\n    iwc.setMergePolicy(newLogMergePolicy());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, iwc);\n\n    // Create a document that is missing the payload field\n    Document doc = new Document();\n    Field field = new TextField(FIELD_NAME, \"some field\", Field.Store.YES);\n    doc.add(field);\n    // do not store the payload or the contexts\n    Field weight = new NumericDocValuesField(WEIGHT_FIELD_NAME, 100);\n    doc.add(weight);\n    writer.addDocument(doc);\n    writer.commit();\n    writer.close();\n    IndexReader ir = DirectoryReader.open(dir);\n\n    // Even though the payload field is missing, the dictionary iterator should not skip the document\n    // because the payload field is optional.\n    Dictionary dictionaryOptionalPayload =\n        new DocumentDictionary(ir, FIELD_NAME, WEIGHT_FIELD_NAME, PAYLOAD_FIELD_NAME);\n    InputIterator inputIterator = dictionaryOptionalPayload.getEntryIterator();\n    BytesRef f = inputIterator.next();\n    assertTrue(f.equals(new BytesRef(doc.get(FIELD_NAME))));\n    Field weightField = doc.getField(WEIGHT_FIELD_NAME);\n    assertEquals(inputIterator.weight(), weightField.numericValue().longValue());\n    Field payloadField = doc.getField(PAYLOAD_FIELD_NAME);\n    assertNull(payloadField);\n    assertTrue(inputIterator.payload().length == 0);\n    IOUtils.close(ir, analyzer, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ee590759ca28a3f2599ba7608ea0a50be4f540f6"],"ee590759ca28a3f2599ba7608ea0a50be4f540f6":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}