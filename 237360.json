{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","commits":[{"id":"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","date":1492411712,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"326b5c746af092eb827c5c1accdab1b47fe0cf3c","date":1492433195,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67f215f0e4d5c92f5d96ab7675170115b0983501","date":1492649385,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c6b303e91f39d7c1ac8e47bd9982b14b5ef615","date":1493362906,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : 'true',\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","date":1493894873,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    // todo nocommit -- add testing for the v2 path\n    // String path = random().nextBoolean() ? \"/admin/autoscaling\" : \"/v2/cluster/autoscaling\";\n    String path = \"/admin/autoscaling\";\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d64e4b13048b3a4c03a20959037e5fb858764a2f","date":1495651323,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2f4717538692c396242d8b00ae0001626caebdd","date":1495700710,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionCreated.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getNodeName());\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c32a8448145a74a8902798f2e63e322827757ff2","date":1496834422,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"664ff2b928393480d9655010aa700656b0fcade0","date":1496842764,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) eventRef.get();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2480cf60350a342e5e57439f3e71092fabc364a2","date":1499215962,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e0d9c88546c1a130d50b56981790d87a308daffd","date":1499234617,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = new AutoScalingHandlerTest.AutoScalingRequest(SolrRequest.METHOD.POST, path, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1","date":1503489512,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    assertEquals(\"The node added trigger was fired but for a different node\",\n        newNode.getNodeName(), nodeAddedEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","date":1522388336,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"acfe8d3b837b6b66eaddf114bb99cf9e2257764d","date":1522406637,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/NodeAddedTriggerIntegrationTest#testNodeAddedTrigger().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/TriggerIntegrationTest#testNodeAddedTrigger().mjava","sourceNew":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>) nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS)) {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAddedTrigger() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    if (!actionInitCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    JettySolrRunner newNode = cluster.startJettySolrRunner();\n    boolean await = triggerFiredLatch.await(20, TimeUnit.SECONDS);\n    assertTrue(\"The trigger did not fire at all\", await);\n    assertTrue(triggerFired.get());\n    NodeAddedTrigger.NodeAddedEvent nodeAddedEvent = (NodeAddedTrigger.NodeAddedEvent) events.iterator().next();\n    assertNotNull(nodeAddedEvent);\n    List<String> nodeNames = (List<String>)nodeAddedEvent.getProperty(TriggerEvent.NODE_NAMES);\n    assertTrue(nodeNames.contains(newNode.getNodeName()));\n\n    // reset\n    actionConstructorCalled = new CountDownLatch(1);\n    actionInitCalled = new CountDownLatch(1);\n\n    // update the trigger with exactly the same data\n    setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '\" + waitForSeconds + \"s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'test','class':'\" + TestTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // this should be a no-op so the action should have been created but init should not be called\n    if (!actionConstructorCalled.await(3, TimeUnit.SECONDS))  {\n      fail(\"The TriggerAction should have been created by now\");\n    }\n\n    assertFalse(actionInitCalled.await(2, TimeUnit.SECONDS));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2480cf60350a342e5e57439f3e71092fabc364a2":["664ff2b928393480d9655010aa700656b0fcade0"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"b0c6b303e91f39d7c1ac8e47bd9982b14b5ef615":["67f215f0e4d5c92f5d96ab7675170115b0983501"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["b0c6b303e91f39d7c1ac8e47bd9982b14b5ef615"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["e0d9c88546c1a130d50b56981790d87a308daffd"],"67f215f0e4d5c92f5d96ab7675170115b0983501":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"e2f4717538692c396242d8b00ae0001626caebdd":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["e2f4717538692c396242d8b00ae0001626caebdd","464244264804e3f981bf1fb4b732516d8d62dbc2"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"464244264804e3f981bf1fb4b732516d8d62dbc2":["e2f4717538692c396242d8b00ae0001626caebdd"],"c32a8448145a74a8902798f2e63e322827757ff2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"e0d9c88546c1a130d50b56981790d87a308daffd":["664ff2b928393480d9655010aa700656b0fcade0","2480cf60350a342e5e57439f3e71092fabc364a2"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["560c18d71dad43d675158783c3840f8c80d6d39c","deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"664ff2b928393480d9655010aa700656b0fcade0":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","c32a8448145a74a8902798f2e63e322827757ff2"]},"commit2Childs":{"2480cf60350a342e5e57439f3e71092fabc364a2":["e0d9c88546c1a130d50b56981790d87a308daffd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"b0c6b303e91f39d7c1ac8e47bd9982b14b5ef615":["a7699e9ae4550ba2a55335a64ae7de9d5d9de39e"],"6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09":["326b5c746af092eb827c5c1accdab1b47fe0cf3c"],"a7699e9ae4550ba2a55335a64ae7de9d5d9de39e":["e2f4717538692c396242d8b00ae0001626caebdd","d64e4b13048b3a4c03a20959037e5fb858764a2f"],"cc5ed4ca39a59c23d13866a1e110e608d93cbcc1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"67f215f0e4d5c92f5d96ab7675170115b0983501":["b0c6b303e91f39d7c1ac8e47bd9982b14b5ef615"],"e2f4717538692c396242d8b00ae0001626caebdd":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","464244264804e3f981bf1fb4b732516d8d62dbc2"],"326b5c746af092eb827c5c1accdab1b47fe0cf3c":["67f215f0e4d5c92f5d96ab7675170115b0983501"],"d64e4b13048b3a4c03a20959037e5fb858764a2f":["e2f4717538692c396242d8b00ae0001626caebdd"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["c32a8448145a74a8902798f2e63e322827757ff2","664ff2b928393480d9655010aa700656b0fcade0"],"deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4":["acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","6ca81a50d0a6c6f97f1e2b15ef90c5bd81765d09","326b5c746af092eb827c5c1accdab1b47fe0cf3c","560c18d71dad43d675158783c3840f8c80d6d39c"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"c32a8448145a74a8902798f2e63e322827757ff2":["664ff2b928393480d9655010aa700656b0fcade0"],"e0d9c88546c1a130d50b56981790d87a308daffd":["cc5ed4ca39a59c23d13866a1e110e608d93cbcc1"],"560c18d71dad43d675158783c3840f8c80d6d39c":["deb2c2675f0afd2a8c2722ff302e4b4b5eb872b4","acfe8d3b837b6b66eaddf114bb99cf9e2257764d"],"acfe8d3b837b6b66eaddf114bb99cf9e2257764d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"664ff2b928393480d9655010aa700656b0fcade0":["2480cf60350a342e5e57439f3e71092fabc364a2","e0d9c88546c1a130d50b56981790d87a308daffd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}