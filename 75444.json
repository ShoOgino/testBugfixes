{"path":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","commits":[{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","pathOld":"/dev/null","sourceNew":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toNamedMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","sourceNew":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues, boolean compact,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","sourceOld":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toNamedMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","sourceNew":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues, boolean compact,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","sourceOld":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toNamedMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/stats/MetricUtils#toSolrInputDocuments(MetricRegistry,List[MetricFilter],MetricFilter,boolean,boolean,Map[String,Object],Consumer[SolrInputDocument]).mjava","sourceNew":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues, boolean compact,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, compact, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","sourceOld":"  public static void toSolrInputDocuments(MetricRegistry registry, List<MetricFilter> shouldMatchFilters,\n                                          MetricFilter mustMatchFilter, boolean skipHistograms,\n                                          boolean skipAggregateValues,\n                                          Map<String, Object> metadata, Consumer<SolrInputDocument> consumer) {\n    boolean addMetadata = metadata != null && !metadata.isEmpty();\n    toNamedMaps(registry, shouldMatchFilters, mustMatchFilter, skipHistograms, skipAggregateValues, (k, v) -> {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(METRIC_NAME, k);\n      toSolrInputDocument(null, doc, v);\n      if (addMetadata) {\n        toSolrInputDocument(null, doc, metadata);\n      }\n      consumer.accept(doc);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"ab68488225b6a6c357dda72ed11dedca9914a192":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ab68488225b6a6c357dda72ed11dedca9914a192":[],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab68488225b6a6c357dda72ed11dedca9914a192","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}