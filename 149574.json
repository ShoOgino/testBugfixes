{"path":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","commits":[{"id":"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0","date":1102865269,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"/dev/null","sourceNew":"  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e64d5174516d04b9bb55f4d6be450d334f6b9bfc","date":1110225209,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":"  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c08b6e867f9030229dbdaf4e38958f9b6d734c29","date":1119993531,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":"  /**\n   * @deprecated use {@link #getFieldQuery(String, String)}\n   */\n  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    return getFieldQuery(field, queryText);\n  }\n\n","sourceOld":"  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    if (field == null) {\n      Vector clauses = new Vector();\n      for (int i = 0; i < fields.length; i++)\n        clauses.add(new BooleanClause(super.getFieldQuery(fields[i], queryText),\n            BooleanClause.Occur.SHOULD));\n      return getBooleanQuery(clauses, true);\n    }\n    return super.getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/queryParser/MultiFieldQueryParser#getFieldQuery(String,Analyzer,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * @deprecated use {@link #getFieldQuery(String, String)}\n   */\n  protected Query getFieldQuery(String field, Analyzer analyzer, String queryText)\n      throws ParseException {\n    return getFieldQuery(field, queryText);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["c08b6e867f9030229dbdaf4e38958f9b6d734c29"],"c08b6e867f9030229dbdaf4e38958f9b6d734c29":["e64d5174516d04b9bb55f4d6be450d334f6b9bfc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e64d5174516d04b9bb55f4d6be450d334f6b9bfc":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c08b6e867f9030229dbdaf4e38958f9b6d734c29":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd2b3692962ae7859a41fd229cfe7ed2ff550ac0"],"e64d5174516d04b9bb55f4d6be450d334f6b9bfc":["c08b6e867f9030229dbdaf4e38958f9b6d734c29"],"dd2b3692962ae7859a41fd229cfe7ed2ff550ac0":["e64d5174516d04b9bb55f4d6be450d334f6b9bfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}