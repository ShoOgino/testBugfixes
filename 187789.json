{"path":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6d4ff6bc316c2cad4d245958a058040d9add305","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6457c5bbf93b640fc949540903318e320e52beb","date":1467828398,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (params.getBool(TermsParams.TERMS, false)) {\n      rb.doTerms = true;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d51e7db479b42602c7e23ba871b177387268179","date":1547581497,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      checkShardsWhitelist(rb, lst);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c","date":1600965744,"type":3,"author":"S N Munendra","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/TermsComponent#prepare(ResponseBuilder).mjava","sourceNew":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void prepare(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n\n    //the terms parameter is also used by json facet API. So we will get errors if we try to parse as boolean\n    if (params.get(TermsParams.TERMS, \"false\").equals(\"true\")) {\n      rb.doTerms = true;\n    } else {\n      return;\n    }\n\n    // TODO: temporary... this should go in a different component.\n    String shards = params.get(ShardParams.SHARDS);\n    if (shards != null) {\n      rb.isDistrib = true;\n      if (params.get(ShardParams.SHARDS_QT) == null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No shards.qt parameter specified\");\n      }\n      List<String> lst = StrUtils.splitSmart(shards, \",\", true);\n      checkShardsWhitelist(rb, lst);\n      rb.shards = lst.toArray(new String[lst.size()]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["4d51e7db479b42602c7e23ba871b177387268179"],"4d51e7db479b42602c7e23ba871b177387268179":["b6457c5bbf93b640fc949540903318e320e52beb"],"b6457c5bbf93b640fc949540903318e320e52beb":["c6d4ff6bc316c2cad4d245958a058040d9add305"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c6d4ff6bc316c2cad4d245958a058040d9add305":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c26f00b574427b55127e869b935845554afde1fa","b6457c5bbf93b640fc949540903318e320e52beb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"]},"commit2Childs":{"1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d51e7db479b42602c7e23ba871b177387268179":["1bc79aa44ce8dfeb7ad9dda5b4f6b4926d003e0c"],"b6457c5bbf93b640fc949540903318e320e52beb":["4d51e7db479b42602c7e23ba871b177387268179","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["c6d4ff6bc316c2cad4d245958a058040d9add305","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"c6d4ff6bc316c2cad4d245958a058040d9add305":["b6457c5bbf93b640fc949540903318e320e52beb"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}