{"path":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testDocSort().mjava","commits":[{"id":"e977a403f93a917f75266c88727eadb89e4f64fc","date":1600866583,"type":0,"author":"Mayya Sharipova","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFieldSortOptimizationSkipping#testDocSort().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Test that sorting on _doc works correctly.\n   * This test goes through DefaultBulkSorter::scoreRange, where scorerIterator is BitSetIterator.\n   * As a conjunction of this BitSetIterator with DocComparator's iterator, we get BitSetConjunctionDISI.\n   * BitSetConjuctionDISI advances based on the DocComparator's iterator, and doesn't consider\n   * that its BitSetIterator may have advanced passed a certain doc. \n   */\n  public void testDocSort() throws IOException {\n    final Directory dir = newDirectory();\n    final IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig());\n    final int numDocs = 4;\n    for (int i = 0; i < numDocs; ++i) {\n      final Document doc = new Document();\n      doc.add(new StringField(\"id\", \"id\" + i, Field.Store.NO));\n      if (i < 2) {\n        doc.add(new LongPoint(\"lf\", 1));\n      }\n      writer.addDocument(doc);\n    }\n    final IndexReader reader = DirectoryReader.open(writer);\n    writer.close();\n\n    IndexSearcher searcher = newSearcher(reader);\n    searcher.setQueryCache(null);\n    final int numHits = 10;\n    final int totalHitsThreshold = 10;\n    final Sort sort = new Sort(FIELD_DOC);\n\n    {\n      final TopFieldCollector collector = TopFieldCollector.create(sort, numHits, null, totalHitsThreshold);\n      BooleanQuery.Builder bq = new BooleanQuery.Builder();\n      bq.add(LongPoint.newExactQuery(\"lf\", 1), BooleanClause.Occur.MUST);\n      bq.add(new TermQuery(new Term(\"id\", \"id3\")), BooleanClause.Occur.MUST_NOT);\n      searcher.search(bq.build(), collector);\n      TopDocs topDocs = collector.topDocs();\n      assertEquals(2, topDocs.scoreDocs.length);\n    }\n\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e977a403f93a917f75266c88727eadb89e4f64fc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e977a403f93a917f75266c88727eadb89e4f64fc"]},"commit2Childs":{"e977a403f93a917f75266c88727eadb89e4f64fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e977a403f93a917f75266c88727eadb89e4f64fc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}