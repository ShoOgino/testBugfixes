{"path":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","commits":[{"id":"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28","date":1247656558,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public int sortType() {\n       return SortField.CUSTOM;\n     }\n\n     public Comparable value(int slot) {\n       return new Integer(values[slot]);\n     }\n   };\n }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e0ef2616973dc9a77f2ba89d78110ed14bda0631","date":1249477738,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public Comparable value(int slot) {\n       return new Integer(values[slot]);\n     }\n   };\n }\n\n","sourceOld":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase, int numSlotsFull) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public int sortType() {\n       return SortField.CUSTOM;\n     }\n\n     public Comparable value(int slot) {\n       return new Integer(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bcde5e3f23911110baa101ed062b544162825b5","date":1254521804,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public Comparable value(int slot) {\n       return new Integer(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":" public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e450c7d50c2fc84c963d0d7ade9d3217d868064d","date":1259932067,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = (Integer) priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","pathOld":"src/test/org/apache/lucene/search/ElevationComparatorSource[TestElevationComparator]#newComparator(String,int,int,boolean).mjava","sourceNew":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","sourceOld":"  @Override\n  public FieldComparator newComparator(final String fieldname, final int numHits, int sortPos, boolean reversed) throws IOException {\n   return new FieldComparator() {\n\n     FieldCache.StringIndex idIndex;\n     private final int[] values = new int[numHits];\n     int bottomVal;\n\n     @Override\n     public int compare(int slot1, int slot2) {\n       return values[slot2] - values[slot1];  // values will be small enough that there is no overflow concern\n     }\n\n     @Override\n     public void setBottom(int slot) {\n       bottomVal = values[slot];\n     }\n\n     private int docVal(int doc) throws IOException {\n       String id = idIndex.lookup[idIndex.order[doc]];\n       Integer prio = priority.get(id);\n       return prio == null ? 0 : prio.intValue();\n     }\n\n     @Override\n     public int compareBottom(int doc) throws IOException {\n       return docVal(doc) - bottomVal;\n     }\n\n     @Override\n     public void copy(int slot, int doc) throws IOException {\n       values[slot] = docVal(doc);\n     }\n\n     @Override\n     public void setNextReader(IndexReader reader, int docBase) throws IOException {\n       idIndex = FieldCache.DEFAULT.getStringIndex(reader, fieldname);\n     }\n\n     @Override\n     public Comparable<?> value(int slot) {\n       return Integer.valueOf(values[slot]);\n     }\n   };\n }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["6bcde5e3f23911110baa101ed062b544162825b5"],"6bcde5e3f23911110baa101ed062b544162825b5":["e0ef2616973dc9a77f2ba89d78110ed14bda0631"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e0ef2616973dc9a77f2ba89d78110ed14bda0631":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["e450c7d50c2fc84c963d0d7ade9d3217d868064d"],"6bcde5e3f23911110baa101ed062b544162825b5":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"c7e70cecc56c33998f8f16cd1fbbc5a58de17f28":["e0ef2616973dc9a77f2ba89d78110ed14bda0631"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7e70cecc56c33998f8f16cd1fbbc5a58de17f28"],"e0ef2616973dc9a77f2ba89d78110ed14bda0631":["6bcde5e3f23911110baa101ed062b544162825b5"],"e450c7d50c2fc84c963d0d7ade9d3217d868064d":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}