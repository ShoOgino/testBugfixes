{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_24, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcbc12aa8147f5203ca283e7252ba4280d6ffd16","date":1305663400,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new WhitespaceTokenizer(TEST_VERSION_CURRENT, reader), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    Set<Object> stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    Set<Object> stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    Set<Object> stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter#testStopPositons().mjava","sourceNew":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","sourceOld":"  /**\n   * Test Position increments applied by StopFilter with and without enabling this option.\n   */\n  public void testStopPositons() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    ArrayList<String> a = new ArrayList<String>();\n    for (int i=0; i<20; i++) {\n      String w = English.intToEnglish(i).trim();\n      sb.append(w).append(\" \");\n      if (i%3 != 0) a.add(w);\n    }\n    log(sb.toString());\n    String stopWords[] = a.toArray(new String[0]);\n    for (int i=0; i<a.size(); i++) log(\"Stop: \"+stopWords[i]);\n    CharArraySet stopSet = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords);\n    // with increments\n    StringReader reader = new StringReader(sb.toString());\n    StopFilter stpf = new StopFilter(Version.LUCENE_40, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,true);\n    // without increments\n    reader = new StringReader(sb.toString());\n    stpf = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet);\n    doTestStopPositons(stpf,false);\n    // with increments, concatenating two stop filters\n    ArrayList<String> a0 = new ArrayList<String>();\n    ArrayList<String> a1 = new ArrayList<String>();\n    for (int i=0; i<a.size(); i++) {\n      if (i%2==0) { \n        a0.add(a.get(i));\n      } else {\n        a1.add(a.get(i));\n      }\n    }\n    String stopWords0[] =  a0.toArray(new String[0]);\n    for (int i=0; i<a0.size(); i++) log(\"Stop0: \"+stopWords0[i]);\n    String stopWords1[] =  a1.toArray(new String[0]);\n    for (int i=0; i<a1.size(); i++) log(\"Stop1: \"+stopWords1[i]);\n    CharArraySet stopSet0 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords0);\n    CharArraySet stopSet1 = StopFilter.makeStopSet(TEST_VERSION_CURRENT, stopWords1);\n    reader = new StringReader(sb.toString());\n    StopFilter stpf0 = new StopFilter(TEST_VERSION_CURRENT, new MockTokenizer(reader, MockTokenizer.WHITESPACE, false), stopSet0); // first part of the set\n    stpf0.setEnablePositionIncrements(true);\n    StopFilter stpf01 = new StopFilter(TEST_VERSION_CURRENT, stpf0, stopSet1); // two stop filters concatenated!\n    doTestStopPositons(stpf01,true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["3bb13258feba31ab676502787ab2e1779f129b7a","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a3776dccca01c11e7046323cfad46a3b4a471233":["4e8cc373c801e54cec75daf9f52792cb4b17f536","fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"fcbc12aa8147f5203ca283e7252ba4280d6ffd16":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"3bb13258feba31ab676502787ab2e1779f129b7a":["c3a8a449466c1ff7ce2274fe73dab487256964b4"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}