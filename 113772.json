{"path":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#testEquals().mjava","commits":[{"id":"7a1037d9031f9702ee6912f8751ef1d5320da6d9","date":1357217787,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEquals() {\n    IntToFloatMap map1 = new IntToFloatMap(100);\n    IntToFloatMap map2 = new IntToFloatMap(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#testEquals().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testEquals() {\n    IntToFloatMap map1 = new IntToFloatMap(100);\n    IntToFloatMap map2 = new IntToFloatMap(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/collections/IntToFloatMapTest#testEquals().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/util/collections/IntToFloatMapTest#testEquals().mjava","sourceNew":"  @Test\n  public void testEquals() {\n    IntToFloatMap map1 = new IntToFloatMap(100);\n    IntToFloatMap map2 = new IntToFloatMap(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","sourceOld":"  @Test\n  public void testEquals() {\n    IntToFloatMap map1 = new IntToFloatMap(100);\n    IntToFloatMap map2 = new IntToFloatMap(100);\n    assertEquals(\"Empty maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for empty maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    for (int i = 0; i < 100; ++i) {\n      map1.put(i, Float.valueOf(1f/i));\n      map2.put(i, Float.valueOf(1f/i));\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n\n    for (int i = 10; i < 20; i++) {\n      map1.remove(i);\n    }\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    for (int i = 19; i >=10; --i) {\n      map2.remove(i);\n    }\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n    \n    map1.put(-1,-1f);\n    map2.put(-1,-1.1f);\n    assertFalse(\"Different maps should not be equal\", map1.equals(map2));\n    \n    map2.put(-1,-1f);\n    assertEquals(\"Identical maps should be equal\", map1, map2);\n    assertEquals(\"hashCode() for identical maps should be equal\", \n        map1.hashCode(), map2.hashCode());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"607428da722dcb3e86bbd11c63de8986e6275c36":["7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"7a1037d9031f9702ee6912f8751ef1d5320da6d9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","607428da722dcb3e86bbd11c63de8986e6275c36"],"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a1037d9031f9702ee6912f8751ef1d5320da6d9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}