{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":1,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    HashMap<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n    \n    collectShardResponses(results, true, \"ADDREPLICA failed to create replica\", shardHandler);\n    \n    completeAsyncRequest(asyncId, requestMap, results);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bcaa01a379f5fb824940c2c12277fbf65838d5a","date":1457009404,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","date":1457088757,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if(node == null) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n        overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","bugFix":["3fd3cdfbce4b551bb8ca4678682a5a891d0890ca"],"bugIntro":["b06ed1eeeb56011711007f5cd8aae89edff6a196"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if(node == null) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if(node == null) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b06ed1eeeb56011711007f5cd8aae89edff6a196","date":1457157583,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if(node == null) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false)) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","8b81868c96ab084d96d4589dd330753c529bc450"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"115923bc88e5b1dc4bef049b1ded8486723052ed","date":1463216796,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/AddReplicaCmd#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n\n    final String asyncId = message.getStr(ASYNC);\n\n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = ocmh.shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          ocmh.overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          ocmh.waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n\n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n\n    params.set(CoreAdminParams.ACTION, CoreAdminParams.CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    ocmh.addPropertyParams(message, params);\n\n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    ocmh.sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      ocmh.processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      ocmh.waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      ocmh.tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader.getClusterProps())) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["3bbb741690cdafda7f1f7549c26351c912917a69","19498030e0adab22f604f935cae3c03dcf0952a6"],"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["af2638813028b254a88b418ebeafb541afb49653"],"3bbb741690cdafda7f1f7549c26351c912917a69":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["d470c8182e92b264680e34081b75e70a9f2b3c89","b1777912fb613f51063554d81f71c1b70d6bcd77"],"0ad30c6a479e764150a3316e57263319775f1df2":["b06ed1eeeb56011711007f5cd8aae89edff6a196","115923bc88e5b1dc4bef049b1ded8486723052ed"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0bcaa01a379f5fb824940c2c12277fbf65838d5a":["19498030e0adab22f604f935cae3c03dcf0952a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b06ed1eeeb56011711007f5cd8aae89edff6a196","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["b06ed1eeeb56011711007f5cd8aae89edff6a196","0ad30c6a479e764150a3316e57263319775f1df2"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19498030e0adab22f604f935cae3c03dcf0952a6":["3bbb741690cdafda7f1f7549c26351c912917a69"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["b06ed1eeeb56011711007f5cd8aae89edff6a196"],"b06ed1eeeb56011711007f5cd8aae89edff6a196":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132","0bcaa01a379f5fb824940c2c12277fbf65838d5a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132"],"3bbb741690cdafda7f1f7549c26351c912917a69":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"5aa6dcd736e5c400d1c763ae8fa2fe5aedb75132":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"0bcaa01a379f5fb824940c2c12277fbf65838d5a":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653","0bcaa01a379f5fb824940c2c12277fbf65838d5a"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["3bbb741690cdafda7f1f7549c26351c912917a69"],"115923bc88e5b1dc4bef049b1ded8486723052ed":["0ad30c6a479e764150a3316e57263319775f1df2"],"b06ed1eeeb56011711007f5cd8aae89edff6a196":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","115923bc88e5b1dc4bef049b1ded8486723052ed"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["b06ed1eeeb56011711007f5cd8aae89edff6a196"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}