{"path":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9","date":1270985469,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10","date":1270996866,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4","date":1271167458,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    FSDirectory storeDirectory;\n    storeDirectory = new MMapDirectory(new File(storePathname), null);\n\n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(storeDirectory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    IndexSearcher searcher = new IndexSearcher(storeDirectory, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n                rmDir(new File(storePathname));\n  }\n\n","bugFix":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2aafd88401639311b0404e67c94e829e123a0e45","date":1273477632,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000*_TestUtil.getRandomMultiplier(); dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000*_TestUtil.getRandomMultiplier(); dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    StandardAnalyzer analyzer = new StandardAnalyzer(TEST_VERSION_CURRENT, Collections.emptySet());\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000*_TestUtil.getRandomMultiplier(); dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e45742e10e8e3b98e854babe6dbb07a4197b71","date":1280230285,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000*_TestUtil.getRandomMultiplier(); dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    for(int dx = 0; dx < 1000*_TestUtil.getRandomMultiplier(); dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(new Field(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer();\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f83af14a2a8131b14d7aee6274c740334e0363d3","date":1307579822,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = 1000 * RANDOM_MULTIPLIER;\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, Field.Store.YES, Field.Index.ANALYZED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexSearcher searcher = new IndexSearcher(dir, true);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    searcher.close();\n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","pathOld":"lucene/src/test/org/apache/lucene/store/TestWindowsMMap#testMmapIndex().mjava","sourceNew":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","sourceOld":"  public void testMmapIndex() throws Exception {\n    // sometimes the directory is not cleaned by rmDir, because on Windows it\n    // may take some time until the files are finally dereferenced. So clean the\n    // directory up front, or otherwise new IndexWriter will fail.\n    File dirPath = new File(storePathname);\n    rmDir(dirPath);\n    MMapDirectory dir = new MMapDirectory(dirPath, null);\n    \n    // plan to add a set of useful stopwords, consider changing some of the\n    // interior filters.\n    MockAnalyzer analyzer = new MockAnalyzer(random);\n    // TODO: something about lock timeouts and leftover locks.\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, analyzer)\n        .setOpenMode(OpenMode.CREATE));\n    writer.commit();\n    IndexReader reader = IndexReader.open(dir);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    \n    int num = atLeast(1000);\n    for(int dx = 0; dx < num; dx ++) {\n      String f = randomField();\n      Document doc = new Document();\n      doc.add(newField(\"data\", f, TextField.TYPE_STORED));\t\n      writer.addDocument(doc);\n    }\n    \n    reader.close();\n    writer.close();\n    rmDir(dirPath);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["a3776dccca01c11e7046323cfad46a3b4a471233","f83af14a2a8131b14d7aee6274c740334e0363d3"],"f83af14a2a8131b14d7aee6274c740334e0363d3":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["d572389229127c297dd1fa5ce4758e1cec41e799","a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["2aafd88401639311b0404e67c94e829e123a0e45"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["a0e45742e10e8e3b98e854babe6dbb07a4197b71"],"2aafd88401639311b0404e67c94e829e123a0e45":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"a3776dccca01c11e7046323cfad46a3b4a471233":["132903c28af3aa6f67284b78de91c0f0a99488c2","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","f83af14a2a8131b14d7aee6274c740334e0363d3"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f83af14a2a8131b14d7aee6274c740334e0363d3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e45742e10e8e3b98e854babe6dbb07a4197b71":["3242a09f703274d3b9283f2064a1a33064b53a1b","132903c28af3aa6f67284b78de91c0f0a99488c2"],"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"f83af14a2a8131b14d7aee6274c740334e0363d3":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9":["d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"d572389229127c297dd1fa5ce4758e1cec41e799":["a0e45742e10e8e3b98e854babe6dbb07a4197b71","3242a09f703274d3b9283f2064a1a33064b53a1b"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"2aafd88401639311b0404e67c94e829e123a0e45":["d572389229127c297dd1fa5ce4758e1cec41e799"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"d8d3f45cdd3ff689aaf7a3aab99e2df31305ac10":["69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["f83af14a2a8131b14d7aee6274c740334e0363d3","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"69a923a22517eb7ff0bad9c6d1a7d45cc0696bd4":["2aafd88401639311b0404e67c94e829e123a0e45"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["b48e4082e2f39f1eb6f935ea9a1203c5e8d830a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","962d04139994fce5193143ef35615499a9a96d78","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}