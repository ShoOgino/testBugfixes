{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","commits":[{"id":"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","date":1308411958,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        readTermStats();\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","date":1308439813,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        readTermStats();\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8bb0f45246d2d999b5b8b9136efd068fcece5c4","date":1308601169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        readTermStats();\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"718f8730b97959cb87aaeadc9fafb9513f3c1bfe","date":1308670382,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        readTermStats();\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":null,"sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        readTermStats();\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"2553b00f699380c64959ccb27991289aae87be2e":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["c8bb0f45246d2d999b5b8b9136efd068fcece5c4"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc"],"718f8730b97959cb87aaeadc9fafb9513f3c1bfe":["2553b00f699380c64959ccb27991289aae87be2e"],"c8bb0f45246d2d999b5b8b9136efd068fcece5c4":["718f8730b97959cb87aaeadc9fafb9513f3c1bfe","fd9cc9d77712aba3662f24632df7539ab75e3667"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"7a2ad3e19433f4c343b5e95ecc8a85cc33dffccc":["d1ded5d4f5b5e3e5f32bff69cd6fe5e64322a886","c8bb0f45246d2d999b5b8b9136efd068fcece5c4","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}