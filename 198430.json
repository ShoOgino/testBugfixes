{"path":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]));\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]));\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"239f79ed06f0979cfe1911ec5fba32b94fda43c1","date":1359553898,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]));\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61d5f95d14e5b9b046998c51e16709a398c15226","date":1359603451,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]));\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]));\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#doTestMigration(int).mjava","sourceNew":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","sourceOld":"  private void doTestMigration(final int partitionSize) throws Exception {\n    // create a facets index with PayloadFacetFields and check it after migration\n    Directory indexDir = newDirectory();\n    Directory taxoDir = newDirectory();\n    \n    // set custom CLP fields for two dimensions and use the default ($facets) for the other two\n    HashMap<CategoryPath,CategoryListParams> params = new HashMap<CategoryPath,CategoryListParams>();\n    params.put(new CategoryPath(DIMENSIONS[0]), new CategoryListParams(DIMENSIONS[0]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    params.put(new CategoryPath(DIMENSIONS[1]), new CategoryListParams(DIMENSIONS[1]) {\n      @Override\n      public OrdinalPolicy getOrdinalPolicy(String dimension) {\n        return OrdinalPolicy.ALL_PARENTS;\n      }\n    });\n    \n    HashMap<String,OrdinalPolicy> policies = new HashMap<String,CategoryListParams.OrdinalPolicy>();\n    policies.put(DIMENSIONS[2], OrdinalPolicy.ALL_PARENTS);\n    policies.put(DIMENSIONS[3], OrdinalPolicy.ALL_PARENTS);\n    FacetIndexingParams fip = new PerDimensionIndexingParams(params, new PerDimensionOrdinalPolicy(policies)) {\n      @Override\n      public int getPartitionSize() {\n        return partitionSize;\n      }\n    };\n    \n    HashMap<String,Integer> expectedCounts = createIndex(indexDir, taxoDir, fip);\n    migrateIndex(indexDir, fip);\n    verifyMigratedIndex(indexDir, taxoDir, expectedCounts, fip);\n    \n    IOUtils.close(indexDir, taxoDir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"61d5f95d14e5b9b046998c51e16709a398c15226":["c4015cd39dff8d4dec562d909f9766debac53aa6","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"61d5f95d14e5b9b046998c51e16709a398c15226":[],"c4015cd39dff8d4dec562d909f9766debac53aa6":["61d5f95d14e5b9b046998c51e16709a398c15226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"239f79ed06f0979cfe1911ec5fba32b94fda43c1":["607428da722dcb3e86bbd11c63de8986e6275c36","61d5f95d14e5b9b046998c51e16709a398c15226"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["c4015cd39dff8d4dec562d909f9766debac53aa6","239f79ed06f0979cfe1911ec5fba32b94fda43c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["61d5f95d14e5b9b046998c51e16709a398c15226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}