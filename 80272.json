{"path":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#assertBufferUpdates(FieldUpdatesBuffer,List[DocValuesUpdate.NumericDocValuesUpdate],boolean).mjava","commits":[{"id":"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8","date":1582222690,"type":0,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#assertBufferUpdates(FieldUpdatesBuffer,List[DocValuesUpdate.NumericDocValuesUpdate],boolean).mjava","pathOld":"/dev/null","sourceNew":"  void assertBufferUpdates(FieldUpdatesBuffer buffer,\n                           List<DocValuesUpdate.NumericDocValuesUpdate> updates,\n                           boolean termSorted) throws IOException {\n    if (termSorted) {\n      updates.sort(Comparator.comparing(u -> u.term.bytes));\n      SortedMap<BytesRef, DocValuesUpdate.NumericDocValuesUpdate> byTerms = new TreeMap<>();\n      for (DocValuesUpdate.NumericDocValuesUpdate update : updates) {\n        byTerms.compute(update.term.bytes, (k, v) -> v != null && v.docIDUpto >= update.docIDUpto ? v : update);\n      }\n      updates = new ArrayList<>(byTerms.values());\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    DocValuesUpdate.NumericDocValuesUpdate expectedUpdate;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      expectedUpdate = updates.get(count++);\n      assertEquals(expectedUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(expectedUpdate.term.field, value.termField);\n      assertEquals(expectedUpdate.hasValue, value.hasValue);\n      if (expectedUpdate.hasValue) {\n        assertEquals(expectedUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(expectedUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f94c392daa8f5708186bede16c84eafad4cdd2","date":1599578873,"type":3,"author":"Mike Drob","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#assertBufferUpdates(FieldUpdatesBuffer,List[DocValuesUpdate.NumericDocValuesUpdate],boolean).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestFieldUpdatesBuffer#assertBufferUpdates(FieldUpdatesBuffer,List[DocValuesUpdate.NumericDocValuesUpdate],boolean).mjava","sourceNew":"  void assertBufferUpdates(FieldUpdatesBuffer buffer,\n                           List<DocValuesUpdate.NumericDocValuesUpdate> updates,\n                           boolean termSorted) throws IOException {\n    if (termSorted) {\n      updates.sort(Comparator.comparing(u -> u.term.bytes));\n      SortedMap<BytesRef, DocValuesUpdate.NumericDocValuesUpdate> byTerms = new TreeMap<>();\n      for (DocValuesUpdate.NumericDocValuesUpdate update : updates) {\n        byTerms.compute(update.term.bytes, (k, v) -> v != null && v.docIDUpTo >= update.docIDUpTo ? v : update);\n      }\n      updates = new ArrayList<>(byTerms.values());\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    DocValuesUpdate.NumericDocValuesUpdate expectedUpdate;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      expectedUpdate = updates.get(count++);\n      assertEquals(expectedUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(expectedUpdate.term.field, value.termField);\n      assertEquals(expectedUpdate.hasValue, value.hasValue);\n      if (expectedUpdate.hasValue) {\n        assertEquals(expectedUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(expectedUpdate.docIDUpTo, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","sourceOld":"  void assertBufferUpdates(FieldUpdatesBuffer buffer,\n                           List<DocValuesUpdate.NumericDocValuesUpdate> updates,\n                           boolean termSorted) throws IOException {\n    if (termSorted) {\n      updates.sort(Comparator.comparing(u -> u.term.bytes));\n      SortedMap<BytesRef, DocValuesUpdate.NumericDocValuesUpdate> byTerms = new TreeMap<>();\n      for (DocValuesUpdate.NumericDocValuesUpdate update : updates) {\n        byTerms.compute(update.term.bytes, (k, v) -> v != null && v.docIDUpto >= update.docIDUpto ? v : update);\n      }\n      updates = new ArrayList<>(byTerms.values());\n    }\n    FieldUpdatesBuffer.BufferedUpdateIterator iterator = buffer.iterator();\n    FieldUpdatesBuffer.BufferedUpdate value;\n\n    int count = 0;\n    long min = Long.MAX_VALUE;\n    long max = Long.MIN_VALUE;\n    boolean hasAtLeastOneValue = false;\n    DocValuesUpdate.NumericDocValuesUpdate expectedUpdate;\n    while ((value = iterator.next()) != null) {\n      long v = buffer.getNumericValue(count);\n      expectedUpdate = updates.get(count++);\n      assertEquals(expectedUpdate.term.bytes.utf8ToString(), value.termValue.utf8ToString());\n      assertEquals(expectedUpdate.term.field, value.termField);\n      assertEquals(expectedUpdate.hasValue, value.hasValue);\n      if (expectedUpdate.hasValue) {\n        assertEquals(expectedUpdate.getValue(), value.numericValue);\n        assertEquals(v, value.numericValue);\n        min = Math.min(min, v);\n        max = Math.max(max, v);\n        hasAtLeastOneValue = true;\n      } else {\n        assertEquals(0, value.numericValue);\n        assertEquals(0, v);\n      }\n      assertEquals(expectedUpdate.docIDUpto, value.docUpTo);\n    }\n    if (hasAtLeastOneValue) {\n      assertEquals(max, buffer.getMaxNumeric());\n      assertEquals(min, buffer.getMinNumeric());\n    } else {\n      assertEquals(0, buffer.getMaxNumeric());\n      assertEquals(0, buffer.getMinNumeric());\n    }\n    assertEquals(count, updates.size());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9f94c392daa8f5708186bede16c84eafad4cdd2"]},"commit2Childs":{"fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8":["c9f94c392daa8f5708186bede16c84eafad4cdd2"],"c9f94c392daa8f5708186bede16c84eafad4cdd2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb0b91dbd7ffa9329d88b6cf6d606e542fed61d8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}