{"path":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next(Token).mjava","commits":[{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next(Token).mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next().mjava","sourceNew":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return reusableToken.reinit(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","sourceOld":"    public Token next() {\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return new Token(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#incrementToken().mjava","pathOld":"contrib/memory/src/java/org/apache/lucene/index/memory/PatternAnalyzer.PatternTokenizer#next(Token).mjava","sourceNew":"    public final boolean incrementToken() {\n      if (matcher == null) return false;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          termAtt.setTermBuffer(text);\n          offsetAtt.setOffset(start, end);\n          return true;\n        }\n        if (!isMatch) return false;\n      }\n    }\n\n","sourceOld":"    public Token next(final Token reusableToken) {\n      assert reusableToken != null;\n      if (matcher == null) return null;\n      \n      while (true) { // loop takes care of leading and trailing boundary cases\n        int start = pos;\n        int end;\n        boolean isMatch = matcher.find();\n        if (isMatch) {\n          end = matcher.start();\n          pos = matcher.end();\n        } else { \n          end = str.length();\n          matcher = null; // we're finished\n        }\n        \n        if (start != end) { // non-empty match (header/trailer)\n          String text = str.substring(start, end);\n          if (toLowerCase) text = text.toLowerCase(locale);\n          return reusableToken.reinit(text, start, end);\n        }\n        if (!isMatch) return null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b5756469957918cac40a831acec9cf01c8c2bb3"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}