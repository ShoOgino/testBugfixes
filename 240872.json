{"path":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","commits":[{"id":"61c45e99cf6676da48f19d7511c73712ad39402b","date":1495508331,"type":0,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildCoreName() {\n    assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(\"collection1\", \"shard1\", Replica.Type.NRT, 1));\n    assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(\"collection1\", \"shard2\", Replica.Type.PULL,2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testBuildCoreName() {\n    assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(\"collection1\", \"shard1\", Replica.Type.NRT, 1));\n    assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(\"collection1\", \"shard2\", Replica.Type.PULL,2));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"651c3ddf5bc1266d9de0a972ec05e59d77099a4c","date":1500969855,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(zkClient, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(zkClient, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() {\n    assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(\"collection1\", \"shard1\", Replica.Type.NRT, 1));\n    assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(\"collection1\", \"shard2\", Replica.Type.PULL,2));\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(zkClient, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(zkClient, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() {\n    assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(\"collection1\", \"shard1\", Replica.Type.NRT, 1));\n    assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(\"collection1\", \"shard2\", Replica.Type.PULL,2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(zkClient, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(zkClient, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() {\n    assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(\"collection1\", \"shard1\", Replica.Type.NRT, 1));\n    assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(\"collection1\", \"shard2\", Replica.Type.PULL,2));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(zkClient, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(zkClient, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/AssignTest#testBuildCoreName().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/AssignTest#testBuildCoreName().mjava","sourceNew":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testBuildCoreName() throws IOException, InterruptedException, KeeperException {\n    String zkDir = createTempDir(\"zkData\").toFile().getAbsolutePath();\n    ZkTestServer server = new ZkTestServer(zkDir);\n    server.run();\n    try (SolrZkClient zkClient = new SolrZkClient(server.getZkAddress(), 10000)) {\n      zkClient.makePath(\"/\", true);\n      // TODO: fix this to be independent of ZK\n      ZkDistribStateManager stateManager = new ZkDistribStateManager(zkClient);\n      Map<String, Slice> slices = new HashMap<>();\n      slices.put(\"shard1\", new Slice(\"shard1\", new HashMap<>(), null));\n      slices.put(\"shard2\", new Slice(\"shard2\", new HashMap<>(), null));\n\n      DocCollection docCollection = new DocCollection(\"collection1\", slices, null, DocRouter.DEFAULT);\n      assertEquals(\"Core name pattern changed\", \"collection1_shard1_replica_n1\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard1\", Replica.Type.NRT));\n      assertEquals(\"Core name pattern changed\", \"collection1_shard2_replica_p2\", Assign.buildSolrCoreName(stateManager, docCollection, \"shard2\", Replica.Type.PULL));\n    } finally {\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["61c45e99cf6676da48f19d7511c73712ad39402b"],"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","61c45e99cf6676da48f19d7511c73712ad39402b"],"a52341299179de5479672f7cf518bf4b173f34b3":["61c45e99cf6676da48f19d7511c73712ad39402b","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"61c45e99cf6676da48f19d7511c73712ad39402b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a52341299179de5479672f7cf518bf4b173f34b3"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["e9017cf144952056066919f1ebc7897ff9bd71b1","651c3ddf5bc1266d9de0a972ec05e59d77099a4c"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"651c3ddf5bc1266d9de0a972ec05e59d77099a4c":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["936cdd5882761db3b844afd6f84ab81cbb011a75"],"a52341299179de5479672f7cf518bf4b173f34b3":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"61c45e99cf6676da48f19d7511c73712ad39402b":["651c3ddf5bc1266d9de0a972ec05e59d77099a4c","e9017cf144952056066919f1ebc7897ff9bd71b1","a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","61c45e99cf6676da48f19d7511c73712ad39402b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}