{"path":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","commits":[{"id":"95395bf94a1949052d9110b07e728d9cf6aba90c","date":1101219438,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","pathOld":"/dev/null","sourceNew":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n\tHits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T));\n\tassertEquals(\"find all\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F));\n\tassertEquals(\"all but last\", numDocs-1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T));\n\tassertEquals(\"all but first\", numDocs-1, result.length());\n        \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F));\n        assertEquals(\"all but ends\", numDocs-2, result.length());\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T));\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T));\n        assertEquals(\"up to med\", 1+ medId-minId, result.length());\n\n        // unbounded id\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,null,T,F));\n\tassertEquals(\"min and up\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T));\n\tassertEquals(\"max and down\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,null,F,F));\n\tassertEquals(\"not min, but up\", numDocs-1, result.length());\n        \n\tresult = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F));\n\tassertEquals(\"not max, but down\", numDocs-1, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F));\n        assertEquals(\"med and up, not max\", maxId-medId, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T));\n        assertEquals(\"not min, up to med\", medId-minId, result.length());\n\n        // very small sets\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F));\n\tassertEquals(\"min,min,F,F\", 0, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F));\n\tassertEquals(\"med,med,F,F\", 0, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F));\n\tassertEquals(\"max,max,F,F\", 0, result.length());\n                     \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T));\n\tassertEquals(\"min,min,T,T\", 1, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",null,minIP,F,T));\n\tassertEquals(\"nul,min,F,T\", 1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T));\n\tassertEquals(\"max,max,T,T\", 1, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F));\n\tassertEquals(\"max,nul,T,T\", 1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T));\n\tassertEquals(\"med,med,T,T\", 1, result.length());\n        \n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","sourceNew":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but last\", numDocs-1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but first\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n        // unbounded id\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"min and up\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"max and down\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n        assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n        assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n        // very small sets\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"med,med,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"med,med,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n\tHits result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T));\n\tassertEquals(\"find all\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F));\n\tassertEquals(\"all but last\", numDocs-1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T));\n\tassertEquals(\"all but first\", numDocs-1, result.length());\n        \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F));\n        assertEquals(\"all but ends\", numDocs-2, result.length());\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T));\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T));\n        assertEquals(\"up to med\", 1+ medId-minId, result.length());\n\n        // unbounded id\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,null,T,F));\n\tassertEquals(\"min and up\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T));\n\tassertEquals(\"max and down\", numDocs, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,null,F,F));\n\tassertEquals(\"not min, but up\", numDocs-1, result.length());\n        \n\tresult = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F));\n\tassertEquals(\"not max, but down\", numDocs-1, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F));\n        assertEquals(\"med and up, not max\", maxId-medId, result.length());\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T));\n        assertEquals(\"not min, up to med\", medId-minId, result.length());\n\n        // very small sets\n\n\tresult = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F));\n\tassertEquals(\"min,min,F,F\", 0, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F));\n\tassertEquals(\"med,med,F,F\", 0, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F));\n\tassertEquals(\"max,max,F,F\", 0, result.length());\n                     \n\tresult = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T));\n\tassertEquals(\"min,min,T,T\", 1, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",null,minIP,F,T));\n\tassertEquals(\"nul,min,F,T\", 1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T));\n\tassertEquals(\"max,max,T,T\", 1, result.length());\n\tresult = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F));\n\tassertEquals(\"max,nul,T,T\", 1, result.length());\n\n\tresult = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T));\n\tassertEquals(\"med,med,T,T\", 1, result.length());\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b33dc4652df2747e38f9782fde82bd426b77c538","date":1221599001,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","sourceNew":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but last\", numDocs-1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but first\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n        // unbounded id\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"min and up\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"max and down\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n        assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n        assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n        // very small sets\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"med,med,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"med,med,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but last\", numDocs-1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but first\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n        // unbounded id\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"min and up\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"max and down\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n        assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n        assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n        // very small sets\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"med,med,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"med,med,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestTermRangeFilter#testRangeFilterId().mjava","pathOld":"src/test/org/apache/lucene/search/TestRangeFilter#testRangeFilterId().mjava","sourceNew":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n  result = search.search(q,new TermRangeFilter(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but last\", numDocs-1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but first\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n        result = search.search(q,new TermRangeFilter(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n        result = search.search(q,new TermRangeFilter(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n        // unbounded id\n\n  result = search.search(q,new TermRangeFilter(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"min and up\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"max and down\", numDocs, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new TermRangeFilter(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n        result = search.search(q,new TermRangeFilter(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n        assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n        result = search.search(q,new TermRangeFilter(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n        assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n        // very small sets\n\n  result = search.search(q,new TermRangeFilter(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"med,med,F,F\", 0, result.length);\n  result = search.search(q,new TermRangeFilter(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new TermRangeFilter(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new TermRangeFilter(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  result = search.search(q,new TermRangeFilter(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"med,med,T,T\", 1, result.length);\n        \n    }\n\n","sourceOld":"    public void testRangeFilterId() throws IOException {\n\n        IndexReader reader = IndexReader.open(signedIndex.index);\n\tIndexSearcher search = new IndexSearcher(reader);\n\n        int medId = ((maxId - minId) / 2);\n        \n        String minIP = pad(minId);\n        String maxIP = pad(maxId);\n        String medIP = pad(medId);\n    \n        int numDocs = reader.numDocs();\n        \n        assertEquals(\"num of docs\", numDocs, 1+ maxId - minId);\n        \n  ScoreDoc[] result;\n        Query q = new TermQuery(new Term(\"body\",\"body\"));\n\n        // test id, bounded on both ends\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"find all\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,T,F), numDocs).scoreDocs;\n  assertEquals(\"all but last\", numDocs-1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"all but first\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",minIP,maxIP,F,F), numDocs).scoreDocs;\n        assertEquals(\"all but ends\", numDocs-2, result.length);\n    \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"med and up\", 1+ maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,T,T), numDocs).scoreDocs;\n        assertEquals(\"up to med\", 1+ medId-minId, result.length);\n\n        // unbounded id\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"min and up\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"max and down\", numDocs, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,null,F,F), numDocs).scoreDocs;\n  assertEquals(\"not min, but up\", numDocs-1, result.length);\n        \n  result = search.search(q,new RangeFilter(\"id\",null,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"not max, but down\", numDocs-1, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",medIP,maxIP,T,F), numDocs).scoreDocs;\n        assertEquals(\"med and up, not max\", maxId-medId, result.length);\n        \n        result = search.search(q,new RangeFilter(\"id\",minIP,medIP,F,T), numDocs).scoreDocs;\n        assertEquals(\"not min, up to med\", medId-minId, result.length);\n\n        // very small sets\n\n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"min,min,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"med,med,F,F\", 0, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,F,F), numDocs).scoreDocs;\n  assertEquals(\"max,max,F,F\", 0, result.length);\n                     \n  result = search.search(q,new RangeFilter(\"id\",minIP,minIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"min,min,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",null,minIP,F,T), numDocs).scoreDocs;\n  assertEquals(\"nul,min,F,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",maxIP,maxIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"max,max,T,T\", 1, result.length);\n  result = search.search(q,new RangeFilter(\"id\",maxIP,null,T,F), numDocs).scoreDocs;\n  assertEquals(\"max,nul,T,T\", 1, result.length);\n\n  result = search.search(q,new RangeFilter(\"id\",medIP,medIP,T,T), numDocs).scoreDocs;\n  assertEquals(\"med,med,T,T\", 1, result.length);\n        \n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["b33dc4652df2747e38f9782fde82bd426b77c538"],"b33dc4652df2747e38f9782fde82bd426b77c538":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f612096ab5275c4821d05f126bf45a89f4782b8"]},"commit2Childs":{"0f612096ab5275c4821d05f126bf45a89f4782b8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b33dc4652df2747e38f9782fde82bd426b77c538":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["95395bf94a1949052d9110b07e728d9cf6aba90c"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b33dc4652df2747e38f9782fde82bd426b77c538"],"95395bf94a1949052d9110b07e728d9cf6aba90c":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}