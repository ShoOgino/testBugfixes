{"path":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","pathOld":"backwards/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/search/NumericRangeFilter#newIntRange(String,int,Integer,Integer,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory that creates a <code>NumericRangeFilter</code>, that filters a <code>int</code>\n   * range using the given <a href=\"NumericRangeQuery.html#precisionStepDesc\"><code>precisionStep</code></a>.\n   * You can have half-open ranges (which are in fact &lt;/&le; or &gt;/&ge; queries)\n   * by setting the min or max value to <code>null</code>. By setting inclusive to false, it will\n   * match all documents excluding the bounds, with inclusive on, the boundaries are hits, too.\n   */\n  public static NumericRangeFilter<Integer> newIntRange(final String field, final int precisionStep,\n    Integer min, Integer max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    return new NumericRangeFilter<Integer>(\n      NumericRangeQuery.newIntRange(field, precisionStep, min, max, minInclusive, maxInclusive)\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}