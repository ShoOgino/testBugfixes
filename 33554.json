{"path":"lucene/backwards/src/test/org/apache/lucene/TestDemo#testDemo().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/TestDemo#testDemo().mjava","pathOld":"backwards/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/TestDemo#testDemo().mjava","sourceNew":null,"sourceOld":"  public void testDemo() throws IOException, ParseException {\n\n    Analyzer analyzer = new StandardAnalyzer(Version.LUCENE_CURRENT);\n\n    // Store the index in memory:\n    Directory directory = new RAMDirectory();\n    // To store an index on disk, use this instead:\n    //Directory directory = FSDirectory.open(\"/tmp/testindex\");\n    IndexWriter iwriter = new IndexWriter(directory, analyzer, true,\n                                          new IndexWriter.MaxFieldLength(25000));\n    Document doc = new Document();\n    String text = \"This is the text to be indexed.\";\n    doc.add(new Field(\"fieldname\", text, Field.Store.YES,\n        Field.Index.ANALYZED));\n    iwriter.addDocument(doc);\n    iwriter.close();\n    \n    // Now search the index:\n    IndexSearcher isearcher = new IndexSearcher(directory, true); // read-only=true\n    // Parse a simple query that searches for \"text\":\n    QueryParser parser = new QueryParser(Version.LUCENE_CURRENT, \"fieldname\", analyzer);\n    Query query = parser.parse(\"text\");\n    ScoreDoc[] hits = isearcher.search(query, null, 1000).scoreDocs;\n    assertEquals(1, hits.length);\n    // Iterate through the results:\n    for (int i = 0; i < hits.length; i++) {\n      Document hitDoc = isearcher.doc(hits[i].doc);\n      assertEquals(\"This is the text to be indexed.\", hitDoc.get(\"fieldname\"));\n    }\n    isearcher.close();\n    directory.close();\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}