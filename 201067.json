{"path":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testPoints().mjava","commits":[{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testPoints().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testDimensionalValues().mjava","sourceNew":"  public void testPoints() throws Exception {\n    PointValues values = sortedReader.getPointValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","sourceOld":"  public void testDimensionalValues() throws Exception {\n    DimensionalValues values = sortedReader.getDimensionalValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f","date":1456936072,"type":4,"author":"Mike McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testPoints().mjava","sourceNew":null,"sourceOld":"  public void testPoints() throws Exception {\n    PointValues values = sortedReader.getPointValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":4,"author":"Noble Paul","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/misc/src/test/org/apache/lucene/index/SorterTestBase#testPoints().mjava","sourceNew":null,"sourceOld":"  public void testPoints() throws Exception {\n    PointValues values = sortedReader.getPointValues();\n    values.intersect(DIMENSIONAL_FIELD,\n                     new IntersectVisitor() {\n                       @Override\n                       public void visit(int docID) {\n                         throw new IllegalStateException();\n                       }\n\n                       @Override\n                       public void visit(int docID, byte[] packedValues) {\n                         assertEquals(sortedValues[docID].intValue(), NumericUtils.bytesToInt(packedValues, 0));\n                       }\n\n                       @Override\n                       public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n                         return Relation.CELL_CROSSES_QUERY;\n                       }\n                     });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","adc9dc8ef0ce617b940a039fd12f79e8b098cc7f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"adc9dc8ef0ce617b940a039fd12f79e8b098cc7f":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}