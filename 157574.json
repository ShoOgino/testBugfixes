{"path":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","commits":[{"id":"e8a848e758754282137f42bf85793c278e250390","date":1249640668,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/original/parser/OriginalSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        fieldToken = jj_consume_token(TERM);\n        jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        break;\n      case STAR:\n        jj_consume_token(STAR);\n        jj_consume_token(COLON);\n                      field=\"*\";\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case STAR:\n    case QUOTED:\n    case TERM:\n    case PREFIXTERM:\n    case WILDTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[9] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        fieldToken = jj_consume_token(TERM);\n        jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        break;\n      case STAR:\n        jj_consume_token(STAR);\n        jj_consume_token(COLON);\n                      field=\"*\";\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case STAR:\n    case QUOTED:\n    case TERM:\n    case PREFIXTERM:\n    case WILDTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[9] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f75cd88b219e040b204bff4c189784659752f786","date":1250640581,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case TERM:\n        fieldToken = jj_consume_token(TERM);\n        jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n        break;\n      case STAR:\n        jj_consume_token(STAR);\n        jj_consume_token(COLON);\n                      field=\"*\";\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        jj_consume_token(-1);\n        throw new ParseException();\n      }\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case STAR:\n    case QUOTED:\n    case TERM:\n    case PREFIXTERM:\n    case WILDTERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[8] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[9] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","pathOld":"contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser#Clause(CharSequence).mjava","sourceNew":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","sourceOld":"  final public QueryNode Clause(CharSequence field) throws ParseException {\n  QueryNode q;\n  Token fieldToken=null, boost=null;\n  boolean group = false;\n    if (jj_2_1(2)) {\n      fieldToken = jj_consume_token(TERM);\n      jj_consume_token(COLON);\n                               field=EscapeQuerySyntaxImpl.discardEscapeChar(fieldToken.image);\n    } else {\n      ;\n    }\n    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n    case QUOTED:\n    case TERM:\n    case RANGEIN_START:\n    case RANGEEX_START:\n    case NUMBER:\n      q = Term(field);\n      break;\n    case LPAREN:\n      jj_consume_token(LPAREN);\n      q = Query(field);\n      jj_consume_token(RPAREN);\n      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {\n      case CARAT:\n        jj_consume_token(CARAT);\n        boost = jj_consume_token(NUMBER);\n        break;\n      default:\n        jj_la1[7] = jj_gen;\n        ;\n      }\n                                                                 group=true;\n      break;\n    default:\n      jj_la1[8] = jj_gen;\n      jj_consume_token(-1);\n      throw new ParseException();\n    }\n      if (boost != null) {\n                  float f = (float)1.0;\n                  try {\n                    f = Float.valueOf(boost.image).floatValue();\n                    // avoid boosting null queries, such as those caused by stop words\n                if (q != null) {\n                        q = new BoostQueryNode(q, f);\n                }\n                  } catch (Exception ignored) {\n                        /* Should this be handled somehow? (defaults to \"no boost\", if\n             * boost number is invalid)\n             */\n                  }\n      }\n      if (group) { q = new GroupQueryNode(q);}\n      {if (true) return q;}\n    throw new Error(\"Missing return statement in function\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e8a848e758754282137f42bf85793c278e250390":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f75cd88b219e040b204bff4c189784659752f786":["e8a848e758754282137f42bf85793c278e250390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f75cd88b219e040b204bff4c189784659752f786"]},"commit2Childs":{"e8a848e758754282137f42bf85793c278e250390":["f75cd88b219e040b204bff4c189784659752f786"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e8a848e758754282137f42bf85793c278e250390"],"f75cd88b219e040b204bff4c189784659752f786":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}