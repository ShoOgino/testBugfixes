{"path":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","commits":[{"id":"637a392e2e05d4e1179ac3c532cfeef0cde977ba","date":1376347977,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"/dev/null","sourceNew":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"/dev/null","sourceNew":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7","date":1376416532,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","sourceNew":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","sourceNew":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"49368dc30c6d7f57e2547707f2a26a2e790dc587","date":1378306664,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","sourceNew":"  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  /***\n  @Test\n  public void testSmallBlockDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    final List<SolrInputDocument> docs = Arrays.asList(new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(child, \"a\");\n      }\n    }, new SolrInputDocument() {\n      {\n        addField(\"id\", id());\n        addField(parent, \"B\");\n      }\n    });\n    cmd.setDocs(docs);\n    assertEquals(2, h.getCore().getUpdateHandler().addBlock(cmd));\n    assertU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"*:*\"), \"//*[@numFound='2']\");\n    assertSingleParentOf(searcher, one(\"a\"), \"B\");\n  }\n  \n  @Test\n  public void testEmptyDirect() throws Exception {\n    final AddBlockUpdateCommand cmd = new AddBlockUpdateCommand(req(\"*:*\"));\n    // let's add empty one\n    cmd.setDocs(Collections.<SolrInputDocument> emptyList());\n    assertEquals(0,\n        ((DirectUpdateHandler2) h.getCore().getUpdateHandler()).addBlock(cmd));\n    assertU(commit());\n    \n    assertQ(req(\"*:*\"), \"//*[@numFound='0']\");\n  }\n   ***/\n  \n  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb1a5eff758fefcac883606f32579ae501a14119","date":1553516101,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest#testExceptionThrown().mjava","sourceNew":"  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = getStringFromDocument(block(\"abcD\"));\n    log.info(abcD);\n    assertBlockU(abcD);\n\n    Document docToFail = getDocument();\n    Element root = docToFail.createElement(\"add\");\n    docToFail.appendChild(root);\n    Element doc1 = docToFail.createElement(\"doc\");\n    root.appendChild(doc1);\n    attachField(docToFail, doc1, \"id\", id());\n    attachField(docToFail, doc1, parent, \"Y\");\n    attachField(docToFail, doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = docToFail.createElement(\"doc\");\n    doc1.appendChild(subDoc1);\n    attachField(docToFail, subDoc1, \"id\", id());\n    attachField(docToFail, subDoc1, child, \"x\");\n    Element doc2 = docToFail.createElement(\"doc\");\n    root.appendChild(doc2);\n    attachField(docToFail, doc2, \"id\", id());\n    attachField(docToFail, doc2, parent, \"W\");\n\n    assertFailedBlockU(getStringFromDocument(docToFail));\n\n    assertBlockU(getStringFromDocument(block(\"efgH\")));\n    assertBlockU(commit());\n\n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","sourceOld":"  @Test\n  public void testExceptionThrown() throws Exception {\n    final String abcD = block(\"abcD\").asXML();\n    log.info(abcD);\n    assertBlockU(abcD);\n    \n    Document docToFail = DocumentHelper.createDocument();\n    Element root = docToFail.addElement(\"add\");\n    Element doc1 = root.addElement(\"doc\");\n    attachField(doc1, \"id\", id());\n    attachField(doc1, parent, \"Y\");\n    attachField(doc1, \"sample_i\", \"notanumber/ignore_exception\");\n    Element subDoc1 = doc1.addElement(\"doc\");\n    attachField(subDoc1, \"id\", id());\n    attachField(subDoc1, child, \"x\");\n    Element doc2 = root.addElement(\"doc\");\n    attachField(doc2, \"id\", id());\n    attachField(doc2, parent, \"W\");\n    \n    assertFailedBlockU(docToFail.asXML());\n    \n    assertBlockU(block(\"efgH\").asXML());\n    assertBlockU(commit());\n    \n    final SolrIndexSearcher searcher = getSearcher();\n    assertQ(req(\"q\",\"*:*\",\"indent\",\"true\", \"fl\",\"id,parent_s,child_s\"), \"//*[@numFound='\" + \"abcDefgH\".length() + \"']\");\n    assertSingleParentOf(searcher, one(\"abc\"), \"D\");\n    assertSingleParentOf(searcher, one(\"efg\"), \"H\");\n\n    assertQ(req(child + \":x\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":Y\"), \"//*[@numFound='0']\");\n    assertQ(req(parent + \":W\"), \"//*[@numFound='0']\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb1a5eff758fefcac883606f32579ae501a14119":["49368dc30c6d7f57e2547707f2a26a2e790dc587"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7":["637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb1a5eff758fefcac883606f32579ae501a14119"]},"commit2Childs":{"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"637a392e2e05d4e1179ac3c532cfeef0cde977ba":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7"],"bb1a5eff758fefcac883606f32579ae501a14119":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","637a392e2e05d4e1179ac3c532cfeef0cde977ba"],"ef902c9ab1f7e1bf5eddd0f5f8e3f28b94259fd7":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","49368dc30c6d7f57e2547707f2a26a2e790dc587"],"49368dc30c6d7f57e2547707f2a26a2e790dc587":["bb1a5eff758fefcac883606f32579ae501a14119"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}