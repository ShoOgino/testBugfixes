{"path":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","commits":[{"id":"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87","date":1328967626,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"/dev/null","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())).\n            setOpenMode(OpenMode.APPEND).\n            setMaxBufferedDocs(2).\n            setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(TEST_VERSION_CURRENT,\n      new MockAnalyzer(random()))\n      .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.shutdown();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.shutdown();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestDirectoryReader#testGetIndexCommit().mjava","sourceNew":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = SegmentInfos.readLatestCommit(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","sourceOld":"  public void testGetIndexCommit() throws IOException {\n\n    Directory d = newDirectory();\n\n    // set up writer\n    IndexWriter writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<27;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    SegmentInfos sis = new SegmentInfos();\n    sis.read(d);\n    DirectoryReader r = DirectoryReader.open(d);\n    IndexCommit c = r.getIndexCommit();\n\n    assertEquals(sis.getSegmentsFileName(), c.getSegmentsFileName());\n\n    assertTrue(c.equals(r.getIndexCommit()));\n\n    // Change the index\n    writer = new IndexWriter(\n        d,\n        newIndexWriterConfig(new MockAnalyzer(random()))\n            .setOpenMode(OpenMode.APPEND)\n            .setMaxBufferedDocs(2)\n            .setMergePolicy(newLogMergePolicy(10))\n    );\n    for(int i=0;i<7;i++)\n      addDocumentWithFields(writer);\n    writer.close();\n\n    DirectoryReader r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertFalse(c.equals(r2.getIndexCommit()));\n    assertFalse(r2.getIndexCommit().getSegmentCount() == 1);\n    r2.close();\n\n    writer = new IndexWriter(d, newIndexWriterConfig(new MockAnalyzer(random()))\n                                  .setOpenMode(OpenMode.APPEND));\n    writer.forceMerge(1);\n    writer.close();\n\n    r2 = DirectoryReader.openIfChanged(r);\n    assertNotNull(r2);\n    assertNull(DirectoryReader.openIfChanged(r2));\n    assertEquals(1, r2.getIndexCommit().getSegmentCount());\n\n    r.close();\n    r2.close();\n    d.close();\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["d0ef034a4f10871667ae75181537775ddcf8ade4","3384e6013a93e4d11b7d75388693f8d0388602bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"]},"commit2Childs":{"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83e99d44c4a660a48c0fcc7a0108ad0a56dc2f87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["3384e6013a93e4d11b7d75388693f8d0388602bf","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}