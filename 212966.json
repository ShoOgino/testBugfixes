{"path":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","date":1339238489,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto));\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"82557a475db3e0849171dc0be5b02e3ae0745ddb","date":1358195918,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader(0);\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54204c8a3ca26aeafd273139fc29baf70d0f6786","date":1564170395,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output());\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/fst/FSTEnum#doSeekExact().mjava","sourceNew":"  /** Seeks to exactly target term. */\n  boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output());\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","sourceOld":"  /** Seeks to exactly target term. */\n  protected boolean doSeekExact() throws IOException {\n\n    // TODO: possibly caller could/should provide common\n    // prefix length?  ie this work may be redundant if\n    // caller is in fact intersecting against its own\n    // automaton\n\n    //System.out.println(\"FE: seek exact upto=\" + upto);\n\n    // Save time by starting at the end of the shared prefix\n    // b/w our current term & the target:\n    rewindPrefix();\n\n    //System.out.println(\"FE: after rewind upto=\" + upto);\n    FST.Arc<T> arc = getArc(upto-1);\n    int targetLabel = getTargetLabel();\n\n    final FST.BytesReader fstReader = fst.getBytesReader();\n\n    while(true) {\n      //System.out.println(\"  cycle target=\" + (targetLabel == -1 ? \"-1\" : (char) targetLabel));\n      final FST.Arc<T> nextArc = fst.findTargetArc(targetLabel, arc, getArc(upto), fstReader);\n      if (nextArc == null) {\n        // short circuit\n        //upto--;\n        //upto = 0;\n        fst.readFirstTargetArc(arc, getArc(upto), fstReader);\n        //System.out.println(\"  no match upto=\" + upto);\n        return false;\n      }\n      // Match -- recurse:\n      output[upto] = fst.outputs.add(output[upto-1], nextArc.output);\n      if (targetLabel == FST.END_LABEL) {\n        //System.out.println(\"  return found; upto=\" + upto + \" output=\" + output[upto] + \" nextArc=\" + nextArc.isLast());\n        return true;\n      }\n      setCurrentLabel(targetLabel);\n      incr();\n      targetLabel = getTargetLabel();\n      arc = nextArc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["82557a475db3e0849171dc0be5b02e3ae0745ddb"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8","82557a475db3e0849171dc0be5b02e3ae0745ddb"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f8061ddd97f3352007d927dae445884a6f3d857b":["82557a475db3e0849171dc0be5b02e3ae0745ddb","54204c8a3ca26aeafd273139fc29baf70d0f6786"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["54204c8a3ca26aeafd273139fc29baf70d0f6786"]},"commit2Childs":{"54204c8a3ca26aeafd273139fc29baf70d0f6786":["f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"82557a475db3e0849171dc0be5b02e3ae0745ddb":["54204c8a3ca26aeafd273139fc29baf70d0f6786","c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b"],"8b9fb5afeea0288262bffcc55bdcda8b5fa272c8":["82557a475db3e0849171dc0be5b02e3ae0745ddb","c4015cd39dff8d4dec562d909f9766debac53aa6"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["8b9fb5afeea0288262bffcc55bdcda8b5fa272c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}