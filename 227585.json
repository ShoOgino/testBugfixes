{"path":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For a given class which extends a CategoryProperty, answers whether it is\n   * an instance of AssociationProperty (AP) or not. <br>\n   * This method is a cheaper replacement for a call to\n   * <code>instanceof</code>. It has two HashSets - one for classes which are\n   * an extension to AP and one for the classes which are not. Whenever a\n   * property class is introduced:\n   * <ul>\n   * <li>if it is known as a property class extending AP (contained in the\n   * validHashSet)- returns true</li>\n   * <li>if it is known as a property class NOT extending AP - returns false</li>\n   * <li>\n   * If it was not matched against both sets, it calls 'instanceof' to find\n   * out if it extends AP, puts it in the matching Set and returning true or\n   * false accordingly</li>\n   *</ul>\n   * \n   * NOTE: 'instanceof' is only called once per a Class (not instance) of a\n   * property. And as there are few properties (currently 4 concrete\n   * implementations) the two sets would be rather small\n   */\n  public static boolean isAssociationProperty(Class<? extends CategoryProperty> clazz) {\n    if (ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return true;\n    }\n    \n    if (NON_ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return false;\n    }\n    \n    if (AssociationProperty.class.isAssignableFrom(clazz)) {\n      ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n      return true;\n    }\n    \n    NON_ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For a given class which extends a CategoryProperty, answers whether it is\n   * an instance of AssociationProperty (AP) or not. <br>\n   * This method is a cheaper replacement for a call to\n   * <code>instanceof</code>. It has two HashSets - one for classes which are\n   * an extension to AP and one for the classes which are not. Whenever a\n   * property class is introduced:\n   * <ul>\n   * <li>if it is known as a property class extending AP (contained in the\n   * validHashSet)- returns true</li>\n   * <li>if it is known as a property class NOT extending AP - returns false</li>\n   * <li>\n   * If it was not matched against both sets, it calls 'instanceof' to find\n   * out if it extends AP, puts it in the matching Set and returning true or\n   * false accordingly</li>\n   *</ul>\n   * \n   * NOTE: 'instanceof' is only called once per a Class (not instance) of a\n   * property. And as there are few properties (currently 4 concrete\n   * implementations) the two sets would be rather small\n   */\n  public static boolean isAssociationProperty(Class<? extends CategoryProperty> clazz) {\n    if (ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return true;\n    }\n    \n    if (NON_ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return false;\n    }\n    \n    if (AssociationProperty.class.isAssignableFrom(clazz)) {\n      ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n      return true;\n    }\n    \n    NON_ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * For a given class which extends a CategoryProperty, answers whether it is\n   * an instance of AssociationProperty (AP) or not. <br>\n   * This method is a cheaper replacement for a call to\n   * <code>instanceof</code>. It has two HashSets - one for classes which are\n   * an extension to AP and one for the classes which are not. Whenever a\n   * property class is introduced:\n   * <ul>\n   * <li>if it is known as a property class extending AP (contained in the\n   * validHashSet)- returns true</li>\n   * <li>if it is known as a property class NOT extending AP - returns false</li>\n   * <li>\n   * If it was not matched against both sets, it calls 'instanceof' to find\n   * out if it extends AP, puts it in the matching Set and returning true or\n   * false accordingly</li>\n   *</ul>\n   * \n   * NOTE: 'instanceof' is only called once per a Class (not instance) of a\n   * property. And as there are few properties (currently 4 concrete\n   * implementations) the two sets would be rather small\n   */\n  public static boolean isAssociationProperty(Class<? extends CategoryProperty> clazz) {\n    if (ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return true;\n    }\n    \n    if (NON_ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return false;\n    }\n    \n    if (AssociationProperty.class.isAssignableFrom(clazz)) {\n      ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n      return true;\n    }\n    \n    NON_ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/enhancements/association/AssociationEnhancement#isAssociationProperty(Class[#-extends-CategoryProperty]).mjava","sourceNew":"  /**\n   * For a given class which extends a CategoryProperty, answers whether it is\n   * an instance of AssociationProperty (AP) or not. <br>\n   * This method is a cheaper replacement for a call to\n   * <code>instanceof</code>. It has two HashSets - one for classes which are\n   * an extension to AP and one for the classes which are not. Whenever a\n   * property class is introduced:\n   * <ul>\n   * <li>if it is known as a property class extending AP (contained in the\n   * validHashSet)- returns true</li>\n   * <li>if it is known as a property class NOT extending AP - returns false</li>\n   * <li>\n   * If it was not matched against both sets, it calls 'instanceof' to find\n   * out if it extends AP, puts it in the matching Set and returning true or\n   * false accordingly</li>\n   *</ul>\n   * \n   * NOTE: 'instanceof' is only called once per a Class (not instance) of a\n   * property. And as there are few properties (currently 4 concrete\n   * implementations) the two sets would be rather small\n   */\n  public static boolean isAssociationProperty(Class<? extends CategoryProperty> clazz) {\n    if (ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return true;\n    }\n    \n    if (NON_ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return false;\n    }\n    \n    if (AssociationProperty.class.isAssignableFrom(clazz)) {\n      ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n      return true;\n    }\n    \n    NON_ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n    return false;\n  }\n\n","sourceOld":"  /**\n   * For a given class which extends a CategoryProperty, answers whether it is\n   * an instance of AssociationProperty (AP) or not. <br>\n   * This method is a cheaper replacement for a call to\n   * <code>instanceof</code>. It has two HashSets - one for classes which are\n   * an extension to AP and one for the classes which are not. Whenever a\n   * property class is introduced:\n   * <ul>\n   * <li>if it is known as a property class extending AP (contained in the\n   * validHashSet)- returns true</li>\n   * <li>if it is known as a property class NOT extending AP - returns false</li>\n   * <li>\n   * If it was not matched against both sets, it calls 'instanceof' to find\n   * out if it extends AP, puts it in the matching Set and returning true or\n   * false accordingly</li>\n   *</ul>\n   * \n   * NOTE: 'instanceof' is only called once per a Class (not instance) of a\n   * property. And as there are few properties (currently 4 concrete\n   * implementations) the two sets would be rather small\n   */\n  public static boolean isAssociationProperty(Class<? extends CategoryProperty> clazz) {\n    if (ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return true;\n    }\n    \n    if (NON_ASSOCIATION_PROPERTY_CLASSES.contains(clazz)) {\n      return false;\n    }\n    \n    if (AssociationProperty.class.isAssignableFrom(clazz)) {\n      ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n      return true;\n    }\n    \n    NON_ASSOCIATION_PROPERTY_CLASSES.add(clazz);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89f15687f60bd49cd3d9de427e85c17fd9397d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["b89678825b68eccaf09e6ab71675fc0b0af1e099","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}