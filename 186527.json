{"path":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","commits":[{"id":"103e2ec175f1aa5629df5bcd34eb1c53055caeb1","date":1268243753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriterConfig#setMaxBufferedDocs(int).mjava","sourceNew":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Determines the minimal number of documents required before the buffered\n   * in-memory documents are flushed as a new Segment. Large values generally\n   * give faster indexing.\n   * \n   * <p>\n   * When this is set, the writer will flush every maxBufferedDocs added\n   * documents. Pass in {@link #DISABLE_AUTO_FLUSH} to prevent triggering a\n   * flush due to number of buffered documents. Note that if flushing by RAM\n   * usage is also enabled, then the flush will be triggered by whichever comes\n   * first.\n   * \n   * <p>\n   * Disabled by default (writer flushes by RAM usage).\n   * \n   * @see #setRAMBufferSizeMB(double)\n   * \n   * @throws IllegalArgumentException\n   *           if maxBufferedDocs is enabled but smaller than 2, or it disables\n   *           maxBufferedDocs when ramBufferSize is already disabled\n   */\n  public IndexWriterConfig setMaxBufferedDocs(int maxBufferedDocs) {\n    if (maxBufferedDocs != DISABLE_AUTO_FLUSH && maxBufferedDocs < 2)\n      throw new IllegalArgumentException(\n          \"maxBufferedDocs must at least be 2 when enabled\");\n    if (maxBufferedDocs == DISABLE_AUTO_FLUSH\n        && ramBufferSizeMB == DISABLE_AUTO_FLUSH)\n      throw new IllegalArgumentException(\n          \"at least one of ramBufferSize and maxBufferedDocs must be enabled\");\n    this.maxBufferedDocs = maxBufferedDocs;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e52fea2c4081a1e552b98506691990be59503168":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}