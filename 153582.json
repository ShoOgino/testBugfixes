{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) getQuery(qtxt,qp);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) getQuery(qtxt,qp);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) getQuery(qtxt,qp);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"a\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) qp.parse(qtxt);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testPositionIncrement().mjava","sourceNew":"  public void testPositionIncrement() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) getQuery(qtxt,qp);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","sourceOld":"  public void testPositionIncrement() throws Exception {\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    qp.setEnablePositionIncrements(true);\n    String qtxt = \"\\\"the words in poisitions pos02578 are stopped in this phrasequery\\\"\";\n    //               0         2                      5           7  8\n    int expectedPositions[] = {1,3,4,6,9};\n    PhraseQuery pq = (PhraseQuery) getQuery(qtxt,qp);\n    //System.out.println(\"Query text: \"+qtxt);\n    //System.out.println(\"Result: \"+pq);\n    Term t[] = pq.getTerms();\n    int pos[] = pq.getPositions();\n    for (int i = 0; i < t.length; i++) {\n      //System.out.println(i+\". \"+t[i]+\"  pos: \"+pos[i]);\n      assertEquals(\"term \"+i+\" = \"+t[i]+\" has wrong term-position!\",expectedPositions[i],pos[i]);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eafa8c5eabc3dacd34680054e6a33bda024080ac"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","eafa8c5eabc3dacd34680054e6a33bda024080ac","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}