{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader).mjava","commits":[{"id":"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd","date":1361836936,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates an appropriate {@link FacetsAccumulator},\n   * returning {@link FacetsAccumulator} when all requests\n   * are {@link CountFacetRequest} and only one partition is\n   * in use, otherwise {@link StandardFacetsAccumulator}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    }\n    \n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n      }\n    }\n    \n    return new FacetsAccumulator(fsp, indexReader, taxoReader);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an appropriate {@link FacetsAccumulator},\n   * returning {@link FacetsAccumulator} when all requests\n   * are {@link CountFacetRequest} and only one partition is\n   * in use, otherwise {@link StandardFacetsAccumulator}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    }\n    \n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n      }\n    }\n    \n    return new FacetsAccumulator(fsp, indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":4,"author":"Han Jiang","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetsAccumulator#create(FacetSearchParams,IndexReader,TaxonomyReader).mjava","sourceNew":null,"sourceOld":"  /**\n   * Creates an appropriate {@link FacetsAccumulator},\n   * returning {@link FacetsAccumulator} when all requests\n   * are {@link CountFacetRequest} and only one partition is\n   * in use, otherwise {@link StandardFacetsAccumulator}.\n   */\n  public static FacetsAccumulator create(FacetSearchParams fsp, IndexReader indexReader, TaxonomyReader taxoReader) {\n    if (fsp.indexingParams.getPartitionSize() != Integer.MAX_VALUE) {\n      return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n    }\n    \n    for (FacetRequest fr : fsp.facetRequests) {\n      if (!(fr instanceof CountFacetRequest)) {\n        return new StandardFacetsAccumulator(fsp, indexReader, taxoReader);\n      }\n    }\n    \n    return new FacetsAccumulator(fsp, indexReader, taxoReader);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"]},"commit2Childs":{"5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5b1ac4be5e40d7bda6ec0f850c933a95ca0642fd"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}