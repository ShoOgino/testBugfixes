{"path":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4946500259641951dbd7f8a61956bf14bef3f60","date":1283284212,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7a6790cef9c9b6973f40b5ea8fd98a6f51798956","date":1287395477,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            (current.bits & requiredMask) == requiredMask &&\n            current.coord >= minNrShouldMatch) {\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        Scorer scorer = sub.scorer;\n        sub.collector.setScorer(scorer);\n        int doc = scorer.docID();\n        while (doc < end) {\n          sub.collector.collect(doc);\n          doc = scorer.nextDoc();\n        }\n        more |= (doc != NO_MORE_DOCS);\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd86d8c5713fc65e119372f12a3c5fdc47987b56","date":1318525216,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    boolean more;\n    do {\n      while (bucketTable.first != null) {         // more queued\n        current = bucketTable.first;\n        bucketTable.first = current.next;         // pop the queue\n\n        // check prohibited & required, and minNrShouldMatch\n        if ((current.bits & prohibitedMask) == 0 &&\n            current.coord >= minNrShouldMatch) {\n          // TODO: re-enable this if BQ ever sends us required clauses\n          // (current.bits & requiredMask) == requiredMask &&\n          return doc = current.doc;\n        }\n      }\n\n      // refill the queue\n      more = false;\n      end += BucketTable.SIZE;\n      for (SubScorer sub = scorers; sub != null; sub = sub.next) {\n        int subScorerDocID = sub.scorer.docID();\n        if (subScorerDocID != NO_MORE_DOCS) {\n          more |= sub.scorer.score(sub.collector, end, subScorerDocID);\n        }\n      }\n    } while (bucketTable.first != null || more);\n\n    return doc = NO_MORE_DOCS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","pathOld":"lucene/src/java/org/apache/lucene/search/BooleanScorer#nextDoc().mjava","sourceNew":"  @Override\n  public int nextDoc() throws IOException {\n    throw new UnsupportedOperationException();\n  }\n\n","sourceOld":"  @Override\n  public int nextDoc() throws IOException {\n    throw new UnsupportedOperationException();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7a6790cef9c9b6973f40b5ea8fd98a6f51798956":["e4946500259641951dbd7f8a61956bf14bef3f60"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd86d8c5713fc65e119372f12a3c5fdc47987b56"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["e4946500259641951dbd7f8a61956bf14bef3f60","7a6790cef9c9b6973f40b5ea8fd98a6f51798956"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e4946500259641951dbd7f8a61956bf14bef3f60":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7a6790cef9c9b6973f40b5ea8fd98a6f51798956":["dd86d8c5713fc65e119372f12a3c5fdc47987b56","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd86d8c5713fc65e119372f12a3c5fdc47987b56":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"e4946500259641951dbd7f8a61956bf14bef3f60":["7a6790cef9c9b6973f40b5ea8fd98a6f51798956","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","e4946500259641951dbd7f8a61956bf14bef3f60"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}