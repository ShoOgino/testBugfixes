{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointsReader,int,int,byte[],byte[]).mjava","commits":[{"id":"d561885e9bb6238af1ff8afe8630dcfe49b66ac7","date":1469780634,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointsReader,int,int,byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointsReader reader, int from, int to,\n      byte[] scratch1, byte[] scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final byte[] pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot, offset, scratch2, offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a20457919db052812998f60294d17daa883ff972","date":1470227748,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointsReader,int,int,BytesRef,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/MutablePointsReaderUtils#sortByDim(int,int,int[],MutablePointsReader,int,int,byte[],byte[]).mjava","sourceNew":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointsReader reader, int from, int to,\n      BytesRef scratch1, BytesRef scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final BytesRef pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot.bytes, pivot.offset + offset, scratch2.bytes, scratch2.offset + offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","sourceOld":"  /** Sort points on the given dimension. */\n  static void sortByDim(int sortedDim, int bytesPerDim, int[] commonPrefixLengths,\n      MutablePointsReader reader, int from, int to,\n      byte[] scratch1, byte[] scratch2) {\n\n    // No need for a fancy radix sort here, this is called on the leaves only so\n    // there are not many values to sort\n    final int offset = sortedDim * bytesPerDim + commonPrefixLengths[sortedDim];\n    final int numBytesToCompare = bytesPerDim - commonPrefixLengths[sortedDim];\n    new IntroSorter() {\n\n      final byte[] pivot = scratch1;\n      int pivotDoc = -1;\n\n      @Override\n      protected void swap(int i, int j) {\n        reader.swap(i, j);\n      }\n\n      @Override\n      protected void setPivot(int i) {\n        reader.getValue(i, pivot);\n        pivotDoc = reader.getDocID(i);\n      }\n\n      @Override\n      protected int comparePivot(int j) {\n        reader.getValue(j, scratch2);\n        int cmp = StringHelper.compare(numBytesToCompare, pivot, offset, scratch2, offset);\n        if (cmp == 0) {\n          cmp = pivotDoc - reader.getDocID(j);\n        }\n        return cmp;\n      }\n    }.sort(from, to);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a20457919db052812998f60294d17daa883ff972":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a20457919db052812998f60294d17daa883ff972"]},"commit2Childs":{"a20457919db052812998f60294d17daa883ff972":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d561885e9bb6238af1ff8afe8630dcfe49b66ac7"],"d561885e9bb6238af1ff8afe8630dcfe49b66ac7":["a20457919db052812998f60294d17daa883ff972"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}