{"path":"lucene/backwards/src/java/org/apache/lucene/index/Payload#clone().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/index/Payload#clone().mjava","pathOld":"backwards/src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/java/org/apache/lucene/index/Payload#clone().mjava","sourceNew":null,"sourceOld":"  /**\n   * Clones this payload by creating a copy of the underlying\n   * byte array.\n   */\n  @Override\n  public Object clone() {\n    try {\n      // Start with a shallow copy of data\n      Payload clone = (Payload) super.clone();\n      // Only copy the part of data that belongs to this Payload\n      if (offset == 0 && length == data.length) {\n        // It is the whole thing, so just clone it.\n        clone.data = (byte[]) data.clone();\n      }\n      else {\n        // Just get the part\n        clone.data = this.toByteArray();\n        clone.offset = 0;\n      }\n      return clone;\n    } catch (CloneNotSupportedException e) {\n      throw new RuntimeException(e);  // shouldn't happen\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}