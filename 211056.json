{"path":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingPostingsConsumer#startDoc(int,int).mjava","commits":[{"id":"55c178897422fc01a257353a67f2ee23f1c82403","date":1343076368,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingPostingsConsumer#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void startDoc(int docID, int freq) throws IOException {\n      assert state == PostingsConsumerState.INITIAL;\n      state = PostingsConsumerState.START;\n      assert docID >= 0;\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        assert freq == -1;\n        this.freq = 0; // we don't expect any positions here\n      } else {\n        assert freq > 0;\n        this.freq = freq;\n        totalTermFreq += freq;\n      }\n      this.positionCount = 0;\n      this.lastPosition = 0;\n      this.lastStartOffset = 0;\n      docFreq++;\n      visitedDocs.set(docID);\n      in.startDoc(docID, freq);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57635ff388fa1bee703f3b892a86a3e48975576a","date":1343077051,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingPostingsConsumer#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void startDoc(int docID, int freq) throws IOException {\n      assert state == PostingsConsumerState.INITIAL;\n      state = PostingsConsumerState.START;\n      assert docID >= 0;\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        assert freq == -1;\n        this.freq = 0; // we don't expect any positions here\n      } else {\n        assert freq > 0;\n        this.freq = freq;\n        totalTermFreq += freq;\n      }\n      this.positionCount = 0;\n      this.lastPosition = 0;\n      this.lastStartOffset = 0;\n      docFreq++;\n      visitedDocs.set(docID);\n      in.startDoc(docID, freq);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingPostingsConsumer#startDoc(int,int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void startDoc(int docID, int freq) throws IOException {\n      assert state == PostingsConsumerState.INITIAL;\n      state = PostingsConsumerState.START;\n      assert docID >= 0;\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        assert freq == -1;\n        this.freq = 0; // we don't expect any positions here\n      } else {\n        assert freq > 0;\n        this.freq = freq;\n        totalTermFreq += freq;\n      }\n      this.positionCount = 0;\n      this.lastPosition = 0;\n      this.lastStartOffset = 0;\n      docFreq++;\n      visitedDocs.set(docID);\n      in.startDoc(docID, freq);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/asserting/AssertingPostingsFormat.AssertingPostingsConsumer#startDoc(int,int).mjava","sourceNew":null,"sourceOld":"    @Override\n    public void startDoc(int docID, int freq) throws IOException {\n      assert state == PostingsConsumerState.INITIAL;\n      state = PostingsConsumerState.START;\n      assert docID >= 0;\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_ONLY) {\n        assert freq == -1;\n        this.freq = 0; // we don't expect any positions here\n      } else {\n        assert freq > 0;\n        this.freq = freq;\n        totalTermFreq += freq;\n      }\n      this.positionCount = 0;\n      this.lastPosition = 0;\n      this.lastStartOffset = 0;\n      docFreq++;\n      visitedDocs.set(docID);\n      in.startDoc(docID, freq);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55c178897422fc01a257353a67f2ee23f1c82403":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55c178897422fc01a257353a67f2ee23f1c82403"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["55c178897422fc01a257353a67f2ee23f1c82403"],"57635ff388fa1bee703f3b892a86a3e48975576a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55c178897422fc01a257353a67f2ee23f1c82403"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"]},"commit2Childs":{"55c178897422fc01a257353a67f2ee23f1c82403":["aba371508186796cc6151d8223a5b4e16d02e26e","fa80a35d7c4b2b1e83082b275e3e8328ab93db52","57635ff388fa1bee703f3b892a86a3e48975576a"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55c178897422fc01a257353a67f2ee23f1c82403","aba371508186796cc6151d8223a5b4e16d02e26e","57635ff388fa1bee703f3b892a86a3e48975576a"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"57635ff388fa1bee703f3b892a86a3e48975576a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","57635ff388fa1bee703f3b892a86a3e48975576a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}