{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getLeader(String,String).mjava","sourceNew":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","sourceOld":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get properties of a shard leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String shard) {\n    Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n    if (collectionLeaders == null) return null;\n    return collectionLeaders.get(shard);\n  }\n\n","sourceOld":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getLeader(String,String).mjava","sourceNew":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","sourceOld":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get properties of a shard leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String shard) {\n    Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n    if (collectionLeaders == null) return null;\n    return collectionLeaders.get(shard);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get properties of a shard leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String shard) {\n    Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n    if (collectionLeaders == null) return null;\n    return collectionLeaders.get(shard);\n  }\n\n","sourceOld":"\t/**\n\t * Get properties of a shard leader for specific collection.\n\t */\n\tpublic ZkNodeProps getLeader(String collection, String shard) {\n\t  Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n\t  if (collectionLeaders == null) return null;\n\t  return collectionLeaders.get(shard);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get properties of a shard/slice leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get properties of a shard leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String shard) {\n    Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n    if (collectionLeaders == null) return null;\n    return collectionLeaders.get(shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89f828d954597b98a28942874636f35c719b8a5d","date":1354471211,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get properties of a shard/slice leader for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get properties of a shard/slice leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get properties of a shard/slice leader for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get properties of a shard leader for specific collection.\n   */\n  public ZkNodeProps getLeader(String collection, String shard) {\n    Map<String,ZkNodeProps> collectionLeaders = leaders.get(collection);\n    if (collectionLeaders == null) return null;\n    return collectionLeaders.get(shard);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56a558aa5aadd60ae850d1ab090098bc63bdfaf9","date":1355245333,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get properties of a shard/slice leader for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get properties of a shard/slice leader for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0622fbd990643ae4cacb693db6a0c82cf8916ae2","date":1397637446,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = collectionStates.get(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c8df3f10a676c3de5dbf390f17a2de2d45cacd","date":1461615626,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   * @deprecated Use {@link DocCollection#getLeader(String)} instead\n   */\n  @Deprecated\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   * @deprecated Use {@link DocCollection#getLeader(String)} instead\n   */\n  @Deprecated\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","sourceOld":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   */\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"344b0840364d990b29b97467bfcc766ff8325d11","date":1501574100,"type":4,"author":"Cao Manh Dat","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   * @deprecated Use {@link DocCollection#getLeader(String)} instead\n   */\n  @Deprecated\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":4,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getLeader(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get the lead replica for specific collection, or null if one currently doesn't exist.\n   * @deprecated Use {@link DocCollection#getLeader(String)} instead\n   */\n  @Deprecated\n  public Replica getLeader(String collection, String sliceName) {\n    DocCollection coll = getCollectionOrNull(collection);\n    if (coll == null) return null;\n    Slice slice = coll.getSlice(sliceName);\n    if (slice == null) return null;\n    return slice.getLeader();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"89f828d954597b98a28942874636f35c719b8a5d":["c5a558d54519c651068ddb202f03befefb1514a7"],"344b0840364d990b29b97467bfcc766ff8325d11":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["0622fbd990643ae4cacb693db6a0c82cf8916ae2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"407687e67faf6e1f02a211ca078d8e3eed631027":["da94fd5fcff99442877e118f00fb42094b59f497","89f828d954597b98a28942874636f35c719b8a5d"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","344b0840364d990b29b97467bfcc766ff8325d11"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["da94fd5fcff99442877e118f00fb42094b59f497"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["89f828d954597b98a28942874636f35c719b8a5d"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["344b0840364d990b29b97467bfcc766ff8325d11"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"89f828d954597b98a28942874636f35c719b8a5d":["407687e67faf6e1f02a211ca078d8e3eed631027","56a558aa5aadd60ae850d1ab090098bc63bdfaf9"],"344b0840364d990b29b97467bfcc766ff8325d11":["7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["344b0840364d990b29b97467bfcc766ff8325d11","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"04c8df3f10a676c3de5dbf390f17a2de2d45cacd":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"c5a558d54519c651068ddb202f03befefb1514a7":["89f828d954597b98a28942874636f35c719b8a5d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8fd5be977c105554c6a7b68afcdbc511439723ab","3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"56a558aa5aadd60ae850d1ab090098bc63bdfaf9":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","0622fbd990643ae4cacb693db6a0c82cf8916ae2"],"da94fd5fcff99442877e118f00fb42094b59f497":["407687e67faf6e1f02a211ca078d8e3eed631027","c7869f64c874ebf7f317d22c00baf2b6857797a6","c5a558d54519c651068ddb202f03befefb1514a7","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0622fbd990643ae4cacb693db6a0c82cf8916ae2":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","04c8df3f10a676c3de5dbf390f17a2de2d45cacd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}