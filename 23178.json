{"path":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm)\n    throws IOException {\n\n    final DocTermState docTermState = (DocTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99cf56f3a650b908f7017a72f9d23940418f8a52","date":1284891529,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm)\n    throws IOException {\n\n    final DocTermState docTermState = (DocTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/standard/StandardPostingsReaderImpl#readTerm(IndexInput,FieldInfo,TermState,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void readTerm(IndexInput termsIn, FieldInfo fieldInfo, TermState termState, boolean isIndexTerm)\n    throws IOException {\n\n    final DocTermState docTermState = (DocTermState) termState;\n\n    if (isIndexTerm) {\n      docTermState.freqOffset = termsIn.readVLong();\n    } else {\n      docTermState.freqOffset += termsIn.readVLong();\n    }\n\n    if (docTermState.docFreq >= skipInterval) {\n      docTermState.skipOffset = termsIn.readVInt();\n    } else {\n      docTermState.skipOffset = 0;\n    }\n\n    if (!fieldInfo.omitTermFreqAndPositions) {\n      if (isIndexTerm) {\n        docTermState.proxOffset = termsIn.readVLong();\n      } else {\n        docTermState.proxOffset += termsIn.readVLong();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","99cf56f3a650b908f7017a72f9d23940418f8a52"],"99cf56f3a650b908f7017a72f9d23940418f8a52":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99cf56f3a650b908f7017a72f9d23940418f8a52"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","99cf56f3a650b908f7017a72f9d23940418f8a52"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"99cf56f3a650b908f7017a72f9d23940418f8a52":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}