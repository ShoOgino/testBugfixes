{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    mp.setMinMergeDocs(100);\n    writer.setMergePolicy(mp);\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      writer.setMergePolicy(mp);\n      mp.setMinMergeDocs(100);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    mp.setMinMergeDocs(100);\n    writer.setMergePolicy(mp);\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      writer.setMergePolicy(mp);\n      mp.setMinMergeDocs(100);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ab99e8c71442b92c320e218141dee04a9b91ce8","date":1269203801,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n    LogDocMergePolicy mp = new LogDocMergePolicy(writer);\n    mp.setMinMergeDocs(100);\n    writer.setMergePolicy(mp);\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(10));\n      writer.setMergePolicy(mp);\n      mp.setMinMergeDocs(100);\n      ((LogMergePolicy) writer.getMergePolicy()).setMergeFactor(10);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new WhitespaceAnalyzer(TEST_VERSION_CURRENT)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new MockRAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory(random);\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig(random, TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = new RAMDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, new IndexWriterConfig(TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer()).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterMergePolicy#testForceFlush().mjava","sourceNew":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  // Test the case where flush is forced after every addDoc\n  public void testForceFlush() throws IOException {\n    Directory dir = newDirectory();\n\n    LogDocMergePolicy mp = new LogDocMergePolicy();\n    mp.setMinMergeDocs(100);\n    mp.setMergeFactor(10);\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(10).setMergePolicy(mp));\n\n    for (int i = 0; i < 100; i++) {\n      addDoc(writer);\n      writer.close();\n\n      mp = new LogDocMergePolicy();\n      mp.setMergeFactor(10);\n      writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT,\n          new MockAnalyzer(random)).setOpenMode(\n          OpenMode.APPEND).setMaxBufferedDocs(10).setMergePolicy(mp));\n      mp.setMinMergeDocs(100);\n      checkInvariants(writer);\n    }\n\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["d572389229127c297dd1fa5ce4758e1cec41e799","1f653cfcf159baeaafe5d01682a911e95bba4012"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["d572389229127c297dd1fa5ce4758e1cec41e799"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7ab99e8c71442b92c320e218141dee04a9b91ce8":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["7ab99e8c71442b92c320e218141dee04a9b91ce8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}