{"path":"lucene/backwards/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","pathOld":"backwards/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/util/TestBitVector#doTestDgaps(int,int,int).mjava","sourceNew":null,"sourceOld":"    private void doTestDgaps(int size, int count1, int count2) throws IOException {\n      Directory d = new  RAMDirectory();\n      BitVector bv = new BitVector(size);\n      for (int i=0; i<count1; i++) {\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n      }\n      bv.write(d, \"TESTBV\");\n      // gradually increase number of set bits\n      for (int i=count1; i<count2; i++) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.set(i);\n        assertEquals(i+1,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n      // now start decreasing number of set bits\n      for (int i=count2-1; i>=count1; i--) {\n        BitVector bv2 = new BitVector(d, \"TESTBV\");\n        assertTrue(doCompare(bv,bv2));\n        bv = bv2;\n        bv.clear(i);\n        assertEquals(i,bv.count());\n        bv.write(d, \"TESTBV\");\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}