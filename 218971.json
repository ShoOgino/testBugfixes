{"path":"solr/core/src/java/org/apache/solr/core/RuntimeLib#verifyJarSignature(ByteBuffer).mjava","commits":[{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/RuntimeLib#verifyJarSignature(ByteBuffer).mjava","pathOld":"/dev/null","sourceNew":"  void verifyJarSignature(ByteBuffer buf) {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys.isEmpty()) {\n      if (sig == null) {\n        verified = true;\n        return;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n      }\n    } else if (sig == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n    }\n\n    try {\n      String matchedKey = new CryptoKeys(keys).verify(sig, buf);\n      if (matchedKey == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n      log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n    } catch (Exception e) {\n      log.error(\"Signature verifying error \", e);\n      if (e instanceof SolrException) throw (SolrException) e;\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RuntimeLib#verifyJarSignature(ByteBuffer).mjava","sourceNew":null,"sourceOld":"  void verifyJarSignature(ByteBuffer buf) {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys.isEmpty()) {\n      if (sig == null) {\n        verified = true;\n        return;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n      }\n    } else if (sig == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n    }\n\n    try {\n      String matchedKey = new CryptoKeys(keys).verify(sig, buf);\n      if (matchedKey == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n      log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n    } catch (Exception e) {\n      log.error(\"Signature verifying error \", e);\n      if (e instanceof SolrException) throw (SolrException) e;\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/RuntimeLib#verifyJarSignature(ByteBuffer).mjava","sourceNew":null,"sourceOld":"  void verifyJarSignature(ByteBuffer buf) {\n    Map<String, byte[]> keys = CloudUtil.getTrustedKeys(coreContainer.getZkController().getZkClient(), \"exe\");\n    if (keys.isEmpty()) {\n      if (sig == null) {\n        verified = true;\n        return;\n      } else {\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No public keys are available in ZK to verify signature for runtime lib  \" + name);\n      }\n    } else if (sig == null) {\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, StrUtils.formatString(\"runtimelib {0} should be signed with one of the keys in ZK /keys/exe \", name));\n    }\n\n    try {\n      String matchedKey = new CryptoKeys(keys).verify(sig, buf);\n      if (matchedKey == null)\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"No key matched signature for jar : \" + name + \" version: \" + version);\n      log.info(\"Jar {} signed with {} successfully verified\", name, matchedKey);\n    } catch (Exception e) {\n      log.error(\"Signature verifying error \", e);\n      if (e instanceof SolrException) throw (SolrException) e;\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error verifying key \", e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["fb50877dc038c021eba3a70999fd1f6ed85001c1","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}