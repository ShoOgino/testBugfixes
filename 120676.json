{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","commits":[{"id":"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","date":1452706901,"type":0,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // streams\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    // on\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // streams\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    // on\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/IntersectStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException{\n    return toExpression(factory, true);\n  }\n\n","sourceOld":"  @Override\n  public StreamExpression toExpression(StreamFactory factory) throws IOException {    \n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    \n    // streams\n    if(streamA instanceof Expressible){\n      expression.addParameter(((Expressible)streamA).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    if(originalStreamB instanceof Expressible){\n      expression.addParameter(((Expressible)originalStreamB).toExpression(factory));\n    }\n    else{\n      throw new IOException(\"This IntersectStream contains a non-expressible TupleStream - it cannot be converted to an expression\");\n    }\n    \n    // on\n    expression.addParameter(new StreamExpressionNamedParameter(\"on\",eq.toExpression(factory)));\n    \n    return expression;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fef6c45a8c2e0c4a323c0edc246d5d27fb3da298"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"fef6c45a8c2e0c4a323c0edc246d5d27fb3da298":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}