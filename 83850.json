{"path":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","commits":[{"id":"bccf7971a36bd151490117582a0a1a695081ead3","date":1502778995,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(Supplier[CoreContainer],ZkStateReader,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(Supplier<CoreContainer> coreContainer,\n                                                    ZkStateReader zkStateReader,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, zkStateReader, nodeList);\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          coreContainer.get(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c00aac053fdd75193eb8b6d45b64c26c3b586d5b","date":1503143818,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (policyName != null || !autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    } else {\n      log.debug(\"Identify nodes using rules framework\");\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getClusterDataProvider().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getClusterDataProvider(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getClusterDataProvider().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getClusterDataProvider(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws KeeperException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.zkStateReader.getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.zkStateReader, nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6397103f7076f0b5ee4edf5b3a63c750a072ff65","date":1510231708,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getZkController().getCoreContainer(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":["bccf7971a36bd151490117582a0a1a695081ead3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"427295870ac138112ed6ab0973a2dbe42e0a1a2d","date":1510742913,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(ocmh.policySessionRef);\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9285daca55ac37db4df2fd10d073211ce71e9bd","date":1510784456,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (PolicyHelper.class) {\n        PolicyHelper.SESSION_REF.set(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (ocmh) {\n        PolicyHelper.SESSION_REF.set(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d907c28c7fe6305eaec1756d51365f5149e1e41d","date":1512533044,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      synchronized (PolicyHelper.class) {\n        PolicyHelper.SESSION_REF.set(PolicyHelper.getPolicySessionRef(ocmh.overseer.getSolrCloudManager()));\n        try {\n          return getPositionsUsingPolicy(collectionName,\n              shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n        } finally {\n          PolicyHelper.SESSION_REF.remove();\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(SolrCloudManager,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/Assign#identifyNodes(OverseerCollectionMessageHandler,ClusterState,List[String],String,ZkNodeProps,List[String],int,int,int).mjava","sourceNew":"  public static List<ReplicaPosition> identifyNodes(SolrCloudManager cloudManager,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = cloudManager.getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          cloudManager,\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, cloudManager, nodeList);\n    }\n  }\n\n","sourceOld":"  public static List<ReplicaPosition> identifyNodes(OverseerCollectionMessageHandler ocmh,\n                                                    ClusterState clusterState,\n                                                    List<String> nodeList,\n                                                    String collectionName,\n                                                    ZkNodeProps message,\n                                                    List<String> shardNames,\n                                                    int numNrtReplicas,\n                                                    int numTlogReplicas,\n                                                    int numPullReplicas) throws IOException, InterruptedException {\n    List<Map> rulesMap = (List) message.get(\"rule\");\n    String policyName = message.getStr(POLICY);\n    AutoScalingConfig autoScalingConfig = ocmh.overseer.getSolrCloudManager().getDistribStateManager().getAutoScalingConfig();\n\n    if (rulesMap == null && policyName == null && autoScalingConfig.getPolicy().getClusterPolicy().isEmpty()) {\n      log.debug(\"Identify nodes using default\");\n      int i = 0;\n      List<ReplicaPosition> result = new ArrayList<>();\n      for (String aShard : shardNames)\n        for (Map.Entry<Replica.Type, Integer> e : ImmutableMap.of(Replica.Type.NRT, numNrtReplicas,\n            Replica.Type.TLOG, numTlogReplicas,\n            Replica.Type.PULL, numPullReplicas\n        ).entrySet()) {\n          for (int j = 0; j < e.getValue(); j++){\n            result.add(new ReplicaPosition(aShard, j, e.getKey(), nodeList.get(i % nodeList.size())));\n            i++;\n          }\n        }\n      return result;\n    } else {\n      if (numTlogReplicas + numPullReplicas != 0 && rulesMap != null) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n            Replica.Type.TLOG + \" or \" + Replica.Type.PULL + \" replica types not supported with placement rules or cluster policies\");\n      }\n    }\n\n    if (rulesMap != null && !rulesMap.isEmpty()) {\n      List<Rule> rules = new ArrayList<>();\n      for (Object map : rulesMap) rules.add(new Rule((Map) map));\n      Map<String, Integer> sharVsReplicaCount = new HashMap<>();\n\n      for (String shard : shardNames) sharVsReplicaCount.put(shard, numNrtReplicas);\n      ReplicaAssigner replicaAssigner = new ReplicaAssigner(rules,\n          sharVsReplicaCount,\n          (List<Map>) message.get(SNITCH),\n          new HashMap<>(),//this is a new collection. So, there are no nodes in any shard\n          nodeList,\n          ocmh.overseer.getSolrCloudManager(),\n          clusterState);\n\n      Map<ReplicaPosition, String> nodeMappings = replicaAssigner.getNodeMappings();\n      return nodeMappings.entrySet().stream()\n          .map(e -> new ReplicaPosition(e.getKey().shard, e.getKey().index, e.getKey().type, e.getValue()))\n          .collect(Collectors.toList());\n    } else  {\n      if (message.getStr(CREATE_NODE_SET) == null)\n        nodeList = Collections.emptyList();// unless explicitly specified do not pass node list to Policy\n      return getPositionsUsingPolicy(collectionName,\n          shardNames, numNrtReplicas, numTlogReplicas, numPullReplicas, policyName, ocmh.overseer.getSolrCloudManager(), nodeList);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["bccf7971a36bd151490117582a0a1a695081ead3","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bccf7971a36bd151490117582a0a1a695081ead3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"f9285daca55ac37db4df2fd10d073211ce71e9bd":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["f9285daca55ac37db4df2fd10d073211ce71e9bd"]},"commit2Childs":{"c00aac053fdd75193eb8b6d45b64c26c3b586d5b":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6397103f7076f0b5ee4edf5b3a63c750a072ff65":["427295870ac138112ed6ab0973a2dbe42e0a1a2d"],"bccf7971a36bd151490117582a0a1a695081ead3":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["6397103f7076f0b5ee4edf5b3a63c750a072ff65"],"f9285daca55ac37db4df2fd10d073211ce71e9bd":["d907c28c7fe6305eaec1756d51365f5149e1e41d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"427295870ac138112ed6ab0973a2dbe42e0a1a2d":["f9285daca55ac37db4df2fd10d073211ce71e9bd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c00aac053fdd75193eb8b6d45b64c26c3b586d5b","c304e97e7c1d472bc70e801b35ee78583916c6cd","bccf7971a36bd151490117582a0a1a695081ead3","560c18d71dad43d675158783c3840f8c80d6d39c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"d907c28c7fe6305eaec1756d51365f5149e1e41d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}