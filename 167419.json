{"path":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","commits":[{"id":"d68e5c46e6a5ebdf4dafec4a123344092b915cc0","date":1256752193,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","pathOld":"contrib/memory/src/test/org/apache/lucene/index/memory/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","sourceNew":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(new FileInputStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","sourceOld":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(new FileInputStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d16275d75dfe0b780ed62df4c811d083187c71a","date":1268583591,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","pathOld":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","sourceNew":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(getClass().getResourceAsStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","sourceOld":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(new FileInputStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","pathOld":"contrib/wordnet/src/test/org/apache/lucene/wordnet/TestSynonymTokenFilter#testSynonymsSingleQuote().mjava","sourceNew":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(getClass().getResourceAsStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","sourceOld":"  public void testSynonymsSingleQuote() throws Exception {\n    SynonymMap map = new SynonymMap(getClass().getResourceAsStream(testFile));\n    /* all expansions */\n    Analyzer analyzer = new SynonymWhitespaceAnalyzer(map, Integer.MAX_VALUE);\n    assertAnalyzesTo(analyzer, \"king\",\n        new String[] { \"king\", \"baron\" });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d16275d75dfe0b780ed62df4c811d083187c71a":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d68e5c46e6a5ebdf4dafec4a123344092b915cc0"],"1d16275d75dfe0b780ed62df4c811d083187c71a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"d68e5c46e6a5ebdf4dafec4a123344092b915cc0":["1d16275d75dfe0b780ed62df4c811d083187c71a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}