{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","commits":[{"id":"084884d4602f4d1c7411eab29e897e349ce62675","date":1475571034,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"/dev/null","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1967bed916cc89da82a1c2085f27976da6d08cbd","date":1475588750,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","pathOld":"/dev/null","sourceNew":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23e44daeaa8b89694d10df5999956c8e14a7dd09","date":1476689300,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene70/Lucene70DocValuesConsumer#flushTermsDictBlock(RAMOutputStream,RAMOutputStream,int[]).mjava","sourceNew":null,"sourceOld":"  // writes term dictionary \"block\"\n  // first term is absolute encoded as vint length + bytes.\n  // lengths of subsequent N terms are encoded as either N bytes or N shorts.\n  // in the double-byte case, the first byte is indicated with -1.\n  // subsequent terms are encoded as byte suffixLength + bytes.\n  private void flushTermsDictBlock(RAMOutputStream headerBuffer, RAMOutputStream bytesBuffer, int suffixDeltas[]) throws IOException {\n    boolean twoByte = false;\n    for (int i = 1; i < suffixDeltas.length; i++) {\n      if (suffixDeltas[i] > 254) {\n        twoByte = true;\n      }\n    }\n    if (twoByte) {\n      headerBuffer.writeByte((byte)255);\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeShort((short) suffixDeltas[i]);\n      }\n    } else {\n      for (int i = 1; i < suffixDeltas.length; i++) {\n        headerBuffer.writeByte((byte) suffixDeltas[i]);\n      }\n    }\n    headerBuffer.writeTo(data);\n    headerBuffer.reset();\n    bytesBuffer.writeTo(data);\n    bytesBuffer.reset();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","084884d4602f4d1c7411eab29e897e349ce62675"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"084884d4602f4d1c7411eab29e897e349ce62675":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"23e44daeaa8b89694d10df5999956c8e14a7dd09":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1967bed916cc89da82a1c2085f27976da6d08cbd":["23e44daeaa8b89694d10df5999956c8e14a7dd09"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1967bed916cc89da82a1c2085f27976da6d08cbd","084884d4602f4d1c7411eab29e897e349ce62675"],"084884d4602f4d1c7411eab29e897e349ce62675":["1967bed916cc89da82a1c2085f27976da6d08cbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}