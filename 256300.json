{"path":"src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","commits":[{"id":"8281d815c10235e2dab9ded85615ebe920dd3c22","date":1243323879,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"/dev/null","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","pathOld":"src/test/org/apache/solr/schema/TestBinaryField#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    byte[] buf = new byte[10];\n    for (int i = 0; i < 10; i++) {\n      buf[i] = (byte) i;\n    }\n    SolrInputDocument doc = null;\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 2, 5));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.addField(\"data\", ByteBuffer.wrap(buf, 4, 3));\n    server.add(doc);\n\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"data\", buf);\n    server.add(doc);\n\n    server.commit();\n\n    QueryResponse resp = server.query(new SolrQuery(\"*:*\"));\n    SolrDocumentList res = resp.getResults();\n    List<Bean> beans = resp.getBeans(Bean.class);\n    assertEquals(3, res.size());\n    assertEquals(3, beans.size());\n    for (SolrDocument d : res) {\n      Integer id = (Integer) d.getFieldValue(\"id\");\n      byte[] data = (byte[]) d.getFieldValue(\"data\");\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n    for (Bean d : beans) {\n      Integer id = d.id;\n      byte[] data = d.data;\n      if (id == 1) {\n        assertEquals(5, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 2), b);\n        }\n\n      } else if (id == 2) {\n        assertEquals(3, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)(i + 4), b);\n        }\n\n\n      } else if (id == 3) {\n        assertEquals(10, data.length);\n        for (int i = 0; i < data.length; i++) {\n          byte b = data[i];\n          assertEquals((byte)i, b);\n        }\n\n      }\n\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8281d815c10235e2dab9ded85615ebe920dd3c22":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8281d815c10235e2dab9ded85615ebe920dd3c22"],"8281d815c10235e2dab9ded85615ebe920dd3c22":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}