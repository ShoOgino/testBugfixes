{"path":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","pathOld":"contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","sourceNew":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap<?, ?> m1, HashMap<?, ?> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<?> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap<?, ?> m1, HashMap<?, ?> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<?> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","sourceNew":null,"sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap<?, ?> m1, HashMap<?, ?> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<?> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","sourceNew":null,"sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap<?, ?> m1, HashMap<?, ?> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<?> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/remote/src/test/org/apache/lucene/search/TestRemoteSort#assertSameValues(HashMap[#,#],HashMap[#,#]).mjava","sourceNew":null,"sourceOld":"  // make sure all the values in the maps match\n  private void assertSameValues (HashMap<?, ?> m1, HashMap<?, ?> m2) {\n    int n = m1.size();\n    int m = m2.size();\n    assertEquals (n, m);\n    Iterator<?> iter = m1.keySet().iterator();\n    while (iter.hasNext()) {\n      Object key = iter.next();\n      Object o1 = m1.get(key);\n      Object o2 = m2.get(key);\n      if (o1 instanceof Float) {\n        assertEquals(((Float)o1).floatValue(), ((Float)o2).floatValue(), 1e-6);\n      } else {\n        assertEquals (m1.get(key), m2.get(key));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["9454a6510e2db155fb01faa5c049b06ece95fab9","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}