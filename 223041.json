{"path":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#getIndexFormat(Directory).mjava","commits":[{"id":"f554f2d9b5456248ab6467b9d4f6015686797a6c","date":1554891357,"type":0,"author":"Tomoko Uchida","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#getIndexFormat(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns the string representation for Lucene codec version when the index was written.\n   *\n   * @param dir - index directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static String getIndexFormat(Directory dir) throws IOException {\n    Objects.requireNonNull(dir);\n\n    return new SegmentInfos.FindSegmentsFile<String>(dir) {\n      @Override\n      protected String doBody(String segmentFileName) throws IOException {\n        String format = \"unknown\";\n        try (IndexInput in = dir.openInput(segmentFileName, IOContext.READ)) {\n          if (CodecUtil.CODEC_MAGIC == in.readInt()) {\n            int actualVersion = CodecUtil.checkHeaderNoMagic(in, \"segments\", SegmentInfos.VERSION_70, Integer.MAX_VALUE);\n            if (actualVersion == SegmentInfos.VERSION_70) {\n              format = \"Lucene 7.0 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_72) {\n              format = \"Lucene 7.2 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_74) {\n              format = \"Lucene 7.4 or later\";\n            } else if (actualVersion > SegmentInfos.VERSION_74) {\n              format = \"Lucene 7.4 or later (UNSUPPORTED)\";\n            }\n          } else {\n            format = \"Lucene 6.x or prior (UNSUPPORTED)\";\n          }\n        }\n        return format;\n      }\n    }.run();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14654be3f7a82c9a3c52169e365baa55bfe64f66","date":1587212697,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#getIndexFormat(Directory).mjava","pathOld":"lucene/luke/src/java/org/apache/lucene/luke/models/util/IndexUtils#getIndexFormat(Directory).mjava","sourceNew":"  /**\n   * Returns the string representation for Lucene codec version when the index was written.\n   *\n   * @param dir - index directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static String getIndexFormat(Directory dir) throws IOException {\n    Objects.requireNonNull(dir);\n\n    return new SegmentInfos.FindSegmentsFile<String>(dir) {\n      @Override\n      protected String doBody(String segmentFileName) throws IOException {\n        String format = \"unknown\";\n        try (IndexInput in = dir.openInput(segmentFileName, IOContext.READ)) {\n          if (CodecUtil.CODEC_MAGIC == in.readInt()) {\n            int actualVersion = CodecUtil.checkHeaderNoMagic(in, \"segments\", SegmentInfos.VERSION_70, Integer.MAX_VALUE);\n            if (actualVersion == SegmentInfos.VERSION_70) {\n              format = \"Lucene 7.0 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_72) {\n              format = \"Lucene 7.2 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_74) {\n              format = \"Lucene 7.4 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_86) {\n              format = \"Lucene 8.6 or later\";\n            } else if (actualVersion > SegmentInfos.VERSION_86) {\n              format = \"Lucene 8.6 or later (UNSUPPORTED)\";\n            }\n          } else {\n            format = \"Lucene 6.x or prior (UNSUPPORTED)\";\n          }\n        }\n        return format;\n      }\n    }.run();\n  }\n\n","sourceOld":"  /**\n   * Returns the string representation for Lucene codec version when the index was written.\n   *\n   * @param dir - index directory\n   * @throws IOException - if there is a low level IO error.\n   */\n  public static String getIndexFormat(Directory dir) throws IOException {\n    Objects.requireNonNull(dir);\n\n    return new SegmentInfos.FindSegmentsFile<String>(dir) {\n      @Override\n      protected String doBody(String segmentFileName) throws IOException {\n        String format = \"unknown\";\n        try (IndexInput in = dir.openInput(segmentFileName, IOContext.READ)) {\n          if (CodecUtil.CODEC_MAGIC == in.readInt()) {\n            int actualVersion = CodecUtil.checkHeaderNoMagic(in, \"segments\", SegmentInfos.VERSION_70, Integer.MAX_VALUE);\n            if (actualVersion == SegmentInfos.VERSION_70) {\n              format = \"Lucene 7.0 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_72) {\n              format = \"Lucene 7.2 or later\";\n            } else if (actualVersion == SegmentInfos.VERSION_74) {\n              format = \"Lucene 7.4 or later\";\n            } else if (actualVersion > SegmentInfos.VERSION_74) {\n              format = \"Lucene 7.4 or later (UNSUPPORTED)\";\n            }\n          } else {\n            format = \"Lucene 6.x or prior (UNSUPPORTED)\";\n          }\n        }\n        return format;\n      }\n    }.run();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14654be3f7a82c9a3c52169e365baa55bfe64f66"]},"commit2Childs":{"14654be3f7a82c9a3c52169e365baa55bfe64f66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f554f2d9b5456248ab6467b9d4f6015686797a6c"],"f554f2d9b5456248ab6467b9d4f6015686797a6c":["14654be3f7a82c9a3c52169e365baa55bfe64f66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}