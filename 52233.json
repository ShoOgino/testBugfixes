{"path":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","commits":[{"id":"26583f4661704f7762e0ad85d7589d71889cadb1","date":1391522259,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<String> exclude = new HashSet<String>();\n    exclude.add(\"copy\");\n    exclude.add(\"createSlicer\");\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<String> exclude = new HashSet<>();\n    exclude.add(\"copy\");\n    exclude.add(\"createSlicer\");\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m.getName()));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<String> exclude = new HashSet<String>();\n    exclude.add(\"copy\");\n    exclude.add(\"createSlicer\");\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f3b037cd083286b2af89f96e768f85dcd8072d6","date":1396337805,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"createSlicer\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<String> exclude = new HashSet<>();\n    exclude.add(\"copy\");\n    exclude.add(\"createSlicer\");\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"createSlicer\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<String> exclude = new HashSet<>();\n    exclude.add(\"copy\");\n    exclude.add(\"createSlicer\");\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m.getName()));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","date":1400334249,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"createSlicer\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"createSlicer\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52d4cfb22484037a9b8e9080e03aeaff60954880","date":1420125313,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copyFrom\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copy\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214256b5eeeaba88b8293b37d30460b462b19562","date":1468250146,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copyFrom\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"renameFile\", String.class, String.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copyFrom\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43657dc4d64b2341ee7a9cebe9c0e35ef508add7","date":1468251617,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestFilterDirectory#testOverrides().mjava","sourceNew":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copyFrom\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testOverrides() throws Exception {\n    // verify that all methods of Directory are overridden by FilterDirectory,\n    // except those under the 'exclude' list\n    Set<Method> exclude = new HashSet<>();\n    exclude.add(Directory.class.getMethod(\"copyFrom\", Directory.class, String.class, String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"openChecksumInput\", String.class, IOContext.class));\n    exclude.add(Directory.class.getMethod(\"renameFile\", String.class, String.class));\n    for (Method m : FilterDirectory.class.getMethods()) {\n      if (m.getDeclaringClass() == Directory.class) {\n        assertTrue(\"method \" + m.getName() + \" not overridden!\", exclude.contains(m));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["26583f4661704f7762e0ad85d7589d71889cadb1"],"214256b5eeeaba88b8293b37d30460b462b19562":["52d4cfb22484037a9b8e9080e03aeaff60954880"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["1f3b037cd083286b2af89f96e768f85dcd8072d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52d4cfb22484037a9b8e9080e03aeaff60954880":["e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"43657dc4d64b2341ee7a9cebe9c0e35ef508add7":["214256b5eeeaba88b8293b37d30460b462b19562"],"56572ec06f1407c066d6b7399413178b33176cd8":["1f3b037cd083286b2af89f96e768f85dcd8072d6","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43657dc4d64b2341ee7a9cebe9c0e35ef508add7"],"26583f4661704f7762e0ad85d7589d71889cadb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["5eb2511ababf862ea11e10761c70ee560cd84510","1f3b037cd083286b2af89f96e768f85dcd8072d6"],"1f3b037cd083286b2af89f96e768f85dcd8072d6":["5eb2511ababf862ea11e10761c70ee560cd84510","e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3","56572ec06f1407c066d6b7399413178b33176cd8"],"214256b5eeeaba88b8293b37d30460b462b19562":["43657dc4d64b2341ee7a9cebe9c0e35ef508add7"],"e7db8f2ddb77c9e36f948c8283a3b61bdfb6c2f3":["52d4cfb22484037a9b8e9080e03aeaff60954880","56572ec06f1407c066d6b7399413178b33176cd8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["26583f4661704f7762e0ad85d7589d71889cadb1"],"52d4cfb22484037a9b8e9080e03aeaff60954880":["214256b5eeeaba88b8293b37d30460b462b19562"],"43657dc4d64b2341ee7a9cebe9c0e35ef508add7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"26583f4661704f7762e0ad85d7589d71889cadb1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}