{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","commits":[{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","sourceNew":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c.toString());\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c.toString());\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","sourceNew":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c.toString());\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c.toString());\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","sourceNew":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c);\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c.toString());\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/CollectionReloadTest#testReloadedLeaderStateAfterZkSessionLoss().mjava","sourceNew":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: \", e);\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c);\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","sourceOld":"  @Test\n  public void testReloadedLeaderStateAfterZkSessionLoss() throws Exception {\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss initialized OK ... running test logic\");\n\n    final String testCollectionName = \"c8n_1x1\";\n    CollectionAdminRequest.createCollection(testCollectionName, \"conf\", 1, 1)\n        .process(cluster.getSolrClient());\n\n    Replica leader\n        = cluster.getSolrClient().getZkStateReader().getLeaderRetry(testCollectionName, \"shard1\", DEFAULT_TIMEOUT);\n\n    long coreStartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n    CollectionAdminRequest.reloadCollection(testCollectionName).process(cluster.getSolrClient());\n\n    RetryUtil.retryUntil(\"Timed out waiting for core to reload\", 30, 1000, TimeUnit.MILLISECONDS, () -> {\n      long restartTime = 0;\n      try {\n        restartTime = getCoreStatus(leader).getCoreStartTime().getTime();\n      } catch (Exception e) {\n        log.warn(\"Exception getting core start time: {}\", e.getMessage());\n        return false;\n      }\n      return restartTime > coreStartTime;\n    });\n\n    final int initialStateVersion = getCollectionState(testCollectionName).getZNodeVersion();\n\n    cluster.expireZkSession(cluster.getReplicaJetty(leader));\n\n    waitForState(\"Timed out waiting for core to re-register as ACTIVE after session expiry\", testCollectionName, (n, c) -> {\n      log.info(\"Collection state: {}\", c);\n      Replica expiredReplica = c.getReplica(leader.getName());\n      return expiredReplica.getState() == Replica.State.ACTIVE && c.getZNodeVersion() > initialStateVersion;\n    });\n\n    log.info(\"testReloadedLeaderStateAfterZkSessionLoss succeeded ... shutting down now!\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57c238f5fb83803b49b37b3a1a12224a64d47542":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}