{"path":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","commits":[{"id":"6c2cd18c7da6f499a33f06fc89c07a463ec074c0","date":1358329431,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), Type.BYTES_VAR_STRAIGHT,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, Type.BYTES_VAR_STRAIGHT, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), Type.BYTES_VAR_STRAIGHT,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, Type.BYTES_VAR_STRAIGHT, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6503b8135290d25521790aa4d084472fdf7d8561","date":1358800765,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","sourceNew":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), DocValuesType.BINARY,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, DocValuesType.BINARY, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), Type.BYTES_VAR_STRAIGHT,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, Type.BYTES_VAR_STRAIGHT, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","sourceNew":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), DocValuesType.BINARY,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, DocValuesType.BINARY, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), Type.BYTES_VAR_STRAIGHT,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, Type.BYTES_VAR_STRAIGHT, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","bugFix":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/util/FacetsPayloadMigrationReader#getFieldInfos().mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/index/FacetsPayloadMigrationReader#getFieldInfos().mjava","sourceNew":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), DocValuesType.BINARY,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, DocValuesType.BINARY, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos getFieldInfos() {\n    FieldInfos innerInfos = super.getFieldInfos();\n    ArrayList<FieldInfo> infos = new ArrayList<FieldInfo>(innerInfos.size());\n    // if there are partitions, then the source index contains one field for all their terms\n    // while with DocValues, we simulate that by multiple fields.\n    HashSet<String> leftoverFields = new HashSet<String>(fieldTerms.keySet());\n    int number = -1;\n    for (FieldInfo info : innerInfos) {\n      if (fieldTerms.containsKey(info.name)) {\n        // mark this field as having a DocValues\n        infos.add(new FieldInfo(info.name, true, info.number,\n            info.hasVectors(), info.omitsNorms(), info.hasPayloads(),\n            info.getIndexOptions(), DocValuesType.BINARY,\n            info.getNormType(), info.attributes()));\n        leftoverFields.remove(info.name);\n      } else {\n        infos.add(info);\n      }\n      number = Math.max(number, info.number);\n    }\n    for (String field : leftoverFields) {\n      infos.add(new FieldInfo(field, false, ++number, false, false, false,\n          null, DocValuesType.BINARY, null, null));\n    }\n    return new FieldInfos(infos.toArray(new FieldInfo[infos.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["6c2cd18c7da6f499a33f06fc89c07a463ec074c0","6503b8135290d25521790aa4d084472fdf7d8561"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6503b8135290d25521790aa4d084472fdf7d8561":["c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["607428da722dcb3e86bbd11c63de8986e6275c36"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["6503b8135290d25521790aa4d084472fdf7d8561"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","6c2cd18c7da6f499a33f06fc89c07a463ec074c0"],"6c2cd18c7da6f499a33f06fc89c07a463ec074c0":["d4d69c535930b5cce125cff868d40f6373dc27d4","c4015cd39dff8d4dec562d909f9766debac53aa6"],"6503b8135290d25521790aa4d084472fdf7d8561":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}