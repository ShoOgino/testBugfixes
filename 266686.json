{"path":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input, codecs));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6267e1ce56c2eec111425690cd04e251b6f14952","date":1275222352,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n\n      // check that it is a format we can understand\n      if (format < CURRENT_FORMAT)\n        throw new CorruptIndexException(\"Unknown (newer than us?) format version: \" + format);\n\n      version = input.readLong(); // read version\n      counter = input.readInt(); // read counter\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input, codecs));\n      }\n      \n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n      if(format < 0){     // file contains explicit format info\n        // check that it is a format we can understand\n        if (format < CURRENT_FORMAT)\n          throw new CorruptIndexException(\"Unknown format version: \" + format);\n        version = input.readLong(); // read version\n        counter = input.readInt(); // read counter\n      }\n      else{     // file is in old format without explicit format info\n        counter = format;\n      }\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input, codecs));\n      }\n      \n      if(format >= 0){    // in old format the version number may be at the end of the file\n        if (input.getFilePointer() >= input.length())\n          version = System.currentTimeMillis(); // old file format without version number\n        else\n          version = input.readLong(); // read version\n      }\n\n      if (format <= FORMAT_USER_DATA) {\n        if (format <= FORMAT_DIAGNOSTICS) {\n          userData = input.readStringStringMap();\n        } else if (0 != input.readByte()) {\n          userData = Collections.singletonMap(\"userData\", input.readString());\n        } else {\n          userData = Collections.<String,String>emptyMap();\n        }\n      } else {\n        userData = Collections.<String,String>emptyMap();\n      }\n\n      if (format <= FORMAT_CHECKSUM) {\n        final long checksumNow = input.getChecksum();\n        final long checksumThen = input.readLong();\n        if (checksumNow != checksumThen)\n          throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      }\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6066dbe072ec5334ff5824f474e9d3abd1620fb7","date":1278709584,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n\n      // check that it is a format we can understand\n      if (format < CURRENT_FORMAT)\n        throw new CorruptIndexException(\"Unknown (newer than us?) format version: \" + format);\n\n      version = input.readLong(); // read version\n      counter = input.readInt(); // read counter\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input, codecs));\n      }\n      \n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    ChecksumIndexInput input = new ChecksumIndexInput(directory.openInput(segmentFileName));\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      int format = input.readInt();\n\n      // check that it is a format we can understand\n      if (format < CURRENT_FORMAT)\n        throw new CorruptIndexException(\"Unknown (newer than us?) format version: \" + format);\n\n      version = input.readLong(); // read version\n      counter = input.readInt(); // read counter\n      \n      for (int i = input.readInt(); i > 0; i--) { // read segmentInfos\n        add(new SegmentInfo(directory, format, input, codecs));\n      }\n      \n      userData = input.readStringStringMap();\n\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n\n      success = true;\n    }\n    finally {\n      input.close();\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"786a4d25ca958a1f315a9d6a74f0441fdafcd522","date":1305734256,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this, IOContext.READ);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this, IOContext.READ);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this, IOContext.READ);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentInfos#read(Directory,String,CodecProvider).mjava","sourceNew":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName) throws CorruptIndexException, IOException {\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    // TODO: scary to have default impl reopen the file... but to make it a bit more flexible,\n    // maybe we could use a plain indexinput here... could default impl rewind/wrap with checksumII,\n    // and any checksumming is then up to implementation?\n    ChecksumIndexInput input = null;\n    try {\n      input = new ChecksumIndexInput(directory.openInput(segmentFileName, IOContext.READ));\n      final int format = input.readInt();\n      setFormat(format);\n    \n      // check that it is a format we can understand\n      if (format > DefaultSegmentInfosWriter.FORMAT_MINIMUM)\n        throw new IndexFormatTooOldException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n      if (format < DefaultSegmentInfosWriter.FORMAT_CURRENT)\n        throw new IndexFormatTooNewException(segmentFileName, format,\n          DefaultSegmentInfosWriter.FORMAT_MINIMUM, DefaultSegmentInfosWriter.FORMAT_CURRENT);\n\n      if (format <= DefaultSegmentInfosWriter.FORMAT_4_0) {\n        codecFormat = Codec.forName(input.readString());\n      } else {\n        codecFormat = Codec.forName(\"Lucene3x\");\n      }\n      SegmentInfosReader infosReader = codecFormat.segmentInfosFormat().getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, input, this, IOContext.READ);\n      final long checksumNow = input.getChecksum();\n      final long checksumThen = input.readLong();\n      if (checksumNow != checksumThen)\n        throw new CorruptIndexException(\"checksum mismatch in segments file\");\n      success = true;\n    }\n    finally {\n      if (input != null) {\n        input.close();\n      }\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Read a particular segmentFileName.  Note that this may\n   * throw an IOException if a commit is in process.\n   *\n   * @param directory -- directory containing the segments file\n   * @param segmentFileName -- segment file to load\n   * @throws CorruptIndexException if the index is corrupt\n   * @throws IOException if there is a low-level IO error\n   */\n  public final void read(Directory directory, String segmentFileName, \n                         CodecProvider codecs) throws CorruptIndexException, IOException {\n    this.codecs = codecs;\n    boolean success = false;\n\n    // Clear any previous segments:\n    this.clear();\n\n    generation = generationFromSegmentsFileName(segmentFileName);\n\n    lastGeneration = generation;\n\n    try {\n      SegmentInfosReader infosReader = codecs.getSegmentInfosReader();\n      infosReader.read(directory, segmentFileName, codecs, this, IOContext.READ);\n      success = true;\n    }\n    finally {\n      if (!success) {\n        // Clear any segment infos we had loaded so we\n        // have a clean slate on retry:\n        this.clear();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"5f4e87790277826a2aea119328600dfb07761f32":["6267e1ce56c2eec111425690cd04e251b6f14952","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"6267e1ce56c2eec111425690cd04e251b6f14952":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["6267e1ce56c2eec111425690cd04e251b6f14952"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["6066dbe072ec5334ff5824f474e9d3abd1620fb7","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a3776dccca01c11e7046323cfad46a3b4a471233":["6066dbe072ec5334ff5824f474e9d3abd1620fb7","786a4d25ca958a1f315a9d6a74f0441fdafcd522"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["786a4d25ca958a1f315a9d6a74f0441fdafcd522","639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6267e1ce56c2eec111425690cd04e251b6f14952"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"5f4e87790277826a2aea119328600dfb07761f32":[],"6267e1ce56c2eec111425690cd04e251b6f14952":["5f4e87790277826a2aea119328600dfb07761f32","6066dbe072ec5334ff5824f474e9d3abd1620fb7"],"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"786a4d25ca958a1f315a9d6a74f0441fdafcd522":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"6066dbe072ec5334ff5824f474e9d3abd1620fb7":["5f4e87790277826a2aea119328600dfb07761f32","786a4d25ca958a1f315a9d6a74f0441fdafcd522","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["7b91922b55d15444d554721b352861d028eb8278","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5f4e87790277826a2aea119328600dfb07761f32","c3a8a449466c1ff7ce2274fe73dab487256964b4","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}