{"path":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","commits":[{"id":"2d530e71ed32ab23b34ca3fc72b080a554a40404","date":1432026158,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","sourceNew":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    if (match instanceof SpanNearQuery){\n      throw new IllegalArgumentException(\"SpanNearQuery not allowed\");\n    }\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","sourceOld":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    if (match instanceof SpanNearQuery){\n      throw new IllegalArgumentException(\"SpanNearQuery not allowed\");\n    }\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29aea3139c4326c0501d75d51059855463220279","date":1433952060,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","sourceNew":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, Collection<byte[]> payloadToMatch) {\n    this.match = match;\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","sourceOld":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, Collection<byte[]> payloadToMatch) {\n    super(match);\n    if (match instanceof SpanNearQuery){\n      throw new IllegalArgumentException(\"SpanNearQuery not allowed\");\n    }\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a8dd51777c3f17c83f8aac170bd0f68a029d174","date":1442220758,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,List[BytesRef]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/payloads/SpanPayloadCheckQuery#SpanPayloadCheckQuery(SpanQuery,Collection[byte[]]).mjava","sourceNew":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.List} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, List<BytesRef> payloadToMatch) {\n    this.match = match;\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","sourceOld":"  /**\n   * @param match The underlying {@link org.apache.lucene.search.spans.SpanQuery} to check\n   * @param payloadToMatch The {@link java.util.Collection} of payloads to match\n   */\n  public SpanPayloadCheckQuery(SpanQuery match, Collection<byte[]> payloadToMatch) {\n    this.match = match;\n    this.payloadToMatch = payloadToMatch;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["29aea3139c4326c0501d75d51059855463220279"],"29aea3139c4326c0501d75d51059855463220279":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"]},"commit2Childs":{"8a8dd51777c3f17c83f8aac170bd0f68a029d174":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29aea3139c4326c0501d75d51059855463220279":["8a8dd51777c3f17c83f8aac170bd0f68a029d174"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2d530e71ed32ab23b34ca3fc72b080a554a40404"],"2d530e71ed32ab23b34ca3fc72b080a554a40404":["29aea3139c4326c0501d75d51059855463220279"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}