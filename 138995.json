{"path":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    try {\n      metricManager.registerAll(registryName, mr, false);\n      fail(\"registerAll with duplicate metric names should fail\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1d5f160125c0bc785bf95466c3633984b77845d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    try {\n      metricManager.registerAll(registryName, mr, false);\n      fail(\"registerAll with duplicate metric names should fail\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    expectThrows(IllegalArgumentException.class, () -> metricManager.registerAll(registryName, mr, false));\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    try {\n      metricManager.registerAll(registryName, mr, false);\n      fail(\"registerAll with duplicate metric names should fail\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":["1d5f160125c0bc785bf95466c3633984b77845d0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    expectThrows(IllegalArgumentException.class, () -> metricManager.registerAll(registryName, mr, false));\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    try {\n      metricManager.registerAll(registryName, mr, false);\n      fail(\"registerAll with duplicate metric names should fail\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    expectThrows(IllegalArgumentException.class, () -> metricManager.registerAll(registryName, mr, false));\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    try {\n      metricManager.registerAll(registryName, mr, false);\n      fail(\"registerAll with duplicate metric names should fail\");\n    } catch (IllegalArgumentException e) {\n      // expected\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d5f160125c0bc785bf95466c3633984b77845d0","date":1585162097,"type":3,"author":"Mike","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrMetricManagerTest#testRegisterAll().mjava","sourceNew":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    // There is nothing registered so we should be error-free on the first pass\n    metricManager.registerAll(registryName, mr, SolrMetricManager.ResolutionStrategy.ERROR);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, SolrMetricManager.ResolutionStrategy.IGNORE);\n    // this should re-register everything, and no errors\n    metricManager.registerAll(registryName, mr, SolrMetricManager.ResolutionStrategy.REPLACE);\n    // this should produce error\n    expectThrows(IllegalArgumentException.class, () -> metricManager.registerAll(registryName, mr, SolrMetricManager.ResolutionStrategy.ERROR));\n  }\n\n","sourceOld":"  @Test\n  public void testRegisterAll() throws Exception {\n    Random r = random();\n\n    SolrMetricManager metricManager = new SolrMetricManager();\n\n    Map<String, Counter> metrics = SolrMetricTestUtils.getRandomMetrics(r, true);\n    MetricRegistry mr = new MetricRegistry();\n    for (Map.Entry<String, Counter> entry : metrics.entrySet()) {\n      mr.register(entry.getKey(), entry.getValue());\n    }\n\n    String registryName = TestUtil.randomSimpleString(r, 1, 10);\n    assertEquals(0, metricManager.registry(registryName).getMetrics().size());\n    metricManager.registerAll(registryName, mr, false);\n    // this should simply skip existing names\n    metricManager.registerAll(registryName, mr, true);\n    // this should produce error\n    expectThrows(IllegalArgumentException.class, () -> metricManager.registerAll(registryName, mr, false));\n  }\n\n","bugFix":["d1a307447328c95a00248512b40d7a5ff12ecd6a","0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1d5f160125c0bc785bf95466c3633984b77845d0":["d1a307447328c95a00248512b40d7a5ff12ecd6a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["0265144286422ad99682a00904cc2536b79c8535"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["0265144286422ad99682a00904cc2536b79c8535","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["0265144286422ad99682a00904cc2536b79c8535","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d5f160125c0bc785bf95466c3633984b77845d0"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"1d5f160125c0bc785bf95466c3633984b77845d0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["1d5f160125c0bc785bf95466c3633984b77845d0","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}