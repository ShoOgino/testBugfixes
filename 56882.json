{"path":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","commits":[{"id":"be9a5d1846ac0beb625ba68da060e16119d9f51e","date":1328820081,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","pathOld":"/dev/null","sourceNew":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecb12132f7aef3ad5be4b300f3cea59aa03b6820","date":1339628268,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","sourceNew":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","sourceOld":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","sourceNew":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, 42),\n                   f(\"first_foo_l\", countMe, -34),\n                   f(\"max_foo_l\", countMe, -34),\n                   f(\"min_foo_l\", countMe, -34)));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","sourceOld":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","sourceNew":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, 42),\n                   f(\"first_foo_l\", countMe, -34),\n                   f(\"max_foo_l\", countMe, -34),\n                   f(\"min_foo_l\", countMe, -34)));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","sourceOld":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/FieldMutatingUpdateProcessorTest#testComprehensive().mjava","sourceNew":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, 42),\n                   f(\"first_foo_l\", countMe, -34),\n                   f(\"max_foo_l\", countMe, -34),\n                   f(\"min_foo_l\", countMe, -34)));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","sourceOld":"  public void testComprehensive() throws Exception {\n\n    final String countMe = \"how long is this string?\";\n    final int count = countMe.length();\n\n    processAdd(\"comprehensive\", \n               doc(f(\"id\", \"1111\"),\n                   f(\"primary_author_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"all_authors_s1\",\n                     \"XXXX\", \"Adam\", \"Sam\"),\n                   f(\"foo_is\", countMe, new Integer(42)),\n                   f(\"first_foo_l\", countMe, new Integer(-34)),\n                   f(\"max_foo_l\", countMe, new Integer(-34)),\n                   f(\"min_foo_l\", countMe, new Integer(-34))));\n\n    assertU(commit());\n\n    assertQ(req(\"id:1111\")\n            ,\"//str[@name='primary_author_s1'][.='XXXX']\"\n            ,\"//str[@name='all_authors_s1'][.='XXXX; Adam; Sam']\"\n            ,\"//arr[@name='foo_is']/int[1][.='\"+count+\"']\"\n            ,\"//arr[@name='foo_is']/int[2][.='42']\"\n            ,\"//long[@name='max_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='first_foo_l'][.='\"+count+\"']\"\n            ,\"//long[@name='min_foo_l'][.='-34']\"\n            );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["628903f37b6c442da0d390db1c6af9a0e74d41a7"]},"commit2Childs":{"be9a5d1846ac0beb625ba68da060e16119d9f51e":["ecb12132f7aef3ad5be4b300f3cea59aa03b6820"],"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be9a5d1846ac0beb625ba68da060e16119d9f51e"],"ecb12132f7aef3ad5be4b300f3cea59aa03b6820":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}