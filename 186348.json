{"path":"src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","commits":[{"id":"ef28ac95f5f85bbf872801277448c0924b0a6827","date":1268600312,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CommonGramsQueryFilter#incrementToken().mjava","sourceNew":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","sourceOld":"  /**\n   * Output bigrams whenever possible to optimize queries. Only output unigrams\n   * when they are not a member of a bigram. Example:\n   * <ul>\n   * <li>input: \"the rain in spain falls mainly\"\n   * <li>output:\"the-rain\", \"rain-in\" ,\"in-spain\", \"falls\", \"mainly\"\n   * </ul>\n   */\n  public boolean incrementToken() throws IOException {\n    while (input.incrementToken()) {\n      State current = captureState();\n\n      if (previous != null && !isGramType()) {\n        restoreState(previous);\n        previous = current;\n        previousType = typeAttribute.type();\n        \n        if (isGramType()) {\n          posIncAttribute.setPositionIncrement(1);\n        }\n        return true;\n      }\n\n      previous = current;\n    }\n\n    if (previous == null || GRAM_TYPE.equals(previousType)) {\n      return false;\n    }\n    \n    restoreState(previous);\n    previous = null;\n    \n    if (isGramType()) {\n      posIncAttribute.setPositionIncrement(1);\n    }\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ef28ac95f5f85bbf872801277448c0924b0a6827":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ef28ac95f5f85bbf872801277448c0924b0a6827"],"ef28ac95f5f85bbf872801277448c0924b0a6827":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}