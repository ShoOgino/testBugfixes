{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/src/solrj/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7622cbc3a8e5ea4d57a67d99978449606ec484bc","date":1313559942,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if (setter != null) {\n        String gname = setter.getName();\n        if (gname.startsWith(\"set\")) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n          } catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if (type == Boolean.class) {\n              gname = \"is\" + setter.getName().substring(3);\n              try {\n                getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n              } catch(Exception ex2) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if( setter != null ) {\n        String gname = setter.getName();\n        if( gname.startsWith(\"set\") ) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n          }\n          catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if( type == Boolean.class ) {\n              gname = \"is\" + setter.getName().substring( 3 );\n              try {\n                getter = setter.getDeclaringClass().getMethod( gname, (Class[])null );\n              }\n              catch( Exception ex2 ) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"35b292579499b440bb87b86a6b832d91a6f6dc2e","date":1313656166,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if (setter != null) {\n        String gname = setter.getName();\n        if (gname.startsWith(\"set\")) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n          } catch (Exception ex) {\n            // no getter -- don't worry about it...\n            if (type == Boolean.class) {\n              gname = \"is\" + setter.getName().substring(3);\n              try {\n                getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n              } catch(Exception ex2) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if (setter != null) {\n        String gname = setter.getName();\n        if (gname.startsWith(\"set\")) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n          } catch( Exception ex ) {\n            // no getter -- don't worry about it...\n            if (type == Boolean.class) {\n              gname = \"is\" + setter.getName().substring(3);\n              try {\n                getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n              } catch(Exception ex2) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef9659be74f43b907ff558f1bafe80488bb9f4b7","date":1423940662,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.DocField#DocField(AccessibleObject).mjava","sourceNew":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n\n      // Look for a matching getter\n      if (setter != null) {\n        String gname = setter.getName();\n        if (gname.startsWith(\"set\")) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n          } catch (Exception ex) {\n            // no getter -- don't worry about it...\n            if (type == Boolean.class) {\n              gname = \"is\" + setter.getName().substring(3);\n              try {\n                getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n              } catch(Exception ex2) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","sourceOld":"    public DocField(AccessibleObject member) {\n      if (member instanceof java.lang.reflect.Field) {\n        field = (java.lang.reflect.Field) member;\n      } else {\n        setter = (Method) member;\n      }\n      Field annotation = member.getAnnotation(Field.class);\n      storeName(annotation);\n      storeType();\n      \n      // Look for a matching getter\n      if (setter != null) {\n        String gname = setter.getName();\n        if (gname.startsWith(\"set\")) {\n          gname = \"get\" + gname.substring(3);\n          try {\n            getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n          } catch (Exception ex) {\n            // no getter -- don't worry about it...\n            if (type == Boolean.class) {\n              gname = \"is\" + setter.getName().substring(3);\n              try {\n                getter = setter.getDeclaringClass().getMethod(gname, (Class[]) null);\n              } catch(Exception ex2) {\n                // no getter -- don't worry about it...\n              }\n            }\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"]},"commit2Childs":{"35b292579499b440bb87b86a6b832d91a6f6dc2e":["ef9659be74f43b907ff558f1bafe80488bb9f4b7"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["7622cbc3a8e5ea4d57a67d99978449606ec484bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"ef9659be74f43b907ff558f1bafe80488bb9f4b7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7622cbc3a8e5ea4d57a67d99978449606ec484bc":["35b292579499b440bb87b86a6b832d91a6f6dc2e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}