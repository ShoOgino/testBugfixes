{"path":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","commits":[{"id":"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","date":1452119871,"type":0,"author":"Tomas Eduardo Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"/dev/null","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d528fd7ae22865015b756e0a03832e2051de2a9c","date":1476721105,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"917e62f3497c83634a13edd833e8e21dd6cc6496","date":1490728467,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3732e34f27916e98704736cc6924a34fffca249a","date":1490873946,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName),\n          coreContainer.getContainerProperties(), coreContainer.isZooKeeperAware());\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName),\n          coreContainer.getContainerProperties(), coreContainer.isZooKeeperAware());\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n    \n    try {\n      c = new SolrCore(new CoreDescriptor(h.getCoreContainer(), newCoreName, testSolrHome.resolve(newCoreName)), \n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(h.getCoreContainer().registerCore(newCoreName, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      h.getCoreContainer().unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e4fb176991e13ab85dfe62dceeb287dde115745","date":1579630717,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName), coreContainer);\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName),\n          coreContainer.getContainerProperties(), coreContainer.isZooKeeperAware());\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b2ed9b72e5fa27a7bd4857f222ca815341979d4a","date":1594879524,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestCodecSupport#testCompressionModeDefault().mjava","sourceNew":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName), coreContainer);\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, forceFetch -> schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","sourceOld":"  public void testCompressionModeDefault() throws IOException {\n    assertEquals(\"Default Solr compression mode changed. Is this expected?\", \n        SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE, Mode.valueOf(\"BEST_SPEED\"));\n\n    String previousCoreName = h.coreName;\n    String newCoreName = \"core_with_default_compression\";\n    SolrCore c = null;\n    \n    SolrConfig config = TestHarness.createConfig(testSolrHome, previousCoreName, \"solrconfig_codec2.xml\");\n    assertEquals(\"Unexpected codec factory for this test.\", \"solr.SchemaCodecFactory\", config.get(\"codecFactory/@class\"));\n    assertNull(\"Unexpected configuration of codec factory for this test. Expecting empty element\", \n        config.getNode(\"codecFactory\", false).getFirstChild());\n    IndexSchema schema = IndexSchemaFactory.buildIndexSchema(\"schema_codec.xml\", config);\n\n    CoreContainer coreContainer = h.getCoreContainer();\n    \n    try {\n      CoreDescriptor cd = new CoreDescriptor(newCoreName, testSolrHome.resolve(newCoreName), coreContainer);\n      c = new SolrCore(coreContainer, cd,\n          new ConfigSet(\"fakeConfigset\", config, schema, null, true));\n      assertNull(coreContainer.registerCore(cd, c, false, false));\n      h.coreName = newCoreName;\n      assertEquals(\"We are not using the correct core\", \"solrconfig_codec2.xml\", h.getCore().getConfigResource());\n      assertU(add(doc(\"string_f\", \"foo\")));\n      assertU(commit());\n      assertCompressionMode(SchemaCodecFactory.SOLR_DEFAULT_COMPRESSION_MODE.name(), h.getCore());\n    } finally {\n      h.coreName = previousCoreName;\n      coreContainer.unload(newCoreName);\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["3732e34f27916e98704736cc6924a34fffca249a"],"917e62f3497c83634a13edd833e8e21dd6cc6496":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"3732e34f27916e98704736cc6924a34fffca249a":["d528fd7ae22865015b756e0a03832e2051de2a9c"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["917e62f3497c83634a13edd833e8e21dd6cc6496"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b","d528fd7ae22865015b756e0a03832e2051de2a9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"917e62f3497c83634a13edd833e8e21dd6cc6496":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"],"b2ed9b72e5fa27a7bd4857f222ca815341979d4a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3e4fb176991e13ab85dfe62dceeb287dde115745":["b2ed9b72e5fa27a7bd4857f222ca815341979d4a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b"],"9dcf0bcb3e40dc4e564d8c501efe0d7447480f5b":["d528fd7ae22865015b756e0a03832e2051de2a9c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3732e34f27916e98704736cc6924a34fffca249a":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"d528fd7ae22865015b756e0a03832e2051de2a9c":["917e62f3497c83634a13edd833e8e21dd6cc6496","3732e34f27916e98704736cc6924a34fffca249a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["3e4fb176991e13ab85dfe62dceeb287dde115745"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}