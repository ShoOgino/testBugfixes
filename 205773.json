{"path":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","commits":[{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test-framework/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","pathOld":"lucene/src/test-framework/java/org/apache/lucene/search/QueryUtils#checkHashEquals(Query).mjava","sourceNew":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","sourceOld":"  /** check very basic hashCode and equals */\n  public static void checkHashEquals(Query q) {\n    Query q2 = (Query)q.clone();\n    checkEqual(q,q2);\n\n    Query q3 = (Query)q.clone();\n    q3.setBoost(7.21792348f);\n    checkUnequal(q,q3);\n\n    // test that a class check is done so that no exception is thrown\n    // in the implementation of equals()\n    Query whacky = new Query() {\n      @Override\n      public String toString(String field) {\n        return \"My Whacky Query\";\n      }\n    };\n    whacky.setBoost(q.getBoost());\n    checkUnequal(q, whacky);\n    \n    // null test\n    Assert.assertFalse(q.equals(null));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7b91922b55d15444d554721b352861d028eb8278"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7b91922b55d15444d554721b352861d028eb8278"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}