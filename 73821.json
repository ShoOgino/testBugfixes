{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","commits":[{"id":"1fca549db64ee4c87a83a94e7c224506fa20d396","date":1495433449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson =\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\",\"node1\",\"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\",\"node1\",\"node3\")));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4","date":1495700700,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson =\"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String,Map> nodeValues = (Map<String, Map>) Utils.fromJSONString( \"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\",\"node1\",\"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\",\"node1\",\"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicy(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"611797611928fc8d5afd1c468ef7522f1cc03b61","date":1496234454,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15","date":1496411842,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25e4a4cddd699db6cce60282e747c7705897e821","date":1496721158,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"/dev/null","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'rack': 'rack1'}\" +\n//        \"      { 'replica': '1', 'sysprop.fs': 'ssd', 'shard': '#EACH'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<Policy.ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testMultiReplicaPlacement().mjava","sourceNew":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","sourceOld":"  public void testMultiReplicaPlacement() {\n    String autoScaleJson = \"{\" +\n        \"  'cluster-preferences': [\" +\n        \"    { maximize : freedisk , precision: 50},\" +\n        \"    { minimize : cores, precision: 2}\" +\n        \"  ],\" +\n        \"  'cluster-policy': [\" +\n        \"    { replica : '0' , 'nodeRole': 'overseer'},\" +\n        \"    { 'replica': '<2', 'shard': '#ANY', 'node': '#ANY'\" +\n        \"    }\" +\n        \"  ],\" +\n        \"  'policies': {\" +\n        \"    'policy1': [\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      { 'replica': '<2', 'shard': '#EACH', 'sysprop.rack': 'rack1'}\" +\n        \"    ]\" +\n        \"  }\" +\n        \"}\";\n\n\n    Map<String, Map> nodeValues = (Map<String, Map>) Utils.fromJSONString(\"{\" +\n        \"node1:{cores:12, freedisk: 334, heap:10480, sysprop.rack:rack3},\" +\n        \"node2:{cores:4, freedisk: 749, heap:6873, sysprop.fs : ssd, sysprop.rack:rack1},\" +\n        \"node3:{cores:7, freedisk: 262, heap:7834, sysprop.rack:rack4},\" +\n        \"node4:{cores:0, freedisk: 900, heap:16900, nodeRole:overseer, sysprop.rack:rack2}\" +\n        \"}\");\n\n    ClusterDataProvider dataProvider = new ClusterDataProvider() {\n      @Override\n      public Map<String, Object> getNodeValues(String node, Collection<String> keys) {\n        Map<String, Object> result = new LinkedHashMap<>();\n        keys.stream().forEach(s -> result.put(s, nodeValues.get(node).get(s)));\n        return result;\n      }\n\n      @Override\n      public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n        return getReplicaDetails(node, clusterState);\n      }\n\n      @Override\n      public String getPolicyNameByCollection(String coll) {\n        return null;\n      }\n\n      @Override\n      public Collection<String> getNodes() {\n        return Arrays.asList(\"node1\", \"node2\", \"node3\", \"node4\");\n      }\n    };\n    Map<String, List<String>> locations = PolicyHelper.getReplicaLocations(\n        \"newColl\", (Map<String, Object>) Utils.fromJSONString(autoScaleJson),\n        dataProvider, Collections.singletonMap(\"newColl\", \"policy1\"), Arrays.asList(\"shard1\", \"shard2\"), 3, null);\n    assertTrue(locations.get(\"shard1\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n    assertTrue(locations.get(\"shard2\").containsAll(ImmutableList.of(\"node2\", \"node1\", \"node3\")));\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["a513b6a92751e54c76fb5447948c9e7d437163a7"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"25e4a4cddd699db6cce60282e747c7705897e821":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["1fca549db64ee4c87a83a94e7c224506fa20d396"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8aa61ea06d4d27acb465d77e15f20aae84531d73","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","25e4a4cddd699db6cce60282e747c7705897e821"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"611797611928fc8d5afd1c468ef7522f1cc03b61":["0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15"],"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"25e4a4cddd699db6cce60282e747c7705897e821":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"1fca549db64ee4c87a83a94e7c224506fa20d396":["a4b9ebbc68c1b39e292c3efe82bfa15e372351b4"],"0126e386bbcccd3e2fb0a93ac12c9ea3e4a51c15":["25e4a4cddd699db6cce60282e747c7705897e821"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"a4b9ebbc68c1b39e292c3efe82bfa15e372351b4":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["611797611928fc8d5afd1c468ef7522f1cc03b61"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1fca549db64ee4c87a83a94e7c224506fa20d396","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}