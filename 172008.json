{"path":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","sourceNew":null,"sourceOld":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","pathOld":"src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","sourceNew":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","sourceOld":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ef059c3aff15abd4c4963ba0e8beee74f96da3a","date":1269090680,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","sourceNew":"  @Test\n  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","sourceOld":"  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cc0e00c9c9b4b65ad8e92703cfb2eaf737f7b163","date":1269381351,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","sourceNew":"  @Test\n  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    ignoreException(\"No terms.fl parameter specified\");\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    resetExceptionIgnores();\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","sourceOld":"  @Test\n  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0e1730dff622f8d7eb1290b77e4b18c21a23cae","date":1269460967,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/test/org/apache/solr/handler/component/TermsComponentTest#testNoField().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testNoField() throws Exception {\n    SolrCore core = h.getCore();\n    TermsComponent tc = (TermsComponent) core.getSearchComponent(\"termsComp\");\n    assertTrue(\"tc is null and it shouldn't be\", tc != null);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(TermsParams.TERMS, \"true\");\n    //no lower bound\n    params.add(TermsParams.TERMS_LOWER, \"d\");\n    params.add(TermsParams.TERMS_LIMIT, String.valueOf(50));\n    SolrRequestHandler handler;\n    SolrQueryResponse rsp;\n\n    handler = core.getRequestHandler(\"/terms\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    rsp = new SolrQueryResponse();\n    rsp.add(\"responseHeader\", new SimpleOrderedMap());\n    ignoreException(\"No terms.fl parameter specified\");\n    handler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n    resetExceptionIgnores();\n    Exception exception = rsp.getException();\n    assertTrue(\"exception is null and it shouldn't be\", exception != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"3ef059c3aff15abd4c4963ba0e8beee74f96da3a":["1da8d55113b689b06716246649de6f62430f15c0"],"d0e1730dff622f8d7eb1290b77e4b18c21a23cae":["cc0e00c9c9b4b65ad8e92703cfb2eaf737f7b163"],"cc0e00c9c9b4b65ad8e92703cfb2eaf737f7b163":["3ef059c3aff15abd4c4963ba0e8beee74f96da3a"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d0e1730dff622f8d7eb1290b77e4b18c21a23cae"]},"commit2Childs":{"1da8d55113b689b06716246649de6f62430f15c0":["3ef059c3aff15abd4c4963ba0e8beee74f96da3a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"3ef059c3aff15abd4c4963ba0e8beee74f96da3a":["cc0e00c9c9b4b65ad8e92703cfb2eaf737f7b163"],"d0e1730dff622f8d7eb1290b77e4b18c21a23cae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"cc0e00c9c9b4b65ad8e92703cfb2eaf737f7b163":["d0e1730dff622f8d7eb1290b77e4b18c21a23cae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}