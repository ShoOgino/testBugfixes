{"path":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","commits":[{"id":"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","date":1286023472,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33a8b1f99104f4144f210f5d068411c297cd7163","date":1287152748,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? new AtomicLong(0) : bytesStartArray.bytesUsed();;\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? new AtomicLong(0) : bytesStartArray.bytesUsed();;\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? new AtomicLong(0) : bytesStartArray.bytesUsed();;\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17cc1e690c31c800f83860fbfd0423462962ef01","date":1314789725,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? Counter.newCounter() : bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? new AtomicLong(0) : bytesStartArray.bytesUsed();;\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/BytesRefHash#BytesRefHash(ByteBlockPool,int,BytesStartArray).mjava","sourceNew":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? Counter.newCounter() : bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","sourceOld":"  /**\n   * Creates a new {@link BytesRefHash}\n   */\n  public BytesRefHash(ByteBlockPool pool, int capacity,\n      BytesStartArray bytesStartArray) {\n    hashSize = capacity;\n    hashHalfSize = hashSize >> 1;\n    hashMask = hashSize - 1;\n    this.pool = pool;\n    ords = new int[hashSize];\n    Arrays.fill(ords, -1);\n    this.bytesStartArray = bytesStartArray;\n    bytesStart = bytesStartArray.init();\n    bytesUsed = bytesStartArray.bytesUsed() == null? Counter.newCounter() : bytesStartArray.bytesUsed();\n    bytesUsed.addAndGet(hashSize * RamUsageEstimator.NUM_BYTES_INT);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33a8b1f99104f4144f210f5d068411c297cd7163":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392"],"17cc1e690c31c800f83860fbfd0423462962ef01":["33a8b1f99104f4144f210f5d068411c297cd7163"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["17cc1e690c31c800f83860fbfd0423462962ef01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","33a8b1f99104f4144f210f5d068411c297cd7163"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","33a8b1f99104f4144f210f5d068411c297cd7163"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"33a8b1f99104f4144f210f5d068411c297cd7163":["17cc1e690c31c800f83860fbfd0423462962ef01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"17cc1e690c31c800f83860fbfd0423462962ef01":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392":["33a8b1f99104f4144f210f5d068411c297cd7163","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5d6c52f55ea3ba9a5b1d5a6dd17f79bc7d308392","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}