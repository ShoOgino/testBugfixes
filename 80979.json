{"path":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5eb85061a04532d079d1ca2e6cfae6be263073","date":1377213475,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = createCodeRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    NamedList nl = sc.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getStatistics();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":["816521ebaad5add9cb96bb88c577394e2938c40b"],"bugIntro":["df72a23fb74bebe914e3f3972063a884327c0436"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"df72a23fb74bebe914e3f3972063a884327c0436","date":1570470832,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":["bfc52860e6d13d034226a760813c59d984c6817a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.init(l, o, cr);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws IOException {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e9e5eaf280a6aa21423126b8232aa157a9b7366","date":1571772228,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    sc.initializeMetrics(solrMetricsContext, scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(solrMetricsContext, scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    sc.initializeMetrics(metricManager, registry, \"foo\", scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(metricManager, registry, \"foo\", scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testSimple().mjava","sourceNew":null,"sourceOld":"  public void testSimple() throws Exception {\n    FastLRUCache sc = new FastLRUCache();\n    Map l = new HashMap();\n    l.put(\"size\", \"100\");\n    l.put(\"initialSize\", \"10\");\n    l.put(\"autowarmCount\", \"25\");\n    CacheRegenerator cr = new NoOpRegenerator();\n    Object o = sc.init(l, null, cr);\n    SolrMetricsContext solrMetricsContext = new SolrMetricsContext(metricManager, registry, \"foo\");\n    sc.initializeMetrics(solrMetricsContext, scope);\n    sc.setState(SolrCache.State.LIVE);\n    for (int i = 0; i < 101; i++) {\n      sc.put(i + 1, \"\" + (i + 1));\n    }\n    assertEquals(\"25\", sc.get(25));\n    assertEquals(null, sc.get(110));\n    MetricsMap metrics = sc.getMetricsMap();\n    Map<String,Object> nl = metrics.getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(101L, nl.get(\"inserts\"));\n\n    assertEquals(null, sc.get(1));  // first item put in should be the first out\n\n\n    FastLRUCache scNew = new FastLRUCache();\n    scNew.init(l, o, cr);\n    scNew.initializeMetrics(solrMetricsContext, scope);\n    scNew.warm(null, sc);\n    scNew.setState(SolrCache.State.LIVE);\n    sc.close();\n    scNew.put(103, \"103\");\n    assertEquals(\"90\", scNew.get(90));\n    assertEquals(null, scNew.get(50));\n    nl = scNew.getMetricsMap().getValue();\n    assertEquals(2L, nl.get(\"lookups\"));\n    assertEquals(1L, nl.get(\"hits\"));\n    assertEquals(1L, nl.get(\"inserts\"));\n    assertEquals(0L, nl.get(\"evictions\"));\n\n    assertEquals(5L, nl.get(\"cumulative_lookups\"));\n    assertEquals(2L, nl.get(\"cumulative_hits\"));\n    assertEquals(102L, nl.get(\"cumulative_inserts\"));\n    scNew.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["c26f00b574427b55127e869b935845554afde1fa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["df72a23fb74bebe914e3f3972063a884327c0436"],"43564cbb30b064675027cfb569564e8531096e97":["816521ebaad5add9cb96bb88c577394e2938c40b","bfc52860e6d13d034226a760813c59d984c6817a"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["c26f00b574427b55127e869b935845554afde1fa","1b5eb85061a04532d079d1ca2e6cfae6be263073"],"4d7d3943904804560937e6239effeebda0f920e4":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"df72a23fb74bebe914e3f3972063a884327c0436":["43564cbb30b064675027cfb569564e8531096e97"],"816521ebaad5add9cb96bb88c577394e2938c40b":["1b5eb85061a04532d079d1ca2e6cfae6be263073"],"bfc52860e6d13d034226a760813c59d984c6817a":["816521ebaad5add9cb96bb88c577394e2938c40b"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"],"b0b597c65628ca9e73913a07e81691f8229bae35":["43564cbb30b064675027cfb569564e8531096e97","df72a23fb74bebe914e3f3972063a884327c0436"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"1b5eb85061a04532d079d1ca2e6cfae6be263073":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","816521ebaad5add9cb96bb88c577394e2938c40b"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["2e9e5eaf280a6aa21423126b8232aa157a9b7366"],"43564cbb30b064675027cfb569564e8531096e97":["df72a23fb74bebe914e3f3972063a884327c0436","b0b597c65628ca9e73913a07e81691f8229bae35"],"c26f00b574427b55127e869b935845554afde1fa":["1b5eb85061a04532d079d1ca2e6cfae6be263073","3dffec77fb8f7d0e9ca4869dddd6af94528b4576"],"2e9e5eaf280a6aa21423126b8232aa157a9b7366":["4d7d3943904804560937e6239effeebda0f920e4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"df72a23fb74bebe914e3f3972063a884327c0436":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"816521ebaad5add9cb96bb88c577394e2938c40b":["43564cbb30b064675027cfb569564e8531096e97","bfc52860e6d13d034226a760813c59d984c6817a"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}