{"path":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setupCluster().mjava","commits":[{"id":"73fd358e8ec697393d56617f4d9cedaca74dca14","date":1547954439,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    numNodes = random().nextInt(4) + 4;\n    numShards = random().nextInt(3) + 3;\n    numReplicas = random().nextInt(2) + 2;\n    useAdminToSetProps = random().nextBoolean();\n\n    configureCluster(numNodes)\n        .addConfig(COLLECTION_NAME, configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminResponse resp = CollectionAdminRequest.createCollection(COLLECTION_NAME, COLLECTION_NAME,\n        numShards, numReplicas, 0, 0)\n        .setMaxShardsPerNode((numShards * numReplicas) / numNodes + 1)\n        .process(cluster.getSolrClient());\n    assertEquals(\"Admin request failed; \", 0, resp.getStatus());\n    cluster.waitForActiveCollection(COLLECTION_NAME, numShards, numShards * numReplicas);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setupCluster().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    numNodes = random().nextInt(4) + 4;\n    numShards = random().nextInt(3) + 3;\n    numReplicas = random().nextInt(2) + 2;\n    useAdminToSetProps = random().nextBoolean();\n\n    configureCluster(numNodes)\n        .addConfig(COLLECTION_NAME, configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminResponse resp = CollectionAdminRequest.createCollection(COLLECTION_NAME, COLLECTION_NAME,\n        numShards, numReplicas, 0, 0)\n        .setMaxShardsPerNode((numShards * numReplicas) / numNodes + 1)\n        .process(cluster.getSolrClient());\n    assertEquals(\"Admin request failed; \", 0, resp.getStatus());\n    cluster.waitForActiveCollection(COLLECTION_NAME, numShards, numShards * numReplicas);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setupCluster().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestRebalanceLeaders#setupCluster().mjava","sourceNew":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    numNodes = random().nextInt(4) + 4;\n    numShards = random().nextInt(3) + 3;\n    numReplicas = random().nextInt(2) + 2;\n    useAdminToSetProps = random().nextBoolean();\n\n    configureCluster(numNodes)\n        .addConfig(COLLECTION_NAME, configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminResponse resp = CollectionAdminRequest.createCollection(COLLECTION_NAME, COLLECTION_NAME,\n        numShards, numReplicas, 0, 0)\n        .process(cluster.getSolrClient());\n    assertEquals(\"Admin request failed; \", 0, resp.getStatus());\n    cluster.waitForActiveCollection(COLLECTION_NAME, numShards, numShards * numReplicas);\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void setupCluster() throws Exception {\n\n    numNodes = random().nextInt(4) + 4;\n    numShards = random().nextInt(3) + 3;\n    numReplicas = random().nextInt(2) + 2;\n    useAdminToSetProps = random().nextBoolean();\n\n    configureCluster(numNodes)\n        .addConfig(COLLECTION_NAME, configset(\"cloud-minimal\"))\n        .configure();\n\n    CollectionAdminResponse resp = CollectionAdminRequest.createCollection(COLLECTION_NAME, COLLECTION_NAME,\n        numShards, numReplicas, 0, 0)\n        .setMaxShardsPerNode((numShards * numReplicas) / numNodes + 1)\n        .process(cluster.getSolrClient());\n    assertEquals(\"Admin request failed; \", 0, resp.getStatus());\n    cluster.waitForActiveCollection(COLLECTION_NAME, numShards, numShards * numReplicas);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","73fd358e8ec697393d56617f4d9cedaca74dca14"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"73fd358e8ec697393d56617f4d9cedaca74dca14":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["73fd358e8ec697393d56617f4d9cedaca74dca14"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"]},"commit2Childs":{"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","73fd358e8ec697393d56617f4d9cedaca74dca14"],"73fd358e8ec697393d56617f4d9cedaca74dca14":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}