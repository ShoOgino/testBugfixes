{"path":"lucene/core/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoundingBoxQueriesEquivalence().mjava","commits":[{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/document/BaseLatLonShapeTestCase#testBoundingBoxQueriesEquivalence().mjava","pathOld":"/dev/null","sourceNew":"  public void testBoundingBoxQueriesEquivalence() throws Exception {\n    int numShapes = atLeast(20);\n\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    for (int  i =0; i < numShapes; i++) {\n      indexRandomShapes(w.w, nextShape());\n    }\n    if (random().nextBoolean()) {\n      w.forceMerge(1);\n    }\n\n    ///// search //////\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    Rectangle box = GeoTestUtil.nextBox();\n\n    Query q1 = LatLonShape.newBoxQuery(FIELD_NAME, QueryRelation.INTERSECTS, box.minLat, box.maxLat, box.minLon, box.maxLon);\n    Query q2 = new LatLonShapeQuery(FIELD_NAME, QueryRelation.INTERSECTS, box);\n    assertEquals(searcher.count(q1), searcher.count(q2));\n    q1 = LatLonShape.newBoxQuery(FIELD_NAME, QueryRelation.WITHIN, box.minLat, box.maxLat, box.minLon, box.maxLon);\n    q2 = new LatLonShapeQuery(FIELD_NAME, QueryRelation.WITHIN, box);\n    assertEquals(searcher.count(q1), searcher.count(q2));\n    q1 = LatLonShape.newBoxQuery(FIELD_NAME, QueryRelation.CONTAINS, box.minLat, box.maxLat, box.minLon, box.maxLon);\n    if (box.crossesDateline()) {\n      q2 = LatLonShape.newGeometryQuery(FIELD_NAME, QueryRelation.CONTAINS, box);\n    } else {\n      q2 = new LatLonShapeQuery(FIELD_NAME, QueryRelation.CONTAINS, box);\n    }\n    assertEquals(searcher.count(q1), searcher.count(q2));\n    q1 = LatLonShape.newBoxQuery(FIELD_NAME, QueryRelation.DISJOINT, box.minLat, box.maxLat, box.minLon, box.maxLon);\n    q2 = new LatLonShapeQuery(FIELD_NAME, QueryRelation.DISJOINT, box);\n    assertEquals(searcher.count(q1), searcher.count(q2));\n\n    IOUtils.close(w, reader, dir);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}