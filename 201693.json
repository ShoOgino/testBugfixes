{"path":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","commits":[{"id":"bd69280df0902763e47cb14745388ee17a2fb602","date":1249686305,"type":1,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripReader#readNumericEntity().mjava","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"669ccf33e7f6244ee645aa17a277649f815b4376","date":1255809361,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + 2;// + 2 accounts for &, #, and ;, then, take away 1 for the fact that we do output a char\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":["187b932e3f791668d245124e03d899af557d22df"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","pathOld":"src/java/org/apache/solr/analysis/HTMLStripCharFilter#readNumericEntity().mjava","sourceNew":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","sourceOld":"  private int readNumericEntity() throws IOException {\n    // \"&#\" has already been read at this point\n    int eaten = 2;\n\n    // is this decimal, hex, or nothing at all.\n    int ch = next();\n    int base=10;\n    boolean invalid=false;\n    sb.setLength(0);\n\n    if (isDigit(ch)) {\n      // decimal character entity\n      sb.append((char)ch);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isDigit(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else if (ch=='x') {\n      eaten++;\n      // hex character entity\n      base=16;\n      sb.setLength(0);\n      for (int i=0; i<10; i++) {\n        ch = next();\n        if (isHex(ch)) {\n          sb.append((char)ch);\n        } else {\n          break;\n        }\n      }\n    } else {\n      return MISMATCH;\n    }\n\n\n    // In older HTML, an entity may not have always been terminated\n    // with a semicolon.  We'll also treat EOF or whitespace as terminating\n    // the entity.\n    try {\n      if (ch==';' || ch==-1) {\n        // do not account for the eaten \";\" due to the fact that we do output a char\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n\n      // if whitespace terminated the entity, we need to return\n      // that whitespace on the next call to read().\n      if (isSpace(ch)) {\n        push(ch);\n        numWhitespace = sb.length() + eaten;\n        return Integer.parseInt(sb.toString(), base);\n      }\n    } catch (NumberFormatException e) {\n      return MISMATCH;\n    }\n\n    // Not an entity...\n    return MISMATCH;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"669ccf33e7f6244ee645aa17a277649f815b4376":["bd69280df0902763e47cb14745388ee17a2fb602"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["669ccf33e7f6244ee645aa17a277649f815b4376"],"bd69280df0902763e47cb14745388ee17a2fb602":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"669ccf33e7f6244ee645aa17a277649f815b4376":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["bd69280df0902763e47cb14745388ee17a2fb602"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"bd69280df0902763e47cb14745388ee17a2fb602":["669ccf33e7f6244ee645aa17a277649f815b4376"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}