{"path":"lucene/facet/src/java/org/apache/lucene/util/encoding/DGapVInt8IntDecoder#decode(BytesRef,IntsRef).mjava","commits":[{"id":"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e","date":1358344590,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/DGapVInt8IntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (values.ints.length < buf.length) {\n      values.ints = new int[ArrayUtil.oversize(buf.length, RamUsageEstimator.NUM_BYTES_INT)];\n    }\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        values.ints[values.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = values.ints[values.length];\n        values.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4015cd39dff8d4dec562d909f9766debac53aa6","date":1358548736,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/util/encoding/DGapVInt8IntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (values.ints.length < buf.length) {\n      values.ints = new int[ArrayUtil.oversize(buf.length, RamUsageEstimator.NUM_BYTES_INT)];\n    }\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        values.ints[values.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = values.ints[values.length];\n        values.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/encoding/DGapVInt8IntDecoder#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/util/encoding/DGapVInt8IntDecoder#decode(BytesRef,IntsRef).mjava","sourceNew":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (values.ints.length < buf.length) {\n      values.ints = new int[ArrayUtil.oversize(buf.length, RamUsageEstimator.NUM_BYTES_INT)];\n    }\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        values.ints[values.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = values.ints[values.length];\n        values.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void decode(BytesRef buf, IntsRef values) {\n    values.offset = values.length = 0;\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (values.ints.length < buf.length) {\n      values.ints = new int[ArrayUtil.oversize(buf.length, RamUsageEstimator.NUM_BYTES_INT)];\n    }\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        values.ints[values.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = values.ints[values.length];\n        values.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["7f5af60d674d26c0be0ce66f8b291c6b569d5e4e"],"c4015cd39dff8d4dec562d909f9766debac53aa6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7f5af60d674d26c0be0ce66f8b291c6b569d5e4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c4015cd39dff8d4dec562d909f9766debac53aa6":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c4015cd39dff8d4dec562d909f9766debac53aa6","7f5af60d674d26c0be0ce66f8b291c6b569d5e4e"],"7f5af60d674d26c0be0ce66f8b291c6b569d5e4e":["607428da722dcb3e86bbd11c63de8986e6275c36","c4015cd39dff8d4dec562d909f9766debac53aa6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c4015cd39dff8d4dec562d909f9766debac53aa6","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}