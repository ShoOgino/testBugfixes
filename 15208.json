{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testPositionNotZero().mjava","commits":[{"id":"03e17b020972a0d6e8d6823f545571a66646a167","date":1547847724,"type":0,"author":"Toke Eskildsen","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testPositionNotZero().mjava","pathOld":"/dev/null","sourceNew":"  // When doing merges in Lucene80NormsProducer, IndexedDISI are created from slices where the offset is not 0\n  public void testPositionNotZero() throws IOException {\n    final int BLOCKS = 10;\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n\n    FixedBitSet set = createSetWithRandomBlocks(BLOCKS);\n    try (Directory dir = newDirectory()) {\n      final int cardinality = set.cardinality();\n      int jumpTableEntryCount;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        jumpTableEntryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      }\n      try (IndexInput fullInput = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexInput blockData =\n            IndexedDISI.createBlockSlice(fullInput, \"blocks\", 0, fullInput.length(), jumpTableEntryCount);\n        blockData.seek(random().nextInt((int) blockData.length()));\n\n        RandomAccessInput jumpTable = IndexedDISI.createJumpTable(fullInput, 0, fullInput.length(), jumpTableEntryCount);\n        IndexedDISI disi = new IndexedDISI(blockData, jumpTable, jumpTableEntryCount, denseRankPower, cardinality);\n        // This failed at some point during LUCENE-8585 development as it did not reset the slice position\n        disi.advanceExact(BLOCKS*65536-1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c89f1ef80a9432f4eabaeda9a1e135cd72e60836","date":1547972642,"type":0,"author":"Tommaso Teofili","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testPositionNotZero().mjava","pathOld":"/dev/null","sourceNew":"  // When doing merges in Lucene80NormsProducer, IndexedDISI are created from slices where the offset is not 0\n  public void testPositionNotZero() throws IOException {\n    final int BLOCKS = 10;\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n\n    FixedBitSet set = createSetWithRandomBlocks(BLOCKS);\n    try (Directory dir = newDirectory()) {\n      final int cardinality = set.cardinality();\n      int jumpTableEntryCount;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        jumpTableEntryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      }\n      try (IndexInput fullInput = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexInput blockData =\n            IndexedDISI.createBlockSlice(fullInput, \"blocks\", 0, fullInput.length(), jumpTableEntryCount);\n        blockData.seek(random().nextInt((int) blockData.length()));\n\n        RandomAccessInput jumpTable = IndexedDISI.createJumpTable(fullInput, 0, fullInput.length(), jumpTableEntryCount);\n        IndexedDISI disi = new IndexedDISI(blockData, jumpTable, jumpTableEntryCount, denseRankPower, cardinality);\n        // This failed at some point during LUCENE-8585 development as it did not reset the slice position\n        disi.advanceExact(BLOCKS*65536-1);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testPositionNotZero().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene80/TestIndexedDISI#testPositionNotZero().mjava","sourceNew":"  // When doing merges in Lucene80NormsProducer, IndexedDISI are created from slices where the offset is not 0\n  public void testPositionNotZero() throws IOException {\n    final int BLOCKS = 10;\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n\n    BitSet set = createSetWithRandomBlocks(BLOCKS);\n    try (Directory dir = newDirectory()) {\n      final int cardinality = set.cardinality();\n      int jumpTableEntryCount;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        jumpTableEntryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      }\n      try (IndexInput fullInput = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexInput blockData =\n            IndexedDISI.createBlockSlice(fullInput, \"blocks\", 0, fullInput.length(), jumpTableEntryCount);\n        blockData.seek(random().nextInt((int) blockData.length()));\n\n        RandomAccessInput jumpTable = IndexedDISI.createJumpTable(fullInput, 0, fullInput.length(), jumpTableEntryCount);\n        IndexedDISI disi = new IndexedDISI(blockData, jumpTable, jumpTableEntryCount, denseRankPower, cardinality);\n        // This failed at some point during LUCENE-8585 development as it did not reset the slice position\n        disi.advanceExact(BLOCKS*65536-1);\n      }\n    }\n  }\n\n","sourceOld":"  // When doing merges in Lucene80NormsProducer, IndexedDISI are created from slices where the offset is not 0\n  public void testPositionNotZero() throws IOException {\n    final int BLOCKS = 10;\n    final byte denseRankPower = rarely() ? -1 : (byte) (random().nextInt(7)+7); // sane + chance of disable\n\n    FixedBitSet set = createSetWithRandomBlocks(BLOCKS);\n    try (Directory dir = newDirectory()) {\n      final int cardinality = set.cardinality();\n      int jumpTableEntryCount;\n      try (IndexOutput out = dir.createOutput(\"foo\", IOContext.DEFAULT)) {\n        jumpTableEntryCount = IndexedDISI.writeBitSet(new BitSetIterator(set, cardinality), out, denseRankPower);\n      }\n      try (IndexInput fullInput = dir.openInput(\"foo\", IOContext.DEFAULT)) {\n        IndexInput blockData =\n            IndexedDISI.createBlockSlice(fullInput, \"blocks\", 0, fullInput.length(), jumpTableEntryCount);\n        blockData.seek(random().nextInt((int) blockData.length()));\n\n        RandomAccessInput jumpTable = IndexedDISI.createJumpTable(fullInput, 0, fullInput.length(), jumpTableEntryCount);\n        IndexedDISI disi = new IndexedDISI(blockData, jumpTable, jumpTableEntryCount, denseRankPower, cardinality);\n        // This failed at some point during LUCENE-8585 development as it did not reset the slice position\n        disi.advanceExact(BLOCKS*65536-1);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"03e17b020972a0d6e8d6823f545571a66646a167":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","03e17b020972a0d6e8d6823f545571a66646a167"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["03e17b020972a0d6e8d6823f545571a66646a167"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"03e17b020972a0d6e8d6823f545571a66646a167":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"c89f1ef80a9432f4eabaeda9a1e135cd72e60836":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["03e17b020972a0d6e8d6823f545571a66646a167","c89f1ef80a9432f4eabaeda9a1e135cd72e60836"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c89f1ef80a9432f4eabaeda9a1e135cd72e60836","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}