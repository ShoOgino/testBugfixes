{"path":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,CloudConfig,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","commits":[{"id":"c526352db87264a72a7a9ad68c1b769b81e54305","date":1598780188,"type":1,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,CloudConfig,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void moveNormalReplica(ClusterState clusterState, CloudConfig cloudConfig, @SuppressWarnings({\"rawtypes\"})NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        ZkStateReader.REPLICA_TYPE, replica.getType().name());\n\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, null).get(0);\n    log.debug(\"props {}\", props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher {}\", watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=%s\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Replica {} is active - deleting the source...\", watcher.getActiveReplicas());\n          }\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deleteResult = new NamedList();\n    try {\n      ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    } catch (SolrException e) {\n      deleteResult.add(\"failure\", e.toString());\n    }\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private void moveNormalReplica(ClusterState clusterState, @SuppressWarnings({\"rawtypes\"})NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        ZkStateReader.REPLICA_TYPE, replica.getType().name());\n\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null).get(0);\n    log.debug(\"props {}\", props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher {}\", watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=%s\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Replica {} is active - deleting the source...\", watcher.getActiveReplicas());\n          }\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deleteResult = new NamedList();\n    try {\n      ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    } catch (SolrException e) {\n      deleteResult.add(\"failure\", e.toString());\n    }\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7b17e79a71117668ecbf8d3417c876e41396565","date":1598973672,"type":5,"author":"Ilan Ginzburg","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/api/collections/MoveReplicaCmd#moveNormalReplica(ClusterState,CloudConfig,NamedList,String,String,DocCollection,Replica,Slice,int,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  private void moveNormalReplica(ClusterState clusterState, @SuppressWarnings({\"rawtypes\"})NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        ZkStateReader.REPLICA_TYPE, replica.getType().name());\n\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, addReplicasProps, addResult, null).get(0);\n    log.debug(\"props {}\", props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher {}\", watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=%s\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Replica {} is active - deleting the source...\", watcher.getActiveReplicas());\n          }\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deleteResult = new NamedList();\n    try {\n      ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    } catch (SolrException e) {\n      deleteResult.add(\"failure\", e.toString());\n    }\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","sourceOld":"  @SuppressWarnings({\"unchecked\"})\n  private void moveNormalReplica(ClusterState clusterState, CloudConfig cloudConfig, @SuppressWarnings({\"rawtypes\"})NamedList results, String targetNode, String async,\n                                 DocCollection coll, Replica replica, Slice slice, int timeout, boolean waitForFinalState) throws Exception {\n    String newCoreName = Assign.buildSolrCoreName(ocmh.overseer.getSolrCloudManager().getDistribStateManager(), coll, slice.getName(), replica.getType());\n    ZkNodeProps addReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        CoreAdminParams.NODE, targetNode,\n        CoreAdminParams.NAME, newCoreName,\n        ZkStateReader.REPLICA_TYPE, replica.getType().name());\n\n    if (async != null) addReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList addResult = new NamedList();\n    SolrCloseableLatch countDownLatch = new SolrCloseableLatch(1, ocmh);\n    ActiveReplicaWatcher watcher = null;\n    ZkNodeProps props = ocmh.addReplica(clusterState, cloudConfig, addReplicasProps, addResult, null).get(0);\n    log.debug(\"props {}\", props);\n    if (replica.equals(slice.getLeader()) || waitForFinalState) {\n      watcher = new ActiveReplicaWatcher(coll.getName(), null, Collections.singletonList(newCoreName), countDownLatch);\n      log.debug(\"-- registered watcher {}\", watcher);\n      ocmh.zkStateReader.registerCollectionStateWatcher(coll.getName(), watcher);\n    }\n    if (addResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to create replica for collection=%s shard=%s\" +\n          \" on node=%s, failure=%s\", coll.getName(), slice.getName(), targetNode, addResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n      if (watcher != null) { // unregister\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n      return;\n    }\n    // wait for the other replica to be active if the source replica was a leader\n    if (watcher != null) {\n      try {\n        log.debug(\"Waiting for leader's replica to recover.\");\n        if (!countDownLatch.await(timeout, TimeUnit.SECONDS)) {\n          String errorString = String.format(Locale.ROOT, \"Timed out waiting for leader's replica to recover, collection=%s shard=%s\" +\n              \" on node=%s\", coll.getName(), slice.getName(), targetNode);\n          log.warn(errorString);\n          results.add(\"failure\", errorString);\n          return;\n        } else {\n          if (log.isDebugEnabled()) {\n            log.debug(\"Replica {} is active - deleting the source...\", watcher.getActiveReplicas());\n          }\n        }\n      } finally {\n        ocmh.zkStateReader.removeCollectionStateWatcher(coll.getName(), watcher);\n      }\n    }\n\n    ZkNodeProps removeReplicasProps = new ZkNodeProps(\n        COLLECTION_PROP, coll.getName(),\n        SHARD_ID_PROP, slice.getName(),\n        REPLICA_PROP, replica.getName());\n    if (async != null) removeReplicasProps.getProperties().put(ASYNC, async);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList deleteResult = new NamedList();\n    try {\n      ocmh.deleteReplica(clusterState, removeReplicasProps, deleteResult, null);\n    } catch (SolrException e) {\n      deleteResult.add(\"failure\", e.toString());\n    }\n    if (deleteResult.get(\"failure\") != null) {\n      String errorString = String.format(Locale.ROOT, \"Failed to cleanup replica collection=%s shard=%s name=%s, failure=%s\",\n          coll.getName(), slice.getName(), replica.getName(), deleteResult.get(\"failure\"));\n      log.warn(errorString);\n      results.add(\"failure\", errorString);\n    } else {\n      String successString = String.format(Locale.ROOT, \"MOVEREPLICA action completed successfully, moved replica=%s at node=%s \" +\n          \"to replica=%s at node=%s\", replica.getCoreName(), replica.getNodeName(), newCoreName, targetNode);\n      results.add(\"success\", successString);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e7b17e79a71117668ecbf8d3417c876e41396565":["c526352db87264a72a7a9ad68c1b769b81e54305"],"c526352db87264a72a7a9ad68c1b769b81e54305":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7b17e79a71117668ecbf8d3417c876e41396565"]},"commit2Childs":{"e7b17e79a71117668ecbf8d3417c876e41396565":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c526352db87264a72a7a9ad68c1b769b81e54305":["e7b17e79a71117668ecbf8d3417c876e41396565"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c526352db87264a72a7a9ad68c1b769b81e54305"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}