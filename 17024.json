{"path":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9499b09dd7d06d975f31e59a9b00653a86f9cad2","date":1343325589,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    \n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes==null || nodes.getLength()==0)\n      return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n     for (int i=0; i<nodes.getLength(); i++) {\n       Node node = nodes.item(i);\n\n       String baseDir = DOMUtil.getAttr(node, \"dir\");\n       String path = DOMUtil.getAttr(node, \"path\");\n       if (null != baseDir) {\n         // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n         String regex = DOMUtil.getAttr(node, \"regex\");\n         FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n         getResourceLoader().addToClassLoader(baseDir, filter);\n       } else if (null != path) {\n         getResourceLoader().addToClassLoader(path);\n       } else {\n         throw new RuntimeException\n           (\"lib: missing mandatory attributes: 'dir' or 'path'\");\n       }\n     }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33dd2fc33a7c6ae46d3decff17689539385ef33f","date":1364971259,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually eclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","bugFix":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5268b3b46fa91a88e4d8fdd00f16f42577e6da11","date":1368012863,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          getResourceLoader().addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          getResourceLoader().addToClassLoader(path);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      getResourceLoader().reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9aea0485ecacb6734c17da2d02569816c23a69c1","date":1425707735,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    \n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    \n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n        \n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, PATH);\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, PATH);\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, \"path\");\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a626ec4d1c92e59fe390724d6220081047b03ce7","date":1448021525,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n\n    try {\n      for (int i = 0; i < nodes.getLength(); i++) {\n        Node node = nodes.item(i);\n\n        String baseDir = DOMUtil.getAttr(node, \"dir\");\n        String path = DOMUtil.getAttr(node, PATH);\n        if (null != baseDir) {\n          // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n          String regex = DOMUtil.getAttr(node, \"regex\");\n          FileFilter filter = (null == regex) ? null : new RegexFileFilter(regex);\n          loader.addToClassLoader(baseDir, filter, false);\n        } else if (null != path) {\n          final File file = FileUtils.resolvePath(new File(loader.getInstanceDir()), path);\n          loader.addToClassLoader(file.getParent(), new FileFilter() {\n            @Override\n            public boolean accept(File pathname) {\n              return pathname.equals(file);\n            }\n          }, false);\n        } else {\n          throw new RuntimeException(\n              \"lib: missing mandatory attributes: 'dir' or 'path'\");\n        }\n      }\n    } finally {\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f0c8426396c925de8db3ed3f8ff40fd73670a5c","date":1474556641,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"126d6ad24eed13163ba0959435d5a80e5672837c","date":1474567302,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.info(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","date":1576143009,"type":5,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs(boolean isConfigsetTrusted) {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df724d84dab24a0cc54bec95a8680867adc7f171","date":1576156608,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrConfig#initLibs().mjava","sourceNew":"  private void initLibs(boolean isConfigsetTrusted) {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n    if (!isConfigsetTrusted) {\n      throw new SolrException(ErrorCode.UNAUTHORIZED, \"The configset for this collection was uploaded without any authentication in place,\"\n          + \" and use of <lib> is not available for collections with untrusted configsets. To use this component, re-upload the configset\"\n          + \" after enabling authentication and authorization.\");\n    }\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","sourceOld":"  private void initLibs() {\n    NodeList nodes = (NodeList) evaluate(\"lib\", XPathConstants.NODESET);\n    if (nodes == null || nodes.getLength() == 0) return;\n\n    log.debug(\"Adding specified lib dirs to ClassLoader\");\n    SolrResourceLoader loader = getResourceLoader();\n    List<URL> urls = new ArrayList<>();\n\n    for (int i = 0; i < nodes.getLength(); i++) {\n      Node node = nodes.item(i);\n      String baseDir = DOMUtil.getAttr(node, \"dir\");\n      String path = DOMUtil.getAttr(node, PATH);\n      if (null != baseDir) {\n        // :TODO: add support for a simpler 'glob' mutually exclusive of regex\n        Path dir = loader.getInstancePath().resolve(baseDir);\n        String regex = DOMUtil.getAttr(node, \"regex\");\n        try {\n          if (regex == null)\n            urls.addAll(SolrResourceLoader.getURLs(dir));\n          else\n            urls.addAll(SolrResourceLoader.getFilteredURLs(dir, regex));\n        } catch (IOException e) {\n          log.warn(\"Couldn't add files from {} filtered by {} to classpath: {}\", dir, regex, e.getMessage());\n        }\n      } else if (null != path) {\n        final Path dir = loader.getInstancePath().resolve(path);\n        try {\n          urls.add(dir.toUri().toURL());\n        } catch (MalformedURLException e) {\n          log.warn(\"Couldn't add file {} to classpath: {}\", dir, e.getMessage());\n        }\n      } else {\n        throw new RuntimeException(\"lib: missing mandatory attributes: 'dir' or 'path'\");\n      }\n    }\n\n    if (urls.size() > 0) {\n      loader.addToClassLoader(urls);\n      loader.reloadLuceneSPI();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33dd2fc33a7c6ae46d3decff17689539385ef33f":["9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["a626ec4d1c92e59fe390724d6220081047b03ce7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a626ec4d1c92e59fe390724d6220081047b03ce7","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"df724d84dab24a0cc54bec95a8680867adc7f171":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11","9aea0485ecacb6734c17da2d02569816c23a69c1"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["33dd2fc33a7c6ae46d3decff17689539385ef33f"],"126d6ad24eed13163ba0959435d5a80e5672837c":["a626ec4d1c92e59fe390724d6220081047b03ce7","7f0c8426396c925de8db3ed3f8ff40fd73670a5c"],"aba371508186796cc6151d8223a5b4e16d02e26e":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a626ec4d1c92e59fe390724d6220081047b03ce7":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["c26f00b574427b55127e869b935845554afde1fa"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["9aea0485ecacb6734c17da2d02569816c23a69c1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a626ec4d1c92e59fe390724d6220081047b03ce7","126d6ad24eed13163ba0959435d5a80e5672837c"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c26f00b574427b55127e869b935845554afde1fa","9499b09dd7d06d975f31e59a9b00653a86f9cad2"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"9aea0485ecacb6734c17da2d02569816c23a69c1":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96"]},"commit2Childs":{"33dd2fc33a7c6ae46d3decff17689539385ef33f":["5268b3b46fa91a88e4d8fdd00f16f42577e6da11"],"c26f00b574427b55127e869b935845554afde1fa":["aba371508186796cc6151d8223a5b4e16d02e26e","9499b09dd7d06d975f31e59a9b00653a86f9cad2","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96":["df724d84dab24a0cc54bec95a8680867adc7f171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f0c8426396c925de8db3ed3f8ff40fd73670a5c":["126d6ad24eed13163ba0959435d5a80e5672837c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"df724d84dab24a0cc54bec95a8680867adc7f171":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["d2638f781be724518ff6c2263d14a48cf6e68017"],"5268b3b46fa91a88e4d8fdd00f16f42577e6da11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","9aea0485ecacb6734c17da2d02569816c23a69c1"],"126d6ad24eed13163ba0959435d5a80e5672837c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"a626ec4d1c92e59fe390724d6220081047b03ce7":["7f0c8426396c925de8db3ed3f8ff40fd73670a5c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","126d6ad24eed13163ba0959435d5a80e5672837c","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9499b09dd7d06d975f31e59a9b00653a86f9cad2":["33dd2fc33a7c6ae46d3decff17689539385ef33f","aba371508186796cc6151d8223a5b4e16d02e26e","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["a626ec4d1c92e59fe390724d6220081047b03ce7","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad8024a22d8bd3a09b7f618f41cdfe117ae6fe96","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","df724d84dab24a0cc54bec95a8680867adc7f171"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"9aea0485ecacb6734c17da2d02569816c23a69c1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1390137e395d2f07f9ba5b8c43d293befe84d563"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","df724d84dab24a0cc54bec95a8680867adc7f171","aba371508186796cc6151d8223a5b4e16d02e26e","d2638f781be724518ff6c2263d14a48cf6e68017","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}