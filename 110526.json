{"path":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"contrib/analyzers/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.mem)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.mem)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.mem)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74","date":1254579885,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // 文件中只统计了6763个汉字加5个空汉字符3756~3760，其中第3756个用来存储符号信息。\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","pathOld":"contrib/analyzers/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/BigramDictionary#loadFromFile(String).mjava","sourceNew":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","sourceOld":"  /**\n   * Load the datafile into this BigramDictionary\n   * \n   * @param dctFilePath path to the Bigramdictionary (bigramdict.dct)\n   * @throws FileNotFoundException\n   * @throws IOException\n   * @throws UnsupportedEncodingException\n   */\n  public void loadFromFile(String dctFilePath) throws FileNotFoundException,\n      IOException, UnsupportedEncodingException {\n\n    int i, cnt, length, total = 0;\n    // The file only counted 6763 Chinese characters plus 5 reserved slots 3756~3760.  \n    // The 3756th is used (as a header) to store information.\n    int[] buffer = new int[3];\n    byte[] intBuffer = new byte[4];\n    String tmpword;\n    RandomAccessFile dctFile = new RandomAccessFile(dctFilePath, \"r\");\n\n    // GB2312 characters 0 - 6768\n    for (i = GB2312_FIRST_CHAR; i < GB2312_FIRST_CHAR + CHAR_NUM_IN_FILE; i++) {\n      String currentStr = getCCByGB2312Id(i);\n      // if (i == 5231)\n      // System.out.println(i);\n\n      dctFile.read(intBuffer);\n      // the dictionary was developed for C, and byte order must be converted to work with Java\n      cnt = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN).getInt();\n      if (cnt <= 0) {\n        continue;\n      }\n      total += cnt;\n      int j = 0;\n      while (j < cnt) {\n        dctFile.read(intBuffer);\n        buffer[0] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// frequency\n        dctFile.read(intBuffer);\n        buffer[1] = ByteBuffer.wrap(intBuffer).order(ByteOrder.LITTLE_ENDIAN)\n            .getInt();// length\n        dctFile.read(intBuffer);\n        // buffer[2] = ByteBuffer.wrap(intBuffer).order(\n        // ByteOrder.LITTLE_ENDIAN).getInt();// handle\n\n        length = buffer[1];\n        if (length > 0) {\n          byte[] lchBuffer = new byte[length];\n          dctFile.read(lchBuffer);\n          tmpword = new String(lchBuffer, \"GB2312\");\n          if (i != 3755 + GB2312_FIRST_CHAR) {\n            tmpword = currentStr + tmpword;\n          }\n          char carray[] = tmpword.toCharArray();\n          long hashId = hash1(carray);\n          int index = getAvaliableIndex(hashId, carray);\n          if (index != -1) {\n            if (bigramHashTable[index] == 0) {\n              bigramHashTable[index] = hashId;\n              // bigramStringTable[index] = tmpword;\n            }\n            frequencyTable[index] += buffer[0];\n          }\n        }\n        j++;\n      }\n    }\n    dctFile.close();\n    // log.info(\"load dictionary done! \" + dctFilePath + \" total:\" + total);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["55fa7b85159e79f79dfdca119db7f0f4cb6a2a74"],"55fa7b85159e79f79dfdca119db7f0f4cb6a2a74":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}