{"path":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","pathOld":"modules/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","sourceNew":"  // we have to carefully output the possibilities as compact utf-16\n  // range expressions, or jflex will OOM!\n  static void outputMacro(String name, String pattern) {\n    UnicodeSet set = new UnicodeSet(pattern);\n    set.removeAll(BMP);\n    System.out.println(name + \" = (\");\n    // if the set is empty, we have to do this or jflex will barf\n    if (set.isEmpty()) {\n      System.out.println(\"\\t  []\");\n    }\n    \n    HashMap<Character,UnicodeSet> utf16ByLead = new HashMap<Character,UnicodeSet>();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {    \n      char utf16[] = Character.toChars(it.codepoint);\n      UnicodeSet trails = utf16ByLead.get(utf16[0]);\n      if (trails == null) {\n        trails = new UnicodeSet();\n        utf16ByLead.put(utf16[0], trails);\n      }\n      trails.add(utf16[1]);\n    }\n    \n    boolean isFirst = true;\n    for (Character c : utf16ByLead.keySet()) {\n      UnicodeSet trail = utf16ByLead.get(c);\n      System.out.print( isFirst ? \"\\t  \" : \"\\t| \");\n      isFirst = false;\n      System.out.println(\"([\\\\u\" + Integer.toHexString(c) + \"]\" + trail.getRegexEquivalent() + \")\");\n    }\n    System.out.println(\")\");\n  }\n\n","sourceOld":"  // we have to carefully output the possibilities as compact utf-16\n  // range expressions, or jflex will OOM!\n  static void outputMacro(String name, String pattern) {\n    UnicodeSet set = new UnicodeSet(pattern);\n    set.removeAll(BMP);\n    System.out.println(name + \" = (\");\n    // if the set is empty, we have to do this or jflex will barf\n    if (set.isEmpty()) {\n      System.out.println(\"\\t  []\");\n    }\n    \n    HashMap<Character,UnicodeSet> utf16ByLead = new HashMap<Character,UnicodeSet>();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {    \n      char utf16[] = Character.toChars(it.codepoint);\n      UnicodeSet trails = utf16ByLead.get(utf16[0]);\n      if (trails == null) {\n        trails = new UnicodeSet();\n        utf16ByLead.put(utf16[0], trails);\n      }\n      trails.add(utf16[1]);\n    }\n    \n    boolean isFirst = true;\n    for (Character c : utf16ByLead.keySet()) {\n      UnicodeSet trail = utf16ByLead.get(c);\n      System.out.print( isFirst ? \"\\t  \" : \"\\t| \");\n      isFirst = false;\n      System.out.println(\"([\\\\u\" + Integer.toHexString(c) + \"]\" + trail.getRegexEquivalent() + \")\");\n    }\n    System.out.println(\")\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","sourceNew":"  // we have to carefully output the possibilities as compact utf-16\n  // range expressions, or jflex will OOM!\n  static void outputMacro(String name, String pattern) {\n    UnicodeSet set = new UnicodeSet(pattern);\n    set.removeAll(BMP);\n    System.out.println(name + \" = (\");\n    // if the set is empty, we have to do this or jflex will barf\n    if (set.isEmpty()) {\n      System.out.println(\"\\t  []\");\n    }\n    \n    HashMap<Character,UnicodeSet> utf16ByLead = new HashMap<>();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {    \n      char utf16[] = Character.toChars(it.codepoint);\n      UnicodeSet trails = utf16ByLead.get(utf16[0]);\n      if (trails == null) {\n        trails = new UnicodeSet();\n        utf16ByLead.put(utf16[0], trails);\n      }\n      trails.add(utf16[1]);\n    }\n    \n    boolean isFirst = true;\n    for (Character c : utf16ByLead.keySet()) {\n      UnicodeSet trail = utf16ByLead.get(c);\n      System.out.print( isFirst ? \"\\t  \" : \"\\t| \");\n      isFirst = false;\n      System.out.println(\"([\\\\u\" + Integer.toHexString(c) + \"]\" + trail.getRegexEquivalent() + \")\");\n    }\n    System.out.println(\")\");\n  }\n\n","sourceOld":"  // we have to carefully output the possibilities as compact utf-16\n  // range expressions, or jflex will OOM!\n  static void outputMacro(String name, String pattern) {\n    UnicodeSet set = new UnicodeSet(pattern);\n    set.removeAll(BMP);\n    System.out.println(name + \" = (\");\n    // if the set is empty, we have to do this or jflex will barf\n    if (set.isEmpty()) {\n      System.out.println(\"\\t  []\");\n    }\n    \n    HashMap<Character,UnicodeSet> utf16ByLead = new HashMap<Character,UnicodeSet>();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {    \n      char utf16[] = Character.toChars(it.codepoint);\n      UnicodeSet trails = utf16ByLead.get(utf16[0]);\n      if (trails == null) {\n        trails = new UnicodeSet();\n        utf16ByLead.put(utf16[0], trails);\n      }\n      trails.add(utf16[1]);\n    }\n    \n    boolean isFirst = true;\n    for (Character c : utf16ByLead.keySet()) {\n      UnicodeSet trail = utf16ByLead.get(c);\n      System.out.print( isFirst ? \"\\t  \" : \"\\t| \");\n      isFirst = false;\n      System.out.println(\"([\\\\u\" + Integer.toHexString(c) + \"]\" + trail.getRegexEquivalent() + \")\");\n    }\n    System.out.println(\")\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f0c6d69031c318c402abfe2543736076e80a132","date":1404594729,"type":4,"author":"Steven Rowe","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/icu/src/tools/java/org/apache/lucene/analysis/icu/GenerateJFlexSupplementaryMacros#outputMacro(String,String).mjava","sourceNew":null,"sourceOld":"  // we have to carefully output the possibilities as compact utf-16\n  // range expressions, or jflex will OOM!\n  static void outputMacro(String name, String pattern) {\n    UnicodeSet set = new UnicodeSet(pattern);\n    set.removeAll(BMP);\n    System.out.println(name + \" = (\");\n    // if the set is empty, we have to do this or jflex will barf\n    if (set.isEmpty()) {\n      System.out.println(\"\\t  []\");\n    }\n    \n    HashMap<Character,UnicodeSet> utf16ByLead = new HashMap<>();\n    for (UnicodeSetIterator it = new UnicodeSetIterator(set); it.next();) {    \n      char utf16[] = Character.toChars(it.codepoint);\n      UnicodeSet trails = utf16ByLead.get(utf16[0]);\n      if (trails == null) {\n        trails = new UnicodeSet();\n        utf16ByLead.put(utf16[0], trails);\n      }\n      trails.add(utf16[1]);\n    }\n    \n    boolean isFirst = true;\n    for (Character c : utf16ByLead.keySet()) {\n      UnicodeSet trail = utf16ByLead.get(c);\n      System.out.print( isFirst ? \"\\t  \" : \"\\t| \");\n      isFirst = false;\n      System.out.println(\"([\\\\u\" + Integer.toHexString(c) + \"]\" + trail.getRegexEquivalent() + \")\");\n    }\n    System.out.println(\")\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4f0c6d69031c318c402abfe2543736076e80a132":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f0c6d69031c318c402abfe2543736076e80a132"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["4f0c6d69031c318c402abfe2543736076e80a132"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"4f0c6d69031c318c402abfe2543736076e80a132":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}