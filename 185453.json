{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","commits":[{"id":"acca9f933f2900f374b672072ea9c159c5d72e83","date":1407403886,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","pathOld":"/dev/null","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6","date":1411857884,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","sourceNew":null,"sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestBlockPostingsFormat#testFinalBlock().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene41/TestLucene41PostingsFormat#testFinalBlock().mjava","sourceNew":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","sourceOld":"  /** Make sure the final sub-block(s) are not skipped. */\n  public void testFinalBlock() throws Exception {\n    Directory d = newDirectory();\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    for(int i=0;i<25;i++) {\n      Document doc = new Document();\n      doc.add(newStringField(\"field\", Character.toString((char) (97+i)), Field.Store.NO));\n      doc.add(newStringField(\"field\", \"z\" + Character.toString((char) (97+i)), Field.Store.NO));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n\n    DirectoryReader r = DirectoryReader.open(w, true);\n    assertEquals(1, r.leaves().size());\n    FieldReader field = (FieldReader) r.leaves().get(0).reader().fields().terms(\"field\");\n    // We should see exactly two blocks: one root block (prefix empty string) and one block for z* terms (prefix z):\n    Stats stats = field.computeStats();\n    assertEquals(0, stats.floorBlockCount);\n    assertEquals(2, stats.nonFloorBlockCount);\n    r.close();\n    w.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["d0ef034a4f10871667ae75181537775ddcf8ade4","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["acca9f933f2900f374b672072ea9c159c5d72e83"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"acca9f933f2900f374b672072ea9c159c5d72e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9bb9a29a5e71a90295f175df8919802993142c9a"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["acca9f933f2900f374b672072ea9c159c5d72e83"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["9bb9a29a5e71a90295f175df8919802993142c9a","3d5291145ae0cea7e6e6a2379f3a32643bf71bf6"],"3d5291145ae0cea7e6e6a2379f3a32643bf71bf6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"acca9f933f2900f374b672072ea9c159c5d72e83":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}