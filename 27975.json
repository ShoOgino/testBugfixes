{"path":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"fa271a738c74b4551a7a964f75cb5fc19f80dc79","date":1168391918,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public void init(Map<String, String> args) {\n    super.init(args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0552957099a974d3ed0dfc06d8d282b483e1273f","0552957099a974d3ed0dfc06d8d282b483e1273f","0552957099a974d3ed0dfc06d8d282b483e1273f","0552957099a974d3ed0dfc06d8d282b483e1273f","0552957099a974d3ed0dfc06d8d282b483e1273f","0552957099a974d3ed0dfc06d8d282b483e1273f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6d6338c87060be5f66757a94945975f3bbd377a9","date":1189278234,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(SolrConfig,Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","sourceNew":"  public void init(SolrConfig solrConfig, Map<String, String> args) {\n    super.init(solrConfig, args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  public void init(Map<String, String> args) {\n    super.init(args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014","date":1195912306,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(SolrConfig,Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  public void init(SolrConfig solrConfig, Map<String, String> args) {\n    super.init(solrConfig, args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilterFactory#init(Map[String,String]).mjava","sourceNew":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public void init(Map<String, String> args) {\n    super.init(args);\n    try {\n      p = Pattern.compile(args.get(\"pattern\"));\n    } catch (PatternSyntaxException e) {\n      throw new RuntimeException\n        (\"Configuration Error: 'pattern' can not be parsed in \" +\n         this.getClass().getName(), e);\n    }\n    \n    replacement = args.get(\"replacement\");\n    \n    String r = args.get(\"replace\");\n    if (null != r) {\n      if (r.equals(\"all\")) {\n        all = true;\n      } else {\n        if (r.equals(\"first\")) {\n          all = false;\n        } else {\n          throw new RuntimeException\n            (\"Configuration Error: 'replace' must be 'first' or 'all' in \"\n             + this.getClass().getName());\n        }\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["6d6338c87060be5f66757a94945975f3bbd377a9"],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6d6338c87060be5f66757a94945975f3bbd377a9":["fcf52a7da226d8d3756cc8bf9f3ae1f39952b014"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fa271a738c74b4551a7a964f75cb5fc19f80dc79"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"fcf52a7da226d8d3756cc8bf9f3ae1f39952b014":["ad94625fb8d088209f46650c8097196fec67f00c"],"fa271a738c74b4551a7a964f75cb5fc19f80dc79":["6d6338c87060be5f66757a94945975f3bbd377a9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}