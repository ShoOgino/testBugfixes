{"path":"solr/core/src/test/org/apache/solr/common/cloud/ZkDynamicConfigTest#parseLines().mjava","commits":[{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":0,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/common/cloud/ZkDynamicConfigTest#parseLines().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void parseLines() {\n    ZkDynamicConfig parsed = ZkDynamicConfig.parseLines(\n        \"ignored-line\\n\" +\n            \"server.1=zoo1:2780:2783:participant;0.0.0.0:2181\\n\" +\n            \"server.2=zoo2:2781:2784:participant|zoo3:2783;2181\\n\" +\n            \"server.3=zoo3:2782:2785;zoo3-client:2181\\n\" +\n            \"version=400000003\");\n    assertEquals(3, parsed.size());\n\n    assertEquals(\"zoo1\", parsed.getServers().get(0).address);\n    assertEquals(Integer.valueOf(2780), parsed.getServers().get(0).leaderPort);\n    assertEquals(Integer.valueOf(2783), parsed.getServers().get(0).leaderElectionPort);\n    assertEquals(\"participant\", parsed.getServers().get(0).role);\n    assertEquals(\"0.0.0.0\", parsed.getServers().get(0).clientPortAddress);\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(0).clientPort);\n    assertEquals(\"zoo1\", parsed.getServers().get(0).resolveClientPortAddress());\n\n    // |<host2> is ignored\n    assertEquals(\"participant\", parsed.getServers().get(1).role);\n    assertNull(parsed.getServers().get(1).clientPortAddress);\n    assertEquals(\"zoo2\", parsed.getServers().get(1).resolveClientPortAddress());\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(1).clientPort);\n\n    // role optional\n    assertNull(parsed.getServers().get(2).role);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).clientPortAddress);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).resolveClientPortAddress());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5e1d86fe37bc067ae054ff809ec807433b2b7387"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5e1d86fe37bc067ae054ff809ec807433b2b7387","date":1596011582,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/common/cloud/ZkDynamicConfigTest#parseLines().mjava","pathOld":"solr/core/src/test/org/apache/solr/common/cloud/ZkDynamicConfigTest#parseLines().mjava","sourceNew":"  @Test\n  public void parseLines() {\n    ZkDynamicConfig parsed = ZkDynamicConfig.parseLines(\n        \"ignored-line\\n\" +\n            \"server.1=zoo1:2780:2783:participant;0.0.0.0:2181\\n\" +\n            \"server.2=zoo2:2781:2784:participant|zoo3:2783;2181\\n\" +\n            \"server.3=zoo3:2782:2785;zoo3-client:2181\\n\" +\n            \"server.4=zoo4:2783:2786:participant\\n\" + // this assumes clientPort specified in static config\n            \"version=400000003\");\n    assertEquals(4, parsed.size());\n\n    assertEquals(\"zoo1\", parsed.getServers().get(0).address);\n    assertEquals(Integer.valueOf(2780), parsed.getServers().get(0).leaderPort);\n    assertEquals(Integer.valueOf(2783), parsed.getServers().get(0).leaderElectionPort);\n    assertEquals(\"participant\", parsed.getServers().get(0).role);\n    assertEquals(\"0.0.0.0\", parsed.getServers().get(0).clientPortAddress);\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(0).clientPort);\n    assertEquals(\"zoo1\", parsed.getServers().get(0).resolveClientPortAddress());\n\n    // |<host2> is ignored\n    assertEquals(\"participant\", parsed.getServers().get(1).role);\n    assertNull(parsed.getServers().get(1).clientPortAddress);\n    assertEquals(\"zoo2\", parsed.getServers().get(1).resolveClientPortAddress());\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(1).clientPort);\n\n    // role optional\n    assertNull(parsed.getServers().get(2).role);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).clientPortAddress);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).resolveClientPortAddress());\n\n    // client address/port optional if clientPort specified in static config file (back-compat mode)\n    assertEquals(\"participant\", parsed.getServers().get(3).role);\n    assertEquals(null, parsed.getServers().get(3).clientPortAddress);\n    assertEquals(\"zoo4\", parsed.getServers().get(3).resolveClientPortAddress());\n    assertEquals(null, parsed.getServers().get(3).clientPort);\n  }\n\n","sourceOld":"  @Test\n  public void parseLines() {\n    ZkDynamicConfig parsed = ZkDynamicConfig.parseLines(\n        \"ignored-line\\n\" +\n            \"server.1=zoo1:2780:2783:participant;0.0.0.0:2181\\n\" +\n            \"server.2=zoo2:2781:2784:participant|zoo3:2783;2181\\n\" +\n            \"server.3=zoo3:2782:2785;zoo3-client:2181\\n\" +\n            \"version=400000003\");\n    assertEquals(3, parsed.size());\n\n    assertEquals(\"zoo1\", parsed.getServers().get(0).address);\n    assertEquals(Integer.valueOf(2780), parsed.getServers().get(0).leaderPort);\n    assertEquals(Integer.valueOf(2783), parsed.getServers().get(0).leaderElectionPort);\n    assertEquals(\"participant\", parsed.getServers().get(0).role);\n    assertEquals(\"0.0.0.0\", parsed.getServers().get(0).clientPortAddress);\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(0).clientPort);\n    assertEquals(\"zoo1\", parsed.getServers().get(0).resolveClientPortAddress());\n\n    // |<host2> is ignored\n    assertEquals(\"participant\", parsed.getServers().get(1).role);\n    assertNull(parsed.getServers().get(1).clientPortAddress);\n    assertEquals(\"zoo2\", parsed.getServers().get(1).resolveClientPortAddress());\n    assertEquals(Integer.valueOf(2181), parsed.getServers().get(1).clientPort);\n\n    // role optional\n    assertNull(parsed.getServers().get(2).role);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).clientPortAddress);\n    assertEquals(\"zoo3-client\", parsed.getServers().get(2).resolveClientPortAddress());\n  }\n\n","bugFix":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5e1d86fe37bc067ae054ff809ec807433b2b7387":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5e1d86fe37bc067ae054ff809ec807433b2b7387"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"5e1d86fe37bc067ae054ff809ec807433b2b7387":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["5e1d86fe37bc067ae054ff809ec807433b2b7387"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}