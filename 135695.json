{"path":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","commits":[{"id":"cdcf766020b9b159d0b3a6ecae90ff1998ded019","date":1286818331,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"184f5dad988214d0632a44d18f2d9817c4b8bac5","date":1287350684,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\thandler.handleRequest(new LocalSolrQueryRequest(core, params), rsp);\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"/dev/null","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","date":1307387688,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"77cf4379b2824f6ea34b091c495d6e95c38ff9e2","date":1307610475,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","pathOld":"solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest#testExtendedCollate().mjava","sourceNew":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","sourceOld":"\t@Test\n\tpublic void testExtendedCollate() throws Exception {\n\t\tSolrCore core = h.getCore();\n\t\tSearchComponent speller = core.getSearchComponent(\"spellcheck\");\n\t\tassertTrue(\"speller is null and it shouldn't be\", speller != null);\n\n\t\tModifiableSolrParams params = new ModifiableSolrParams();\n\t\tparams.add(CommonParams.QT, \"spellCheckCompRH\");\n\t\tparams.add(CommonParams.Q, \"lowerfilt:(+fauth +home +loane)\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_EXTENDED_RESULTS, \"true\");\n\t\tparams.add(SpellCheckComponent.COMPONENT_NAME, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_BUILD, \"true\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COUNT, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE, \"true\");\n\n\t\t// Testing backwards-compatible behavior.\n\t\t// Returns 1 collation as a single string.\n\t\t// All words are \"correct\" per the dictionary, but this collation would\n\t\t// return no results if tried.\n\t\tSolrRequestHandler handler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\tSolrQueryResponse rsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\tSolrQueryRequest req = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tNamedList values = rsp.getValues();\n\t\tNamedList spellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tNamedList suggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tString singleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +homer +loaves)\", singleCollation);\n\n\t\t// Testing backwards-compatible response format but will only return a\n\t\t// collation that would return results.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_BUILD);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"5\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"1\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n    req.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tsingleCollation = (String) suggestions.get(\"collation\");\n\t\tassertEquals(\"lowerfilt:(+faith +hope +loaves)\", singleCollation);\n\n\t\t// Testing returning multiple collations if more than one valid\n\t\t// combination exists.\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES);\n\t\tparams.remove(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS);\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATION_TRIES, \"10\");\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_MAX_COLLATIONS, \"2\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<String> collations = suggestions.getAll(\"collation\");\n\t\tassertTrue(collations.size() == 2);\n\t\tfor (String multipleCollation : collations) {\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t}\n\n\t\t// Testing return multiple collations with expanded collation response\n\t\t// format.\n\t\tparams.add(SpellCheckComponent.SPELLCHECK_COLLATE_EXTENDED_RESULTS, \"true\");\n\t\thandler = core.getRequestHandler(\"spellCheckCompRH\");\n\t\trsp = new SolrQueryResponse();\n\t\trsp.add(\"responseHeader\", new SimpleOrderedMap());\n\t\treq = new LocalSolrQueryRequest(core, params);\n\t\thandler.handleRequest(req, rsp);\n\t\treq.close();\n\t\tvalues = rsp.getValues();\n\t\tspellCheck = (NamedList) values.get(\"spellcheck\");\n\t\tsuggestions = (NamedList) spellCheck.get(\"suggestions\");\n\t\tList<NamedList> expandedCollationList = suggestions.getAll(\"collation\");\n\t\tSet<String> usedcollations = new HashSet<String>();\n\t\tassertTrue(expandedCollationList.size() == 2);\n\t\tfor (NamedList expandedCollation : expandedCollationList) {\n\t\t\tString multipleCollation = (String) expandedCollation.get(\"collationQuery\");\n\t\t\tassertTrue(multipleCollation.equals(\"lowerfilt:(+faith +hope +love)\")\n\t\t\t\t\t|| multipleCollation.equals(\"lowerfilt:(+faith +hope +loaves)\"));\n\t\t\tassertTrue(!usedcollations.contains(multipleCollation));\n\t\t\tusedcollations.add(multipleCollation);\n\n\t\t\tint hits = (Integer) expandedCollation.get(\"hits\");\n\t\t\tassertTrue(hits == 1);\n\n\t\t\tNamedList misspellingsAndCorrections = (NamedList) expandedCollation.get(\"misspellingsAndCorrections\");\n\t\t\tassertTrue(misspellingsAndCorrections.size() == 3);\n\n\t\t\tString correctionForFauth = (String) misspellingsAndCorrections.get(\"fauth\");\n\t\t\tString correctionForHome = (String) misspellingsAndCorrections.get(\"home\");\n\t\t\tString correctionForLoane = (String) misspellingsAndCorrections.get(\"loane\");\n\t\t\tassertTrue(correctionForFauth.equals(\"faith\"));\n\t\t\tassertTrue(correctionForHome.equals(\"hope\"));\n\t\t\tassertTrue(correctionForLoane.equals(\"love\") || correctionForLoane.equals(\"loaves\"));\n\t\t}\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["184f5dad988214d0632a44d18f2d9817c4b8bac5","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["184f5dad988214d0632a44d18f2d9817c4b8bac5"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["31aff65a420ac3dfd25611e2c4a99d38b7dd60e9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","184f5dad988214d0632a44d18f2d9817c4b8bac5"],"184f5dad988214d0632a44d18f2d9817c4b8bac5":["cdcf766020b9b159d0b3a6ecae90ff1998ded019"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","184f5dad988214d0632a44d18f2d9817c4b8bac5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"31aff65a420ac3dfd25611e2c4a99d38b7dd60e9":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","c26f00b574427b55127e869b935845554afde1fa","77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee"],"cdcf766020b9b159d0b3a6ecae90ff1998ded019":["184f5dad988214d0632a44d18f2d9817c4b8bac5","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cdcf766020b9b159d0b3a6ecae90ff1998ded019","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"77cf4379b2824f6ea34b091c495d6e95c38ff9e2":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"184f5dad988214d0632a44d18f2d9817c4b8bac5":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","31aff65a420ac3dfd25611e2c4a99d38b7dd60e9","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["77cf4379b2824f6ea34b091c495d6e95c38ff9e2","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}