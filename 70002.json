{"path":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/contrib/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * This is a convenience method that calls\n   * {@link #getBestFragments(TokenStream, String, int)}\n   *\n   * @param analyzer   the analyzer that will be used to split <code>text</code>\n   * into chunks\n   * @param fieldName     the name of the field being highlighted (used by analyzer)\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    Analyzer analyzer,\n    String fieldName,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n    return getBestFragments(tokenStream, text, maxNumFragments);\n  }\n\n","sourceOld":"\t/**\n\t * Highlights chosen terms in a text, extracting the most relevant sections.\n\t * This is a convenience method that calls\n\t * {@link #getBestFragments(TokenStream, String, int)}\n\t *\n\t * @param analyzer   the analyzer that will be used to split <code>text</code>\n\t * into chunks\n\t * @param fieldName     the name of the field being highlighted (used by analyzer)\n\t * @param text        \ttext to highlight terms in\n\t * @param maxNumFragments  the maximum number of fragments.\n\t *\n\t * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n\t * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n\t */\n\tpublic final String[] getBestFragments(\n\t\tAnalyzer analyzer,\n\t\tString fieldName,\n\t\tString text,\n\t\tint maxNumFragments)\n\t\tthrows IOException, InvalidTokenOffsetsException\n\t{\n\t\tTokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n\t\treturn getBestFragments(tokenStream, text, maxNumFragments);\n\t}\n\n","bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * This is a convenience method that calls\n   * {@link #getBestFragments(TokenStream, String, int)}\n   *\n   * @param analyzer   the analyzer that will be used to split <code>text</code>\n   * into chunks\n   * @param fieldName     the name of the field being highlighted (used by analyzer)\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    Analyzer analyzer,\n    String fieldName,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, text);\n    return getBestFragments(tokenStream, text, maxNumFragments);\n  }\n\n","sourceOld":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * This is a convenience method that calls\n   * {@link #getBestFragments(TokenStream, String, int)}\n   *\n   * @param analyzer   the analyzer that will be used to split <code>text</code>\n   * into chunks\n   * @param fieldName     the name of the field being highlighted (used by analyzer)\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    Analyzer analyzer,\n    String fieldName,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n    return getBestFragments(tokenStream, text, maxNumFragments);\n  }\n\n","bugFix":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","pathOld":"lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter#getBestFragments(Analyzer,String,String,int).mjava","sourceNew":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * This is a convenience method that calls\n   * {@link #getBestFragments(TokenStream, String, int)}\n   *\n   * @param analyzer   the analyzer that will be used to split <code>text</code>\n   * into chunks\n   * @param fieldName     the name of the field being highlighted (used by analyzer)\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    Analyzer analyzer,\n    String fieldName,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, text);\n    return getBestFragments(tokenStream, text, maxNumFragments);\n  }\n\n","sourceOld":"  /**\n   * Highlights chosen terms in a text, extracting the most relevant sections.\n   * This is a convenience method that calls\n   * {@link #getBestFragments(TokenStream, String, int)}\n   *\n   * @param analyzer   the analyzer that will be used to split <code>text</code>\n   * into chunks\n   * @param fieldName     the name of the field being highlighted (used by analyzer)\n   * @param text          text to highlight terms in\n   * @param maxNumFragments  the maximum number of fragments.\n   *\n   * @return highlighted text fragments (between 0 and maxNumFragments number of fragments)\n   * @throws InvalidTokenOffsetsException thrown if any token's endOffset exceeds the provided text's length\n   */\n  public final String[] getBestFragments(\n    Analyzer analyzer,\n    String fieldName,\n    String text,\n    int maxNumFragments)\n    throws IOException, InvalidTokenOffsetsException\n  {\n    TokenStream tokenStream = analyzer.tokenStream(fieldName, new StringReader(text));\n    return getBestFragments(tokenStream, text, maxNumFragments);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}