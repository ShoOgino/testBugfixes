{"path":"lucene/backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#performance().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#performance().mjava","pathOld":"backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#performance().mjava","sourceNew":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), 100);\n      TermAttribute tfTok = stream.addAttribute(TermAttribute.class);\n      TermAttribute sinkTok = sink.addAttribute(TermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), 100);\n      TermAttribute tfTok = stream.addAttribute(TermAttribute.class);\n      TermAttribute sinkTok = sink.addAttribute(TermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a","date":1272922845,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/analysis/TestTeeSinkTokenFilter#performance().mjava","sourceNew":null,"sourceOld":"  /**\n   * Not an explicit test, just useful to print out some info on performance\n   *\n   * @throws Exception\n   */\n  public void performance() throws Exception {\n    int[] tokCount = {100, 500, 1000, 2000, 5000, 10000};\n    int[] modCounts = {1, 2, 5, 10, 20, 50, 100, 200, 500};\n    for (int k = 0; k < tokCount.length; k++) {\n      StringBuilder buffer = new StringBuilder();\n      System.out.println(\"-----Tokens: \" + tokCount[k] + \"-----\");\n      for (int i = 0; i < tokCount[k]; i++) {\n        buffer.append(English.intToEnglish(i).toUpperCase()).append(' ');\n      }\n      //make sure we produce the same tokens\n      TeeSinkTokenFilter teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n      TokenStream sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(100));\n      teeStream.consumeAllTokens();\n      TokenStream stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), 100);\n      TermAttribute tfTok = stream.addAttribute(TermAttribute.class);\n      TermAttribute sinkTok = sink.addAttribute(TermAttribute.class);\n      for (int i=0; stream.incrementToken(); i++) {\n        assertTrue(sink.incrementToken());\n        assertTrue(tfTok + \" is not equal to \" + sinkTok + \" at token: \" + i, tfTok.equals(sinkTok) == true);\n      }\n      \n      //simulate two fields, each being analyzed once, for 20 documents\n      for (int j = 0; j < modCounts.length; j++) {\n        int tfPos = 0;\n        long start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          stream = new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString())));\n          PositionIncrementAttribute posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n          stream = new ModuloTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))), modCounts[j]);\n          posIncrAtt = stream.getAttribute(PositionIncrementAttribute.class);\n          while (stream.incrementToken()) {\n            tfPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        long finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Two fields took \" + (finish - start) + \" ms\");\n        int sinkPos = 0;\n        //simulate one field with one sink\n        start = System.currentTimeMillis();\n        for (int i = 0; i < 20; i++) {\n          teeStream = new TeeSinkTokenFilter(new StandardFilter(new StandardTokenizer(Version.LUCENE_CURRENT, new StringReader(buffer.toString()))));\n          sink = teeStream.newSinkTokenStream(new ModuloSinkFilter(modCounts[j]));\n          PositionIncrementAttribute posIncrAtt = teeStream.getAttribute(PositionIncrementAttribute.class);\n          while (teeStream.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n          //System.out.println(\"Modulo--------\");\n          posIncrAtt = sink.getAttribute(PositionIncrementAttribute.class);\n          while (sink.incrementToken()) {\n            sinkPos += posIncrAtt.getPositionIncrement();\n          }\n        }\n        finish = System.currentTimeMillis();\n        System.out.println(\"ModCount: \" + modCounts[j] + \" Tee fields took \" + (finish - start) + \" ms\");\n        assertTrue(sinkPos + \" does not equal: \" + tfPos, sinkPos == tfPos);\n\n      }\n      System.out.println(\"- End Tokens: \" + tokCount[k] + \"-----\");\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a8b08d3f41ac6ea1872b7b0d1df3558a57d2498a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}