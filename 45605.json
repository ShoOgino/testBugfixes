{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,boolean).mjava","commits":[{"id":"29baaefef1b62d76a3370ff72a0fe5f9bd84e365","date":1348949582,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testTermsOneThread(Fields,EnumSet[Option],IndexOptions,boolean).mjava","sourceNew":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options,\n                                  IndexOptions maxTestOptions,\n                                  IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxTestOptions,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxTestOptions,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","sourceOld":"  private void testTermsOneThread(Fields fieldsSource, EnumSet<Option> options, IndexOptions maxIndexOptions, boolean alwaysTestMax) throws IOException {\n\n    ThreadState threadState = new ThreadState();\n\n    // Test random terms/fields:\n    List<TermState> termStates = new ArrayList<TermState>();\n    List<FieldAndTerm> termStateTerms = new ArrayList<FieldAndTerm>();\n    \n    Collections.shuffle(allTerms, random());\n    int upto = 0;\n    while (upto < allTerms.size()) {\n\n      boolean useTermState = termStates.size() != 0 && random().nextInt(5) == 1;\n      FieldAndTerm fieldAndTerm;\n      TermsEnum termsEnum;\n\n      TermState termState = null;\n\n      if (!useTermState) {\n        // Seek by random field+term:\n        fieldAndTerm = allTerms.get(upto++);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString() );\n        }\n      } else {\n        // Seek by previous saved TermState\n        int idx = random().nextInt(termStates.size());\n        fieldAndTerm = termStateTerms.get(idx);\n        if (VERBOSE) {\n          System.out.println(\"\\nTEST: seek using TermState to term=\" + fieldAndTerm.field + \":\" + fieldAndTerm.term.utf8ToString());\n        }\n        termState = termStates.get(idx);\n      }\n\n      Terms terms = fieldsSource.terms(fieldAndTerm.field);\n      assertNotNull(terms);\n      termsEnum = terms.iterator(null);\n\n      if (!useTermState) {\n        assertTrue(termsEnum.seekExact(fieldAndTerm.term, true));\n      } else {\n        termsEnum.seekExact(fieldAndTerm.term, termState);\n      }\n\n      boolean savedTermState = false;\n\n      if (options.contains(Option.TERM_STATE) && !useTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        savedTermState = true;\n      }\n\n      verifyEnum(threadState,\n                 fieldAndTerm.field,\n                 fieldAndTerm.term,\n                 termsEnum,\n                 maxIndexOptions,\n                 options,\n                 alwaysTestMax);\n\n      // Sometimes save term state after pulling the enum:\n      if (options.contains(Option.TERM_STATE) && !useTermState && !savedTermState && random().nextInt(5) == 1) {\n        // Save away this TermState:\n        termStates.add(termsEnum.termState());\n        termStateTerms.add(fieldAndTerm);\n        useTermState = true;\n      }\n\n      // 10% of the time make sure you can pull another enum\n      // from the same term:\n      if (alwaysTestMax || random().nextInt(10) == 7) {\n        // Try same term again\n        if (VERBOSE) {\n          System.out.println(\"TEST: try enum again on same term\");\n        }\n\n        verifyEnum(threadState,\n                   fieldAndTerm.field,\n                   fieldAndTerm.term,\n                   termsEnum,\n                   maxIndexOptions,\n                   options,\n                   alwaysTestMax);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"]},"commit2Childs":{"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}