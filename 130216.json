{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","commits":[{"id":"87fab14adebb5b490363c9bc05f747938bd15e6a","date":1424877964,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3d6eb0072094d94624002318ba2d4c840946833","date":1424947971,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseDocIdSetIterator twoPhaseIterator = new TwoPhaseDocIdSetIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseDocIdSetIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseDocIdSetIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a6b1be5d2b36d6a30913778ef61374103d55e33","date":1427303640,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator() {\n          @Override\n          public DocIdSetIterator approximation() {\n            return approximation;\n          }\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29efba95465cc25f76d9f92aec35c9f71b1a55ca","date":1428692677,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7f94ff172f40ff68a926d112e25b96bc38e5a27","date":1431002360,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new ConstantScoreWeight(this) {\n\n      @Override\n      protected Scorer scorer(LeafReaderContext context, Bits acceptDocs, float score) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n\n        final DocIdSetIterator approximation = DocIdSetIterator.all(context.reader().maxDoc());\n        final TwoPhaseIterator twoPhaseIterator = new TwoPhaseIterator(approximation) {\n          @Override\n          public boolean matches() throws IOException {\n            final int doc = approximation.docID();\n            if (acceptDocs != null && acceptDocs.get(doc) == false) {\n              return false;\n            }\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n        };\n        final DocIdSetIterator disi = TwoPhaseIterator.asDocIdSetIterator(twoPhaseIterator);\n        return new Scorer(this) {\n\n          @Override\n          public TwoPhaseIterator asTwoPhaseIterator() {\n            return twoPhaseIterator;\n          }\n\n          @Override\n          public float score() throws IOException {\n            return score;\n          }\n\n          @Override\n          public int freq() throws IOException {\n            return 1;\n          }\n\n          @Override\n          public int docID() {\n            return disi.docID();\n          }\n\n          @Override\n          public int nextDoc() throws IOException {\n            return disi.nextDoc();\n          }\n\n          @Override\n          public int advance(int target) throws IOException {\n            return disi.advance(target);\n          }\n\n          @Override\n          public long cost() {\n            return disi.cost();\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fb0efe75e5c6021561f115dfe334b74786364ba","date":1434366074,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesTermsQuery#createWeight(IndexSearcher,boolean).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores) throws IOException {\n    return new RandomAccessWeight(this) {\n\n      @Override\n      protected Bits getMatchingDocs(LeafReaderContext context) throws IOException {\n        final SortedSetDocValues values = DocValues.getSortedSet(context.reader(), field);\n        final LongBitSet bits = new LongBitSet(values.getValueCount());\n        for (BytesRef term : terms) {\n          final long ord = values.lookupTerm(term);\n          if (ord >= 0) {\n            bits.set(ord);\n          }\n        }\n        return new Bits() {\n\n          @Override\n          public boolean get(int doc) {\n            values.setDocument(doc);\n            for (long ord = values.nextOrd(); ord != SortedSetDocValues.NO_MORE_ORDS; ord = values.nextOrd()) {\n              if (bits.get(ord)) {\n                return true;\n              }\n            }\n            return false;\n          }\n\n          @Override\n          public int length() {\n            return context.reader().maxDoc();\n          }\n\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"29efba95465cc25f76d9f92aec35c9f71b1a55ca":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["a3d6eb0072094d94624002318ba2d4c840946833"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a6b1be5d2b36d6a30913778ef61374103d55e33"],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["29efba95465cc25f76d9f92aec35c9f71b1a55ca"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9fb0efe75e5c6021561f115dfe334b74786364ba":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"a3d6eb0072094d94624002318ba2d4c840946833":["87fab14adebb5b490363c9bc05f747938bd15e6a"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9fb0efe75e5c6021561f115dfe334b74786364ba"]},"commit2Childs":{"29efba95465cc25f76d9f92aec35c9f71b1a55ca":["a7f94ff172f40ff68a926d112e25b96bc38e5a27"],"7a6b1be5d2b36d6a30913778ef61374103d55e33":["29efba95465cc25f76d9f92aec35c9f71b1a55ca","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a7f94ff172f40ff68a926d112e25b96bc38e5a27":["9fb0efe75e5c6021561f115dfe334b74786364ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","87fab14adebb5b490363c9bc05f747938bd15e6a"],"a3d6eb0072094d94624002318ba2d4c840946833":["7a6b1be5d2b36d6a30913778ef61374103d55e33"],"9fb0efe75e5c6021561f115dfe334b74786364ba":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"87fab14adebb5b490363c9bc05f747938bd15e6a":["a3d6eb0072094d94624002318ba2d4c840946833"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}