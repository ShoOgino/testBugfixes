{"path":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeFeatureGeometry(Object).mjava","commits":[{"id":"ba1c938737d199113ec96f0d8ce2c8791b61cd18","date":1458148009,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeFeatureGeometry(Object).mjava","pathOld":"/dev/null","sourceNew":"  protected void writeFeatureGeometry(Object geo) throws IOException \n  {\n    // Support multi-valued geometries\n    if(geo instanceof Iterable) {\n      Iterator iter = ((Iterable)geo).iterator();\n      if(!iter.hasNext()) {\n        return; // empty list\n      }\n      else {\n        geo = iter.next();\n        \n        // More than value\n        if(iter.hasNext()) {\n          writeMapSeparator();\n          indent();\n          writeKey(\"geometry\", false);\n          incLevel();\n\n          // TODO: in the future, we can be smart and try to make this the appropriate MULTI* value\n          // if all the values are the same\n          // { \"type\": \"GeometryCollection\",\n          //    \"geometries\": [\n          writeMapOpener(-1); \n          writeKey(\"type\",false);\n          writeStr(null, \"GeometryCollection\", false);\n          writeMapSeparator();\n          writeKey(\"geometries\", false);\n          writeArrayOpener(-1); // no trivial way to determine array size\n          incLevel();\n          \n          // The first one\n          indent();\n          writeGeo(geo);\n          while(iter.hasNext()) {\n            // Each element in the array\n            writeArraySeparator();\n            indent();\n            writeGeo(iter.next());\n          }\n          \n          decLevel();\n          writeArrayCloser();\n          writeMapCloser();\n          \n          decLevel();\n          return;\n        }\n      }\n    }\n    \n    // Single Value\n    if(geo!=null) {\n      writeMapSeparator();\n      indent();\n      writeKey(\"geometry\", false);\n      writeGeo(geo);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeFeatureGeometry(Object).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/GeoJSONWriter[GeoJSONResponseWriter]#writeFeatureGeometry(Object).mjava","sourceNew":"  protected void writeFeatureGeometry(Object geo) throws IOException \n  {\n    // Support multi-valued geometries\n    if(geo instanceof Iterable) {\n      @SuppressWarnings({\"rawtypes\"})\n      Iterator iter = ((Iterable)geo).iterator();\n      if(!iter.hasNext()) {\n        return; // empty list\n      }\n      else {\n        geo = iter.next();\n        \n        // More than value\n        if(iter.hasNext()) {\n          writeMapSeparator();\n          indent();\n          writeKey(\"geometry\", false);\n          incLevel();\n\n          // TODO: in the future, we can be smart and try to make this the appropriate MULTI* value\n          // if all the values are the same\n          // { \"type\": \"GeometryCollection\",\n          //    \"geometries\": [\n          writeMapOpener(-1); \n          writeKey(\"type\",false);\n          writeStr(null, \"GeometryCollection\", false);\n          writeMapSeparator();\n          writeKey(\"geometries\", false);\n          writeArrayOpener(-1); // no trivial way to determine array size\n          incLevel();\n          \n          // The first one\n          indent();\n          writeGeo(geo);\n          while(iter.hasNext()) {\n            // Each element in the array\n            writeArraySeparator();\n            indent();\n            writeGeo(iter.next());\n          }\n          \n          decLevel();\n          writeArrayCloser();\n          writeMapCloser();\n          \n          decLevel();\n          return;\n        }\n      }\n    }\n    \n    // Single Value\n    if(geo!=null) {\n      writeMapSeparator();\n      indent();\n      writeKey(\"geometry\", false);\n      writeGeo(geo);\n    }\n  }\n\n","sourceOld":"  protected void writeFeatureGeometry(Object geo) throws IOException \n  {\n    // Support multi-valued geometries\n    if(geo instanceof Iterable) {\n      Iterator iter = ((Iterable)geo).iterator();\n      if(!iter.hasNext()) {\n        return; // empty list\n      }\n      else {\n        geo = iter.next();\n        \n        // More than value\n        if(iter.hasNext()) {\n          writeMapSeparator();\n          indent();\n          writeKey(\"geometry\", false);\n          incLevel();\n\n          // TODO: in the future, we can be smart and try to make this the appropriate MULTI* value\n          // if all the values are the same\n          // { \"type\": \"GeometryCollection\",\n          //    \"geometries\": [\n          writeMapOpener(-1); \n          writeKey(\"type\",false);\n          writeStr(null, \"GeometryCollection\", false);\n          writeMapSeparator();\n          writeKey(\"geometries\", false);\n          writeArrayOpener(-1); // no trivial way to determine array size\n          incLevel();\n          \n          // The first one\n          indent();\n          writeGeo(geo);\n          while(iter.hasNext()) {\n            // Each element in the array\n            writeArraySeparator();\n            indent();\n            writeGeo(iter.next());\n          }\n          \n          decLevel();\n          writeArrayCloser();\n          writeMapCloser();\n          \n          decLevel();\n          return;\n        }\n      }\n    }\n    \n    // Single Value\n    if(geo!=null) {\n      writeMapSeparator();\n      indent();\n      writeKey(\"geometry\", false);\n      writeGeo(geo);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba1c938737d199113ec96f0d8ce2c8791b61cd18"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ba1c938737d199113ec96f0d8ce2c8791b61cd18":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}