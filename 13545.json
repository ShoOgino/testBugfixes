{"path":"solr/core/src/test/org/apache/solr/util/TestSafeXMLParsing#testConfig().mjava","commits":[{"id":"575ba8a7e01f51915a430b8c67d2461f0703feaa","date":1529234129,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSafeXMLParsing#testConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testConfig() throws Exception {\n    final ResourceLoader loader = new ResourceLoader() {\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        switch (resource) {\n          case \"source1.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"foo://bar.xyz/external\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source2.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"./include1.xml\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source3.xml\":\n            return getStringStream(\"<foo xmlns:xi=\\\"http://www.w3.org/2001/XInclude\\\">\\n\" + \n                \"  <xi:include href=\\\"./include2.xml\\\"/>\\n\" + \n                \"</foo>\");\n          case \"include1.xml\":\n            return getStringStream(\"Make XML Great Again!™\");\n          case \"include2.xml\":\n            return getStringStream(\"<bar>Make XML Great Again!™</bar>\");\n        }\n        throw new IOException(\"Resource not found: \" + resource);\n      }\n\n      @Override\n      public <T> Class<? extends T> findClass(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public <T> T newInstance(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    \n    IOException ioe = expectThrows(IOException.class, () -> {\n      SafeXMLParsing.parseConfigXML(log, loader, \"source1.xml\");\n    });\n    assertTrue(ioe.getMessage().contains(\"Cannot resolve absolute systemIDs\"));\n    \n    Document doc = SafeXMLParsing.parseConfigXML(log, loader, \"source2.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent());\n    \n    doc = SafeXMLParsing.parseConfigXML(log, loader, \"source3.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent().trim());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSafeXMLParsing#testConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testConfig() throws Exception {\n    final ResourceLoader loader = new ResourceLoader() {\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        switch (resource) {\n          case \"source1.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"foo://bar.xyz/external\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source2.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"./include1.xml\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source3.xml\":\n            return getStringStream(\"<foo xmlns:xi=\\\"http://www.w3.org/2001/XInclude\\\">\\n\" + \n                \"  <xi:include href=\\\"./include2.xml\\\"/>\\n\" + \n                \"</foo>\");\n          case \"include1.xml\":\n            return getStringStream(\"Make XML Great Again!™\");\n          case \"include2.xml\":\n            return getStringStream(\"<bar>Make XML Great Again!™</bar>\");\n        }\n        throw new IOException(\"Resource not found: \" + resource);\n      }\n\n      @Override\n      public <T> Class<? extends T> findClass(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public <T> T newInstance(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    \n    IOException ioe = expectThrows(IOException.class, () -> {\n      SafeXMLParsing.parseConfigXML(log, loader, \"source1.xml\");\n    });\n    assertTrue(ioe.getMessage().contains(\"Cannot resolve absolute systemIDs\"));\n    \n    Document doc = SafeXMLParsing.parseConfigXML(log, loader, \"source2.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent());\n    \n    doc = SafeXMLParsing.parseConfigXML(log, loader, \"source3.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent().trim());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/TestSafeXMLParsing#testConfig().mjava","pathOld":"/dev/null","sourceNew":"  public void testConfig() throws Exception {\n    final ResourceLoader loader = new ResourceLoader() {\n      @Override\n      public InputStream openResource(String resource) throws IOException {\n        switch (resource) {\n          case \"source1.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"foo://bar.xyz/external\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source2.xml\":\n            return getStringStream(\"<!DOCTYPE test [\\n\" + \n                \"<!ENTITY externalTerm SYSTEM \\\"./include1.xml\\\">\\n\" + \n                \"]>\\n\" + \n                \"<test>&externalTerm;</test>\");\n          case \"source3.xml\":\n            return getStringStream(\"<foo xmlns:xi=\\\"http://www.w3.org/2001/XInclude\\\">\\n\" + \n                \"  <xi:include href=\\\"./include2.xml\\\"/>\\n\" + \n                \"</foo>\");\n          case \"include1.xml\":\n            return getStringStream(\"Make XML Great Again!™\");\n          case \"include2.xml\":\n            return getStringStream(\"<bar>Make XML Great Again!™</bar>\");\n        }\n        throw new IOException(\"Resource not found: \" + resource);\n      }\n\n      @Override\n      public <T> Class<? extends T> findClass(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n\n      @Override\n      public <T> T newInstance(String cname, Class<T> expectedType) {\n        throw new UnsupportedOperationException();\n      }\n      \n    };\n    \n    IOException ioe = expectThrows(IOException.class, () -> {\n      SafeXMLParsing.parseConfigXML(log, loader, \"source1.xml\");\n    });\n    assertTrue(ioe.getMessage().contains(\"Cannot resolve absolute systemIDs\"));\n    \n    Document doc = SafeXMLParsing.parseConfigXML(log, loader, \"source2.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent());\n    \n    doc = SafeXMLParsing.parseConfigXML(log, loader, \"source3.xml\");\n    assertEquals(\"Make XML Great Again!™\", doc.getDocumentElement().getTextContent().trim());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","575ba8a7e01f51915a430b8c67d2461f0703feaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575ba8a7e01f51915a430b8c67d2461f0703feaa"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","575ba8a7e01f51915a430b8c67d2461f0703feaa"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","575ba8a7e01f51915a430b8c67d2461f0703feaa","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"575ba8a7e01f51915a430b8c67d2461f0703feaa":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}