{"path":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","commits":[{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public void close() throws LockReleaseFailedException {\n      // TODO: wierd that clearLock() throws the raw IOException...\n      try {\n        Files.deleteIfExists(lockFile);\n      } catch (Throwable cause) {\n        throw new LockReleaseFailedException(\"failed to delete \" + lockFile, cause);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cd448926db19517b82cc7c775c62c57f7d2ee6a","date":1432845380,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","sourceNew":"    @Override\n    public synchronized void close() throws LockReleaseFailedException {\n      // TODO: wierd that clearLock() throws the raw IOException...\n      if (obtained) {\n        try {\n          Files.deleteIfExists(lockFile);\n        } catch (Throwable cause) {\n          throw new LockReleaseFailedException(\"failed to delete \" + lockFile, cause);\n        } finally {\n          obtained = false;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void close() throws LockReleaseFailedException {\n      // TODO: wierd that clearLock() throws the raw IOException...\n      try {\n        Files.deleteIfExists(lockFile);\n      } catch (Throwable cause) {\n        throw new LockReleaseFailedException(\"failed to delete \" + lockFile, cause);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/store/SimpleFSLockFactory.SimpleFSLock#close().mjava","sourceNew":"    @Override\n    public synchronized void close() throws IOException {\n      if (closed) {\n        return;\n      }\n      try {\n        // NOTE: unlike NativeFSLockFactory, we can potentially delete someone else's\n        // lock if things have gone wrong. we do best-effort check (ensureValid) to\n        // avoid doing this.\n        try {\n          ensureValid();\n        } catch (Throwable exc) {\n          // notify the user they may need to intervene.\n          throw new LockReleaseFailedException(\"Lock file cannot be safely removed. Manual intervention is recommended.\", exc);\n        }\n        // we did a best effort check, now try to remove the file. if something goes wrong,\n        // we need to make it clear to the user that the directory may still remain locked.\n        try {\n          Files.delete(path);\n        } catch (Throwable exc) {\n          throw new LockReleaseFailedException(\"Unable to remove lock file. Manual intervention is recommended\", exc);\n        }\n      } finally {\n        closed = true;\n      }\n    }\n\n","sourceOld":"    @Override\n    public synchronized void close() throws LockReleaseFailedException {\n      // TODO: wierd that clearLock() throws the raw IOException...\n      if (obtained) {\n        try {\n          Files.deleteIfExists(lockFile);\n        } catch (Throwable cause) {\n          throw new LockReleaseFailedException(\"failed to delete \" + lockFile, cause);\n        } finally {\n          obtained = false;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["618635065f043788c9e034f96ca5cd5cea1b4592"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["285cdc737de75b7cc7c284a156b20214deb67bca"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"285cdc737de75b7cc7c284a156b20214deb67bca":["7cd448926db19517b82cc7c775c62c57f7d2ee6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285cdc737de75b7cc7c284a156b20214deb67bca"],"7cd448926db19517b82cc7c775c62c57f7d2ee6a":["618635065f043788c9e034f96ca5cd5cea1b4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}