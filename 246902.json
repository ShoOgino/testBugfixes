{"path":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","commits":[{"id":"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","date":1492510959,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8aa61ea06d4d27acb465d77e15f20aae84531d73","date":1495784617,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.replicaInfo.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.replicaInfo.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"/dev/null","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"/dev/null","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f6b20dc453cee198956989b90aa24bef0232bcf","date":1498221066,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d1f7b3f5e5e45b15b9649564c72301c248de1b8","date":1498557572,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4848fb683db0790f2847173af06e2ad2d03328e","date":1498631007,"type":5,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>());\n    Row r1 = row.addReplica(\"c1\", \"s1\");\n    Row r2 = r1.addReplica(\"c1\", \"s1\");\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof Policy.ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof Policy.ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"00e2ae9cb51fd0d4f12faf216db2810237cb5116","date":1498631063,"type":5,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/cloud/autoscaling/TestPolicy#testRow().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/cloud/autoscaling/TestPolicy#testRow().mjava","sourceNew":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","sourceOld":"  public void testRow() {\n    Row row = new Row(\"nodex\", new Cell[]{new Cell(0, \"node\", \"nodex\")}, false, new HashMap<>(), new ArrayList<>(), true);\n    Row r1 = row.addReplica(\"c1\", \"s1\", null);\n    Row r2 = r1.addReplica(\"c1\", \"s1\",null);\n    assertEquals(1, r1.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertEquals(2, r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").size());\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(0) instanceof ReplicaInfo);\n    assertTrue(r2.collectionVsShardVsReplicas.get(\"c1\").get(\"s1\").get(1) instanceof ReplicaInfo);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8","e4848fb683db0790f2847173af06e2ad2d03328e"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["e5541f5cc0c9aacf1f335982e2924c4ebeb56f92"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e4848fb683db0790f2847173af06e2ad2d03328e":["74aea047dff7f7c38a2d766827bd20d356f98c6a"]},"commit2Childs":{"00e2ae9cb51fd0d4f12faf216db2810237cb5116":[],"1852ff897aecd2f7c8376a02aedfd44104533f28":["8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"8d1f7b3f5e5e45b15b9649564c72301c248de1b8":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["e4848fb683db0790f2847173af06e2ad2d03328e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","e5541f5cc0c9aacf1f335982e2924c4ebeb56f92","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8aa61ea06d4d27acb465d77e15f20aae84531d73":["1f6b20dc453cee198956989b90aa24bef0232bcf"],"1f6b20dc453cee198956989b90aa24bef0232bcf":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"e5541f5cc0c9aacf1f335982e2924c4ebeb56f92":["8aa61ea06d4d27acb465d77e15f20aae84531d73"],"e4848fb683db0790f2847173af06e2ad2d03328e":["00e2ae9cb51fd0d4f12faf216db2810237cb5116"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["00e2ae9cb51fd0d4f12faf216db2810237cb5116","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}