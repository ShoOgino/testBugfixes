{"path":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","commits":[{"id":"6c791d1c3f1aa8656835cbe427ca5ab01ea0a460","date":1277375055,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"/dev/null","sourceNew":"  public void testLUCENE2142() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"/dev/null","sourceNew":"  public void testLUCENE2142() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    MockRAMDirectory indexStore = new MockRAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    MockRAMDirectory indexStore = newDirectory (random);\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    MockRAMDirectory indexStore = new MockRAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","bugFix":null,"bugIntro":["b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11","b0b3768e97375c7a745c68f0b54710e8bedccc11"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory (random);\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    MockRAMDirectory indexStore = newDirectory (random);\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory (random);\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(random,\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    RAMDirectory indexStore = new RAMDirectory ();\n    IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    new IndexSearcher (indexStore, true).search(new MatchAllDocsQuery(), null, 500, sort);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer()));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"090a0320e4de4a3674376aef96b9701f47564f86","date":1308707325,"type":3,"author":"Christopher John Male","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new Field (\"string\", \"a\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        doc.add (new Field (\"string\", \"b\"+i, Field.Store.NO, Field.Index.NOT_ANALYZED));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.optimize(); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3a0403b45dfe384fae4a1b6e96c3265d000c498","date":1321445981,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexSearcher searcher = new IndexSearcher(indexStore, true);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e7c2454a6a8237bfd0e953f5b940838408c9055","date":1323649300,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    searcher.close();\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestSort#testLUCENE2142().mjava","sourceNew":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","sourceOld":"  public void testLUCENE2142() throws IOException {\n    Directory indexStore = newDirectory();\n    IndexWriter writer = new IndexWriter(indexStore, newIndexWriterConfig(\n        TEST_VERSION_CURRENT, new MockAnalyzer(random)));\n    for (int i=0; i<5; i++) {\n        Document doc = new Document();\n        doc.add (new StringField (\"string\", \"a\"+i));\n        doc.add (new StringField (\"string\", \"b\"+i));\n        writer.addDocument (doc);\n    }\n    writer.forceMerge(1); // enforce one segment to have a higher unique term count in all cases\n    writer.close();\n    sort.setSort(\n        new SortField(\"string\", SortField.Type.STRING),\n        SortField.FIELD_DOC );\n    // this should not throw AIOOBE or RuntimeEx\n    IndexReader reader = IndexReader.open(indexStore);\n    IndexSearcher searcher = new IndexSearcher(reader);\n    searcher.search(new MatchAllDocsQuery(), null, 500, sort);\n    reader.close();\n    indexStore.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["0e7c2454a6a8237bfd0e953f5b940838408c9055"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["a3a0403b45dfe384fae4a1b6e96c3265d000c498","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c791d1c3f1aa8656835cbe427ca5ab01ea0a460"],"962d04139994fce5193143ef35615499a9a96d78":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","090a0320e4de4a3674376aef96b9701f47564f86"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","1f653cfcf159baeaafe5d01682a911e95bba4012"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","090a0320e4de4a3674376aef96b9701f47564f86"],"090a0320e4de4a3674376aef96b9701f47564f86":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"6c791d1c3f1aa8656835cbe427ca5ab01ea0a460":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["a05409176bd65129d67a785ee70e881e238a9aef"],"a3776dccca01c11e7046323cfad46a3b4a471233":["1f653cfcf159baeaafe5d01682a911e95bba4012","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["6c791d1c3f1aa8656835cbe427ca5ab01ea0a460"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a05409176bd65129d67a785ee70e881e238a9aef":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["090a0320e4de4a3674376aef96b9701f47564f86"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["a05409176bd65129d67a785ee70e881e238a9aef"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["a3a0403b45dfe384fae4a1b6e96c3265d000c498"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"962d04139994fce5193143ef35615499a9a96d78":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["962d04139994fce5193143ef35615499a9a96d78"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"090a0320e4de4a3674376aef96b9701f47564f86":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","090a0320e4de4a3674376aef96b9701f47564f86","a3776dccca01c11e7046323cfad46a3b4a471233"],"0e7c2454a6a8237bfd0e953f5b940838408c9055":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"6c791d1c3f1aa8656835cbe427ca5ab01ea0a460":["5f4e87790277826a2aea119328600dfb07761f32","1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["135621f3a0670a9394eb563224a3b76cc4dddc0f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","f2c5f0cb44df114db4228c8f77861714b5cabaea","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f4e87790277826a2aea119328600dfb07761f32","6c791d1c3f1aa8656835cbe427ca5ab01ea0a460"],"a05409176bd65129d67a785ee70e881e238a9aef":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a3a0403b45dfe384fae4a1b6e96c3265d000c498":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","0e7c2454a6a8237bfd0e953f5b940838408c9055"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}