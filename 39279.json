{"path":"backwards/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/AttributeSource#[A-extends-Attribute]_getAttribute(Class[A]).mjava","sourceNew":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","sourceOld":"  /**\n   * The caller must pass in a Class&lt;? extends Attribute&gt; value. \n   * Returns the instance of the passed in Attribute contained in this AttributeSource\n   * \n   * @throws IllegalArgumentException if this AttributeSource does not contain the\n   *         Attribute. It is recommended to always use {@link #addAttribute} even in consumers\n   *         of TokenStreams, because you cannot know if a specific TokenStream really uses\n   *         a specific Attribute. {@link #addAttribute} will automatically make the attribute\n   *         available. If you want to only use the attribute, if it is available (to optimize\n   *         consuming), use {@link #hasAttribute}.\n   */\n  public <A extends Attribute> A getAttribute(Class<A> attClass) {\n    AttributeImpl attImpl = attributes.get(attClass);\n    if (attImpl == null) {\n      throw new IllegalArgumentException(\"This AttributeSource does not have the attribute '\" + attClass.getName() + \"'.\");\n    }\n    return attClass.cast(attImpl);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}