{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","commits":[{"id":"58d488e3fd72dfc95fa76fcb24f58e90c343323c","date":1346235723,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","pathOld":"/dev/null","sourceNew":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.blockCount = blocks;\n    this.valueCount = 64 * blockCount / bitsPerValue;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    assert valueCount * bitsPerValue == 64 * blockCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","pathOld":"/dev/null","sourceNew":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.blockCount = blocks;\n    this.valueCount = 64 * blockCount / bitsPerValue;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    assert valueCount * bitsPerValue == 64 * blockCount;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e29d4d91327929d477b701d3ef2f5b3457d26ec5","date":1359465689,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","sourceNew":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.longBlockCount = blocks;\n    this.longValueCount = 64 * longBlockCount / bitsPerValue;\n    int byteBlockCount = 8 * longBlockCount;\n    int byteValueCount = longValueCount;\n    while ((byteBlockCount & 1) == 0 && (byteValueCount & 1) == 0) {\n      byteBlockCount >>>= 1;\n      byteValueCount >>>= 1;\n    }\n    this.byteBlockCount = byteBlockCount;\n    this.byteValueCount = byteValueCount;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    this.intMask = (int) mask;\n    assert longValueCount * bitsPerValue == 64 * longBlockCount;\n  }\n\n","sourceOld":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.blockCount = blocks;\n    this.valueCount = 64 * blockCount / bitsPerValue;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    assert valueCount * bitsPerValue == 64 * blockCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BulkOperationPacked#BulkOperationPacked(int).mjava","sourceNew":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.longBlockCount = blocks;\n    this.longValueCount = 64 * longBlockCount / bitsPerValue;\n    int byteBlockCount = 8 * longBlockCount;\n    int byteValueCount = longValueCount;\n    while ((byteBlockCount & 1) == 0 && (byteValueCount & 1) == 0) {\n      byteBlockCount >>>= 1;\n      byteValueCount >>>= 1;\n    }\n    this.byteBlockCount = byteBlockCount;\n    this.byteValueCount = byteValueCount;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    this.intMask = (int) mask;\n    assert longValueCount * bitsPerValue == 64 * longBlockCount;\n  }\n\n","sourceOld":"  public BulkOperationPacked(int bitsPerValue) {\n    this.bitsPerValue = bitsPerValue;\n    assert bitsPerValue > 0 && bitsPerValue <= 64;\n    int blocks = bitsPerValue;\n    while ((blocks & 1) == 0) {\n      blocks >>>= 1;\n    }\n    this.blockCount = blocks;\n    this.valueCount = 64 * blockCount / bitsPerValue;\n    if (bitsPerValue == 64) {\n      this.mask = ~0L;\n    } else {\n      this.mask = (1L << bitsPerValue) - 1;\n    }\n    assert valueCount * bitsPerValue == 64 * blockCount;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","58d488e3fd72dfc95fa76fcb24f58e90c343323c"],"de522d9303bd67c8473a269a1319125d1f3700e0":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","e29d4d91327929d477b701d3ef2f5b3457d26ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e29d4d91327929d477b701d3ef2f5b3457d26ec5"]},"commit2Childs":{"e29d4d91327929d477b701d3ef2f5b3457d26ec5":["de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"58d488e3fd72dfc95fa76fcb24f58e90c343323c":["e29d4d91327929d477b701d3ef2f5b3457d26ec5","05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["58d488e3fd72dfc95fa76fcb24f58e90c343323c","05a14b2611ead08655a2b2bdc61632eb31316e57"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"de522d9303bd67c8473a269a1319125d1f3700e0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["05a14b2611ead08655a2b2bdc61632eb31316e57","de522d9303bd67c8473a269a1319125d1f3700e0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}