{"path":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterJSON().mjava","commits":[{"id":"44e1477dd67ee1fbc72871f23fb51369bb42cadd","date":1535551329,"type":0,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/transform/TestChildDocTransformerHierarchy#testParentFilterJSON().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testParentFilterJSON() throws Exception {\n    indexSampleData(numberOfDocsPerNestedTest);\n    String[] tests = new String[] {\n        \"/response/docs/[0]/type_s==donut\",\n        \"/response/docs/[0]/toppings/[0]/type_s==Regular\",\n        \"/response/docs/[0]/toppings/[1]/type_s==Chocolate\",\n        \"/response/docs/[0]/toppings/[0]/ingredients/[0]/name_s==cocoa\",\n        \"/response/docs/[0]/toppings/[1]/ingredients/[1]/name_s==cocoa\",\n        \"/response/docs/[0]/lonely/test_s==testing\",\n        \"/response/docs/[0]/lonely/lonelyGrandChild/test2_s==secondTest\",\n    };\n\n    try(SolrQueryRequest req = req(\"q\", \"type_s:donut\", \"sort\", \"id asc\",\n        \"fl\", \"*, _nest_path_, [child]\", \"fq\", fqToExcludeNonTestedDocs)) {\n      BasicResultContext res = (BasicResultContext) h.queryAndResponse(\"/select\", req).getResponse();\n      Iterator<SolrDocument> docsStreamer = res.getProcessedDocuments();\n      while (docsStreamer.hasNext()) {\n        SolrDocument doc = docsStreamer.next();\n        cleanSolrDocumentFields(doc);\n        int currDocId = Integer.parseInt((doc.getFirstValue(\"id\")).toString());\n        assertEquals(\"queried docs are not equal to expected output for id: \" + currDocId, fullNestedDocTemplate(currDocId), doc.toString());\n      }\n    }\n\n    assertJQ(req(\"q\", \"type_s:donut\",\n        \"sort\", \"id asc\",\n        \"fl\", \"*, _nest_path_, [child]\",\n        \"fq\", fqToExcludeNonTestedDocs),\n        tests);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44e1477dd67ee1fbc72871f23fb51369bb42cadd"],"44e1477dd67ee1fbc72871f23fb51369bb42cadd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}