{"path":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","commits":[{"id":"92751ba9273251eab6a2e379ec42a1697a32ff96","date":1407954233,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    return newList;\n  }      \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c18a95e9168a30be855f5d5e7d61a863186fdc5","date":1415142581,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","sourceNew":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  // for pivots, we *always* include requested stats - even if 'empty'\n                  StatsComponent.convertToResponse(true, statsValues));\n    }\n    return newList;\n  }      \n\n","sourceOld":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    return newList;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d12bbc45d641864ffe03291bc30f178eb34e434c","date":1426001646,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","sourceNew":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  StatsComponent.convertToResponse(statsValues));\n    }\n    return newList;\n  }      \n\n","sourceOld":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  // for pivots, we *always* include requested stats - even if 'empty'\n                  StatsComponent.convertToResponse(true, statsValues));\n    }\n    return newList;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","sourceNew":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  StatsComponent.convertToResponse(statsValues));\n    }\n    return newList;\n  }      \n\n","sourceOld":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  // for pivots, we *always* include requested stats - even if 'empty'\n                  StatsComponent.convertToResponse(true, statsValues));\n    }\n    return newList;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22d0a81a05eba47d5e18976f17d88306b218cc22","date":1436341569,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/PivotFacetValue#convertToNamedList().mjava","sourceNew":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if(queryCounts != null) {\n      newList.add(PivotListEntry.QUERIES.getName(), queryCounts);\n    }\n    if(rangeCounts != null) {\n      SimpleOrderedMap<SimpleOrderedMap<Object>> rangeFacetOutput = new SimpleOrderedMap<>();\n      for (Map.Entry<String, RangeFacetRequest.DistribRangeFacet> entry : rangeCounts.entrySet()) {\n        String key = entry.getKey();\n        RangeFacetRequest.DistribRangeFacet value = entry.getValue();\n        rangeFacetOutput.add(key, value.rangeFacet);\n      }\n      newList.add(PivotListEntry.RANGES.getName(), rangeFacetOutput);\n    }\n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  StatsComponent.convertToResponse(statsValues));\n    }\n    return newList;\n  }      \n\n","sourceOld":"  /** \n   * A recursive method for generating a NamedList from this value suitable for \n   * including in a pivot facet response to the original distributed request.\n   *\n   * @see PivotFacetField#convertToListOfNamedLists\n   */\n  public NamedList<Object> convertToNamedList() {\n    NamedList<Object> newList = new SimpleOrderedMap<>();\n    newList.add(PivotListEntry.FIELD.getName(), parentPivot.field);\n    newList.add(PivotListEntry.VALUE.getName(), value);    \n    newList.add(PivotListEntry.COUNT.getName(), count);      \n    if (childPivot != null && childPivot.convertToListOfNamedLists() != null) {\n      newList.add(PivotListEntry.PIVOT.getName(), childPivot.convertToListOfNamedLists());\n    }\n    if (null != statsValues) {\n      newList.add(PivotListEntry.STATS.getName(), \n                  StatsComponent.convertToResponse(statsValues));\n    }\n    return newList;\n  }      \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["4c18a95e9168a30be855f5d5e7d61a863186fdc5","d12bbc45d641864ffe03291bc30f178eb34e434c"],"92751ba9273251eab6a2e379ec42a1697a32ff96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"22d0a81a05eba47d5e18976f17d88306b218cc22":["d12bbc45d641864ffe03291bc30f178eb34e434c"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["22d0a81a05eba47d5e18976f17d88306b218cc22"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"92751ba9273251eab6a2e379ec42a1697a32ff96":["4c18a95e9168a30be855f5d5e7d61a863186fdc5"],"4c18a95e9168a30be855f5d5e7d61a863186fdc5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","d12bbc45d641864ffe03291bc30f178eb34e434c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["92751ba9273251eab6a2e379ec42a1697a32ff96"],"22d0a81a05eba47d5e18976f17d88306b218cc22":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d12bbc45d641864ffe03291bc30f178eb34e434c":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","22d0a81a05eba47d5e18976f17d88306b218cc22"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}