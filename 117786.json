{"path":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#firstChild(boolean,boolean).mjava","commits":[{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e","date":1505888025,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkDistributedQueue#firstChild(boolean,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/DistributedQueue#firstChild(boolean,boolean).mjava","sourceNew":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns the name if the first known child node, or {@code null} if the queue is empty.\n   * This is the only place {@link #knownChildren} is ever updated!\n   * The caller must double check that the actual node still exists, since the in-memory\n   * list is inherently stale.\n   */\n  private String firstChild(boolean remove, boolean refetchIfDirty) throws KeeperException, InterruptedException {\n    updateLock.lockInterruptibly();\n    try {\n      // We always return from cache first, the cache will be cleared if the node is not exist\n      if (!knownChildren.isEmpty() && !(isDirty && refetchIfDirty)) {\n        return remove ? knownChildren.pollFirst() : knownChildren.first();\n      }\n\n      if (!isDirty && knownChildren.isEmpty()) {\n        return null;\n      }\n\n      // Dirty, try to fetch an updated list of children from ZK.\n      // Only set a new watcher if there isn't already a watcher.\n      ChildWatcher newWatcher = (watcherCount == 0) ? new ChildWatcher() : null;\n      knownChildren = fetchZkChildren(newWatcher);\n      if (newWatcher != null) {\n        watcherCount++; // watcher was successfully set\n      }\n      isDirty = false;\n      if (knownChildren.isEmpty()) {\n        return null;\n      }\n      changed.signalAll();\n      return remove ? knownChildren.pollFirst() : knownChildren.first();\n    } finally {\n      updateLock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6240b74b884c5587f2a4062dd27d6c32bf228889":["b869898f50ca80263bac2e3ae0949f7700e5c977","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"]},"commit2Childs":{"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","89c102d671c256ef8dd67b3ecb3ab96fe7a8006e"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["6240b74b884c5587f2a4062dd27d6c32bf228889"],"89c102d671c256ef8dd67b3ecb3ab96fe7a8006e":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}