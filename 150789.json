{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildCardEscapes().mjava","commits":[{"id":"046829b17e246624c179b94d5a20cb53fa945e87","date":1367880720,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildCardEscapes().mjava","pathOld":"/dev/null","sourceNew":"  public void testWildCardEscapes() throws ParseException, IOException {\n\n    for (Map.Entry<String, String> entry : wildcardEscapeHits.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeHits: \" + entry.getKey(), true, isAHit(q, entry.getValue(), a));\n    }\n    for (Map.Entry<String, String> entry : wildcardEscapeMisses.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeMisses: \" + entry.getKey(), false, isAHit(q, entry.getValue(), a));\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea4107f60b9f95623c16025c9c247412ff809092","date":1468333987,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildCardEscapes().mjava","sourceNew":null,"sourceOld":"  public void testWildCardEscapes() throws ParseException, IOException {\n\n    for (Map.Entry<String, String> entry : wildcardEscapeHits.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeHits: \" + entry.getKey(), true, isAHit(q, entry.getValue(), a));\n    }\n    for (Map.Entry<String, String> entry : wildcardEscapeMisses.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeMisses: \" + entry.getKey(), false, isAHit(q, entry.getValue(), a));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/analyzing/TestAnalyzingQueryParser#testWildCardEscapes().mjava","sourceNew":null,"sourceOld":"  public void testWildCardEscapes() throws ParseException, IOException {\n\n    for (Map.Entry<String, String> entry : wildcardEscapeHits.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeHits: \" + entry.getKey(), true, isAHit(q, entry.getValue(), a));\n    }\n    for (Map.Entry<String, String> entry : wildcardEscapeMisses.entrySet()){\n      Query q = getAnalyzedQuery(entry.getKey(), a, false);\n      assertEquals(\"WildcardEscapeMisses: \" + entry.getKey(), false, isAHit(q, entry.getValue(), a));\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ea4107f60b9f95623c16025c9c247412ff809092":["046829b17e246624c179b94d5a20cb53fa945e87"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["046829b17e246624c179b94d5a20cb53fa945e87","ea4107f60b9f95623c16025c9c247412ff809092"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ea4107f60b9f95623c16025c9c247412ff809092"],"046829b17e246624c179b94d5a20cb53fa945e87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["046829b17e246624c179b94d5a20cb53fa945e87"],"ea4107f60b9f95623c16025c9c247412ff809092":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"046829b17e246624c179b94d5a20cb53fa945e87":["ea4107f60b9f95623c16025c9c247412ff809092","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}