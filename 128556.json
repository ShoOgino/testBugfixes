{"path":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","commits":[{"id":"6cac733bfe923fb362d2b289b2996b0bf10ae22e","date":1260443093,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      final int maxSize = BooleanQuery.getMaxClauseCount();\n      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n      collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          // ignore uncompetetive hits\n          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)\n            return true;\n          // add new entry in PQ\n          st.term = t;\n          st.boost = boost;\n          stQueue.offer(st);\n          // possibly drop entries from queue\n          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();\n          return true;\n        }\n        \n        // reusable instance\n        private ScoreTerm st = new ScoreTerm();\n      });\n      \n      final BooleanQuery bq = new BooleanQuery(true);\n      for (final ScoreTerm st : stQueue) {\n        TermQuery tq = new TermQuery(st.term);    // found a match\n        tq.setBoost(query.getBoost() * st.boost); // set the boost\n        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query\n      }\n      query.incTotalNumberOfTerms(bq.clauses().size());\n      return bq;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"33098c76721840ff65df95e81a98a5d4a49a777f","date":1266737266,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      final int maxSize = Math.min(size, BooleanQuery.getMaxClauseCount());\n      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n      collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          // ignore uncompetetive hits\n          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)\n            return true;\n          // add new entry in PQ\n          st.term = t;\n          st.boost = boost;\n          stQueue.offer(st);\n          // possibly drop entries from queue\n          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();\n          return true;\n        }\n        \n        // reusable instance\n        private ScoreTerm st = new ScoreTerm();\n      });\n      \n      final BooleanQuery bq = new BooleanQuery(true);\n      for (final ScoreTerm st : stQueue) {\n        TermQuery tq = new TermQuery(st.term);    // found a match\n        tq.setBoost(query.getBoost() * st.boost); // set the boost\n        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query\n      }\n      query.incTotalNumberOfTerms(bq.clauses().size());\n      return bq;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      final int maxSize = BooleanQuery.getMaxClauseCount();\n      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n      collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          // ignore uncompetetive hits\n          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)\n            return true;\n          // add new entry in PQ\n          st.term = t;\n          st.boost = boost;\n          stQueue.offer(st);\n          // possibly drop entries from queue\n          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();\n          return true;\n        }\n        \n        // reusable instance\n        private ScoreTerm st = new ScoreTerm();\n      });\n      \n      final BooleanQuery bq = new BooleanQuery(true);\n      for (final ScoreTerm st : stQueue) {\n        TermQuery tq = new TermQuery(st.term);    // found a match\n        tq.setBoost(query.getBoost() * st.boost); // set the boost\n        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query\n      }\n      query.incTotalNumberOfTerms(bq.clauses().size());\n      return bq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2","date":1268080675,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","pathOld":"src/java/org/apache/lucene/search/MultiTermQuery.TopTermsScoringBooleanQueryRewrite#rewrite(IndexReader,MultiTermQuery).mjava","sourceNew":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      final int maxSize = Math.min(size, BooleanQuery.getMaxClauseCount());\n      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n      collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          // ignore uncompetetive hits\n          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)\n            return true;\n          // add new entry in PQ\n          st.term = t;\n          st.boost = boost;\n          stQueue.offer(st);\n          // possibly drop entries from queue\n          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();\n          return true;\n        }\n        \n        // reusable instance\n        private ScoreTerm st = new ScoreTerm();\n      });\n      \n      final BooleanQuery bq = new BooleanQuery(true);\n      for (final ScoreTerm st : stQueue) {\n        Query tq = getQuery(st.term);    // found a match\n        tq.setBoost(query.getBoost() * st.boost); // set the boost\n        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query\n      }\n      query.incTotalNumberOfTerms(bq.clauses().size());\n      return bq;\n    }\n\n","sourceOld":"    @Override\n    public Query rewrite(IndexReader reader, MultiTermQuery query) throws IOException {\n      final int maxSize = Math.min(size, BooleanQuery.getMaxClauseCount());\n      final PriorityQueue<ScoreTerm> stQueue = new PriorityQueue<ScoreTerm>();\n      collectTerms(reader, query, new TermCollector() {\n        public boolean collect(Term t, float boost) {\n          // ignore uncompetetive hits\n          if (stQueue.size() >= maxSize && boost <= stQueue.peek().boost)\n            return true;\n          // add new entry in PQ\n          st.term = t;\n          st.boost = boost;\n          stQueue.offer(st);\n          // possibly drop entries from queue\n          st = (stQueue.size() > maxSize) ? stQueue.poll() : new ScoreTerm();\n          return true;\n        }\n        \n        // reusable instance\n        private ScoreTerm st = new ScoreTerm();\n      });\n      \n      final BooleanQuery bq = new BooleanQuery(true);\n      for (final ScoreTerm st : stQueue) {\n        TermQuery tq = new TermQuery(st.term);    // found a match\n        tq.setBoost(query.getBoost() * st.boost); // set the boost\n        bq.add(tq, BooleanClause.Occur.SHOULD);   // add to query\n      }\n      query.incTotalNumberOfTerms(bq.clauses().size());\n      return bq;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"33098c76721840ff65df95e81a98a5d4a49a777f":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2":["33098c76721840ff65df95e81a98a5d4a49a777f"],"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["009c7f8376975ae03ac312fc80e8a7dff3a3dbe2"]},"commit2Childs":{"33098c76721840ff65df95e81a98a5d4a49a777f":["009c7f8376975ae03ac312fc80e8a7dff3a3dbe2"],"6cac733bfe923fb362d2b289b2996b0bf10ae22e":["33098c76721840ff65df95e81a98a5d4a49a777f"],"009c7f8376975ae03ac312fc80e8a7dff3a3dbe2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6cac733bfe923fb362d2b289b2996b0bf10ae22e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}