{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","commits":[{"id":"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","date":1460654262,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.info(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.info(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.info(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.info(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad4957cde742defe6db19689abdc267c5d948066","date":1587990850,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener {}\", listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener {}{}\"\n            , listener\n            , \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener \"+listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener \"+listener+\n            \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#removeOnReconnectListener(OnReconnect).mjava","sourceNew":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener {}\", listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener {}, but remove operation \" +\n                \"did not find it in the list of registered listeners.\"\n            , listener);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Removed a previously registered OnReconnect listener, such as when a core is removed or reloaded.\n   */\n  public void removeOnReconnectListener(OnReconnect listener) {\n    if (listener != null) {\n      boolean wasRemoved;\n      synchronized (reconnectListeners) {\n        wasRemoved = reconnectListeners.remove(listener);\n      }\n      if (wasRemoved) {\n        log.debug(\"Removed OnReconnect listener {}\", listener);\n      } else {\n        log.warn(\"Was asked to remove OnReconnect listener {}{}\"\n            , listener\n            , \", but remove operation did not find it in the list of registered listeners.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"962cd4f5e313777f35da8f521265323e84184929":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","962cd4f5e313777f35da8f521265323e84184929"],"ad4957cde742defe6db19689abdc267c5d948066":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["ad4957cde742defe6db19689abdc267c5d948066"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["ad4957cde742defe6db19689abdc267c5d948066","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"ad4957cde742defe6db19689abdc267c5d948066":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"29e08b0fe8c5c0149b9e904e43afc1f270f8a6c3":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}