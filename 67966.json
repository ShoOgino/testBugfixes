{"path":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ee857a409368c4693aaff6b8aafb539ba07a1b3","date":1293240111,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c55212e05b7fb8ce60fcd70d61b8ed8221830f73","date":1293245506,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","pathOld":"/dev/null","sourceNew":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec58fb7921964848d01bea54f8ec4a2ac813eaeb","date":1295476876,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a6d080bdd5b2a8f56342cf571b5476de04180","date":1295638686,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/handler/AnalysisRequestHandler#processContent(XMLStreamReader,IndexSchema).mjava","sourceNew":null,"sourceOld":"  NamedList<Object> processContent(XMLStreamReader parser,\n                                   IndexSchema schema) throws XMLStreamException, IOException {\n    NamedList<Object> result = new SimpleOrderedMap<Object>();\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n        case XMLStreamConstants.END_DOCUMENT: {\n          parser.close();\n          return result;\n        }\n        case XMLStreamConstants.START_ELEMENT: {\n          String currTag = parser.getLocalName();\n          if (\"doc\".equals(currTag)) {\n            log.trace(\"Tokenizing doc...\");\n\n            SolrInputDocument doc = readDoc(parser);\n            SchemaField uniq = schema.getUniqueKeyField();\n            NamedList<NamedList<NamedList<Object>>> theTokens = new SimpleOrderedMap<NamedList<NamedList<Object>>>();\n            result.add(doc.getFieldValue(uniq.getName()).toString(), theTokens);\n            for (String name : doc.getFieldNames()) {\n              FieldType ft = schema.getFieldType(name);\n              Analyzer analyzer = ft.getAnalyzer();\n              Collection<Object> vals = doc.getFieldValues(name);\n              for (Object val : vals) {\n                Reader reader = new StringReader(val.toString());\n                TokenStream tstream = analyzer.tokenStream(name, reader);\n                NamedList<NamedList<Object>> tokens = getTokens(tstream);\n                theTokens.add(name, tokens);\n              }\n            }\n          }\n          break;\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["1da8d55113b689b06716246649de6f62430f15c0","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["c55212e05b7fb8ce60fcd70d61b8ed8221830f73"],"c55212e05b7fb8ce60fcd70d61b8ed8221830f73":["3ee857a409368c4693aaff6b8aafb539ba07a1b3"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":["1da8d55113b689b06716246649de6f62430f15c0","ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"]},"commit2Childs":{"3ee857a409368c4693aaff6b8aafb539ba07a1b3":["c55212e05b7fb8ce60fcd70d61b8ed8221830f73"],"1da8d55113b689b06716246649de6f62430f15c0":["3ee857a409368c4693aaff6b8aafb539ba07a1b3","29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"ec58fb7921964848d01bea54f8ec4a2ac813eaeb":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c55212e05b7fb8ce60fcd70d61b8ed8221830f73":["ec58fb7921964848d01bea54f8ec4a2ac813eaeb"],"e79a6d080bdd5b2a8f56342cf571b5476de04180":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","e79a6d080bdd5b2a8f56342cf571b5476de04180","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}