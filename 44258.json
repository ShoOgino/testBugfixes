{"path":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter#writeValues(int).mjava","commits":[{"id":"e76d3450662dab47d54e3f462c7b3eba4e38b9ac","date":1358866496,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter#writeValues(int).mjava","pathOld":"/dev/null","sourceNew":"  protected final void writeValues(int bitsRequired) throws IOException {\n    final PackedInts.Encoder encoder = PackedInts.getEncoder(PackedInts.Format.PACKED, PackedInts.VERSION_CURRENT, bitsRequired);\n    final int iterations = values.length / encoder.valueCount();\n    final int blockSize = encoder.blockCount() * 8 * iterations;\n    if (blocks == null || blocks.length < blockSize) {\n      blocks = new byte[blockSize];\n    }\n    if (off < values.length) {\n      Arrays.fill(values, off, values.length, 0L);\n    }\n    encoder.encode(values, 0, blocks, 0, iterations);\n    final int blockCount = (int) PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, off, bitsRequired);\n    out.writeBytes(blocks, blockCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de522d9303bd67c8473a269a1319125d1f3700e0","date":1359477856,"type":3,"author":"Adrien Grand","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter#writeValues(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter#writeValues(int).mjava","sourceNew":"  protected final void writeValues(int bitsRequired) throws IOException {\n    final PackedInts.Encoder encoder = PackedInts.getEncoder(PackedInts.Format.PACKED, PackedInts.VERSION_CURRENT, bitsRequired);\n    final int iterations = values.length / encoder.byteValueCount();\n    final int blockSize = encoder.byteBlockCount() * iterations;\n    if (blocks == null || blocks.length < blockSize) {\n      blocks = new byte[blockSize];\n    }\n    if (off < values.length) {\n      Arrays.fill(values, off, values.length, 0L);\n    }\n    encoder.encode(values, 0, blocks, 0, iterations);\n    final int blockCount = (int) PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, off, bitsRequired);\n    out.writeBytes(blocks, blockCount);\n  }\n\n","sourceOld":"  protected final void writeValues(int bitsRequired) throws IOException {\n    final PackedInts.Encoder encoder = PackedInts.getEncoder(PackedInts.Format.PACKED, PackedInts.VERSION_CURRENT, bitsRequired);\n    final int iterations = values.length / encoder.valueCount();\n    final int blockSize = encoder.blockCount() * 8 * iterations;\n    if (blocks == null || blocks.length < blockSize) {\n      blocks = new byte[blockSize];\n    }\n    if (off < values.length) {\n      Arrays.fill(values, off, values.length, 0L);\n    }\n    encoder.encode(values, 0, blocks, 0, iterations);\n    final int blockCount = (int) PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, off, bitsRequired);\n    out.writeBytes(blocks, blockCount);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/AbstractBlockPackedWriter#writeValues(int).mjava","pathOld":"/dev/null","sourceNew":"  protected final void writeValues(int bitsRequired) throws IOException {\n    final PackedInts.Encoder encoder = PackedInts.getEncoder(PackedInts.Format.PACKED, PackedInts.VERSION_CURRENT, bitsRequired);\n    final int iterations = values.length / encoder.byteValueCount();\n    final int blockSize = encoder.byteBlockCount() * iterations;\n    if (blocks == null || blocks.length < blockSize) {\n      blocks = new byte[blockSize];\n    }\n    if (off < values.length) {\n      Arrays.fill(values, off, values.length, 0L);\n    }\n    encoder.encode(values, 0, blocks, 0, iterations);\n    final int blockCount = (int) PackedInts.Format.PACKED.byteCount(PackedInts.VERSION_CURRENT, off, bitsRequired);\n    out.writeBytes(blocks, blockCount);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","de522d9303bd67c8473a269a1319125d1f3700e0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"de522d9303bd67c8473a269a1319125d1f3700e0":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"e76d3450662dab47d54e3f462c7b3eba4e38b9ac":["de522d9303bd67c8473a269a1319125d1f3700e0"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e76d3450662dab47d54e3f462c7b3eba4e38b9ac","d4d69c535930b5cce125cff868d40f6373dc27d4","de522d9303bd67c8473a269a1319125d1f3700e0"],"de522d9303bd67c8473a269a1319125d1f3700e0":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}