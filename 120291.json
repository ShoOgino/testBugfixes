{"path":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"160f7ef2c09376d87dbbda20e03577e483ce0172","date":1320520837,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n    \n    \n\t// Tests SOLR-2829\n\tString fieldNameHome = \"home_ll\";\n\tString fieldNameWork = \"work_ll\";\n\n\tclearIndex();\n\tassertU(adoc(\"id\", \"1\", fieldNameHome, \"52.67,7.30\", fieldNameWork,\"48.60,11.61\"));\n\tassertU(commit());\n\n\tcheckHits(fieldNameHome, \"52.67,7.30\", 1, 1);\n\tcheckHits(fieldNameWork, \"48.60,11.61\", 1, 1);\n\tcheckHits(fieldNameWork, \"52.67,7.30\", 1, 0);\n\tcheckHits(fieldNameHome, \"48.60,11.61\", 1, 0); \n\t  \n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4093b270ba337f9c25a4c0e6cb2ae2c07f697376","date":1347897716,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/SpatialFilterTest#testLatLonType().mjava","sourceNew":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n    \n    \n    // Tests SOLR-2829\n    String fieldNameHome = \"home_ll\";\n    String fieldNameWork = \"work_ll\";\n\n    clearIndex();\n    assertU(adoc(\"id\", \"1\", fieldNameHome, \"52.67,7.30\", fieldNameWork,\"48.60,11.61\"));\n    assertU(commit());\n\n    checkHits(fieldNameHome, \"52.67,7.30\", 1, 1);\n    checkHits(fieldNameWork, \"48.60,11.61\", 1, 1);\n    checkHits(fieldNameWork, \"52.67,7.30\", 1, 0);\n    checkHits(fieldNameHome, \"48.60,11.61\", 1, 0);\n\n  }\n\n","sourceOld":"  @Test\n  public void testLatLonType() throws Exception {\n    String fieldName = \"home_ll\";\n    setupDocs(fieldName);\n    //Try some edge cases\n    checkHits(fieldName, \"1,1\", 175, 3, 5, 6, 7);\n    checkHits(fieldName, \"0,179.8\", 200, 2, 8, 9);\n    checkHits(fieldName, \"89.8, 50\", 200, 2, 10, 11);//this goes over the north pole\n    checkHits(fieldName, \"-89.8, 50\", 200, 2, 12, 13);//this goes over the south pole\n    //try some normal cases\n    checkHits(fieldName, \"33.0,-80.0\", 300, 2);\n    //large distance\n    checkHits(fieldName, \"1,1\", 5000, 3, 5, 6, 7);\n    //Because we are generating a box based on the west/east longitudes and the south/north latitudes, which then\n    //translates to a range query, which is slightly more inclusive.  Thus, even though 0.0 is 15.725 kms away,\n    //it will be included, b/c of the box calculation.\n    checkHits(fieldName, false, \"0.1,0.1\", 15, 2, 5, 6);\n   //try some more\n    clearIndex();\n    assertU(adoc(\"id\", \"14\", fieldName, \"0,5\"));\n    assertU(adoc(\"id\", \"15\", fieldName, \"0,15\"));\n    //3000KM from 0,0, see http://www.movable-type.co.uk/scripts/latlong.html\n    assertU(adoc(\"id\", \"16\", fieldName, \"18.71111,19.79750\"));\n    assertU(adoc(\"id\", \"17\", fieldName, \"44.043900,-95.436643\"));\n    assertU(commit());\n\n    checkHits(fieldName, \"0,0\", 1000, 1, 14);\n    checkHits(fieldName, \"0,0\", 2000, 2, 14, 15);\n    checkHits(fieldName, false, \"0,0\", 3000, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3001, 3, 14, 15, 16);\n    checkHits(fieldName, \"0,0\", 3000.1, 3, 14, 15, 16);\n\n    //really fine grained distance and reflects some of the vagaries of how we are calculating the box\n    checkHits(fieldName, \"43.517030,-96.789603\", 109, 0);\n\n    // falls outside of the real distance, but inside the bounding box   \n    checkHits(fieldName, true, \"43.517030,-96.789603\", 110, 0);\n    checkHits(fieldName, false, \"43.517030,-96.789603\", 110, 1, 17);\n    \n    \n\t// Tests SOLR-2829\n\tString fieldNameHome = \"home_ll\";\n\tString fieldNameWork = \"work_ll\";\n\n\tclearIndex();\n\tassertU(adoc(\"id\", \"1\", fieldNameHome, \"52.67,7.30\", fieldNameWork,\"48.60,11.61\"));\n\tassertU(commit());\n\n\tcheckHits(fieldNameHome, \"52.67,7.30\", 1, 1);\n\tcheckHits(fieldNameWork, \"48.60,11.61\", 1, 1);\n\tcheckHits(fieldNameWork, \"52.67,7.30\", 1, 0);\n\tcheckHits(fieldNameHome, \"48.60,11.61\", 1, 0); \n\t  \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"160f7ef2c09376d87dbbda20e03577e483ce0172":["c26f00b574427b55127e869b935845554afde1fa"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["160f7ef2c09376d87dbbda20e03577e483ce0172"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["160f7ef2c09376d87dbbda20e03577e483ce0172"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"160f7ef2c09376d87dbbda20e03577e483ce0172":["4093b270ba337f9c25a4c0e6cb2ae2c07f697376"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4093b270ba337f9c25a4c0e6cb2ae2c07f697376":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}