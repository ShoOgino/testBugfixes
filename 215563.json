{"path":"solr/core/src/java/org/apache/solr/core/CoreMaps#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","commits":[{"id":"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0","date":1366659310,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreMaps#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps[CoreContainer]#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9409650933cc688e77e565092a25e58adfc2e18d","date":1366663164,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCores#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreMaps#allocateLazyCores(ConfigSolr,SolrResourceLoader).mjava","sourceNew":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (modifyLock) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              modifyLock.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","sourceOld":"  // Trivial helper method for load, note it implements LRU on transient cores. Also note, if\n  // there is no setting for max size, nothing is done and all cores go in the regular \"cores\" list\n  protected void allocateLazyCores(final ConfigSolr cfg, final SolrResourceLoader loader) {\n    final int transientCacheSize = cfg.getInt(ConfigSolr.CfgProp.SOLR_TRANSIENTCACHESIZE, Integer.MAX_VALUE);\n    if (transientCacheSize != Integer.MAX_VALUE) {\n      CoreContainer.log.info(\"Allocating transient cache for {} transient cores\", transientCacheSize);\n      transientCores = new LinkedHashMap<String, SolrCore>(transientCacheSize, 0.75f, true) {\n        @Override\n        protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n          if (size() > transientCacheSize) {\n            synchronized (locker) {\n              pendingCloses.add(eldest.getValue()); // Essentially just queue this core up for closing.\n              locker.notifyAll(); // Wakes up closer thread too\n            }\n            return true;\n          }\n          return false;\n        }\n      };\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9409650933cc688e77e565092a25e58adfc2e18d":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9409650933cc688e77e565092a25e58adfc2e18d"]},"commit2Childs":{"9409650933cc688e77e565092a25e58adfc2e18d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7c73b6560033b6dcc828fbcc94ba9315c20f3c0"],"c7c73b6560033b6dcc828fbcc94ba9315c20f3c0":["9409650933cc688e77e565092a25e58adfc2e18d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}