{"path":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","commits":[{"id":"5f81794c8dc3a3569f03abb41c8bf1ac25efc499","date":1342409686,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(\"This is a test\"));\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c83d6c4335f31cae14f625a222bc842f20073dcd","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(\"This is a test\"));\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"/dev/null","sourceNew":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(\"This is a test\"));\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","sourceNew":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", \"This is a test\");\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","sourceOld":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(\"This is a test\"));\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","bugFix":["5f81794c8dc3a3569f03abb41c8bf1ac25efc499"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","sourceNew":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", \"This is a test\");\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","sourceOld":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", new StringReader(\"This is a test\"));\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","pathOld":"lucene/analysis/icu/src/test/org/apache/lucene/analysis/icu/segmentation/TestICUTokenizer#testTokenAttributes().mjava","sourceNew":"  public void testTokenAttributes() throws Exception {\n    try (TokenStream ts = a.tokenStream(\"dummy\", \"This is a test\")) {\n      ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n      ts.reset();\n      while (ts.incrementToken()) {\n        assertEquals(UScript.LATIN, scriptAtt.getCode());\n        assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n        assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n        assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n      }\n      ts.end();\n    }\n  }\n\n","sourceOld":"  public void testTokenAttributes() throws Exception {\n    TokenStream ts = a.tokenStream(\"dummy\", \"This is a test\");\n    ScriptAttribute scriptAtt = ts.addAttribute(ScriptAttribute.class);\n    ts.reset();\n    while (ts.incrementToken()) {\n      assertEquals(UScript.LATIN, scriptAtt.getCode());\n      assertEquals(UScript.getName(UScript.LATIN), scriptAtt.getName());\n      assertEquals(UScript.getShortName(UScript.LATIN), scriptAtt.getShortName());\n      assertTrue(ts.reflectAsString(false).contains(\"script=Latin\"));\n    }\n    ts.end();\n    ts.close();\n  }\n\n","bugFix":["5f81794c8dc3a3569f03abb41c8bf1ac25efc499","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f81794c8dc3a3569f03abb41c8bf1ac25efc499"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["5f81794c8dc3a3569f03abb41c8bf1ac25efc499","c83d6c4335f31cae14f625a222bc842f20073dcd"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["5f81794c8dc3a3569f03abb41c8bf1ac25efc499"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5f81794c8dc3a3569f03abb41c8bf1ac25efc499"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"5f81794c8dc3a3569f03abb41c8bf1ac25efc499":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"]},"commit2Childs":{"aba371508186796cc6151d8223a5b4e16d02e26e":[],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","5f81794c8dc3a3569f03abb41c8bf1ac25efc499"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f81794c8dc3a3569f03abb41c8bf1ac25efc499":["aba371508186796cc6151d8223a5b4e16d02e26e","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["aba371508186796cc6151d8223a5b4e16d02e26e","37a0f60745e53927c4c876cfe5b5a58170f0646c","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}