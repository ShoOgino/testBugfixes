{"path":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","commits":[{"id":"838eb4e82b036bedc8730b5d97f5ae1d4a0d906b","date":1074593221,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"043c298cb215f13ba7b9b81d20760704e8f93d66","date":1107566743,"type":5,"author":"Erik Hatcher","isMerge":false,"pathNew":"contrib/analyzers/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","pathOld":"sandbox/contributions/analyzers/src/java/org/apache/lucene/analysis/fr/FrenchStemmer#isStemmable(String).mjava","sourceNew":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","sourceOld":"    /**\n     * Checks a term if it can be processed correctly.\n     *\n     * @return boolean - true if, and only if, the given term consists in letters.\n     */\n    private boolean isStemmable( String term ) {\n\t\tboolean upper = false;\n\t\tint first = -1;\n\t\tfor ( int c = 0; c < term.length(); c++ ) {\n\t\t\t// Discard terms that contain non-letter characters.\n\t\t\tif ( !Character.isLetter( term.charAt( c ) ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// Discard terms that contain multiple uppercase letters.\n\t\t\tif ( Character.isUpperCase( term.charAt( c ) ) ) {\n\t\t\t\tif ( upper ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t// First encountered uppercase letter, set flag and save\n\t\t\t// position.\n\t\t\t\telse {\n\t\t\t\t\tfirst = c;\n\t\t\t\t\tupper = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Discard the term if it contains a single uppercase letter that\n\t\t// is not starting the term.\n\t\tif ( first > 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["838eb4e82b036bedc8730b5d97f5ae1d4a0d906b"],"838eb4e82b036bedc8730b5d97f5ae1d4a0d906b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["043c298cb215f13ba7b9b81d20760704e8f93d66"]},"commit2Childs":{"043c298cb215f13ba7b9b81d20760704e8f93d66":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"838eb4e82b036bedc8730b5d97f5ae1d4a0d906b":["043c298cb215f13ba7b9b81d20760704e8f93d66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["838eb4e82b036bedc8730b5d97f5ae1d4a0d906b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}