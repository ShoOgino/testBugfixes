{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","commits":[{"id":"da47a1f45f2abb37566ea2df3253436a04f5e6fe","date":1446815076,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(100);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = random().nextInt(avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final StoredDocument doc = reader.document(i);\n        final StorableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final StorableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (StorableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1760beb4787f185cd296f5a1c28ba4bcea7025cc","date":1448305531,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final StoredDocument doc = reader.document(i);\n        final StorableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final StorableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (StorableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(100);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = random().nextInt(avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final StoredDocument doc = reader.document(i);\n        final StorableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final StorableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (StorableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (IndexableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final StoredDocument doc = reader.document(i);\n        final StorableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final StorableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (StorableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (IndexableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (IndexableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertTrue(numeric.docID() + \" vs \" + i, numeric.docID() < i);\n        } else {\n          assertEquals(i, numeric.nextDoc());\n          assertEquals(i, binary.nextDoc());\n          assertEquals(i, sorted.nextDoc());\n          assertEquals(value.longValue(), numeric.longValue());\n          assertTrue(sorted.ordValue() >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.ordValue()));\n          assertEquals(new BytesRef(Long.toString(value)), binary.binaryValue());\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        if (valuesFields.length == 0) {\n          assertTrue(sortedNumeric.docID() + \" vs \" + i, sortedNumeric.docID() < i);\n        } else {\n          final Set<Long> valueSet = new HashSet<>();\n          for (IndexableField sf : valuesFields) {\n            valueSet.add(sf.numericValue().longValue());\n          }\n\n          assertEquals(i, sortedNumeric.nextDoc());\n          assertEquals(valuesFields.length, sortedNumeric.docValueCount());\n          for (int j = 0; j < sortedNumeric.docValueCount(); ++j) {\n            assertTrue(valueSet.contains(sortedNumeric.nextValue()));\n          }\n          assertEquals(i, sortedSet.nextDoc());\n          int sortedSetCount = 0;\n          while (true) {\n            long ord = sortedSet.nextOrd();\n            if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n              break;\n            }\n            assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n            sortedSetCount++;\n          }\n          assertEquals(valueSet.size(), sortedSetCount);\n        }\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene54/TestLucene54DocValuesFormat#doTestSparseDocValuesVsStoredFields().mjava","sourceNew":null,"sourceOld":"  private void doTestSparseDocValuesVsStoredFields() throws Exception {\n    final long[] values = new long[TestUtil.nextInt(random(), 1, 500)];\n    for (int i = 0; i < values.length; ++i) {\n      values[i] = random().nextLong();\n    }\n\n    Directory dir = newFSDirectory(createTempDir());\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir, conf);\n\n    // sparse compression is only enabled if less than 1% of docs have a value\n    final int avgGap = 100;\n\n    final int numDocs = atLeast(200);\n    for (int i = random().nextInt(avgGap * 2); i >= 0; --i) {\n      writer.addDocument(new Document());\n    }\n    final int maxNumValuesPerDoc = random().nextBoolean() ? 1 : TestUtil.nextInt(random(), 2, 5);\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n\n      // single-valued\n      long docValue = values[random().nextInt(values.length)];\n      doc.add(new NumericDocValuesField(\"numeric\", docValue));\n      doc.add(new SortedDocValuesField(\"sorted\", new BytesRef(Long.toString(docValue))));\n      doc.add(new BinaryDocValuesField(\"binary\", new BytesRef(Long.toString(docValue))));\n      doc.add(new StoredField(\"value\", docValue));\n\n      // multi-valued\n      final int numValues = TestUtil.nextInt(random(), 1, maxNumValuesPerDoc);\n      for (int j = 0; j < numValues; ++j) {\n        docValue = values[random().nextInt(values.length)];\n        doc.add(new SortedNumericDocValuesField(\"sorted_numeric\", docValue));\n        doc.add(new SortedSetDocValuesField(\"sorted_set\", new BytesRef(Long.toString(docValue))));\n        doc.add(new StoredField(\"values\", docValue));\n      }\n\n      writer.addDocument(doc);\n\n      // add a gap\n      for (int j = TestUtil.nextInt(random(), 0, avgGap * 2); j >= 0; --j) {\n        writer.addDocument(new Document());\n      }\n    }\n\n    if (random().nextBoolean()) {\n      writer.forceMerge(1);\n    }\n\n    final IndexReader indexReader = writer.getReader();\n    writer.close();\n\n    for (LeafReaderContext context : indexReader.leaves()) {\n      final LeafReader reader = context.reader();\n      final NumericDocValues numeric = DocValues.getNumeric(reader, \"numeric\");\n      final Bits numericBits = DocValues.getDocsWithField(reader, \"numeric\");\n\n      final SortedDocValues sorted = DocValues.getSorted(reader, \"sorted\");\n      final Bits sortedBits = DocValues.getDocsWithField(reader, \"sorted\");\n\n      final BinaryDocValues binary = DocValues.getBinary(reader, \"binary\");\n      final Bits binaryBits = DocValues.getDocsWithField(reader, \"binary\");\n\n      final SortedNumericDocValues sortedNumeric = DocValues.getSortedNumeric(reader, \"sorted_numeric\");\n      final Bits sortedNumericBits = DocValues.getDocsWithField(reader, \"sorted_numeric\");\n\n      final SortedSetDocValues sortedSet = DocValues.getSortedSet(reader, \"sorted_set\");\n      final Bits sortedSetBits = DocValues.getDocsWithField(reader, \"sorted_set\");\n\n      for (int i = 0; i < reader.maxDoc(); ++i) {\n        final Document doc = reader.document(i);\n        final IndexableField valueField = doc.getField(\"value\");\n        final Long value = valueField == null ? null : valueField.numericValue().longValue();\n\n        if (value == null) {\n          assertEquals(0, numeric.get(i));\n          assertEquals(-1, sorted.getOrd(i));\n          assertEquals(new BytesRef(), binary.get(i));\n\n          assertFalse(numericBits.get(i));\n          assertFalse(sortedBits.get(i));\n          assertFalse(binaryBits.get(i));\n        } else {\n          assertEquals(value.longValue(), numeric.get(i));\n          assertTrue(sorted.getOrd(i) >= 0);\n          assertEquals(new BytesRef(Long.toString(value)), sorted.lookupOrd(sorted.getOrd(i)));\n          assertEquals(new BytesRef(Long.toString(value)), binary.get(i));\n\n          assertTrue(numericBits.get(i));\n          assertTrue(sortedBits.get(i));\n          assertTrue(binaryBits.get(i));\n        }\n\n        final IndexableField[] valuesFields = doc.getFields(\"values\");\n        final Set<Long> valueSet = new HashSet<>();\n        for (IndexableField sf : valuesFields) {\n          valueSet.add(sf.numericValue().longValue());\n        }\n\n        sortedNumeric.setDocument(i);\n        assertEquals(valuesFields.length, sortedNumeric.count());\n        for (int j = 0; j < sortedNumeric.count(); ++j) {\n          assertTrue(valueSet.contains(sortedNumeric.valueAt(j)));\n        }\n        sortedSet.setDocument(i);\n        int sortedSetCount = 0;\n        while (true) {\n          long ord = sortedSet.nextOrd();\n          if (ord == SortedSetDocValues.NO_MORE_ORDS) {\n            break;\n          }\n          assertTrue(valueSet.contains(Long.parseLong(sortedSet.lookupOrd(ord).utf8ToString())));\n          sortedSetCount++;\n        }\n        assertEquals(valueSet.size(), sortedSetCount);\n\n        assertEquals(!valueSet.isEmpty(), sortedNumericBits.get(i));\n        assertEquals(!valueSet.isEmpty(), sortedSetBits.get(i));\n      }\n    }\n\n    indexReader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"1760beb4787f185cd296f5a1c28ba4bcea7025cc":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1760beb4787f185cd296f5a1c28ba4bcea7025cc":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da47a1f45f2abb37566ea2df3253436a04f5e6fe"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"da47a1f45f2abb37566ea2df3253436a04f5e6fe":["1760beb4787f185cd296f5a1c28ba4bcea7025cc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}