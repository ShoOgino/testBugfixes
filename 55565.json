{"path":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#findExtends(Class[#]).mjava","commits":[{"id":"ff7c5f059d5a1dc549d20043d719ec940ef90bda","date":1194565212,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#findExtends(Class[#]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Find useful concrete (ie: not anonymous, not abstract, not an interface)\n   * classes that extend clazz\n   */\n  public Collection<Class> findExtends(Class<?> clazz)\n    throws ClassNotFoundException {\n        \n    HashSet<Class> results = new HashSet<Class>();\n\n    for (JarFile jarFile : jarFiles) {\n      for (Enumeration<JarEntry> e = jarFile.entries();\n           e.hasMoreElements() ;) {\n                \n        String n = e.nextElement().getName();\n        if (n.endsWith(\".class\")) {\n          String cn = n.replace(\"/\",\".\").substring(0,n.length()-6);\n          Class<?> target;\n          try {\n            target = cl.loadClass(cn);\n          } catch (NoClassDefFoundError e1) {\n            throw new ClassNotFoundException\n              (\"Can't load: \" + cn, e1);\n          }\n                                                        \n          if (clazz.isAssignableFrom(target)\n              && !target.isAnonymousClass()) {\n                        \n            int mods = target.getModifiers();\n            if (!(Modifier.isAbstract(mods) ||\n                  Modifier.isInterface(mods))) {\n              results.add(target);\n            }\n          }\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#findExtends(Class[#]).mjava","pathOld":"src/java/org/apache/solr/util/FindClasses[SuggestMissingFactories]#findExtends(Class[#]).mjava","sourceNew":"  /**\n   * Find useful concrete (ie: not anonymous, not abstract, not an interface)\n   * classes that extend clazz\n   */\n  public Collection<Class> findExtends(Class<?> clazz)\n    throws ClassNotFoundException {\n        \n    HashSet<Class> results = new HashSet<Class>();\n\n    for (JarFile jarFile : jarFiles) {\n      for (Enumeration<JarEntry> e = jarFile.entries();\n           e.hasMoreElements() ;) {\n                \n        String n = e.nextElement().getName();\n        if (n.endsWith(\".class\")) {\n          String cn = n.replace(\"/\",\".\").substring(0,n.length()-6);\n          Class<?> target;\n          try {\n            target = cl.loadClass(cn);\n          } catch (NoClassDefFoundError e1) {\n            throw new ClassNotFoundException\n              (\"Can't load: \" + cn, e1);\n          }\n                                                        \n          if (clazz.isAssignableFrom(target)\n              && !target.isAnonymousClass()) {\n                        \n            int mods = target.getModifiers();\n            if (!(Modifier.isAbstract(mods) ||\n                  Modifier.isInterface(mods))) {\n              results.add(target);\n            }\n          }\n        }\n      }\n    }\n    return results;\n  }\n\n","sourceOld":"  /**\n   * Find useful concrete (ie: not anonymous, not abstract, not an interface)\n   * classes that extend clazz\n   */\n  public Collection<Class> findExtends(Class<?> clazz)\n    throws ClassNotFoundException {\n        \n    HashSet<Class> results = new HashSet<Class>();\n\n    for (JarFile jarFile : jarFiles) {\n      for (Enumeration<JarEntry> e = jarFile.entries();\n           e.hasMoreElements() ;) {\n                \n        String n = e.nextElement().getName();\n        if (n.endsWith(\".class\")) {\n          String cn = n.replace(\"/\",\".\").substring(0,n.length()-6);\n          Class<?> target;\n          try {\n            target = cl.loadClass(cn);\n          } catch (NoClassDefFoundError e1) {\n            throw new ClassNotFoundException\n              (\"Can't load: \" + cn, e1);\n          }\n                                                        \n          if (clazz.isAssignableFrom(target)\n              && !target.isAnonymousClass()) {\n                        \n            int mods = target.getModifiers();\n            if (!(Modifier.isAbstract(mods) ||\n                  Modifier.isInterface(mods))) {\n              results.add(target);\n            }\n          }\n        }\n      }\n    }\n    return results;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ff7c5f059d5a1dc549d20043d719ec940ef90bda":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ff7c5f059d5a1dc549d20043d719ec940ef90bda"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}