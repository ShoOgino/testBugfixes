{"path":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<NamedList<Object>>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<Object>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70","date":1409367206,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":["6827268e62848e1e9e42b995c30c14f69a369389"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"432e578be72da02cfde62dcc7fb4fa8620bc85fd","date":1420557072,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1390137e395d2f07f9ba5b8c43d293befe84d563","date":1427947685,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add( \"name\", content.getName() );\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6827268e62848e1e9e42b995c30c14f69a369389","date":1439915491,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          for (String val : vals) {\n            params.add(returnParam,val);\n          }\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ed124d21605b0e41f648c25f80f60ba1828e78a","date":1477056513,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"getdefaults\"))){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(Boolean.TRUE.equals( req.getParams().getBool(\"initArgs\"))) rsp.add(\"initArgs\", initArgs);\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] parts = req.getParams().getParams(\"urlTemplateValues\");\n    if (parts != null && parts.length > 0) {\n      Map map = new LinkedHashMap<>();\n      rsp.getValues().add(\"urlTemplateValues\", map);\n      for (String part : parts) {\n        map.put(part, req.getPathTemplateValues().get(part));\n      }\n    }\n\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] parts = req.getParams().getParams(\"urlTemplateValues\");\n    if (parts != null && parts.length > 0) {\n      Map map = new LinkedHashMap<>();\n      rsp.getValues().add(\"urlTemplateValues\", map);\n      for (String part : parts) {\n        map.put(part, req.getPathTemplateValues().get(part));\n      }\n    }\n\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5","date":1591384964,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/DumpRequestHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  @SuppressWarnings({\"unchecked\"})\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException\n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] parts = req.getParams().getParams(\"urlTemplateValues\");\n    if (parts != null && parts.length > 0) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map map = new LinkedHashMap<>();\n      rsp.getValues().add(\"urlTemplateValues\", map);\n      for (String part : parts) {\n        map.put(part, req.getPathTemplateValues().get(part));\n      }\n    }\n\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException \n  {\n    // Show params\n    rsp.add( \"params\", req.getParams().toNamedList() );\n    String[] parts = req.getParams().getParams(\"urlTemplateValues\");\n    if (parts != null && parts.length > 0) {\n      Map map = new LinkedHashMap<>();\n      rsp.getValues().add(\"urlTemplateValues\", map);\n      for (String part : parts) {\n        map.put(part, req.getPathTemplateValues().get(part));\n      }\n    }\n\n    String[] returnParams = req.getParams().getParams(\"param\");\n    if(returnParams !=null) {\n      NamedList params = (NamedList) rsp.getValues().get(\"params\");\n      for (String returnParam : returnParams) {\n        String[] vals = req.getParams().getParams(returnParam);\n        if(vals != null){\n          if (vals.length == 1) {\n            params.add(returnParam, vals[0]);\n          } else {\n            params.add(returnParam, vals);\n          }\n\n        }\n\n      }\n    }\n\n    if(req.getParams().getBool(\"getdefaults\", false)){\n      NamedList def = (NamedList) initArgs.get(PluginInfo.DEFAULTS);\n      rsp.add(\"getdefaults\", def);\n    }\n\n\n    if(req.getParams().getBool(\"initArgs\", false)) {\n      rsp.add(\"initArgs\", initArgs);\n    }\n        \n    // Write the streams...\n    if( req.getContentStreams() != null ) {\n      ArrayList<NamedList<Object>> streams = new ArrayList<>();\n      // Cycle through each stream\n      for( ContentStream content : req.getContentStreams() ) {\n        NamedList<Object> stream = new SimpleOrderedMap<>();\n        stream.add(NAME, content.getName());\n        stream.add( \"sourceInfo\", content.getSourceInfo() );\n        stream.add( \"size\", content.getSize() );\n        stream.add( \"contentType\", content.getContentType() );\n        Reader reader = content.getReader();\n        try {\n          stream.add( \"stream\", IOUtils.toString(reader) );\n        } finally {\n          reader.close();\n        }\n        streams.add( stream );\n      }\n      rsp.add( \"streams\", streams );\n    }\n\n    rsp.add(\"context\", req.getContext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["8ed124d21605b0e41f648c25f80f60ba1828e78a"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"6827268e62848e1e9e42b995c30c14f69a369389":["1390137e395d2f07f9ba5b8c43d293befe84d563"],"8ed124d21605b0e41f648c25f80f60ba1828e78a":["6827268e62848e1e9e42b995c30c14f69a369389"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["6827268e62848e1e9e42b995c30c14f69a369389","8ed124d21605b0e41f648c25f80f60ba1828e78a"],"d2638f781be724518ff6c2263d14a48cf6e68017":["432e578be72da02cfde62dcc7fb4fa8620bc85fd","1390137e395d2f07f9ba5b8c43d293befe84d563"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["0f7392e322590b1c5c54beda8e0dc4dac5a0dc70"],"c26f00b574427b55127e869b935845554afde1fa":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"6827268e62848e1e9e42b995c30c14f69a369389":["8ed124d21605b0e41f648c25f80f60ba1828e78a","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"8ed124d21605b0e41f648c25f80f60ba1828e78a":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1390137e395d2f07f9ba5b8c43d293befe84d563":["6827268e62848e1e9e42b995c30c14f69a369389","d2638f781be724518ff6c2263d14a48cf6e68017"],"432e578be72da02cfde62dcc7fb4fa8620bc85fd":["1390137e395d2f07f9ba5b8c43d293befe84d563","d2638f781be724518ff6c2263d14a48cf6e68017"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"2caf6d6e842e1a4e4ae68ec6dfa5139c31a84ec5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"0f7392e322590b1c5c54beda8e0dc4dac5a0dc70":["432e578be72da02cfde62dcc7fb4fa8620bc85fd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","d2638f781be724518ff6c2263d14a48cf6e68017","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}