{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","commits":[{"id":"774e6bee28f9c598a3ce2536597c865ed6d32f2c","date":1313001285,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"/dev/null","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ea187884f51c148cb86509b1ee7705026b8c7b94","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3764de0571c8c4d1463a2ceb5889480b9f95dfda","date":1313028011,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits, getCommits(masterClient));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":["fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"87ddd70213da6cc6532a7ba162e449cafb79dd6f","date":1313066222,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits, getCommits(masterClient));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":["fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":["ea187884f51c148cb86509b1ee7705026b8c7b94"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ea187884f51c148cb86509b1ee7705026b8c7b94","date":1354053918,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":["774e6bee28f9c598a3ce2536597c865ed6d32f2c","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":["fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < 10; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(10, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(10, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(10, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(10, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", 110, \"name\", \"name = 1\");\n    index(masterClient, \"id\", 120, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(12, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(12, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(12, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(12, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a59489bd57cb6434aab4e536a03b260fec1d47f3","date":1361571364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  private void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0821fb2632567b97517fef4d350c09297f996615","date":1361720082,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n    // NOTE: revert config on master.\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master.xml\", \"solrconfig.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7","date":1524163750,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":["ea187884f51c148cb86509b1ee7705026b8c7b94","3764de0571c8c4d1463a2ceb5889480b9f95dfda","87ddd70213da6cc6532a7ba162e449cafb79dd6f"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d8ec787a60b490e9ef74aec8f1c53508f7cc304","date":1524209433,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    NamedList<Object> commits = getCommits(masterClient);\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    assertEquals(commits.get(\"commits\"), getCommits(masterClient).get(\"commits\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":["774e6bee28f9c598a3ce2536597c865ed6d32f2c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestReplicateAfterCoreReload().mjava","sourceNew":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop follower\n    followerJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on leader\n    leader.copyConfigFile(CONF_DIR + \"solrconfig-leader3.xml\",\n                          \"solrconfig.xml\");\n\n    leaderJetty.stop();\n\n    leaderJetty = createAndStartJetty(leader);\n    leaderClient.close();\n    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n\n    leaderClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n    leaderClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList leaderQueryRsp = rQuery(docs, \"*:*\", leaderClient);\n    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    assertEquals(docs, leaderQueryResult.getNumFound());\n    \n    follower.setTestPort(leaderJetty.getLocalPort());\n    follower.copyConfigFile(follower.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start follower\n    followerJetty = createAndStartJetty(follower);\n    followerClient.close();\n    followerClient = createNewSolrClient(followerJetty.getLocalPort());\n    \n    //get docs from follower and check if number is equal to leader\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList followerQueryRsp = rQuery(docs, \"*:*\", followerClient);\n    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(docs, followerQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(leaderClient).get(\"indexversion\");\n    \n    reloadCore(leaderClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(leaderClient).get(\"indexversion\"));\n    \n    index(leaderClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(leaderClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    leaderClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList resp =  rQuery(docs + 2, \"*:*\", leaderClient);\n    leaderQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, leaderQueryResult.getNumFound());\n    \n    //get docs from follower and check if number is equal to leader\n    followerQueryRsp = rQuery(docs + 2, \"*:*\", followerClient);\n    followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(docs + 2, followerQueryResult.getNumFound());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestReplicateAfterCoreReload() throws Exception {\n    int docs = TEST_NIGHTLY ? 200000 : 10;\n    \n    //stop slave\n    slaveJetty.stop();\n\n\n    //change solrconfig having 'replicateAfter startup' option on master\n    master.copyConfigFile(CONF_DIR + \"solrconfig-master3.xml\",\n                          \"solrconfig.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    masterClient.deleteByQuery(\"*:*\");\n    for (int i = 0; i < docs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(docs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(docs, masterQueryResult.getNumFound());\n    \n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    //start slave\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    \n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(docs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs, slaveQueryResult.getNumFound());\n    \n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    Object version = getIndexVersion(masterClient).get(\"indexversion\");\n    \n    reloadCore(masterClient, \"collection1\");\n    \n    assertEquals(version, getIndexVersion(masterClient).get(\"indexversion\"));\n    \n    index(masterClient, \"id\", docs + 10, \"name\", \"name = 1\");\n    index(masterClient, \"id\", docs + 20, \"name\", \"name = 2\");\n\n    masterClient.commit();\n    \n    @SuppressWarnings({\"rawtypes\"})\n    NamedList resp =  rQuery(docs + 2, \"*:*\", masterClient);\n    masterQueryResult = (SolrDocumentList) resp.get(\"response\");\n    assertEquals(docs + 2, masterQueryResult.getNumFound());\n    \n    //get docs from slave and check if number is equal to master\n    slaveQueryRsp = rQuery(docs + 2, \"*:*\", slaveClient);\n    slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(docs + 2, slaveQueryResult.getNumFound());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"774e6bee28f9c598a3ce2536597c865ed6d32f2c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8d8ec787a60b490e9ef74aec8f1c53508f7cc304":["cc3b13b430571c2e169f98fe38e1e7666f88522d","fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["87ddd70213da6cc6532a7ba162e449cafb79dd6f","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["87ddd70213da6cc6532a7ba162e449cafb79dd6f"],"407687e67faf6e1f02a211ca078d8e3eed631027":["d9405f486872f1e416304dfe389741f4ee2f8a4d","ea187884f51c148cb86509b1ee7705026b8c7b94"],"bafca15d8e408346a67f4282ad1143b88023893b":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"87ddd70213da6cc6532a7ba162e449cafb79dd6f":["3764de0571c8c4d1463a2ceb5889480b9f95dfda"],"fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"e98520789adb1d5ad05afb4956eca0944a929688":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"ea187884f51c148cb86509b1ee7705026b8c7b94":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["0821fb2632567b97517fef4d350c09297f996615"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"f2126b84bd093fa3d921582a109a0ee578c28126":["f08557cdb6c60ac7b88a9342c983a20cd236e74f","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"0821fb2632567b97517fef4d350c09297f996615":["a59489bd57cb6434aab4e536a03b260fec1d47f3"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["ea187884f51c148cb86509b1ee7705026b8c7b94"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"3764de0571c8c4d1463a2ceb5889480b9f95dfda":["774e6bee28f9c598a3ce2536597c865ed6d32f2c"]},"commit2Childs":{"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"774e6bee28f9c598a3ce2536597c865ed6d32f2c":["3764de0571c8c4d1463a2ceb5889480b9f95dfda"],"8d8ec787a60b490e9ef74aec8f1c53508f7cc304":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e98520789adb1d5ad05afb4956eca0944a929688"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"87ddd70213da6cc6532a7ba162e449cafb79dd6f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["407687e67faf6e1f02a211ca078d8e3eed631027","ea187884f51c148cb86509b1ee7705026b8c7b94","f2126b84bd093fa3d921582a109a0ee578c28126"],"fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"ea187884f51c148cb86509b1ee7705026b8c7b94":["407687e67faf6e1f02a211ca078d8e3eed631027","a59489bd57cb6434aab4e536a03b260fec1d47f3"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["bafca15d8e408346a67f4282ad1143b88023893b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["774e6bee28f9c598a3ce2536597c865ed6d32f2c"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["8d8ec787a60b490e9ef74aec8f1c53508f7cc304","fbe6f4d3c1d0c62beedb35423e5cb20922ad7ba7"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"0821fb2632567b97517fef4d350c09297f996615":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["0821fb2632567b97517fef4d350c09297f996615"],"3764de0571c8c4d1463a2ceb5889480b9f95dfda":["87ddd70213da6cc6532a7ba162e449cafb79dd6f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}