{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","commits":[{"id":"f54234b89a8a52b1cb430f514dc8e8b6e15790b6","date":1412368217,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, files, MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, files, MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, files, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, files, MergeState.CheckAbort.NONE, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75d243fa001c0783996918dbbe60b55cbaeeff46","date":1422502815,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(files);\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.getCodec().compoundFormat().write(dir, si, files, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000, si.getId(), \"suffix\");\n      files.add(\"_123.f\" + i);\n    }\n    \n    si.setFiles(files);\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(files);\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseCompoundFormatTestCase#createLargeCFS(Directory).mjava","sourceNew":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000, si.getId(), \"suffix\");\n      files.add(\"_123.f\" + i);\n    }\n    \n    si.setFiles(files);\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","sourceOld":"  /** \n   * Setup a large compound file with a number of components, each of\n   * which is a sequential file (so that we can easily tell that we are\n   * reading in the right byte). The methods sets up 20 files - _123.0 to _123.19,\n   * the size of each file is 1000 bytes.\n   */\n  protected static Directory createLargeCFS(Directory dir) throws IOException {\n    List<String> files = new ArrayList<>();\n    for (int i = 0; i < 20; i++) {\n      createSequenceFile(dir, \"_123.f\" + i, (byte) 0, 2000);\n      files.add(\"_123.f\" + i);\n    }\n    \n    SegmentInfo si = newSegmentInfo(dir, \"_123\");\n    si.setFiles(files);\n    si.getCodec().compoundFormat().write(dir, si, IOContext.DEFAULT);\n    Directory cfs = si.getCodec().compoundFormat().getCompoundReader(dir, si, IOContext.DEFAULT);\n    return cfs;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9bb9a29a5e71a90295f175df8919802993142c9a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"71488d7f5786ae87541276121ecb69705a11a295":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["9bb9a29a5e71a90295f175df8919802993142c9a"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["75d243fa001c0783996918dbbe60b55cbaeeff46","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9bb9a29a5e71a90295f175df8919802993142c9a":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9bb9a29a5e71a90295f175df8919802993142c9a","f54234b89a8a52b1cb430f514dc8e8b6e15790b6"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["75d243fa001c0783996918dbbe60b55cbaeeff46"],"75d243fa001c0783996918dbbe60b55cbaeeff46":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f54234b89a8a52b1cb430f514dc8e8b6e15790b6":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}