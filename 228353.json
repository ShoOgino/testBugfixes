{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","commits":[{"id":"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","date":1509748659,"type":0,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long)((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : \" + client + \"in 20 attempts\");\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","pathOld":"/dev/null","sourceNew":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long)((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : \" + client + \"in 20 attempts\");\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","sourceNew":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long) ((LinkedHashMap) response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : \" + client + \"in 20 attempts\");\n    return null;\n  }\n\n","sourceOld":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long)((LinkedHashMap)response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : \" + client + \"in 20 attempts\");\n    return null;\n  }\n\n","bugFix":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","sourceNew":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long) ((LinkedHashMap) response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : {} in 20 attempts\", client);\n    return null;\n  }\n\n","sourceOld":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long) ((LinkedHashMap) response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : \" + client + \"in 20 attempts\");\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrTestsUtil#getFingerPrintMaxVersion(CloudSolrClient,String,int).mjava","sourceNew":null,"sourceOld":"  protected static Object getFingerPrintMaxVersion(CloudSolrClient client, String shardNames, int numDocs) throws SolrServerException, IOException, InterruptedException {\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(CommonParams.QT, \"/get\");\n    params.set(\"fingerprint\", true);\n    params.set(\"shards\", shardNames);\n    params.set(\"getVersions\", numDocs);\n\n    QueryResponse response = null;\n    long start = System.nanoTime();\n    while (System.nanoTime() - start <= TimeUnit.NANOSECONDS.convert(20, TimeUnit.SECONDS)) {\n      response = client.query(params);\n      if (response.getResponse() != null && response.getResponse().get(\"fingerprint\") != null) {\n        return (long) ((LinkedHashMap) response.getResponse().get(\"fingerprint\")).get(\"maxVersionEncountered\");\n      }\n      Thread.sleep(200);\n    }\n    log.error(\"maxVersionEncountered not found for client : {} in 20 attempts\", client);\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fba58147c9753bb58bbfbd2ebbbf02aecc1eafde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"]},"commit2Childs":{"fba58147c9753bb58bbfbd2ebbbf02aecc1eafde":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fba58147c9753bb58bbfbd2ebbbf02aecc1eafde","d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}