{"path":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","commits":[{"id":"e22ffe8cc51a892ae103df018822d7873e901c2a","date":1313696790,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultIndexWriterProvider#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized IndexWriter getIndexWriter(SolrCore core) throws IOException {\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false, false);\n    }\n    return indexWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexWriter getIndexWriter(SolrCore core) throws IOException {\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n    }\n    return indexWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08bcaef9e931052e4ca24133a89cc6aefaf61829","date":1342469326,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n    \n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexWriter getIndexWriter(SolrCore core) throws IOException {\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false, false);\n    }\n    return indexWriter;\n  }\n\n","bugFix":null,"bugIntro":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n    \n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexWriter getIndexWriter(SolrCore core) throws IOException {\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false, false);\n    }\n    return indexWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9767265f21f7d1246b13dd7e73e8a4ad88b4384","date":1342986300,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n    \n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","bugFix":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n    \n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","sourceOld":"  @Override\n  public synchronized IndexWriter getIndexWriter(SolrCore core) throws IOException {\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false, false);\n    }\n    return indexWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1381b91b03f7409d8d548c7070dbc615931a0f50","date":1343667369,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","bugFix":null,"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396","11fa6b3c54740236744aa64f1a29954b1cf172a5","3c8475e39c56b28600d2b496f3e78f7421190f62","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    if (core == null) {\n      // core == null is a signal to just return the current writer, or null if none.\n      if (refCntWriter != null) refCntWriter.incref();\n      return refCntWriter;\n    }\n\n    while (pauseWriter) {\n      try {\n        wait();\n      } catch (InterruptedException e) {}\n    }\n\n    if (indexWriter == null) {\n      indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false,\n          false);\n    }\n    if (refCntWriter == null) {\n      refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n        @Override\n        public void close() {\n          synchronized (DefaultSolrCoreState.this) {\n            writerFree = true;\n            DefaultSolrCoreState.this.notifyAll();\n          }\n        }\n      };\n    }\n    writerFree = false;\n    notifyAll();\n    refCntWriter.incref();\n    return refCntWriter;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","date":1345037674,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"70fa1c0f4d75735ff2e1485e059d9bc5efa50598","date":1345296911,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"616c1830142ff5c1ddedec1ed898733b73c8e23b","date":1345368925,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\",\n            false, false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3c8475e39c56b28600d2b496f3e78f7421190f62","date":1349102564,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      if (refCntWriter == null) {\n        refCntWriter = new RefCounted<IndexWriter>(indexWriter) {\n          @Override\n          public void close() {\n            synchronized (writerPauseLock) {\n              writerFree = true;\n              writerPauseLock.notifyAll();\n            }\n          }\n        };\n      }\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"eb4a175e8863893e146a53576c406f9fecb9a9cf","date":1355165706,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0237c8eedfd2dc43722634e4e8d7432b7b8faf3f","date":1355272694,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new RuntimeException(\"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":["058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new RuntimeException(\"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait();\n        } catch (InterruptedException e) {}\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6985908e87af0a99c5571a36bb1813179076fe95","date":1362158687,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new RuntimeException(\"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public synchronized RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new RuntimeException(\"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8d2f62023fd5e0673362628a444c858f0ca4ea33","date":1363177719,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new RuntimeException(\"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new RuntimeException(\"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396","058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54f9a16329716fa08b653c53f1c3dfc6b284d2cc","date":1363905854,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\", false);\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11fa6b3c54740236744aa64f1a29954b1cf172a5","date":1363907001,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n\n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396","058801f8673d53a5abac8088204860ec29a40f0d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (closed) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        initRefCntWriter();\n        if (refCntWriter == null) return null;\n        writerFree = false;\n        writerPauseLock.notifyAll();\n        if (refCntWriter != null) refCntWriter.incref();\n        \n        return refCntWriter;\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    \n    if (closed) {\n      throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n    }\n    \n    synchronized (writerPauseLock) {\n\n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        if (refCntWriter != null) refCntWriter.incref();\n        return refCntWriter;\n      }\n      \n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":["0237c8eedfd2dc43722634e4e8d7432b7b8faf3f","8d2f62023fd5e0673362628a444c858f0ca4ea33","11fa6b3c54740236744aa64f1a29954b1cf172a5"],"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b","date":1439091488,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (closed) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        initRefCntWriter();\n        if (refCntWriter == null) return null;\n      } else {\n        if (indexWriter == null) {\n          indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n        }\n        initRefCntWriter();\n      }\n\n      writerFree = false;\n      refCntWriter.incref();\n      writerPauseLock.notifyAll();\n      return refCntWriter;\n\n    }\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (closed) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n      \n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        initRefCntWriter();\n        if (refCntWriter == null) return null;\n        writerFree = false;\n        writerPauseLock.notifyAll();\n        if (refCntWriter != null) refCntWriter.incref();\n        \n        return refCntWriter;\n      }\n      \n      if (indexWriter == null) {\n        indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n      }\n      initRefCntWriter();\n      writerFree = false;\n      writerPauseLock.notifyAll();\n      refCntWriter.incref();\n      return refCntWriter;\n    }\n  }\n\n","bugFix":null,"bugIntro":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1adea4accc297f58fd9d8de3c820fd576eb0d396","date":1441292844,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    synchronized (writerPauseLock) {\n      if (closed) {\n        throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"SolrCoreState already closed\");\n      }\n      \n      while (pauseWriter) {\n        try {\n          writerPauseLock.wait(100);\n        } catch (InterruptedException e) {}\n        \n        if (closed) {\n          throw new SolrException(ErrorCode.SERVICE_UNAVAILABLE, \"Already closed\");\n        }\n      }\n\n      if (core == null) {\n        // core == null is a signal to just return the current writer, or null\n        // if none.\n        initRefCntWriter();\n        if (refCntWriter == null) return null;\n      } else {\n        if (indexWriter == null) {\n          indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n        }\n        initRefCntWriter();\n      }\n\n      writerFree = false;\n      refCntWriter.incref();\n      writerPauseLock.notifyAll();\n      return refCntWriter;\n\n    }\n  }\n\n","bugFix":["8d2f62023fd5e0673362628a444c858f0ca4ea33","11fa6b3c54740236744aa64f1a29954b1cf172a5","76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b","058801f8673d53a5abac8088204860ec29a40f0d","1381b91b03f7409d8d548c7070dbc615931a0f50","eb4a175e8863893e146a53576c406f9fecb9a9cf","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d505b8f51b856e1b7e9dd377f5050c337b797a","date":1549455307,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    if (core != null && !core.indexEnabled) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \"Indexing is temporarily disabled\");\n    }\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":["3fc55735df93d56525bef197403d867c1fe93fe7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e","date":1551802585,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    if (core != null && (!core.indexEnabled || core.readOnly)) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \"Indexing is temporarily disabled\");\n    }\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    if (core != null && !core.indexEnabled) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \"Indexing is temporarily disabled\");\n    }\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3fc55735df93d56525bef197403d867c1fe93fe7","date":1558373042,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState#getIndexWriter(SolrCore).mjava","sourceNew":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    if (core != null && (!core.indexEnabled || core.readOnly)) {\n      throw new SolrException(SolrException.ErrorCode.SERVICE_UNAVAILABLE,\n                              \"Indexing is temporarily disabled\");\n    }\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","sourceOld":"  @Override\n  public RefCounted<IndexWriter> getIndexWriter(SolrCore core)\n      throws IOException {\n    if (core != null && (!core.indexEnabled || core.readOnly)) {\n      throw new SolrException(SolrException.ErrorCode.FORBIDDEN, \"Indexing is temporarily disabled\");\n    }\n    boolean succeeded = false;\n    lock(iwLock.readLock());\n    try {\n      // Multiple readers may be executing this, but we only want one to open the writer on demand.\n      synchronized (this) {\n        if (core == null) {\n          // core == null is a signal to just return the current writer, or null if none.\n          initRefCntWriter();\n          if (refCntWriter == null) return null;\n        } else {\n          if (indexWriter == null) {\n            indexWriter = createMainIndexWriter(core, \"DirectUpdateHandler2\");\n          }\n          initRefCntWriter();\n        }\n\n        refCntWriter.incref();\n        succeeded = true;  // the returned RefCounted<IndexWriter> will release the readLock on a decref()\n        return refCntWriter;\n      }\n\n    } finally {\n      // if we failed to return the IW for some other reason, we should unlock.\n      if (!succeeded) {\n        iwLock.readLock().unlock();\n      }\n    }\n\n  }\n\n","bugFix":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["3c8475e39c56b28600d2b496f3e78f7421190f62","0237c8eedfd2dc43722634e4e8d7432b7b8faf3f"],"616c1830142ff5c1ddedec1ed898733b73c8e23b":["d6f074e73200c07d54f242d3880a8da5a35ff97b","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"8d2f62023fd5e0673362628a444c858f0ca4ea33":["6985908e87af0a99c5571a36bb1813179076fe95"],"3fc55735df93d56525bef197403d867c1fe93fe7":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"1adea4accc297f58fd9d8de3c820fd576eb0d396":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"aba371508186796cc6151d8223a5b4e16d02e26e":["e22ffe8cc51a892ae103df018822d7873e901c2a","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["8d2f62023fd5e0673362628a444c858f0ca4ea33"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"0237c8eedfd2dc43722634e4e8d7432b7b8faf3f":["eb4a175e8863893e146a53576c406f9fecb9a9cf"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["1381b91b03f7409d8d548c7070dbc615931a0f50"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"6985908e87af0a99c5571a36bb1813179076fe95":["0237c8eedfd2dc43722634e4e8d7432b7b8faf3f"],"058801f8673d53a5abac8088204860ec29a40f0d":["11fa6b3c54740236744aa64f1a29954b1cf172a5"],"eb4a175e8863893e146a53576c406f9fecb9a9cf":["3c8475e39c56b28600d2b496f3e78f7421190f62"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["e22ffe8cc51a892ae103df018822d7873e901c2a","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"3c8475e39c56b28600d2b496f3e78f7421190f62":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1381b91b03f7409d8d548c7070dbc615931a0f50"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["aba371508186796cc6151d8223a5b4e16d02e26e","1381b91b03f7409d8d548c7070dbc615931a0f50"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["08bcaef9e931052e4ca24133a89cc6aefaf61829"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["058801f8673d53a5abac8088204860ec29a40f0d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3fc55735df93d56525bef197403d867c1fe93fe7"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"616c1830142ff5c1ddedec1ed898733b73c8e23b":[],"8d2f62023fd5e0673362628a444c858f0ca4ea33":["54f9a16329716fa08b653c53f1c3dfc6b284d2cc"],"3fc55735df93d56525bef197403d867c1fe93fe7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1adea4accc297f58fd9d8de3c820fd576eb0d396":["81d505b8f51b856e1b7e9dd377f5050c337b797a"],"aba371508186796cc6151d8223a5b4e16d02e26e":["d6f074e73200c07d54f242d3880a8da5a35ff97b"],"70fa1c0f4d75735ff2e1485e059d9bc5efa50598":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e22ffe8cc51a892ae103df018822d7873e901c2a"],"54f9a16329716fa08b653c53f1c3dfc6b284d2cc":["11fa6b3c54740236744aa64f1a29954b1cf172a5"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f"],"e22ffe8cc51a892ae103df018822d7873e901c2a":["aba371508186796cc6151d8223a5b4e16d02e26e","fe33227f6805edab2036cbb80645cc4e2d1fa424","08bcaef9e931052e4ca24133a89cc6aefaf61829"],"81d505b8f51b856e1b7e9dd377f5050c337b797a":["fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e"],"1381b91b03f7409d8d548c7070dbc615931a0f50":["b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"0237c8eedfd2dc43722634e4e8d7432b7b8faf3f":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","6985908e87af0a99c5571a36bb1813179076fe95"],"b6d2d51ff0b489e2d7ddc42a63f0d6cb69326469":["616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","3c8475e39c56b28600d2b496f3e78f7421190f62"],"6985908e87af0a99c5571a36bb1813179076fe95":["8d2f62023fd5e0673362628a444c858f0ca4ea33"],"fc48b0cd4ac45fae4c9660d1828b3fbafffdd12e":["3fc55735df93d56525bef197403d867c1fe93fe7"],"058801f8673d53a5abac8088204860ec29a40f0d":["76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b"],"eb4a175e8863893e146a53576c406f9fecb9a9cf":["0237c8eedfd2dc43722634e4e8d7432b7b8faf3f"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["4b51f65902cc2d20ddeb7a5b949aaddf990f31a7"],"3c8475e39c56b28600d2b496f3e78f7421190f62":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","eb4a175e8863893e146a53576c406f9fecb9a9cf"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["70fa1c0f4d75735ff2e1485e059d9bc5efa50598"],"11fa6b3c54740236744aa64f1a29954b1cf172a5":["058801f8673d53a5abac8088204860ec29a40f0d"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["616c1830142ff5c1ddedec1ed898733b73c8e23b"],"08bcaef9e931052e4ca24133a89cc6aefaf61829":["fe33227f6805edab2036cbb80645cc4e2d1fa424","c9767265f21f7d1246b13dd7e73e8a4ad88b4384"],"c9767265f21f7d1246b13dd7e73e8a4ad88b4384":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","1381b91b03f7409d8d548c7070dbc615931a0f50"],"76fe9c497e8a6dfe48a1c3d048a6778db23b5a0b":["1adea4accc297f58fd9d8de3c820fd576eb0d396"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","616c1830142ff5c1ddedec1ed898733b73c8e23b","70fa1c0f4d75735ff2e1485e059d9bc5efa50598","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}