{"path":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","commits":[{"id":"5391288921372c32bf6096df320497ad2d05757f","date":1200634221,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"/dev/null","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='b']\"\n            ,\"//result/doc[3]/int[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/int[@name='id'][.='x']\"\n            ,\"//result/doc[2]/int[@name='id'][.='y']\"\n            ,\"//result/doc[3]/int[@name='id'][.='z']\"\n            ,\"//result/doc[4]/int[@name='id'][.='a']\"\n            ,\"//result/doc[5]/int[@name='id'][.='b']\"\n            ,\"//result/doc[6]/int[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='x']\"\n            ,\"//result/doc[3]/int[@name='id'][.='b']\"\n            ,\"//result/doc[4]/int[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All six should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/int[@name='id'][.='a']\"\n        ,\"//result/doc[3]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[1]/int[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        ,\"//result/doc[4]/int[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='x']\"\n        ,\"//result/doc[3]/int[@name='id'][.='b']\"\n        ,\"//result/doc[4]/int[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26e57b78fa49902c0724bf360576d466eed30074","date":1246386798,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='b']\"\n            ,\"//result/doc[3]/int[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/int[@name='id'][.='x']\"\n            ,\"//result/doc[2]/int[@name='id'][.='y']\"\n            ,\"//result/doc[3]/int[@name='id'][.='z']\"\n            ,\"//result/doc[4]/int[@name='id'][.='a']\"\n            ,\"//result/doc[5]/int[@name='id'][.='b']\"\n            ,\"//result/doc[6]/int[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='x']\"\n            ,\"//result/doc[3]/int[@name='id'][.='b']\"\n            ,\"//result/doc[4]/int[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/int[@name='id'][.='a']\"\n        ,\"//result/doc[3]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[1]/int[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        ,\"//result/doc[4]/int[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='x']\"\n        ,\"//result/doc[3]/int[@name='id'][.='b']\"\n        ,\"//result/doc[4]/int[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='b']\"\n            ,\"//result/doc[3]/int[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/int[@name='id'][.='x']\"\n            ,\"//result/doc[2]/int[@name='id'][.='y']\"\n            ,\"//result/doc[3]/int[@name='id'][.='z']\"\n            ,\"//result/doc[4]/int[@name='id'][.='a']\"\n            ,\"//result/doc[5]/int[@name='id'][.='b']\"\n            ,\"//result/doc[6]/int[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='x']\"\n            ,\"//result/doc[3]/int[@name='id'][.='b']\"\n            ,\"//result/doc[4]/int[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All six should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/int[@name='id'][.='a']\"\n        ,\"//result/doc[3]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[1]/int[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        ,\"//result/doc[4]/int[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='x']\"\n        ,\"//result/doc[3]/int[@name='id'][.='b']\"\n        ,\"//result/doc[4]/int[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e76fb8ce8df0ccc7491ca1fb17abcea98d76310","date":1249514488,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='b']\"\n            ,\"//result/doc[3]/int[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/int[@name='id'][.='x']\"\n            ,\"//result/doc[2]/int[@name='id'][.='y']\"\n            ,\"//result/doc[3]/int[@name='id'][.='z']\"\n            ,\"//result/doc[4]/int[@name='id'][.='a']\"\n            ,\"//result/doc[5]/int[@name='id'][.='b']\"\n            ,\"//result/doc[6]/int[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/int[@name='id'][.='a']\"\n            ,\"//result/doc[2]/int[@name='id'][.='x']\"\n            ,\"//result/doc[3]/int[@name='id'][.='b']\"\n            ,\"//result/doc[4]/int[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/int[@name='id'][.='a']\"\n        ,\"//result/doc[3]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[1]/int[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        ,\"//result/doc[4]/int[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/int[@name='id'][.='a']\"\n        ,\"//result/doc[2]/int[@name='id'][.='x']\"\n        ,\"//result/doc[3]/int[@name='id'][.='b']\"\n        ,\"//result/doc[4]/int[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/int[@name='id'][.='x']\"\n        ,\"//result/doc[2]/int[@name='id'][.='b']\"\n        ,\"//result/doc[3]/int[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","pathOld":"src/test/org/apache/solr/handler/component/QueryElevationComponentTest#testSorting().mjava","sourceNew":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","sourceOld":"  public void testSorting() throws IOException\n  {\n    SolrCore core = h.getCore();\n    \n    assertU(adoc(\"id\", \"a\", \"title\", \"ipod\",           \"str_s\", \"a\" ));\n    assertU(adoc(\"id\", \"b\", \"title\", \"ipod ipod\",      \"str_s\", \"b\" ));\n    assertU(adoc(\"id\", \"c\", \"title\", \"ipod ipod ipod\", \"str_s\", \"c\" ));\n\n    assertU(adoc(\"id\", \"x\", \"title\", \"boosted\",                 \"str_s\", \"x\" ));\n    assertU(adoc(\"id\", \"y\", \"title\", \"boosted boosted\",         \"str_s\", \"y\" ));\n    assertU(adoc(\"id\", \"z\", \"title\", \"boosted boosted boosted\", \"str_s\", \"z\" ));\n    assertU(commit());\n    \n    String query = \"title:ipod\";\n    \n    Map<String,String> args = new HashMap<String, String>();\n    args.put( CommonParams.Q, query );\n    args.put( CommonParams.QT, \"/elevate\" );\n    args.put( CommonParams.FL, \"id,score\" );\n    args.put( \"indent\", \"true\" );\n    //args.put( CommonParams.FL, \"id,title,score\" );\n    SolrQueryRequest req = new LocalSolrQueryRequest( core, new MapSolrParams( args) );\n    \n    assertQ(\"Make sure standard sort works as expected\", req\n            ,\"//*[@numFound='3']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='b']\"\n            ,\"//result/doc[3]/str[@name='id'][.='c']\"\n            );\n    \n    // Explicitly set what gets boosted\n    IndexReader reader = core.getSearcher().get().getReader();\n    QueryElevationComponent booster = (QueryElevationComponent)core.getSearchComponent( \"elevate\" );\n    booster.elevationCache.clear();\n    booster.setTopQueryResults( reader, query, new String[] { \"x\", \"y\", \"z\" }, null );\n\n    assertQ(\"All six should make it\", req\n            ,\"//*[@numFound='6']\"\n            ,\"//result/doc[1]/str[@name='id'][.='x']\"\n            ,\"//result/doc[2]/str[@name='id'][.='y']\"\n            ,\"//result/doc[3]/str[@name='id'][.='z']\"\n            ,\"//result/doc[4]/str[@name='id'][.='a']\"\n            ,\"//result/doc[5]/str[@name='id'][.='b']\"\n            ,\"//result/doc[6]/str[@name='id'][.='c']\"\n            );\n    \n    booster.elevationCache.clear();\n    \n    // now switch the order:\n    booster.setTopQueryResults( reader, query, new String[] { \"a\", \"x\" }, null );\n    assertQ(\"All four should make it\", req\n            ,\"//*[@numFound='4']\"\n            ,\"//result/doc[1]/str[@name='id'][.='a']\"\n            ,\"//result/doc[2]/str[@name='id'][.='x']\"\n            ,\"//result/doc[3]/str[@name='id'][.='b']\"\n            ,\"//result/doc[4]/str[@name='id'][.='c']\"\n            );\n    \n    // Test reverse sort\n    args.put( CommonParams.SORT, \"score asc\" );\n    assertQ(\"All four should make it\", req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[4]/str[@name='id'][.='a']\"\n        ,\"//result/doc[3]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[1]/str[@name='id'][.='c']\"\n        );\n    \n    // Try normal sort by 'id'\n    // default 'forceBoost' shoudl be false\n    assertEquals( false, booster.forceElevation );\n    args.put( CommonParams.SORT, \"str_s asc\" );\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        ,\"//result/doc[4]/str[@name='id'][.='x']\"\n        );\n    \n    booster.forceElevation = true;\n    assertQ( null, req\n        ,\"//*[@numFound='4']\"\n        ,\"//result/doc[1]/str[@name='id'][.='a']\"\n        ,\"//result/doc[2]/str[@name='id'][.='x']\"\n        ,\"//result/doc[3]/str[@name='id'][.='b']\"\n        ,\"//result/doc[4]/str[@name='id'][.='c']\"\n        );\n    \n    // Test exclusion\n    booster.elevationCache.clear();\n    args.remove( CommonParams.SORT );\n    booster.setTopQueryResults( reader, query, new String[] { \"x\" },  new String[] { \"a\" } );\n    assertQ( null, req\n        ,\"//*[@numFound='3']\"\n        ,\"//result/doc[1]/str[@name='id'][.='x']\"\n        ,\"//result/doc[2]/str[@name='id'][.='b']\"\n        ,\"//result/doc[3]/str[@name='id'][.='c']\"\n        );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26e57b78fa49902c0724bf360576d466eed30074":["5391288921372c32bf6096df320497ad2d05757f"],"5391288921372c32bf6096df320497ad2d05757f":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"0e76fb8ce8df0ccc7491ca1fb17abcea98d76310":["26e57b78fa49902c0724bf360576d466eed30074"],"ad94625fb8d088209f46650c8097196fec67f00c":["0e76fb8ce8df0ccc7491ca1fb17abcea98d76310"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"26e57b78fa49902c0724bf360576d466eed30074":["0e76fb8ce8df0ccc7491ca1fb17abcea98d76310"],"5391288921372c32bf6096df320497ad2d05757f":["26e57b78fa49902c0724bf360576d466eed30074"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["5391288921372c32bf6096df320497ad2d05757f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e76fb8ce8df0ccc7491ca1fb17abcea98d76310":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}