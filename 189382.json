{"path":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","commits":[{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/LibListener#updateRuntimeLibs(Map[String,Object]).mjava","sourceNew":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean needsReload[] = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoader(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","sourceOld":"  private boolean updateRuntimeLibs(Map<String, Object> properties) {\n    Map m = (Map) properties.getOrDefault(RuntimeLib.TYPE, Collections.emptyMap());\n    if (runtimeLibs.isEmpty() && m.isEmpty()) return false;\n    boolean needsReload[] = new boolean[1];\n    if (m.size() == runtimeLibs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          if (!runtimeLibs.containsKey(k)) needsReload[0] = true;\n          RuntimeLib rtl = runtimeLibs.get(k);\n          if (rtl == null || !Objects.equals(rtl.getSha512(), ((Map) v).get(SHA512))) {\n            needsReload[0] = true;\n          }\n        }\n\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoader(m);\n    }\n    return needsReload[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c","date":1566455239,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","sourceNew":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean[] needsReload = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoader(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","sourceOld":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean needsReload[] = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoader(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","sourceNew":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean[] needsReload = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoaders(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","sourceOld":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean[] needsReload = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoader(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","sourceNew":null,"sourceOld":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean[] needsReload = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoaders(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/PackageManager#updatePackages(Map[String,Object],int).mjava","sourceNew":null,"sourceOld":"  private boolean updatePackages(Map<String, Object> properties, int ver) {\n    Map m = (Map) properties.getOrDefault(PACKAGE, Collections.emptyMap());\n    if (pkgs.isEmpty() && m.isEmpty()) return false;\n    boolean[] needsReload = new boolean[1];\n    if (m.size() == pkgs.size()) {\n      m.forEach((k, v) -> {\n        if (v instanceof Map) {\n          Package pkg = pkgs.get(k);\n          if (pkg == null || pkg.isModified((Map) v)) {\n            needsReload[0] = true;\n          }\n        }\n      });\n    } else {\n      needsReload[0] = true;\n    }\n    if (needsReload[0]) {\n      createNewClassLoaders(m, ver);\n    }\n    return needsReload[0];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"6e360143e9d6f677ecfe06b0c5204ee70bdb2a3c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}