{"path":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testRandomTopDocs().mjava","commits":[{"id":"f8dd25829321d66cd54ea7d40a4130e0d2a29bec","date":1562680889,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testRandomTopDocs().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numTerms = random().nextInt(1 << random().nextInt(5));\n      String text = IntStream.range(0, numTerms)\n          .mapToObj(index -> random().nextBoolean() ? \"a\" : random().nextBoolean() ? \"b\" : \"c\")\n          .collect(Collectors.joining(\" \"));\n      doc.add(new TextField(\"foo\", text, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (String firstTerm : new String[] {\"a\", \"b\", \"c\"}) {\n      for (String secondTerm : new String[] {\"a\", \"b\", \"c\"}) {\n        Query query = new PhraseQuery(\"foo\", new BytesRef(firstTerm), new BytesRef(secondTerm));\n\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n\n        searcher.search(query, collector1);\n        searcher.search(query, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n        Query filteredQuery = new BooleanQuery.Builder()\n            .add(query, Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"b\")), Occur.FILTER)\n            .build();\n\n        collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n        searcher.search(filteredQuery, collector1);\n        searcher.search(filteredQuery, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c6c784f777a2cc8fa014507ea129526822714d","date":1579733373,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testRandomTopDocs().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestPhraseQuery#testRandomTopDocs().mjava","sourceNew":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = TEST_NIGHTLY ? atLeast(128 * 8 * 8 * 3) : atLeast(100); // at night, make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numTerms = random().nextInt(1 << random().nextInt(5));\n      String text = IntStream.range(0, numTerms)\n          .mapToObj(index -> random().nextBoolean() ? \"a\" : random().nextBoolean() ? \"b\" : \"c\")\n          .collect(Collectors.joining(\" \"));\n      doc.add(new TextField(\"foo\", text, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (String firstTerm : new String[] {\"a\", \"b\", \"c\"}) {\n      for (String secondTerm : new String[] {\"a\", \"b\", \"c\"}) {\n        Query query = new PhraseQuery(\"foo\", new BytesRef(firstTerm), new BytesRef(secondTerm));\n\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n\n        searcher.search(query, collector1);\n        searcher.search(query, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n        Query filteredQuery = new BooleanQuery.Builder()\n            .add(query, Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"b\")), Occur.FILTER)\n            .build();\n\n        collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n        searcher.search(filteredQuery, collector1);\n        searcher.search(filteredQuery, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testRandomTopDocs() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter w = new IndexWriter(dir, newIndexWriterConfig());\n    int numDocs = atLeast(128 * 8 * 8 * 3); // make sure some terms have skip data\n    for (int i = 0; i < numDocs; ++i) {\n      Document doc = new Document();\n      int numTerms = random().nextInt(1 << random().nextInt(5));\n      String text = IntStream.range(0, numTerms)\n          .mapToObj(index -> random().nextBoolean() ? \"a\" : random().nextBoolean() ? \"b\" : \"c\")\n          .collect(Collectors.joining(\" \"));\n      doc.add(new TextField(\"foo\", text, Store.NO));\n      w.addDocument(doc);\n    }\n    IndexReader reader = DirectoryReader.open(w);\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n\n    for (String firstTerm : new String[] {\"a\", \"b\", \"c\"}) {\n      for (String secondTerm : new String[] {\"a\", \"b\", \"c\"}) {\n        Query query = new PhraseQuery(\"foo\", new BytesRef(firstTerm), new BytesRef(secondTerm));\n\n        TopScoreDocCollector collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        TopScoreDocCollector collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n\n        searcher.search(query, collector1);\n        searcher.search(query, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n\n        Query filteredQuery = new BooleanQuery.Builder()\n            .add(query, Occur.MUST)\n            .add(new TermQuery(new Term(\"foo\", \"b\")), Occur.FILTER)\n            .build();\n\n        collector1 = TopScoreDocCollector.create(10, null, Integer.MAX_VALUE); // COMPLETE\n        collector2 = TopScoreDocCollector.create(10, null, 10); // TOP_SCORES\n        searcher.search(filteredQuery, collector1);\n        searcher.search(filteredQuery, collector2);\n        CheckHits.checkEqual(query, collector1.topDocs().scoreDocs, collector2.topDocs().scoreDocs);\n      }\n    }\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"57c6c784f777a2cc8fa014507ea129526822714d":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c6c784f777a2cc8fa014507ea129526822714d"]},"commit2Childs":{"57c6c784f777a2cc8fa014507ea129526822714d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f8dd25829321d66cd54ea7d40a4130e0d2a29bec":["57c6c784f777a2cc8fa014507ea129526822714d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8dd25829321d66cd54ea7d40a4130e0d2a29bec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}