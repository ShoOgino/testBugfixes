{"path":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#loadDfsUsed().mjava","commits":[{"id":"44ca189138a5b6e1989d12ab992fab60e235ddc7","date":1549051496,"type":0,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#loadDfsUsed().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Read in the cached DU value and return it if it is less than\n   * cachedDfsUsedCheckTime which is set by\n   * dfs.datanode.cached-dfsused.check.interval.ms parameter. Slight imprecision\n   * of dfsUsed is not critical and skipping DU can significantly shorten the\n   * startup time. If the cached value is not available or too old, -1 is\n   * returned.\n   */\n  long loadDfsUsed() {\n    long cachedDfsUsed;\n    long mtime;\n    Scanner sc;\n\n    try {\n      sc = new Scanner(new File(currentDir, DU_CACHE_FILE), \"UTF-8\");\n    } catch (FileNotFoundException fnfe) {\n      return -1;\n    }\n\n    try {\n      // Get the recorded dfsUsed from the file.\n      if (sc.hasNextLong()) {\n        cachedDfsUsed = sc.nextLong();\n      } else {\n        return -1;\n      }\n      // Get the recorded mtime from the file.\n      if (sc.hasNextLong()) {\n        mtime = sc.nextLong();\n      } else {\n        return -1;\n      }\n\n      // Return the cached value if mtime is okay.\n      if (mtime > 0 && (timer.now() - mtime < cachedDfsUsedCheckTime)) {\n        FsDatasetImpl.LOG.info(\"Cached dfsUsed found for \" + currentDir + \": \" +\n            cachedDfsUsed);\n        return cachedDfsUsed;\n      }\n      return -1;\n    } finally {\n      sc.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bdf107cf16be0f22504ae184fed81596665a244","date":1576012524,"type":4,"author":"Kevin Risden","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#loadDfsUsed().mjava","sourceNew":null,"sourceOld":"  /**\n   * Read in the cached DU value and return it if it is less than\n   * cachedDfsUsedCheckTime which is set by\n   * dfs.datanode.cached-dfsused.check.interval.ms parameter. Slight imprecision\n   * of dfsUsed is not critical and skipping DU can significantly shorten the\n   * startup time. If the cached value is not available or too old, -1 is\n   * returned.\n   */\n  long loadDfsUsed() {\n    long cachedDfsUsed;\n    long mtime;\n    Scanner sc;\n\n    try {\n      sc = new Scanner(new File(currentDir, DU_CACHE_FILE), \"UTF-8\");\n    } catch (FileNotFoundException fnfe) {\n      return -1;\n    }\n\n    try {\n      // Get the recorded dfsUsed from the file.\n      if (sc.hasNextLong()) {\n        cachedDfsUsed = sc.nextLong();\n      } else {\n        return -1;\n      }\n      // Get the recorded mtime from the file.\n      if (sc.hasNextLong()) {\n        mtime = sc.nextLong();\n      } else {\n        return -1;\n      }\n\n      // Return the cached value if mtime is okay.\n      if (mtime > 0 && (timer.now() - mtime < cachedDfsUsedCheckTime)) {\n        FsDatasetImpl.LOG.info(\"Cached dfsUsed found for \" + currentDir + \": \" +\n            cachedDfsUsed);\n        return cachedDfsUsed;\n      }\n      return -1;\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/BlockPoolSlice#loadDfsUsed().mjava","sourceNew":null,"sourceOld":"  /**\n   * Read in the cached DU value and return it if it is less than\n   * cachedDfsUsedCheckTime which is set by\n   * dfs.datanode.cached-dfsused.check.interval.ms parameter. Slight imprecision\n   * of dfsUsed is not critical and skipping DU can significantly shorten the\n   * startup time. If the cached value is not available or too old, -1 is\n   * returned.\n   */\n  long loadDfsUsed() {\n    long cachedDfsUsed;\n    long mtime;\n    Scanner sc;\n\n    try {\n      sc = new Scanner(new File(currentDir, DU_CACHE_FILE), \"UTF-8\");\n    } catch (FileNotFoundException fnfe) {\n      return -1;\n    }\n\n    try {\n      // Get the recorded dfsUsed from the file.\n      if (sc.hasNextLong()) {\n        cachedDfsUsed = sc.nextLong();\n      } else {\n        return -1;\n      }\n      // Get the recorded mtime from the file.\n      if (sc.hasNextLong()) {\n        mtime = sc.nextLong();\n      } else {\n        return -1;\n      }\n\n      // Return the cached value if mtime is okay.\n      if (mtime > 0 && (timer.now() - mtime < cachedDfsUsedCheckTime)) {\n        FsDatasetImpl.LOG.info(\"Cached dfsUsed found for \" + currentDir + \": \" +\n            cachedDfsUsed);\n        return cachedDfsUsed;\n      }\n      return -1;\n    } finally {\n      sc.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["44ca189138a5b6e1989d12ab992fab60e235ddc7","6bdf107cf16be0f22504ae184fed81596665a244"],"6bdf107cf16be0f22504ae184fed81596665a244":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6bdf107cf16be0f22504ae184fed81596665a244"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"6bdf107cf16be0f22504ae184fed81596665a244":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44ca189138a5b6e1989d12ab992fab60e235ddc7"],"44ca189138a5b6e1989d12ab992fab60e235ddc7":["a229cb50768e988c50a2106bdae3a92154f428bf","6bdf107cf16be0f22504ae184fed81596665a244"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}