{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","commits":[{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n\n    if (collection == null)\n      collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n    String collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n\n    if (collection == null)\n      collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e89ada54965765dacf21b98e3a950f5308f050e","date":1501069221,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    if (collection == null) {\n      collection = request.getCollection();\n      if (collection == null) collection = defaultCollection;\n    }\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n\n    if (collection == null)\n      collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    if (collection == null) {\n      collection = request.getCollection();\n      if (collection == null) collection = defaultCollection;\n    }\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n\n    if (collection == null)\n      collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","date":1502192746,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    if (collection == null) {\n      collection = request.getCollection();\n      if (collection == null) collection = defaultCollection;\n    }\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    SolrParams reqParams = request.getParams();\n\n    if (collection == null)\n      collection = (reqParams != null) ? reqParams.get(\"collection\", getDefaultCollection()) : getDefaultCollection();\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b824daa61db3f30b91a22213d6c04e1fa2e2b06","date":1508385744,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    // the collection parameter of the request overrides that of the parameter to this method\n    String requestCollection = request.getCollection();\n    if (requestCollection != null) {\n      collection = requestCollection;\n    } else if (collection == null) {\n      collection = defaultCollection;\n    }\n    List<String> inputCollections =\n        collection == null ? Collections.emptyList() : StrUtils.splitSmart(collection, \",\", true);\n    return requestWithRetryOnStaleState(request, 0, inputCollections);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    if (collection == null) {\n      collection = request.getCollection();\n      if (collection == null) collection = defaultCollection;\n    }\n    return requestWithRetryOnStaleState(request, 0, collection);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0544142c22eb88b6d8b3817f2e1190156aa4f9af","date":1551692505,"type":5,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/BaseCloudSolrClient#request(SolrRequest,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/CloudSolrClient#request(SolrRequest,String).mjava","sourceNew":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    // the collection parameter of the request overrides that of the parameter to this method\n    String requestCollection = request.getCollection();\n    if (requestCollection != null) {\n      collection = requestCollection;\n    } else if (collection == null) {\n      collection = defaultCollection;\n    }\n    List<String> inputCollections =\n        collection == null ? Collections.emptyList() : StrUtils.splitSmart(collection, \",\", true);\n    return requestWithRetryOnStaleState(request, 0, inputCollections);\n  }\n\n","sourceOld":"  @Override\n  public NamedList<Object> request(SolrRequest request, String collection) throws SolrServerException, IOException {\n    // the collection parameter of the request overrides that of the parameter to this method\n    String requestCollection = request.getCollection();\n    if (requestCollection != null) {\n      collection = requestCollection;\n    } else if (collection == null) {\n      collection = defaultCollection;\n    }\n    List<String> inputCollections =\n        collection == null ? Collections.emptyList() : StrUtils.splitSmart(collection, \",\", true);\n    return requestWithRetryOnStaleState(request, 0, inputCollections);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","6e89ada54965765dacf21b98e3a950f5308f050e"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","a52341299179de5479672f7cf518bf4b173f34b3"],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06"],"6e89ada54965765dacf21b98e3a950f5308f050e":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"6b824daa61db3f30b91a22213d6c04e1fa2e2b06":["0544142c22eb88b6d8b3817f2e1190156aa4f9af"],"a52341299179de5479672f7cf518bf4b173f34b3":["6b824daa61db3f30b91a22213d6c04e1fa2e2b06","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac"],"7a23cf16c8fa265dc0a564adcabb55e3f054e0ac":[],"0544142c22eb88b6d8b3817f2e1190156aa4f9af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6e89ada54965765dacf21b98e3a950f5308f050e":["a52341299179de5479672f7cf518bf4b173f34b3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a52341299179de5479672f7cf518bf4b173f34b3","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","6e89ada54965765dacf21b98e3a950f5308f050e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7a23cf16c8fa265dc0a564adcabb55e3f054e0ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}