{"path":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","commits":[{"id":"98bc22650ab0fe51f9c00513397bfa42a64fc663","date":1161986633,"type":1,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpans#initList(boolean).mjava","sourceNew":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = (SpansCell)ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","sourceOld":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = (SpansCell)ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","sourceNew":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","sourceOld":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = (SpansCell)ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#initList(boolean).mjava","sourceNew":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","sourceOld":"  private void initList(boolean next) throws IOException {\n    for (int i = 0; more && i < ordered.size(); i++) {\n      SpansCell cell = ordered.get(i);\n      if (next)\n        more = cell.next();                       // move to first entry\n      if (more) {\n        addToList(cell);                          // add to list\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ef82ff03e4016c705811b2658e81471a645c0e49":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ef82ff03e4016c705811b2658e81471a645c0e49"]},"commit2Childs":{"98bc22650ab0fe51f9c00513397bfa42a64fc663":["ef82ff03e4016c705811b2658e81471a645c0e49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98bc22650ab0fe51f9c00513397bfa42a64fc663"],"ef82ff03e4016c705811b2658e81471a645c0e49":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}