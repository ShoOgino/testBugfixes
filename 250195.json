{"path":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","commits":[{"id":"11f21773085db637873ba6e0bcd4265b2b4c7730","date":1534756753,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44dd40f6c2c1465aebf4677bab10f696c7ea18d8","date":1539566013,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  @Test\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8d35c84fdef07284c122012ca4000d3b7285a66e","date":1545962630,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","sourceNew":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1","date":1598647393,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/cdcr/CdcrWithNodesRestartsTest#testReplicationAfterLeaderChange().mjava","sourceNew":null,"sourceOld":"  @Test\n  // commented out on: 24-Dec-2018   @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 14-Oct-2018\n  public void testReplicationAfterLeaderChange() throws Exception {\n    createCollections();\n    CdcrTestsUtil.cdcrStart(sourceSolrClient);\n    Thread.sleep(2000);\n\n    // index 100 docs\n    for (int i = 0; i < 100; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    QueryResponse response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 100, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 100, CdcrTestsUtil.waitForClusterToSync(100, targetSolrClient));\n    CdcrTestsUtil.assertShardInSync(\"cdcr-source\", \"shard1\", sourceSolrClient);\n\n    // restart one of the source cluster nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 0);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 200 until now\n    for (int i = 100; i < 200; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 200, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 200, CdcrTestsUtil.waitForClusterToSync(200, targetSolrClient));\n\n    // restart the other source cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-source\", 1);\n    sourceSolrClient = source.getSolrClient();\n    sourceSolrClient.setDefaultCollection(\"cdcr-source\");\n\n    // add `100 more docs, 300 until now\n    for (int i = 200; i < 300; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 300, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 300, CdcrTestsUtil.waitForClusterToSync(300, targetSolrClient));\n\n    // add a replica to 'target' collection\n    CollectionAdminRequest.addReplicaToShard(TARGET_COLLECTION, \"shard1\").\n        setNode(CdcrTestsUtil.getNonLeaderNode(target, TARGET_COLLECTION)).process(targetSolrClient);\n    Thread.sleep(2000);\n\n    // restart one of the target nodes\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 0);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 400 until now\n    for (int i = 300; i < 400; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 400, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 400, CdcrTestsUtil.waitForClusterToSync(400, targetSolrClient));\n\n    // restart the other target cluster node\n    CdcrTestsUtil.restartClusterNode(source, \"cdcr-target\", 1);\n    targetSolrClient = target.getSolrClient();\n    targetSolrClient.setDefaultCollection(\"cdcr-target\");\n\n    // add `100 more docs, 500 until now\n    for (int i = 400; i < 500; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", \"doc_\" + i);\n      CdcrTestsUtil.index(source, \"cdcr-source\", doc);\n      sourceSolrClient.commit();\n    }\n    Thread.sleep(2000);\n\n    // verify cdcr has replicated docs\n    response = sourceSolrClient.query(new SolrQuery(ALL_Q));\n    assertEquals(\"source docs mismatch\", 500, response.getResults().getNumFound());\n    assertEquals(\"target docs mismatch\", 500, CdcrTestsUtil.waitForClusterToSync(500, targetSolrClient));\n\n    CdcrTestsUtil.cdcrStop(sourceSolrClient);\n    CdcrTestsUtil.cdcrStop(targetSolrClient);\n\n    deleteCollections();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"44dd40f6c2c1465aebf4677bab10f696c7ea18d8":["8d35c84fdef07284c122012ca4000d3b7285a66e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11f21773085db637873ba6e0bcd4265b2b4c7730"],"23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"11f21773085db637873ba6e0bcd4265b2b4c7730":["44dd40f6c2c1465aebf4677bab10f696c7ea18d8"],"8d35c84fdef07284c122012ca4000d3b7285a66e":["23ec6d2969d61cadbfd0a5452e9be1f9999e8aa1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}