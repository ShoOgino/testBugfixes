{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#passingOfCustomFields().mjava","commits":[{"id":"74acabcbc6eae18c349c56bd385f9e42433afca3","date":1323446529,"type":0,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#passingOfCustomFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void passingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","date":1323540308,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#passingOfCustomFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void passingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9fddef147e9702c85a51239935df11e5338bfbf","date":1337590651,"type":5,"author":"Stanisław Osiński","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testPassingOfCustomFields().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#passingOfCustomFields().mjava","sourceNew":"  @Test\n  public void testPassingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","sourceOld":"  @Test\n  public void passingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testPassingOfCustomFields().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#passingOfCustomFields().mjava","sourceNew":"  @Test\n  public void testPassingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","sourceOld":"  @Test\n  public void passingOfCustomFields() throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"intfield_i:intfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"floatfield_f:floatfield\");\n    params.add(CarrotParams.CUSTOM_FIELD_NAME, \"heading:multi\");\n    \n    // Let the echo mock clustering algorithm know which custom field to echo\n    params.add(\"custom-fields\", \"intfield,floatfield,multi\");\n    \n    final List<String> labels = getLabels(checkEngine(\n        getClusteringEngine(\"echo\"), 1, 1, new TermQuery(new Term(\"url\",\n            \"custom_fields\")), params).get(0));\n    assertEquals(5, labels.size());\n    assertEquals(\"Integer field\", \"10\", labels.get(2));\n    assertEquals(\"Float field\", \"10.5\", labels.get(3));\n    assertEquals(\"List field\", \"[first, second]\", labels.get(4));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"74acabcbc6eae18c349c56bd385f9e42433afca3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f9fddef147e9702c85a51239935df11e5338bfbf":["74acabcbc6eae18c349c56bd385f9e42433afca3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74acabcbc6eae18c349c56bd385f9e42433afca3"],"ef0d8a69209261514c5739c770bba706c2308450":["74acabcbc6eae18c349c56bd385f9e42433afca3","f9fddef147e9702c85a51239935df11e5338bfbf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f9fddef147e9702c85a51239935df11e5338bfbf"]},"commit2Childs":{"74acabcbc6eae18c349c56bd385f9e42433afca3":["f9fddef147e9702c85a51239935df11e5338bfbf","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef0d8a69209261514c5739c770bba706c2308450"],"f9fddef147e9702c85a51239935df11e5338bfbf":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["74acabcbc6eae18c349c56bd385f9e42433afca3","ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565"],"ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565":[],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ff99371bc1f34bf1a2ccdb754940ee5fe5cc2565","ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}