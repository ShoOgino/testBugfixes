{"path":"solr/core/src/test/org/apache/solr/backcompat/TestLuceneIndexBackCompat#setupCore(String).mjava","commits":[{"id":"741d5890398fb096a7d6c2c9de8d33ec7ef6647d","date":1506717187,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/backcompat/TestLuceneIndexBackCompat#setupCore(String).mjava","pathOld":"/dev/null","sourceNew":"  private void setupCore(String coreName) throws Exception {\n    if (h != null) {\n      h.close();\n    }\n    Path solrHome = createTempDir(coreName).toAbsolutePath();\n    Files.createDirectories(solrHome);\n    Path coreDir = solrHome.resolve(coreName);\n    Path confDir = coreDir.resolve(\"conf\");\n    Files.createDirectories(confDir);\n    Path dataDir = coreDir.resolve(\"data\");\n    Path indexDir = dataDir.resolve(\"index\");\n    Files.createDirectories(indexDir);\n\n    Files.copy(getFile(\"solr/solr.xml\").toPath(), solrHome.resolve(\"solr.xml\"));\n    FileUtils.copyDirectory(configset(\"backcompat\").toFile(), confDir.toFile());\n\n    try (Writer writer = new OutputStreamWriter(Files.newOutputStream(coreDir.resolve(\"core.properties\")), StandardCharsets.UTF_8)) {\n      Properties coreProps = new Properties();\n      coreProps.put(\"name\", coreName);\n      coreProps.store(writer, null);\n    }\n\n    InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"index.\" + coreName + \".zip\");\n    assertNotNull(\"Index name \" + coreName + \" not found\", resource);\n    TestUtil.unzip(resource, indexDir);\n\n    configString = \"solrconfig.xml\";\n    schemaString = \"schema.xml\";\n    testSolrHome = solrHome;\n    System.setProperty(\"solr.solr.home\", solrHome.toString());\n    ignoreException(\"ignore_exception\");\n    solrConfig = TestHarness.createConfig(testSolrHome, coreName, getSolrConfigFile());\n    h = new TestHarness(coreName, dataDir.toString(), solrConfig, getSchemaFile());\n    lrf = h.getRequestFactory(\"\",0,20, CommonParams.VERSION,\"2.2\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6240b74b884c5587f2a4062dd27d6c32bf228889","date":1507037235,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/backcompat/TestLuceneIndexBackCompat#setupCore(String).mjava","pathOld":"/dev/null","sourceNew":"  private void setupCore(String coreName) throws Exception {\n    if (h != null) {\n      h.close();\n    }\n    Path solrHome = createTempDir(coreName).toAbsolutePath();\n    Files.createDirectories(solrHome);\n    Path coreDir = solrHome.resolve(coreName);\n    Path confDir = coreDir.resolve(\"conf\");\n    Files.createDirectories(confDir);\n    Path dataDir = coreDir.resolve(\"data\");\n    Path indexDir = dataDir.resolve(\"index\");\n    Files.createDirectories(indexDir);\n\n    Files.copy(getFile(\"solr/solr.xml\").toPath(), solrHome.resolve(\"solr.xml\"));\n    FileUtils.copyDirectory(configset(\"backcompat\").toFile(), confDir.toFile());\n\n    try (Writer writer = new OutputStreamWriter(Files.newOutputStream(coreDir.resolve(\"core.properties\")), StandardCharsets.UTF_8)) {\n      Properties coreProps = new Properties();\n      coreProps.put(\"name\", coreName);\n      coreProps.store(writer, null);\n    }\n\n    InputStream resource = TestBackwardsCompatibility.class.getResourceAsStream(\"index.\" + coreName + \".zip\");\n    assertNotNull(\"Index name \" + coreName + \" not found\", resource);\n    TestUtil.unzip(resource, indexDir);\n\n    configString = \"solrconfig.xml\";\n    schemaString = \"schema.xml\";\n    testSolrHome = solrHome;\n    System.setProperty(\"solr.solr.home\", solrHome.toString());\n    ignoreException(\"ignore_exception\");\n    solrConfig = TestHarness.createConfig(testSolrHome, coreName, getSolrConfigFile());\n    h = new TestHarness(coreName, dataDir.toString(), solrConfig, getSchemaFile());\n    lrf = h.getRequestFactory(\"\",0,20, CommonParams.VERSION,\"2.2\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6240b74b884c5587f2a4062dd27d6c32bf228889":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","741d5890398fb096a7d6c2c9de8d33ec7ef6647d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"741d5890398fb096a7d6c2c9de8d33ec7ef6647d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["741d5890398fb096a7d6c2c9de8d33ec7ef6647d"]},"commit2Childs":{"6240b74b884c5587f2a4062dd27d6c32bf228889":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6240b74b884c5587f2a4062dd27d6c32bf228889","741d5890398fb096a7d6c2c9de8d33ec7ef6647d"],"741d5890398fb096a7d6c2c9de8d33ec7ef6647d":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6240b74b884c5587f2a4062dd27d6c32bf228889","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}