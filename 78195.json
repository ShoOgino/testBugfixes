{"path":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","date":1308670974,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":["6fb5dc223475059e18daa29ecbc9ee827971f72c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n      if (terms.size() == 0)\n          field = term.field();\n      else if (term.field() != field)\n          throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n\n      terms.add(term);\n      positions.add(Integer.valueOf(position));\n      if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseQuery#add(Term,int).mjava","sourceNew":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","sourceOld":"  /**\n   * Adds a term to the end of the query phrase.\n   * The relative position of the term within the phrase is specified explicitly.\n   * This allows e.g. phrases with more than one term at the same position\n   * or phrases with gaps (e.g. in connection with stopwords).\n   * \n   * @param term\n   * @param position\n   */\n  public void add(Term term, int position) {\n    if (terms.size() == 0) {\n      field = term.field();\n    } else if (!term.field().equals(field)) {\n      throw new IllegalArgumentException(\"All phrase terms must be in the same field: \" + term);\n    }\n\n    terms.add(term);\n    positions.add(Integer.valueOf(position));\n    if (position > maxPosition) maxPosition = position;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["9454a6510e2db155fb01faa5c049b06ece95fab9","fafef7c83fe8e0b3ca9298d5d75d6b943dc28153"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fafef7c83fe8e0b3ca9298d5d75d6b943dc28153":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"2553b00f699380c64959ccb27991289aae87be2e":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fafef7c83fe8e0b3ca9298d5d75d6b943dc28153","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}