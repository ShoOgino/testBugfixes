{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","commits":[{"id":"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1","date":1383143016,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"/dev/null","sourceNew":"  private BinaryDocValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = bytes;\n        result.offset = address[docID];\n        result.length = address[docID+1] - result.offset;\n      };\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dac1db31006989ae24922811f00f909d30f1391d","date":1387560411,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":"  private BinaryDocValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes) + RamUsageEstimator.sizeOf(address));\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = bytes;\n        result.offset = address[docID];\n        result.length = address[docID+1] - result.offset;\n      };\n    };\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = bytes;\n        result.offset = address[docID];\n        result.length = address[docID+1] - result.offset;\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes) + RamUsageEstimator.sizeOf(address));\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","sourceOld":"  private BinaryDocValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes) + RamUsageEstimator.sizeOf(address));\n\n    return new BinaryDocValues() {\n      @Override\n      public void get(int docID, BytesRef result) {\n        result.bytes = bytes;\n        result.offset = address[docID];\n        result.length = address[docID+1] - result.offset;\n      };\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc8f80fee115148a0e4a0574560be06b494de821","date":1412069872,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","sourceOld":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes) + RamUsageEstimator.sizeOf(address));\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9bb9a29a5e71a90295f175df8919802993142c9a","date":1412517673,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","sourceOld":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    ramBytesUsed.addAndGet(RamUsageEstimator.sizeOf(bytes) + RamUsageEstimator.sizeOf(address));\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e1de7ca6cb231a67006f9dc4842722d219629fb","date":1453654393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","sourceOld":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f18fb78980c55a781fd9fdc505634171059b1d","date":1567674462,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectDocValuesProducer#loadBinary(BinaryEntry).mjava","sourceNew":null,"sourceOld":"  private BinaryRawValues loadBinary(BinaryEntry entry) throws IOException {\n    IndexInput data = this.data.clone();\n    data.seek(entry.offset);\n    final byte[] bytes = new byte[entry.numBytes];\n    data.readBytes(bytes, 0, entry.numBytes);\n    data.seek(entry.offset + entry.numBytes + entry.missingBytes);\n\n    final int[] address = new int[entry.count+1];\n    for(int i=0;i<entry.count;i++) {\n      address[i] = data.readInt();\n    }\n    address[entry.count] = data.readInt();\n\n    BinaryRawValues values = new BinaryRawValues();\n    values.bytes = bytes;\n    values.address = address;\n    return values;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f80fee115148a0e4a0574560be06b494de821":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["dac1db31006989ae24922811f00f909d30f1391d"],"9bb9a29a5e71a90295f175df8919802993142c9a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","bc8f80fee115148a0e4a0574560be06b494de821"],"74f18fb78980c55a781fd9fdc505634171059b1d":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dac1db31006989ae24922811f00f909d30f1391d":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["9bb9a29a5e71a90295f175df8919802993142c9a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["74f18fb78980c55a781fd9fdc505634171059b1d"]},"commit2Childs":{"e9eb6464bb91cd54f3151e5a0c18dde9311a60f1":["dac1db31006989ae24922811f00f909d30f1391d"],"bc8f80fee115148a0e4a0574560be06b494de821":["9bb9a29a5e71a90295f175df8919802993142c9a"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["bc8f80fee115148a0e4a0574560be06b494de821","9bb9a29a5e71a90295f175df8919802993142c9a"],"9bb9a29a5e71a90295f175df8919802993142c9a":["3e1de7ca6cb231a67006f9dc4842722d219629fb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9eb6464bb91cd54f3151e5a0c18dde9311a60f1"],"74f18fb78980c55a781fd9fdc505634171059b1d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dac1db31006989ae24922811f00f909d30f1391d":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"3e1de7ca6cb231a67006f9dc4842722d219629fb":["74f18fb78980c55a781fd9fdc505634171059b1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}