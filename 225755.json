{"path":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","commits":[{"id":"28427ef110c4c5bf5b4057731b83110bd1e13724","date":1276701452,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(TermPositions,int,int).mjava","sourceNew":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":"  public void checkSkipTo(TermPositions tp, int target, int maxCounter) throws IOException {\n    tp.skipTo(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.doc() + \" after skipTo target \" + target, target, tp.doc());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    byte[] b = new byte[1];\n    tp.getPayload(b, 0);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b[0], (byte) target, b[0]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","pathOld":"/dev/null","sourceNew":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b21422ff1d1d56499dec481f193b402e5e8def5b","date":1281472367,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","sourceNew":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","sourceNew":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestMultiLevelSkipList#checkSkipTo(DocsAndPositionsEnum,int,int).mjava","sourceNew":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","sourceOld":"  public void checkSkipTo(DocsAndPositionsEnum tp, int target, int maxCounter) throws IOException {\n    tp.advance(target);\n    if (maxCounter < counter) {\n      fail(\"Too many bytes read: \" + counter + \" vs \" + maxCounter);\n    }\n\n    assertEquals(\"Wrong document \" + tp.docID() + \" after skipTo target \" + target, target, tp.docID());\n    assertEquals(\"Frequency is not 1: \" + tp.freq(), 1,tp.freq());\n    tp.nextPosition();\n    BytesRef b = tp.getPayload();\n    assertEquals(1, b.length);\n    assertEquals(\"Wrong payload for the target \" + target + \": \" + b.bytes[b.offset], (byte) target, b.bytes[b.offset]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b21422ff1d1d56499dec481f193b402e5e8def5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"28427ef110c4c5bf5b4057731b83110bd1e13724":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","28427ef110c4c5bf5b4057731b83110bd1e13724"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"b21422ff1d1d56499dec481f193b402e5e8def5b":["28427ef110c4c5bf5b4057731b83110bd1e13724"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28427ef110c4c5bf5b4057731b83110bd1e13724","5f4e87790277826a2aea119328600dfb07761f32"],"28427ef110c4c5bf5b4057731b83110bd1e13724":["5f4e87790277826a2aea119328600dfb07761f32","b21422ff1d1d56499dec481f193b402e5e8def5b"],"5f4e87790277826a2aea119328600dfb07761f32":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"b21422ff1d1d56499dec481f193b402e5e8def5b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}