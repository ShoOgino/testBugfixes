{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toAutomaton());\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++) {\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toLightAutomaton());\n      }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++) {\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toAutomaton());\n      }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++) {\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toLightAutomaton());\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#testRegexps().mjava","sourceNew":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++) {\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toAutomaton());\n      }\n  }\n\n","sourceOld":"  /** test a bunch of random regular expressions */\n  public void testRegexps() throws Exception {\n      int num = atLeast(500);\n      for (int i = 0; i < num; i++)\n        assertAutomaton(new RegExp(AutomatonTestUtil.randomRegexp(random()), RegExp.NONE).toAutomaton());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5c84485629d80d203608e8975a1139de9933cc38":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c84485629d80d203608e8975a1139de9933cc38"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"5c84485629d80d203608e8975a1139de9933cc38":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}