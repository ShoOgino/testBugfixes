{"path":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#addPositions(PostingsEnum,DataOutput).mjava","commits":[{"id":"409da428f28953cf35fddd5c9ff5c7e4f5439863","date":1547556145,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#addPositions(PostingsEnum,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#addPositions(PostingsEnum,IndexOutput).mjava","sourceNew":"    private void addPositions(final PostingsEnum in, final DataOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position.\n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","sourceOld":"    private void addPositions(final PostingsEnum in, final IndexOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position.\n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/FreqProxTermsWriter.SortingPostingsEnum#addPositions(PostingsEnum,DataOutput).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortingLeafReader.SortingPostingsEnum#addPositions(PostingsEnum,DataOutput).mjava","sourceNew":"    private void addPositions(final PostingsEnum in, final DataOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position.\n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","sourceOld":"    private void addPositions(final PostingsEnum in, final DataOutput out) throws IOException {\n      int freq = in.freq();\n      out.writeVInt(freq);\n      int previousPosition = 0;\n      int previousEndOffset = 0;\n      for (int i = 0; i < freq; i++) {\n        final int pos = in.nextPosition();\n        final BytesRef payload = in.getPayload();\n        // The low-order bit of token is set only if there is a payload, the\n        // previous bits are the delta-encoded position.\n        final int token = (pos - previousPosition) << 1 | (payload == null ? 0 : 1);\n        out.writeVInt(token);\n        previousPosition = pos;\n        if (storeOffsets) { // don't encode offsets if they are not stored\n          final int startOffset = in.startOffset();\n          final int endOffset = in.endOffset();\n          out.writeVInt(startOffset - previousEndOffset);\n          out.writeVInt(endOffset - startOffset);\n          previousEndOffset = endOffset;\n        }\n        if (payload != null) {\n          out.writeVInt(payload.length);\n          out.writeBytes(payload.bytes, payload.offset, payload.length);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"]},"commit2Childs":{"409da428f28953cf35fddd5c9ff5c7e4f5439863":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["409da428f28953cf35fddd5c9ff5c7e4f5439863"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}