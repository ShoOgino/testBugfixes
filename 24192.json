{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","commits":[{"id":"86fff6c123a5a1d38adb665dd045347219798da9","date":1493623721,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/ClientDataProvider#ClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public ClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c51a42fa59b8539f35fd21ba7d88ee912af931d","date":1493700805,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName , shard, new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2369aca9d59355841bea58e4e175d90816d26148","date":1496039862,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName , shard, new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1852ff897aecd2f7c8376a02aedfd44104533f28","date":1498224361,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard,replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"/dev/null","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"455b47db0cfa51136fb68f261afcee3f59acb80e","date":1502982490,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard,replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(DistributedQueueFactory,CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(DistributedQueueFactory queueFactory, CloudSolrClient solrClient) {\n    this.queueFactory = queueFactory;\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(DistributedQueueFactory,CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(DistributedQueueFactory queueFactory, CloudSolrClient solrClient) {\n    this.queueFactory = queueFactory;\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    this.zkClient = zkStateReader.getZkClient();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), replica.getProperties()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    clusterState = zkStateReader.getClusterState();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), replica.getProperties()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.get(replica.getNodeName());\n        if (nodeData == null) data.put(replica.getNodeName(), nodeData = new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.get(collName);\n        if (collData == null) nodeData.put(collName, collData = new HashMap<>());\n        List<ReplicaInfo> replicas = collData.get(shard);\n        if (replicas == null) collData.put(shard, replicas = new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d8e6696ad139aa0f0bfe30fb4e933b38530f214","date":1507644775,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientNodeStateProvider#SolrClientNodeStateProvider(CloudSolrClient).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/SolrClientDataProvider#SolrClientDataProvider(CloudSolrClient).mjava","sourceNew":"  public SolrClientNodeStateProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    this.zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    if (clusterState == null) { // zkStateReader still initializing\n      return;\n    }\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getProperties()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","sourceOld":"  public SolrClientDataProvider(CloudSolrClient solrClient) {\n    this.solrClient = solrClient;\n    ZkStateReader zkStateReader = solrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    this.liveNodes = clusterState.getLiveNodes();\n    Map<String, ClusterState.CollectionRef> all = clusterState.getCollectionStates();\n    all.forEach((collName, ref) -> {\n      DocCollection coll = ref.get();\n      if (coll == null) return;\n      coll.forEachReplica((shard, replica) -> {\n        Map<String, Map<String, List<ReplicaInfo>>> nodeData = data.computeIfAbsent(replica.getNodeName(), k -> new HashMap<>());\n        Map<String, List<ReplicaInfo>> collData = nodeData.computeIfAbsent(collName, k -> new HashMap<>());\n        List<ReplicaInfo> replicas = collData.computeIfAbsent(shard, k -> new ArrayList<>());\n        replicas.add(new ReplicaInfo(replica.getName(), collName, shard, replica.getType(), new HashMap<>()));\n      });\n    });\n    if(log.isDebugEnabled()) INST = this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2369aca9d59355841bea58e4e175d90816d26148":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["560c18d71dad43d675158783c3840f8c80d6d39c"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["86fff6c123a5a1d38adb665dd045347219798da9"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["28288370235ed02234a64753cdbf0c6ec096304a","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["455b47db0cfa51136fb68f261afcee3f59acb80e"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"86fff6c123a5a1d38adb665dd045347219798da9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["2369aca9d59355841bea58e4e175d90816d26148"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["28288370235ed02234a64753cdbf0c6ec096304a","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"]},"commit2Childs":{"2369aca9d59355841bea58e4e175d90816d26148":["1852ff897aecd2f7c8376a02aedfd44104533f28"],"0c51a42fa59b8539f35fd21ba7d88ee912af931d":["2369aca9d59355841bea58e4e175d90816d26148"],"4d8e6696ad139aa0f0bfe30fb4e933b38530f214":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86fff6c123a5a1d38adb665dd045347219798da9":["0c51a42fa59b8539f35fd21ba7d88ee912af931d"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"455b47db0cfa51136fb68f261afcee3f59acb80e":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"28288370235ed02234a64753cdbf0c6ec096304a":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"1852ff897aecd2f7c8376a02aedfd44104533f28":["455b47db0cfa51136fb68f261afcee3f59acb80e"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86fff6c123a5a1d38adb665dd045347219798da9","28288370235ed02234a64753cdbf0c6ec096304a","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["4d8e6696ad139aa0f0bfe30fb4e933b38530f214"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}