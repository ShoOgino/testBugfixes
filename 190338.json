{"path":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // Ensure any running addIndexes finishes.  It's fine\n      // if a new one attempts to start because its merges\n      // will quickly see the stopMerges == true and abort.\n      acquireRead();\n      releaseRead();\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b3e06be49006ecac364d39d12b9c9f74882f9b9f","date":1304289513,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n      \n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.  \n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          message(\"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          message(\"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          message(\"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        message(\"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":["94b4f4bf8892e6006d66f4231d6d1873bbe56e73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"58c6bbc222f074c844e736e6fb23647e3db9cfe3","date":1322743940,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream != null)\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream != null)\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c5df35ab57c223ea11aec64b53bf611904f3dced","date":1323640545,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","date":1323720782,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\"))\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      infoStream.message(\"IW\", \"all running merges have aborted\");\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ce667c6d3400b22523701c549c0d35e26da8b46","date":1324405053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + merge.segString(directory));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + merge.segString(directory));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriter#finishMerges(boolean).mjava","sourceNew":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","sourceOld":"  private synchronized void finishMerges(boolean waitForMerges) throws IOException {\n    if (!waitForMerges) {\n\n      stopMerges = true;\n\n      // Abort all pending & running merges:\n      for (final MergePolicy.OneMerge merge : pendingMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort pending merge \" + segString(merge.segments));\n        }\n        merge.abort();\n        mergeFinish(merge);\n      }\n      pendingMerges.clear();\n\n      for (final MergePolicy.OneMerge merge : runningMerges) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now abort running merge \" + segString(merge.segments));\n        }\n        merge.abort();\n      }\n\n      // These merges periodically check whether they have\n      // been aborted, and stop if so.  We wait here to make\n      // sure they all stop.  It should not take very long\n      // because the merge threads periodically check if\n      // they are aborted.\n      while(runningMerges.size() > 0) {\n        if (infoStream.isEnabled(\"IW\")) {\n          infoStream.message(\"IW\", \"now wait for \" + runningMerges.size() + \" running merge to abort\");\n        }\n        doWait();\n      }\n\n      stopMerges = false;\n      notifyAll();\n\n      assert 0 == mergingSegments.size();\n\n      if (infoStream.isEnabled(\"IW\")) {\n        infoStream.message(\"IW\", \"all running merges have aborted\");\n      }\n\n    } else {\n      // waitForMerges() will ensure any running addIndexes finishes.\n      // It's fine if a new one attempts to start because from our\n      // caller above the call will see that we are in the\n      // process of closing, and will throw an\n      // AlreadyClosedException.\n      waitForMerges();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["06584e6e98d592b34e1329b384182f368d2025e8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9ce667c6d3400b22523701c549c0d35e26da8b46"],"06584e6e98d592b34e1329b384182f368d2025e8":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":["58c6bbc222f074c844e736e6fb23647e3db9cfe3","c5df35ab57c223ea11aec64b53bf611904f3dced"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ce667c6d3400b22523701c549c0d35e26da8b46":["c5df35ab57c223ea11aec64b53bf611904f3dced"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c5df35ab57c223ea11aec64b53bf611904f3dced":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","9ce667c6d3400b22523701c549c0d35e26da8b46"],"58c6bbc222f074c844e736e6fb23647e3db9cfe3":["c5df35ab57c223ea11aec64b53bf611904f3dced","93ccd971aca7fb61b7f1b946e44714cfc80bfc7c"],"06584e6e98d592b34e1329b384182f368d2025e8":["58c6bbc222f074c844e736e6fb23647e3db9cfe3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"93ccd971aca7fb61b7f1b946e44714cfc80bfc7c":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"b3e06be49006ecac364d39d12b9c9f74882f9b9f":["06584e6e98d592b34e1329b384182f368d2025e8","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["b3e06be49006ecac364d39d12b9c9f74882f9b9f"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b3e06be49006ecac364d39d12b9c9f74882f9b9f","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9ce667c6d3400b22523701c549c0d35e26da8b46":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["93ccd971aca7fb61b7f1b946e44714cfc80bfc7c","135621f3a0670a9394eb563224a3b76cc4dddc0f","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}