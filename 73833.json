{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","commits":[{"id":"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25","date":1499961129,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation).mjava","sourceNew":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","sourceOld":"  private void handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, Object> autoScalingConf = zkReadAutoScalingConf(container.getZkController().getZkStateReader());\n    Map<String, Object> listeners = (Map<String, Object>) autoScalingConf.get(\"listeners\");\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    zkSetListener(container.getZkController().getZkStateReader(), listenerName, null);\n    rsp.getValues().add(\"result\", \"success\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3590d254d013266ac3849fae45974e747f7f576","date":1501767095,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      op.addError(\"No listener exists with name: \" + listenerName);\n      return currentConfig;\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","sourceOld":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (listenerName == null || listenerName.trim().length() == 0) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The listener name cannot be null or empty\");\n    }\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"No listener exists with name: \" + listenerName);\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      op.addError(\"No listener exists with name: \" + listenerName);\n      return currentConfig;\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","pathOld":"/dev/null","sourceNew":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      op.addError(\"No listener exists with name: \" + listenerName);\n      return currentConfig;\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/AutoScalingHandler#handleRemoveListener(SolrQueryRequest,SolrQueryResponse,CommandOperation,AutoScalingConfig).mjava","sourceNew":null,"sourceOld":"  private AutoScalingConfig handleRemoveListener(SolrQueryRequest req, SolrQueryResponse rsp, CommandOperation op,\n                                    AutoScalingConfig currentConfig) throws KeeperException, InterruptedException {\n    String listenerName = op.getStr(NAME);\n\n    if (op.hasError()) return currentConfig;\n    Map<String, AutoScalingConfig.TriggerListenerConfig> listeners = currentConfig.getTriggerListenerConfigs();\n    if (listeners == null || !listeners.containsKey(listenerName)) {\n      op.addError(\"No listener exists with name: \" + listenerName);\n      return currentConfig;\n    }\n    currentConfig = currentConfig.withoutTriggerListenerConfig(listenerName);\n    return currentConfig;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e3590d254d013266ac3849fae45974e747f7f576"],"3f504512a03d978990cbff30db0522b354e846db":["560c18d71dad43d675158783c3840f8c80d6d39c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3590d254d013266ac3849fae45974e747f7f576":["219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c","219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25"],"560c18d71dad43d675158783c3840f8c80d6d39c":["3f504512a03d978990cbff30db0522b354e846db"],"219ac4e012cb38bcfcd8f4290dccd4f5b4d7bc25":["e3590d254d013266ac3849fae45974e747f7f576"],"e3590d254d013266ac3849fae45974e747f7f576":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}