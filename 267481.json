{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","commits":[{"id":"ada1eee209add16fbb0b271444355004e182c8ad","date":1411402636,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dc2bafa00000be70227a04c29e3f885ff41e531d","date":1412182669,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a219f1dcad1700e84807666bdbd2b573e8de7021","date":1428130940,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (!ZkStateReader.DOWN.equals(replicaMap.get(ZkStateReader.STATE_PROP))) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, ZkStateReader.DOWN);\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac","date":1438841252,"type":5,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionProcessor#crossCheckReplicaStateWithLiveNodes(List[String],NamedList[Object]).mjava","sourceNew":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Walks the tree of collection status to verify that any replicas not reporting a \"down\" status is\n   * on a live node, if any replicas reporting their status as \"active\" but the node is not live is\n   * marked as \"down\"; used by CLUSTERSTATUS.\n   * @param liveNodes List of currently live node names.\n   * @param collectionProps Map of collection status information pulled directly from ZooKeeper.\n   */\n\n  @SuppressWarnings(\"unchecked\")\n  protected void crossCheckReplicaStateWithLiveNodes(List<String> liveNodes, NamedList<Object> collectionProps) {\n    Iterator<Map.Entry<String,Object>> colls = collectionProps.iterator();\n    while (colls.hasNext()) {\n      Map.Entry<String,Object> next = colls.next();\n      Map<String,Object> collMap = (Map<String,Object>)next.getValue();\n      Map<String,Object> shards = (Map<String,Object>)collMap.get(\"shards\");\n      for (Object nextShard : shards.values()) {\n        Map<String,Object> shardMap = (Map<String,Object>)nextShard;\n        Map<String,Object> replicas = (Map<String,Object>)shardMap.get(\"replicas\");\n        for (Object nextReplica : replicas.values()) {\n          Map<String,Object> replicaMap = (Map<String,Object>)nextReplica;\n          if (Replica.State.getState((String) replicaMap.get(ZkStateReader.STATE_PROP)) != Replica.State.DOWN) {\n            // not down, so verify the node is live\n            String node_name = (String)replicaMap.get(ZkStateReader.NODE_NAME_PROP);\n            if (!liveNodes.contains(node_name)) {\n              // node is not live, so this replica is actually down\n              replicaMap.put(ZkStateReader.STATE_PROP, Replica.State.DOWN.toString());\n            }\n          }\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["dc2bafa00000be70227a04c29e3f885ff41e531d"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["a219f1dcad1700e84807666bdbd2b573e8de7021"],"ada1eee209add16fbb0b271444355004e182c8ad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["ada1eee209add16fbb0b271444355004e182c8ad","dc2bafa00000be70227a04c29e3f885ff41e531d"],"dc2bafa00000be70227a04c29e3f885ff41e531d":["ada1eee209add16fbb0b271444355004e182c8ad"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"]},"commit2Childs":{"a219f1dcad1700e84807666bdbd2b573e8de7021":["e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac"],"e31e6ce5848e5040d4c9ecbb25bc6ccf5d0894ac":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ada1eee209add16fbb0b271444355004e182c8ad":["d9a47902d6207303f5ed3e7aaca62ca33433af66","dc2bafa00000be70227a04c29e3f885ff41e531d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ada1eee209add16fbb0b271444355004e182c8ad"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"dc2bafa00000be70227a04c29e3f885ff41e531d":["a219f1dcad1700e84807666bdbd2b573e8de7021","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}