{"path":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","commits":[{"id":"fde68de507dbf344495d7b5e8052866fe5f254ab","date":1189434831,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"/dev/null","sourceNew":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        int n = RANDOM.nextInt();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e82780afe6097066eb5befb86e9432f077667e3d","date":1202756169,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        int n = RANDOM.nextInt();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.ANALYZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.UN_TOKENIZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.TOKENIZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1326054a8d3aa66382d49decc7f330955c9c6f71","date":1257386139,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.ANALYZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.ANALYZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","pathOld":"src/test/org/apache/lucene/index/TestAtomicUpdate.IndexerThread#doWork().mjava","sourceNew":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.ANALYZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void doWork() throws Exception {\n      // Update all 100 docs...\n      for(int i=0; i<100; i++) {\n        Document d = new Document();\n        d.add(new Field(\"id\", Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        d.add(new Field(\"contents\", English.intToEnglish(i+10*count), Field.Store.NO, Field.Index.ANALYZED));\n        writer.updateDocument(new Term(\"id\", Integer.toString(i)), d);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["e82780afe6097066eb5befb86e9432f077667e3d"],"e82780afe6097066eb5befb86e9432f077667e3d":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1326054a8d3aa66382d49decc7f330955c9c6f71"]},"commit2Childs":{"1326054a8d3aa66382d49decc7f330955c9c6f71":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fde68de507dbf344495d7b5e8052866fe5f254ab":["e82780afe6097066eb5befb86e9432f077667e3d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fde68de507dbf344495d7b5e8052866fe5f254ab"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["1326054a8d3aa66382d49decc7f330955c9c6f71"],"e82780afe6097066eb5befb86e9432f077667e3d":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}