{"path":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","commits":[{"id":"5f7c69c29432074b666568db5e84001acd540dee","date":1520745905,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","pathOld":"/dev/null","sourceNew":"  public void testFilters() throws Exception {\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"{!tag=ffqbaz}bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!filters param=$ffq  excludeTags=ffqban}foo_s:bar\" \n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters excludeTags=top}{!tag=top v='foo_s:bar'}\",\n        \"{!filters param=$ffq excludeTags='ffqban,ffqbaz'}\" \n        );\n    QueryUtils.checkUnequal(\n        QParser.getParser(\"{!filters param=$fq}foo_s:bar\", req).getQuery(),\n        QParser.getParser(\"{!filters param=$fq excludeTags=fqban}foo_s:bar\", req).getQuery());    \n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0","date":1576656084,"type":3,"author":"Gus Heck","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","sourceNew":"  public void testFilters() throws Exception {\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"{!tag=ffqbaz}bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!filters param=$ffq  excludeTags=ffqban}foo_s:bar\"\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters excludeTags=top}{!tag=top v='foo_s:bar'}\",\n        \"{!filters param=$ffq excludeTags='ffqban,ffqbaz'}\"\n        );\n    QueryUtils.checkUnequal(\n        QParser.getParser(\"{!filters param=$fq}foo_s:bar\", req).getQuery(),\n        QParser.getParser(\"{!filters param=$fq excludeTags=fqban}foo_s:bar\", req).getQuery());\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testFilters() throws Exception {\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"{!tag=ffqbaz}bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!filters param=$ffq  excludeTags=ffqban}foo_s:bar\" \n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters excludeTags=top}{!tag=top v='foo_s:bar'}\",\n        \"{!filters param=$ffq excludeTags='ffqban,ffqbaz'}\" \n        );\n    QueryUtils.checkUnequal(\n        QParser.getParser(\"{!filters param=$fq}foo_s:bar\", req).getQuery(),\n        QParser.getParser(\"{!filters param=$fq excludeTags=fqban}foo_s:bar\", req).getQuery());    \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"246314af59d76a47fccc31e9494eefee01ec9c00","date":1576657955,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/QueryEqualityTest#testFilters().mjava","sourceNew":"  public void testFilters() throws Exception {\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"{!tag=ffqbaz}bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!filters param=$ffq  excludeTags=ffqban}foo_s:bar\"\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters excludeTags=top}{!tag=top v='foo_s:bar'}\",\n        \"{!filters param=$ffq excludeTags='ffqban,ffqbaz'}\"\n        );\n    QueryUtils.checkUnequal(\n        QParser.getParser(\"{!filters param=$fq}foo_s:bar\", req).getQuery(),\n        QParser.getParser(\"{!filters param=$fq excludeTags=fqban}foo_s:bar\", req).getQuery());\n    } finally {\n      req.close();\n    }\n  }\n\n","sourceOld":"  public void testFilters() throws Exception {\n    final SolrQueryRequest req = req(\n        \"fq\",\"bar_s:baz\",\"fq\",\"{!tag=fqban}bar_s:ban\",\n        \"ffq\",\"{!tag=ffqbaz}bar_s:baz\",\"ffq\",\"{!tag=ffqban}bar_s:ban\");\n    try {\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$fq}foo_s:bar\",\n        \"{!filters param=$ffq}foo_s:bar\" // differently named params\n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters param=$fq excludeTags=fqban}foo_s:bar\",\n        \"{!filters param=$ffq  excludeTags=ffqban}foo_s:bar\" \n        );\n    assertQueryEquals(\"filters\", req,\n        \"{!filters excludeTags=top}{!tag=top v='foo_s:bar'}\",\n        \"{!filters param=$ffq excludeTags='ffqban,ffqbaz'}\" \n        );\n    QueryUtils.checkUnequal(\n        QParser.getParser(\"{!filters param=$fq}foo_s:bar\", req).getQuery(),\n        QParser.getParser(\"{!filters param=$fq excludeTags=fqban}foo_s:bar\", req).getQuery());    \n    } finally {\n      req.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"246314af59d76a47fccc31e9494eefee01ec9c00":["5f7c69c29432074b666568db5e84001acd540dee","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f7c69c29432074b666568db5e84001acd540dee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["5f7c69c29432074b666568db5e84001acd540dee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"]},"commit2Childs":{"246314af59d76a47fccc31e9494eefee01ec9c00":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5f7c69c29432074b666568db5e84001acd540dee"],"5f7c69c29432074b666568db5e84001acd540dee":["246314af59d76a47fccc31e9494eefee01ec9c00","a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0"],"a18e3c53fdd9e2e8f2bdb3b21ca3964273a2b5b0":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["246314af59d76a47fccc31e9494eefee01ec9c00","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}