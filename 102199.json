{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","commits":[{"id":"60596f28be69b10c37a56a303c2dbea07b2ca4ba","date":1425060541,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUFilterCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\"))));\n      queries[i].setBoost(random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      actualCounts.put(queries[idx], 1 + actualCounts.getOrDefault(queries[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUFilterCache filterCache = new LRUFilterCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Filter, Integer> actualCounts = new HashMap<>();\n    final Map<Filter, Integer> expectedCounts = new HashMap<>();\n\n    final FilterCachingPolicy countingPolicy = new FilterCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Filter filter, LeafReaderContext context, DocIdSet set) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Filter filter) {\n        expectedCounts.put(filter, 1 + expectedCounts.getOrDefault(filter, 0));\n      }\n    };\n\n    Filter[] filters = new Filter[10 + random().nextInt(10)];\n    Filter[] cachedFilters = new Filter[filters.length];\n    for (int i = 0; i < filters.length; ++i) {\n      filters[i] = new QueryWrapperFilter(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))));\n      cachedFilters[i] = filterCache.doCache(filters[i], countingPolicy);\n    }\n\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(filters.length);\n      searcher.search(new ConstantScoreQuery(cachedFilters[idx]), 1);\n      actualCounts.put(filters[idx], 1 + actualCounts.getOrDefault(filters[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"/dev/null","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\"))));\n      queries[i].setBoost(random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      actualCounts.put(queries[idx], 1 + actualCounts.getOrDefault(queries[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\"))));\n      queries[i].setBoost(random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      actualCounts.put(queries[idx], 1 + actualCounts.getOrDefault(queries[idx], 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aac61ee5b4492f174e60bd54939aba9539906edf","date":1461245473,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000));\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"25f40dbcd244dc82447a23719db34376cdcc9cfe","date":1461323366,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f7f901826e47f75f810d7aae24b0455d21ea1fe2","date":1461678892,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query, LeafReaderContext context) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7732a106554be0db3e03ac5211e46f6e0c285b8","date":1511975378,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1aad05eeff7818b0833c02ac6b743aa72054963b","date":1512093122,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"789fb338d3c53b4478938723d60f6623e764ca38","date":1521535944,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testOnUse().mjava","sourceNew":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean(), Float.POSITIVE_INFINITY);\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testOnUse() throws IOException {\n    final LRUQueryCache queryCache = new LRUQueryCache(1 + random().nextInt(5), 1 + random().nextInt(1000), context -> random().nextBoolean());\n\n    Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    StringField f = new StringField(\"color\", \"\", Store.NO);\n    doc.add(f);\n    final int numDocs = atLeast(10);\n    for (int i = 0; i < numDocs; ++i) {\n      f.setStringValue(RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")));\n      w.addDocument(doc);\n      if (random().nextBoolean()) {\n        w.getReader().close();\n      }\n    }\n    final DirectoryReader reader = w.getReader();\n    final IndexSearcher searcher = new IndexSearcher(reader);\n\n    final Map<Query, Integer> actualCounts = new HashMap<>();\n    final Map<Query, Integer> expectedCounts = new HashMap<>();\n\n    final QueryCachingPolicy countingPolicy = new QueryCachingPolicy() {\n\n      @Override\n      public boolean shouldCache(Query query) throws IOException {\n        return random().nextBoolean();\n      }\n\n      @Override\n      public void onUse(Query query) {\n        expectedCounts.put(query, 1 + expectedCounts.getOrDefault(query, 0));\n      }\n    };\n\n    Query[] queries = new Query[10 + random().nextInt(10)];\n    for (int i = 0; i < queries.length; ++i) {\n      queries[i] = new BoostQuery(new TermQuery(new Term(\"color\", RandomPicks.randomFrom(random(), Arrays.asList(\"red\", \"blue\", \"green\", \"yellow\")))), random().nextFloat());\n    }\n\n    searcher.setQueryCache(queryCache);\n    searcher.setQueryCachingPolicy(countingPolicy);\n    for (int i = 0; i < 20; ++i) {\n      final int idx = random().nextInt(queries.length);\n      searcher.search(new ConstantScoreQuery(queries[idx]), 1);\n      Query cacheKey = queries[idx];\n      while (cacheKey instanceof BoostQuery) {\n        cacheKey = ((BoostQuery) cacheKey).getQuery();\n      }\n      actualCounts.put(cacheKey, 1 + actualCounts.getOrDefault(cacheKey, 0));\n    }\n\n    assertEquals(actualCounts, expectedCounts);\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["1aad05eeff7818b0833c02ac6b743aa72054963b","789fb338d3c53b4478938723d60f6623e764ca38"],"aac61ee5b4492f174e60bd54939aba9539906edf":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["aac61ee5b4492f174e60bd54939aba9539906edf","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","c7732a106554be0db3e03ac5211e46f6e0c285b8"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","60596f28be69b10c37a56a303c2dbea07b2ca4ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"789fb338d3c53b4478938723d60f6623e764ca38":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["aac61ee5b4492f174e60bd54939aba9539906edf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"aac61ee5b4492f174e60bd54939aba9539906edf":["f7f901826e47f75f810d7aae24b0455d21ea1fe2","25f40dbcd244dc82447a23719db34376cdcc9cfe"],"60596f28be69b10c37a56a303c2dbea07b2ca4ba":["2dfdf766e55e943d942055d7de53c7ad6bc45283","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"f7f901826e47f75f810d7aae24b0455d21ea1fe2":["c7732a106554be0db3e03ac5211e46f6e0c285b8","1aad05eeff7818b0833c02ac6b743aa72054963b"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["aac61ee5b4492f174e60bd54939aba9539906edf"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c7732a106554be0db3e03ac5211e46f6e0c285b8":["1aad05eeff7818b0833c02ac6b743aa72054963b"],"1aad05eeff7818b0833c02ac6b743aa72054963b":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","789fb338d3c53b4478938723d60f6623e764ca38"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"789fb338d3c53b4478938723d60f6623e764ca38":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60596f28be69b10c37a56a303c2dbea07b2ca4ba","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"25f40dbcd244dc82447a23719db34376cdcc9cfe":["f7f901826e47f75f810d7aae24b0455d21ea1fe2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}