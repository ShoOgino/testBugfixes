{"path":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","commits":[{"id":"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","date":1426480823,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","pathOld":"/dev/null","sourceNew":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","pathOld":"/dev/null","sourceNew":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab","date":1569649338,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","sourceNew":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else if (val instanceof Map) {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    } else {\n      // todo: find a way to return query param in error message\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected JSON Object but got \" + val.getClass().getSimpleName() + \"=\" + val);\n    }\n  }\n\n","sourceOld":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    }\n  }\n\n","bugFix":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b9f74021389e2b32ee750fa5a24281c87951ec3","date":1569845983,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","sourceNew":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else if (val instanceof Map) {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    } else {\n      // todo: find a way to return query param in error message\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected JSON Object but got \" + val.getClass().getSimpleName() + \"=\" + val);\n    }\n  }\n\n","sourceOld":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd25fa3647fa73152703b8dccb4fb5f43633de20","date":1592060458,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","pathOld":"solr/core/src/java/org/apache/solr/request/json/ObjectUtil#mergeObjects(Map[String,Object],List[String],Object,ConflictHandler).mjava","sourceNew":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else if (val instanceof Map) {\n      // merging at top level...\n      @SuppressWarnings({\"unchecked\"})\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    } else {\n      // todo: find a way to return query param in error message\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected JSON Object but got \" + val.getClass().getSimpleName() + \"=\" + val);\n    }\n  }\n\n","sourceOld":"  public static void mergeObjects(Map<String,Object> top, List<String> path, Object val, ConflictHandler handler) {\n    Map<String,Object> outer = top;\n    for (int i=0; i<path.size()-1; i++) {\n      Map<String,Object> sub = (Map<String,Object>)outer.get(path.get(i));\n      if (sub == null) {\n        sub = new LinkedHashMap<String,Object>();\n        outer.put(path.get(i), sub);\n      }\n      outer = sub;\n    }\n\n    String key = path.size() > 0 ? path.get(path.size()-1) : null;\n\n    if (key != null) {\n      Object existingVal = outer.put(key, val);\n      if (existingVal != null) {\n        // OK, now we need to merge values\n        handler.handleConflict(outer, path, key, val, existingVal);\n      }\n    } else if (val instanceof Map) {\n      // merging at top level...\n      Map<String,Object> newMap = (Map<String,Object>)val;\n      handler.mergeMap(outer, newMap, path);\n    } else {\n      // todo: find a way to return query param in error message\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n          \"Expected JSON Object but got \" + val.getClass().getSimpleName() + \"=\" + val);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":["ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d","7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab"],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bd25fa3647fa73152703b8dccb4fb5f43633de20"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab":["4b9f74021389e2b32ee750fa5a24281c87951ec3","bd25fa3647fa73152703b8dccb4fb5f43633de20"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d"],"ac53eb8ed1d40ceac7330e9dc2e5c258e8fc155d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7fc85b1dff2ce036b914dcd14fb0bf4a113cf0ab","4b9f74021389e2b32ee750fa5a24281c87951ec3"],"4b9f74021389e2b32ee750fa5a24281c87951ec3":[],"bd25fa3647fa73152703b8dccb4fb5f43633de20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4b9f74021389e2b32ee750fa5a24281c87951ec3","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}