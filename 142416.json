{"path":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","commits":[{"id":"f215583134d6d66410e3c48b32282e3eb9d5fcde","date":1505141283,"type":0,"author":"Karl Wright","isMerge":false,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","pathOld":"/dev/null","sourceNew":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"685bd38810c206c93e9058f3c2cfa9827c086c27","date":1505751821,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","pathOld":"lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.Constraints#validPoint(GeoPoint,GeoShape,int).mjava","sourceNew":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","sourceOld":"    /**\n     * Check if a point is Within one constraint given by a shape and a relationship.\n     *\n     * @param point The point to check\n     * @param shape The shape of the constraint\n     * @param relationship The relationship of the constraint.\n     * @return true if the point satisfy the constraint, else false.\n     */\n    private boolean validPoint(GeoPoint point, GeoShape shape, int relationship) {\n      //For GeoCompositeMembershipShape we only consider the first shape to help\n      // converging\n      if (relationship == GeoArea.WITHIN && shape instanceof GeoCompositeMembershipShape) {\n        shape = (((GeoCompositeMembershipShape) shape).shapes.get(0));\n      }\n      switch (relationship) {\n        case GeoArea.DISJOINT:\n          return !shape.isWithin(point);\n        case GeoArea.OVERLAPS:\n          return true;\n        case GeoArea.CONTAINS:\n          return !shape.isWithin(point);\n        case GeoArea.WITHIN:\n          return shape.isWithin(point);\n        default:\n          return true;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"685bd38810c206c93e9058f3c2cfa9827c086c27":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f215583134d6d66410e3c48b32282e3eb9d5fcde"]},"commit2Childs":{"685bd38810c206c93e9058f3c2cfa9827c086c27":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["685bd38810c206c93e9058f3c2cfa9827c086c27","f215583134d6d66410e3c48b32282e3eb9d5fcde"],"f215583134d6d66410e3c48b32282e3eb9d5fcde":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["685bd38810c206c93e9058f3c2cfa9827c086c27","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}