{"path":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","commits":[{"id":"027bee21e09164c9ee230395405076d1e0034b30","date":1401521821,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean]).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef658003003b32165df5d5016addcee1da98e4a2","date":1419764948,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"284a3d7d39e7d338acff76cc560843b7172edea2","date":1426542875,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && isMerged(segmentInfos, eligibleSegments.get(0), writer) == false)) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && isMerged(segmentInfos, eligibleSegments.get(0), writer) == false)) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && eligibleSegments.get(0).hasDeletions())) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d28f215464f76024caf026606f8ea51a5319c53","date":1527226629,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],MergeContext).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/MockRandomMergePolicy#findForcedMerges(SegmentInfos,int,Map[SegmentCommitInfo,Boolean],IndexWriter).mjava","sourceNew":"  @Override\n  public MergeSpecification findForcedMerges(\n      SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, MergeContext mergeContext)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && isMerged(segmentInfos, eligibleSegments.get(0), mergeContext) == false)) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","sourceOld":"  @Override\n  public MergeSpecification findForcedMerges(\n       SegmentInfos segmentInfos, int maxSegmentCount, Map<SegmentCommitInfo,Boolean> segmentsToMerge, IndexWriter writer)\n    throws IOException {\n\n    final List<SegmentCommitInfo> eligibleSegments = new ArrayList<>();\n    for(SegmentCommitInfo info : segmentInfos) {\n      if (segmentsToMerge.containsKey(info)) {\n        eligibleSegments.add(info);\n      }\n    }\n\n    //System.out.println(\"MRMP: findMerges sis=\" + segmentInfos + \" eligible=\" + eligibleSegments);\n    MergeSpecification mergeSpec = null;\n    if (eligibleSegments.size() > 1 || (eligibleSegments.size() == 1 && isMerged(segmentInfos, eligibleSegments.get(0), writer) == false)) {\n      mergeSpec = new MergeSpecification();\n      // Already shuffled having come out of a set but\n      // shuffle again for good measure:\n      Collections.shuffle(eligibleSegments, random);\n      int upto = 0;\n      while(upto < eligibleSegments.size()) {\n        int max = Math.min(10, eligibleSegments.size()-upto);\n        int inc = max <= 2 ? max : TestUtil.nextInt(random, 2, max);\n        if (doNonBulkMerges && random.nextBoolean()) {\n          mergeSpec.add(new MockRandomOneMerge(eligibleSegments.subList(upto, upto+inc), random.nextLong()));\n        } else {\n          mergeSpec.add(new OneMerge(eligibleSegments.subList(upto, upto+inc)));\n        }\n        upto += inc;\n      }\n    }\n\n    if (mergeSpec != null) {\n      for(OneMerge merge : mergeSpec.merges) {\n        for(SegmentCommitInfo info : merge.segments) {\n          assert segmentsToMerge.containsKey(info);\n        }\n      }\n    }\n    return mergeSpec;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["ef658003003b32165df5d5016addcee1da98e4a2","284a3d7d39e7d338acff76cc560843b7172edea2"],"284a3d7d39e7d338acff76cc560843b7172edea2":["ef658003003b32165df5d5016addcee1da98e4a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d28f215464f76024caf026606f8ea51a5319c53":["284a3d7d39e7d338acff76cc560843b7172edea2"],"ef658003003b32165df5d5016addcee1da98e4a2":["027bee21e09164c9ee230395405076d1e0034b30"],"027bee21e09164c9ee230395405076d1e0034b30":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d28f215464f76024caf026606f8ea51a5319c53"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"284a3d7d39e7d338acff76cc560843b7172edea2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","1d28f215464f76024caf026606f8ea51a5319c53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["027bee21e09164c9ee230395405076d1e0034b30"],"ef658003003b32165df5d5016addcee1da98e4a2":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","284a3d7d39e7d338acff76cc560843b7172edea2"],"1d28f215464f76024caf026606f8ea51a5319c53":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"027bee21e09164c9ee230395405076d1e0034b30":["ef658003003b32165df5d5016addcee1da98e4a2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}