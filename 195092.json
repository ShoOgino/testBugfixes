{"path":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","commits":[{"id":"da0d58b6bf72ebfd4d6722289ea725809c20c987","date":1531207054,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void assertMerge(MergePolicy policy, MergeSpecification merges) {\n    TieredMergePolicy tmp = (TieredMergePolicy) policy;\n    for (OneMerge merge : merges.merges) {\n      assertTrue(merge.segments.size() <= tmp.getMaxMergeAtOnce());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void assertMerge(MergePolicy policy, MergeSpecification merges) {\n    TieredMergePolicy tmp = (TieredMergePolicy) policy;\n    for (OneMerge merge : merges.merges) {\n      assertTrue(merge.segments.size() <= tmp.getMaxMergeAtOnce());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4a90cc8c90aa53ddf51fbd15019989ac269514a3","date":1531845066,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","sourceNew":"  @Override\n  protected void assertMerge(MergePolicy policy, MergeSpecification merges) {\n    TieredMergePolicy tmp = (TieredMergePolicy) policy;\n    final int mergeFactor = (int) Math.min(tmp.getMaxMergeAtOnce(), tmp.getSegmentsPerTier());\n    for (OneMerge merge : merges.merges) {\n      assertTrue(merge.segments.size() <= mergeFactor);\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void assertMerge(MergePolicy policy, MergeSpecification merges) {\n    TieredMergePolicy tmp = (TieredMergePolicy) policy;\n    for (OneMerge merge : merges.merges) {\n      assertTrue(merge.segments.size() <= tmp.getMaxMergeAtOnce());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestTieredMergePolicy#assertMerge(MergePolicy,MergeSpecification).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void assertMerge(MergePolicy policy, MergeSpecification merges) {\n    TieredMergePolicy tmp = (TieredMergePolicy) policy;\n    final int mergeFactor = (int) Math.min(tmp.getMaxMergeAtOnce(), tmp.getSegmentsPerTier());\n    for (OneMerge merge : merges.merges) {\n      assertTrue(merge.segments.size() <= mergeFactor);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["da0d58b6bf72ebfd4d6722289ea725809c20c987"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4a90cc8c90aa53ddf51fbd15019989ac269514a3"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da0d58b6bf72ebfd4d6722289ea725809c20c987"]},"commit2Childs":{"da0d58b6bf72ebfd4d6722289ea725809c20c987":["4a90cc8c90aa53ddf51fbd15019989ac269514a3","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da0d58b6bf72ebfd4d6722289ea725809c20c987","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"4a90cc8c90aa53ddf51fbd15019989ac269514a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}