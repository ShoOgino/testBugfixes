{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#add(byte).mjava","commits":[{"id":"0c3fae32338d82a0710e1756793faba13dcb598b","date":1414786590,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#add(byte).mjava","pathOld":"/dev/null","sourceNew":"    // adds an item to the mapping. returns true if actually added\n    public boolean add(byte l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      int index = (int)l + 128;\n      short previous = ords[index];\n      if (previous < 0) {\n        short slot = (short)size;\n        ords[index] = slot;\n        freqs[slot]++;\n        values[slot] = l;\n        size++;\n        return true;\n      } else {\n        freqs[previous]++;\n        return false;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9","date":1434069165,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#add(byte).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50NormsConsumer.NormMap#add(byte).mjava","sourceNew":"    // adds an item to the mapping. returns true if actually added\n    public boolean add(byte l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      int index = (int)l + 128;\n      short previous = ords[index];\n      if (previous < 0) {\n        short slot = (short)size;\n        ords[index] = slot;\n        freqs[slot]++;\n        values[slot] = l;\n        size++;\n        return true;\n      } else {\n        freqs[previous]++;\n        return false;\n      }\n    }\n\n","sourceOld":"    // adds an item to the mapping. returns true if actually added\n    public boolean add(byte l) {\n      assert size <= 256; // once we add > 256 values, we nullify the map in addNumericField and don't use this strategy\n      int index = (int)l + 128;\n      short previous = ords[index];\n      if (previous < 0) {\n        short slot = (short)size;\n        ords[index] = slot;\n        freqs[slot]++;\n        values[slot] = l;\n        size++;\n        return true;\n      } else {\n        freqs[previous]++;\n        return false;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["0c3fae32338d82a0710e1756793faba13dcb598b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0c3fae32338d82a0710e1756793faba13dcb598b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"]},"commit2Childs":{"96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0c3fae32338d82a0710e1756793faba13dcb598b"],"0c3fae32338d82a0710e1756793faba13dcb598b":["96d86741fa6ad3b3a96fbf99f5e41bc74784c5f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}