{"path":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            Fieldable fld = doc.getFieldable( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eb037ddbc4ef8b427189b9ca13486ea830d0c766","date":1325813112,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int,Map[String,TopTermQueue]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/LukeRequestHandler#getIndexedFieldsInfo(SolrIndexSearcher,Set[String],int).mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo(\n      final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms, Map<String,TopTermQueue> ttinfo)\n      throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n\n    // Walk the term enum and keep a priority queue for each map in our set\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Fields theFields = MultiFields.getFields(reader);\n\n    Set<String> fieldNames = new TreeSet<String>(reader.getFieldNames(IndexReader.FieldOption.ALL));\n    for (String fieldName : fieldNames) {\n      if (fields != null && ! fields.contains(fieldName)) {\n        continue; // we're not interested in this term\n      }\n\n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n\n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n        f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      Terms terms = theFields.terms(fieldName);\n      if (terms == null) { // Not indexed, so we need to report what we can (it made it through the fl param if specified)\n        finfo.add( fieldName, f );\n        continue;\n      }\n\n      TopTermQueue topTerms = ttinfo.get( fieldName );\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        if (numTerms > 0) { // Read the actual field from the index and report that too.\n          Document doc = null;\n          if (topTerms != null && topTerms.getTopTermInfo() != null) {\n            Term term = topTerms.getTopTermInfo().term;\n            DocsEnum docsEnum = MultiFields.getTermDocsEnum(reader,\n                MultiFields.getLiveDocs(reader),\n                term.field(),\n                new BytesRef(term.text()),\n                false);\n            if (docsEnum != null) {\n              int docId;\n              if ((docId = docsEnum.nextDoc()) != DocsEnum.NO_MORE_DOCS) {\n                doc = reader.document(docId);\n              }\n            }\n          }\n          if( doc != null ) {\n            // Found a document with this field\n            try {\n              IndexableField fld = doc.getField( fieldName );\n              if( fld != null ) {\n                f.add( \"index\", getFieldFlags( fld ) );\n              }\n              else {\n                // it is a non-stored field...\n                f.add( \"index\", \"(unstored field)\" );\n              }\n            }\n            catch( Exception ex ) {\n              log.warn( \"error reading field: \"+fieldName );\n            }\n          }\n          f.add(\"docs\", terms.getDocCount());\n        }\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n\n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n\n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private static SimpleOrderedMap<Object> getIndexedFieldsInfo( \n    final SolrIndexSearcher searcher, final Set<String> fields, final int numTerms ) \n    throws Exception {\n\n    IndexReader reader = searcher.getIndexReader();\n    IndexSchema schema = searcher.getSchema();\n    \n    // Walk the term enum and keep a priority queue for each map in our set\n    Map<String,TopTermQueue> ttinfo = null;\n    if( numTerms > 0 ) {\n      ttinfo = getTopTerms(reader, fields, numTerms, null );\n    }\n    SimpleOrderedMap<Object> finfo = new SimpleOrderedMap<Object>();\n    Collection<String> fieldNames = reader.getFieldNames(IndexReader.FieldOption.ALL);\n    for (String fieldName : fieldNames) {\n      if( fields != null && !fields.contains( fieldName ) ) {\n        continue; // if a field is specified, only them\n      }\n      \n      SimpleOrderedMap<Object> f = new SimpleOrderedMap<Object>();\n      \n      SchemaField sfield = schema.getFieldOrNull( fieldName );\n      FieldType ftype = (sfield==null)?null:sfield.getType();\n\n      f.add( \"type\", (ftype==null)?null:ftype.getTypeName() );\n      f.add( \"schema\", getFieldFlags( sfield ) );\n      if (sfield != null && schema.isDynamicField(sfield.getName()) && schema.getDynamicPattern(sfield.getName()) != null) {\n    \t  f.add(\"dynamicBase\", schema.getDynamicPattern(sfield.getName()));\n      }\n\n      // If numTerms==0, the call is just asking for a quick field list\n      if( ttinfo != null && sfield != null && sfield.indexed() ) {\n        Query q = new TermRangeQuery(fieldName,null,null,false,false); \n        TopDocs top = searcher.search( q, 1 );\n        if( top.totalHits > 0 ) {\n          // Find a document with this field\n          try {\n            Document doc = searcher.doc( top.scoreDocs[0].doc );\n            IndexableField fld = doc.getField( fieldName );\n            if( fld != null ) {\n              f.add( \"index\", getFieldFlags( fld ) );\n            }\n            else {\n              // it is a non-stored field...\n              f.add( \"index\", \"(unstored field)\" );\n            }\n          }\n          catch( Exception ex ) {\n            log.warn( \"error reading field: \"+fieldName );\n          }\n        }\n        f.add( \"docs\", top.totalHits );\n        \n        TopTermQueue topTerms = ttinfo.get( fieldName );\n        if( topTerms != null ) {\n          f.add( \"distinct\", topTerms.distinctTerms );\n          \n          // Include top terms\n          f.add( \"topTerms\", topTerms.toNamedList( searcher.getSchema() ) );\n  \n          // Add a histogram\n          f.add( \"histogram\", topTerms.histogram.toNamedList() );\n        }\n      }\n      \n      // Add the field\n      finfo.add( fieldName, f );\n    }\n    return finfo;\n  }\n\n","bugFix":null,"bugIntro":["6b05ecbfa2ad21f9ba1f9f694d6c5f5c19e22e4a"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"]},"commit2Childs":{"eb037ddbc4ef8b427189b9ca13486ea830d0c766":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["eb037ddbc4ef8b427189b9ca13486ea830d0c766"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}