{"path":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","commits":[{"id":"fcf710a8fcd590cf55c855d422c7a10fce3e6117","date":1485842253,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"/dev/null","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4b6426685f93b04e5988c93597c4d199e210fdb","date":1494663116,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5174b677b2536f97776e6b67e8c10ae5c66e6fa2","date":1496916595,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(CommonParams.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(CommonParams.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/api/V2HttpCall#getApiInfo(PluginBag[SolrRequestHandler],String,String,String,Map[String,String]).mjava","sourceNew":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(CommonParams.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","sourceOld":"  public static Api getApiInfo(PluginBag<SolrRequestHandler> requestHandlers,\n                               String path, String method,\n                               String fullPath,\n                               Map<String, String> parts) {\n    fullPath = fullPath == null ? path : fullPath;\n    Api api = requestHandlers.v2lookup(path, method, parts);\n    if (api == null && path.endsWith(ApiBag.INTROSPECT)) {\n      // the particular http method does not have any ,\n      // just try if any other method has this path\n      api = requestHandlers.v2lookup(path, null, parts);\n    }\n\n    if (api == null) {\n      return getSubPathApi(requestHandlers, path, fullPath, new CompositeApi(null));\n    }\n\n    if (api instanceof ApiBag.IntrospectApi) {\n      final Map<String, Api> apis = new LinkedHashMap<>();\n      for (String m : SolrRequest.SUPPORTED_METHODS) {\n        Api x = requestHandlers.v2lookup(path, m, parts);\n        if (x != null) apis.put(m, x);\n      }\n      api = new CompositeApi(new Api(ApiBag.EMPTY_SPEC) {\n        @Override\n        public void call(SolrQueryRequest req, SolrQueryResponse rsp) {\n          String method = req.getParams().get(\"method\");\n          Set<Api> added = new HashSet<>();\n          for (Map.Entry<String, Api> e : apis.entrySet()) {\n            if (method == null || e.getKey().equals(method)) {\n              if (!added.contains(e.getValue())) {\n                e.getValue().call(req, rsp);\n                added.add(e.getValue());\n              }\n            }\n          }\n          RequestHandlerUtils.addExperimentalFormatWarning(rsp);\n        }\n      });\n      getSubPathApi(requestHandlers,path, fullPath, (CompositeApi) api);\n    }\n\n\n    return api;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","f4b6426685f93b04e5988c93597c4d199e210fdb"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"f4b6426685f93b04e5988c93597c4d199e210fdb":["fcf710a8fcd590cf55c855d422c7a10fce3e6117"],"28288370235ed02234a64753cdbf0c6ec096304a":["f4b6426685f93b04e5988c93597c4d199e210fdb","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["f4b6426685f93b04e5988c93597c4d199e210fdb"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["e9017cf144952056066919f1ebc7897ff9bd71b1","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"fcf710a8fcd590cf55c855d422c7a10fce3e6117":["e9017cf144952056066919f1ebc7897ff9bd71b1","7c3523a0ab04c3002eee3896c75ea5f10f388bcc","f4b6426685f93b04e5988c93597c4d199e210fdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fcf710a8fcd590cf55c855d422c7a10fce3e6117","7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"f4b6426685f93b04e5988c93597c4d199e210fdb":["e9017cf144952056066919f1ebc7897ff9bd71b1","28288370235ed02234a64753cdbf0c6ec096304a","5174b677b2536f97776e6b67e8c10ae5c66e6fa2"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5174b677b2536f97776e6b67e8c10ae5c66e6fa2":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}