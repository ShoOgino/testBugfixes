{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Clause.Violation],List[Clause.Violation]).mjava","commits":[{"id":"eaca6a0674512222004d9a2b0ca95d86bda20f1c","date":1508160449,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Clause.Violation],List[Clause.Violation]).mjava","pathOld":"/dev/null","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Clause.Violation> fresh, List<Clause.Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Clause.Violation freshViolation = fresh.get(i);\n        Clause.Violation oldViolation = null;\n        for (Clause.Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c721fca3c540a91b445e6c57e51e2fcb64af01a7","date":1508161002,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Violation],List[Violation]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/Suggester#isLessSerious(List[Clause.Violation],List[Clause.Violation]).mjava","sourceNew":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Violation> fresh, List<Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Violation freshViolation = fresh.get(i);\n        Violation oldViolation = null;\n        for (Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","sourceOld":"  //check if the fresh set of violations is less serious than the last set of violations\n  boolean isLessSerious(List<Clause.Violation> fresh, List<Clause.Violation> old) {\n    if (old == null || fresh.size() < old.size()) return true;\n    if (fresh.size() == old.size()) {\n      for (int i = 0; i < fresh.size(); i++) {\n        Clause.Violation freshViolation = fresh.get(i);\n        Clause.Violation oldViolation = null;\n        for (Clause.Violation v : old) {\n          if (v.equals(freshViolation)) oldViolation = v;\n        }\n        if (oldViolation != null && freshViolation.isLessSerious(oldViolation)) return true;\n      }\n    }\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"]},"commit2Childs":{"c721fca3c540a91b445e6c57e51e2fcb64af01a7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eaca6a0674512222004d9a2b0ca95d86bda20f1c"],"eaca6a0674512222004d9a2b0ca95d86bda20f1c":["c721fca3c540a91b445e6c57e51e2fcb64af01a7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}