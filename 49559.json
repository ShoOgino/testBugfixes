{"path":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","commits":[{"id":"a076c3c721f685b7559308fdc2cd72d91bba67e5","date":1464168992,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e121d43b5a10f2df530f406f935102656e9c4e8","date":1464198131,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83870855d82aba6819217abeff5a40779dbb28b4","date":1464291012,"type":1,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fff83bdb893c1471efd78f6a9a3ce4f98120b9","date":1531895937,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","pathOld":"solr/core/src/test/org/apache/solr/uninverting/TestFieldCacheSort#testMaxScore().mjava","sourceNew":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testMaxScore() throws Exception {\n    Directory d = newDirectory();\n    // Not RIW because we need exactly 2 segs:\n    IndexWriter w = new IndexWriter(d, new IndexWriterConfig(new MockAnalyzer(random())));\n    int id = 0;\n    for(int seg=0;seg<2;seg++) {\n      for(int docIDX=0;docIDX<10;docIDX++) {\n        Document doc = new Document();\n        doc.add(new LegacyIntField(\"id\", docIDX, Field.Store.YES));\n        StringBuilder sb = new StringBuilder();\n        for(int i=0;i<id;i++) {\n          sb.append(' ');\n          sb.append(\"text\");\n        }\n        doc.add(newTextField(\"body\", sb.toString(), Field.Store.NO));\n        w.addDocument(doc);\n        id++;\n      }\n      w.commit();\n    }\n\n    IndexReader r = UninvertingReader.wrap(DirectoryReader.open(w),\n                    Collections.singletonMap(\"id\", Type.LEGACY_INTEGER));\n    w.close();\n    Query q = new TermQuery(new Term(\"body\", \"text\"));\n    IndexSearcher s = newSearcher(r);\n    float maxScore = s.search(q , 10).getMaxScore();\n    assertEquals(maxScore, s.search(q, 3, Sort.INDEXORDER, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, Sort.RELEVANCE, random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, false)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    assertEquals(maxScore, s.search(q, 3, new Sort(new SortField[] {new SortField(\"id\", SortField.Type.INT, true)}), random().nextBoolean(), true).getMaxScore(), 0.0);\n    TestUtil.checkReader(r);\n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0e121d43b5a10f2df530f406f935102656e9c4e8","81fff83bdb893c1471efd78f6a9a3ce4f98120b9"],"0e121d43b5a10f2df530f406f935102656e9c4e8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a076c3c721f685b7559308fdc2cd72d91bba67e5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"83870855d82aba6819217abeff5a40779dbb28b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0e121d43b5a10f2df530f406f935102656e9c4e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81fff83bdb893c1471efd78f6a9a3ce4f98120b9"]},"commit2Childs":{"a076c3c721f685b7559308fdc2cd72d91bba67e5":["0e121d43b5a10f2df530f406f935102656e9c4e8"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"0e121d43b5a10f2df530f406f935102656e9c4e8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81fff83bdb893c1471efd78f6a9a3ce4f98120b9","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a076c3c721f685b7559308fdc2cd72d91bba67e5","0e121d43b5a10f2df530f406f935102656e9c4e8","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"81fff83bdb893c1471efd78f6a9a3ce4f98120b9":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83870855d82aba6819217abeff5a40779dbb28b4":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","83870855d82aba6819217abeff5a40779dbb28b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}