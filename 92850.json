{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrReducer#setup(Context).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrReducer#setup(Context).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setup(Context context) throws IOException, InterruptedException {\n    SolrRecordWriter.addReducerContext(context);\n    Class<? extends UpdateConflictResolver> resolverClass = context.getConfiguration().getClass(\n        UPDATE_CONFLICT_RESOLVER, RetainMostRecentUpdateConflictResolver.class, UpdateConflictResolver.class);\n    \n    this.resolver = ReflectionUtils.newInstance(resolverClass, context.getConfiguration());\n    /*\n     * Note that ReflectionUtils.newInstance() above also implicitly calls\n     * resolver.configure(context.getConfiguration()) if the resolver\n     * implements org.apache.hadoop.conf.Configurable\n     */\n\n    this.exceptionHandler = new FaultTolerance(\n        context.getConfiguration().getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        context.getConfiguration().getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        context.getConfiguration().get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName()));\n    \n    this.heartBeater = new HeartBeater(context);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrReducer#setup(Context).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/SolrReducer#setup(Context).mjava","sourceNew":"  @Override\n  protected void setup(Context context) throws IOException, InterruptedException {\n    SolrRecordWriter.addReducerContext(context);\n    Class<? extends UpdateConflictResolver> resolverClass = context.getConfiguration().getClass(\n        UPDATE_CONFLICT_RESOLVER, RetainMostRecentUpdateConflictResolver.class, UpdateConflictResolver.class);\n    \n    this.resolver = ReflectionUtils.newInstance(resolverClass, context.getConfiguration());\n    /*\n     * Note that ReflectionUtils.newInstance() above also implicitly calls\n     * resolver.configure(context.getConfiguration()) if the resolver\n     * implements org.apache.hadoop.conf.Configurable\n     */\n\n    this.exceptionHandler = new FaultTolerance(\n        context.getConfiguration().getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        context.getConfiguration().getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        context.getConfiguration().get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName()));\n    \n    this.heartBeater = new HeartBeater(context);\n  }\n\n","sourceOld":"  @Override\n  protected void setup(Context context) throws IOException, InterruptedException {\n    SolrRecordWriter.addReducerContext(context);\n    Class<? extends UpdateConflictResolver> resolverClass = context.getConfiguration().getClass(\n        UPDATE_CONFLICT_RESOLVER, RetainMostRecentUpdateConflictResolver.class, UpdateConflictResolver.class);\n    \n    this.resolver = ReflectionUtils.newInstance(resolverClass, context.getConfiguration());\n    /*\n     * Note that ReflectionUtils.newInstance() above also implicitly calls\n     * resolver.configure(context.getConfiguration()) if the resolver\n     * implements org.apache.hadoop.conf.Configurable\n     */\n\n    this.exceptionHandler = new FaultTolerance(\n        context.getConfiguration().getBoolean(FaultTolerance.IS_PRODUCTION_MODE, false), \n        context.getConfiguration().getBoolean(FaultTolerance.IS_IGNORING_RECOVERABLE_EXCEPTIONS, false),\n        context.getConfiguration().get(FaultTolerance.RECOVERABLE_EXCEPTION_CLASSES, SolrServerException.class.getName()));\n    \n    this.heartBeater = new HeartBeater(context);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}