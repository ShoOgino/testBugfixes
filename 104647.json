{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema,boolean).mjava","commits":[{"id":"57273019d2938b9b30faae55f6983a2e71a56ec5","date":1550480608,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance.\n   *\n   * @param sdoc The input document.\n   * @param schema The index schema.\n   * @param forInPlaceUpdate Whether the document is being used for an in place update,\n   *                         see {@link DocumentBuilder#toDocument(SolrInputDocument, IndexSchema, boolean, boolean)}\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema, boolean forInPlaceUpdate) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, forInPlaceUpdate, true);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07749612bed4eb54dd05255c1434c301133310c1","date":1554879779,"type":3,"author":"Moshe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#toSolrDoc(SolrInputDocument,IndexSchema,boolean).mjava","sourceNew":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance.\n   *\n   * @param sdoc The input document.\n   * @param schema The index schema.\n   * @param forInPlaceUpdate Whether the document is being used for an in place update,\n   *                         see {@link DocumentBuilder#toDocument(SolrInputDocument, IndexSchema, boolean, boolean)}\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema, boolean forInPlaceUpdate) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, forInPlaceUpdate, true);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    SolrDocument solrDoc = toSolrDoc(out, schema);\n\n    // add child docs\n    for(SolrInputField solrInputField: sdoc) {\n      if(solrInputField.getFirstValue() instanceof SolrInputDocument) {\n        // is child doc\n        Object val = solrInputField.getValue();\n        Iterator<SolrDocument> childDocs = solrInputField.getValues().stream()\n            .map(x -> toSolrDoc((SolrInputDocument) x, schema)).iterator();\n        if(val instanceof Collection) {\n          // add as collection even if single element collection\n          solrDoc.setField(solrInputField.getName(), Lists.newArrayList(childDocs));\n        } else {\n          // single child doc\n          solrDoc.setField(solrInputField.getName(), childDocs.next());\n        }\n      }\n    }\n\n    return solrDoc;\n  }\n\n","sourceOld":"  /**\n   * Converts a SolrInputDocument to SolrDocument, using an IndexSchema instance.\n   *\n   * @param sdoc The input document.\n   * @param schema The index schema.\n   * @param forInPlaceUpdate Whether the document is being used for an in place update,\n   *                         see {@link DocumentBuilder#toDocument(SolrInputDocument, IndexSchema, boolean, boolean)}\n   */\n  public static SolrDocument toSolrDoc(SolrInputDocument sdoc, IndexSchema schema, boolean forInPlaceUpdate) {\n    // TODO what about child / nested docs?\n    // TODO: do something more performant than this double conversion\n    Document doc = DocumentBuilder.toDocument(sdoc, schema, forInPlaceUpdate, true);\n\n    // copy the stored fields only\n    Document out = new Document();\n    for (IndexableField f : doc.getFields()) {\n      if (f.fieldType().stored()) {\n        out.add(f);\n      } else if (f.fieldType().docValuesType() != DocValuesType.NONE) {\n        SchemaField schemaField = schema.getFieldOrNull(f.name());\n        if (schemaField != null && !schemaField.stored() && schemaField.useDocValuesAsStored()) {\n          out.add(f);\n        }\n      } else {\n        log.debug(\"Don't know how to handle field {}\", f);\n      }\n    }\n\n    return toSolrDoc(out, schema);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57273019d2938b9b30faae55f6983a2e71a56ec5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"07749612bed4eb54dd05255c1434c301133310c1":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07749612bed4eb54dd05255c1434c301133310c1"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57273019d2938b9b30faae55f6983a2e71a56ec5"],"57273019d2938b9b30faae55f6983a2e71a56ec5":["07749612bed4eb54dd05255c1434c301133310c1"],"07749612bed4eb54dd05255c1434c301133310c1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}