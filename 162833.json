{"path":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","commits":[{"id":"fa11c355cd3b3b9207608b85fbd33b34f6f1966e","date":1361303536,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"/dev/null","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        break;\n      }\n    }\n\n    assertTrue(\"test keystore does not exist, can't be used for randomized \" +\n               \"ssl testing: \" + TEST_KEYSTORE.getAbsolutePath(), \n               TEST_KEYSTORE.exists() );\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["82f3f6e1a1e11b4620e73bf779193437428d9374"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"82f3f6e1a1e11b4620e73bf779193437428d9374","date":1370282281,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        break;\n      }\n    }\n\n    assertTrue(\"test keystore does not exist, can't be used for randomized \" +\n               \"ssl testing: \" + TEST_KEYSTORE.getAbsolutePath(), \n               TEST_KEYSTORE.exists() );\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","bugFix":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ad87868b299ae70f519de3945968de8f3604216","date":1380203849,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n    // consume the same amount of random no matter what\n    final boolean trySsl = random().nextBoolean();\n    final boolean trySslClientAuth = random().nextBoolean();\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      manageSslProps = false;\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n    \n    // only randomize SSL if none of the SSL_PROPS are already set\n    final Map<Object,Object> sysprops = System.getProperties();\n    for (String prop : SSL_PROPS.keySet()) {\n      if (sysprops.containsKey(prop)) {\n        log.info(\"System property explicitly set, so skipping randomized ssl properties: \" + prop);\n        manageSslProps = false;\n        return;\n      }\n    }\n\n    if (manageSslProps) {\n      log.info(\"Randomized ssl ({}) and clientAuth ({})\", trySsl, trySslClientAuth);\n      for (String prop : SSL_PROPS.keySet()) {\n        System.setProperty(prop, SSL_PROPS.get(prop));\n      }\n      // now explicitly re-set the two random values\n      System.setProperty(\"tests.jettySsl\", String.valueOf(trySsl));\n      System.setProperty(\"tests.jettySsl.clientAuth\", String.valueOf(trySslClientAuth));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72","date":1391985588,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","pathOld":"solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase#beforeSolrJettyTestBase().mjava","sourceNew":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeSolrJettyTestBase() throws Exception {\n\n\n    \n    // only randomize SSL if we are a solr test with access to the example keystore\n    if (null == getExampleKeystoreFile()) {\n      log.info(\"Solr's example keystore not defined (not a solr test?) skipping SSL randomization\");\n      return;\n    }\n\n    assertTrue(\"test keystore does not exist, randomized ssl testing broken: \" +\n               getExampleKeystoreFile().getAbsolutePath(), \n               getExampleKeystoreFile().exists() );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"82f3f6e1a1e11b4620e73bf779193437428d9374":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["82f3f6e1a1e11b4620e73bf779193437428d9374","19275ba31e621f6da1b83bf13af75233876fd3d4"],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["2ad87868b299ae70f519de3945968de8f3604216"],"2ad87868b299ae70f519de3945968de8f3604216":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["82f3f6e1a1e11b4620e73bf779193437428d9374"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"]},"commit2Childs":{"82f3f6e1a1e11b4620e73bf779193437428d9374":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","19275ba31e621f6da1b83bf13af75233876fd3d4"],"fa11c355cd3b3b9207608b85fbd33b34f6f1966e":["82f3f6e1a1e11b4620e73bf779193437428d9374"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2ad87868b299ae70f519de3945968de8f3604216":["57641b2e9dc6155be493cfb6ae9b8a9c8ceffa72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fa11c355cd3b3b9207608b85fbd33b34f6f1966e"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","2ad87868b299ae70f519de3945968de8f3604216"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}