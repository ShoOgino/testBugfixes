{"path":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/index/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f793470bad5ce8422502e33eaae65fc6a3271bd2","date":1360479442,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      DrillDownQuery drillDown = new DrillDownQuery(fip, new MatchAllDocsQuery());\n      drillDown.add(drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      Query drillDown = DrillDown.query(fsp, new MatchAllDocsQuery(), Occur.MUST, drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      FacetLabel drillDownCP = new FacetLabel(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      DrillDownQuery drillDown = new DrillDownQuery(fip, new MatchAllDocsQuery());\n      drillDown.add(drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      DrillDownQuery drillDown = new DrillDownQuery(fip, new MatchAllDocsQuery());\n      drillDown.add(drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      FacetLabel drillDownCP = new FacetLabel(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      DrillDownQuery drillDown = new DrillDownQuery(fip, new MatchAllDocsQuery());\n      drillDown.add(drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/util/TestFacetsPayloadMigrationReader#verifyDrillDown(Map[String,Integer],FacetIndexingParams,DirectoryReader,TaxonomyReader,IndexSearcher).mjava","sourceNew":null,"sourceOld":"  private void verifyDrillDown(Map<String,Integer> expectedCounts, FacetIndexingParams fip, DirectoryReader indexReader, \n      TaxonomyReader taxoReader, IndexSearcher searcher) throws IOException {\n    // verify drill-down\n    for (String dim : expectedCounts.keySet()) {\n      CategoryPath drillDownCP = new CategoryPath(dim);\n      FacetSearchParams fsp = new FacetSearchParams(fip, new CountFacetRequest(drillDownCP, 10));\n      DrillDownQuery drillDown = new DrillDownQuery(fip, new MatchAllDocsQuery());\n      drillDown.add(drillDownCP);\n      TotalHitCountCollector total = new TotalHitCountCollector();\n      FacetsCollector fc = FacetsCollector.create(fsp, indexReader, taxoReader);\n      searcher.search(drillDown, MultiCollector.wrap(fc, total));\n      assertTrue(\"no results for drill-down query \" + drillDown, total.getTotalHits() > 0);\n      List<FacetResult> facetResults = fc.getFacetResults();\n      assertEquals(1, facetResults.size());\n      FacetResultNode rootNode = facetResults.get(0).getFacetResultNode();\n      assertEquals(\"wrong count for \" + dim, expectedCounts.get(dim).intValue(), (int) rootNode.value);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d33e19a97046248623a7591aeaa6547233fd15e2":["c190847801a50f4dd20fd639bdc29b54ea3b288b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc728b07df73b197e6d940d27f9b08b63918f13":["f793470bad5ce8422502e33eaae65fc6a3271bd2","d33e19a97046248623a7591aeaa6547233fd15e2"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["f793470bad5ce8422502e33eaae65fc6a3271bd2"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["f793470bad5ce8422502e33eaae65fc6a3271bd2"],"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f793470bad5ce8422502e33eaae65fc6a3271bd2":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}