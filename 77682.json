{"path":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","commits":[{"id":"1257989f08e6750eeab73e5e9f7847fc48b04a1a","date":1531102463,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    List<String> addedIds = new ArrayList<>();\n    Replica oldLeader = corruptLeader(addedIds);\n\n    waitForState(\"Timeout waiting for new replica become leader\", COLLECTION, (liveNodes, collectionState) -> {\n      Slice slice = collectionState.getSlice(\"shard1\");\n\n      if (slice.getReplicas().size() != 2) return false;\n      if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n      return true;\n    });\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n    Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n    assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n    assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n    for (String id : addedIds) {\n      assertNotNull(cluster.getSolrClient().getById(COLLECTION,id));\n    }\n    log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(COLLECTION));\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":0,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    List<String> addedIds = new ArrayList<>();\n    Replica oldLeader = corruptLeader(addedIds);\n\n    waitForState(\"Timeout waiting for new replica become leader\", COLLECTION, (liveNodes, collectionState) -> {\n      Slice slice = collectionState.getSlice(\"shard1\");\n\n      if (slice.getReplicas().size() != 2) return false;\n      if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n      return true;\n    });\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n    Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n    assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n    assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n    for (String id : addedIds) {\n      assertNotNull(cluster.getSolrClient().getById(COLLECTION,id));\n    }\n    log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(COLLECTION));\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc37eb63edc0a1db0d74e5f531a60b987f98f327","date":1531827749,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    CollectionAdminRequest\n        .createCollection(COLLECTION, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n\n    List<String> addedIds = new ArrayList<>();\n    Replica oldLeader = corruptLeader(addedIds);\n\n    waitForState(\"Timeout waiting for new replica become leader\", COLLECTION, (liveNodes, collectionState) -> {\n      Slice slice = collectionState.getSlice(\"shard1\");\n\n      if (slice.getReplicas().size() != 2) return false;\n      if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n      return true;\n    });\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), COLLECTION, 120000);\n    Slice shard = getCollectionState(COLLECTION).getSlice(\"shard1\");\n    assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n    assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n    for (String id : addedIds) {\n      assertNotNull(cluster.getSolrClient().getById(COLLECTION,id));\n    }\n    log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(COLLECTION));\n\n    CollectionAdminRequest.deleteCollection(COLLECTION).process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":0,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, 2);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a966532d92cf9ba2856f15a8140151bb6b518e4b","date":1588290631,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/LeaderTragicEventTest#test().mjava","sourceNew":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, 2);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      if (log.isInfoEnabled()) {\n        log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n      }\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","sourceOld":"  @Test\n  public void test() throws Exception {\n    final String collection = \"collection1\";\n    cluster.getSolrClient().setDefaultCollection(collection);\n    CollectionAdminRequest\n        .createCollection(collection, \"config\", 1, 2)\n        .process(cluster.getSolrClient());\n    cluster.waitForActiveCollection(collection, 1, 2);\n    try {\n      List<String> addedIds = new ArrayList<>();\n      Replica oldLeader = corruptLeader(collection, addedIds);\n\n      waitForState(\"Timeout waiting for new replica become leader\", collection, (liveNodes, collectionState) -> {\n        Slice slice = collectionState.getSlice(\"shard1\");\n\n        if (slice.getReplicas().size() != 2) return false;\n        if (slice.getLeader() == null) return false;\n        if (slice.getLeader().getName().equals(oldLeader.getName())) return false;\n\n        return true;\n      });\n      ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), collection, 120000);\n      Slice shard = getCollectionState(collection).getSlice(\"shard1\");\n      assertNotSame(shard.getLeader().getNodeName(), oldLeader.getNodeName());\n      assertEquals(getNonLeader(shard).getNodeName(), oldLeader.getNodeName());\n\n      for (String id : addedIds) {\n        assertNotNull(cluster.getSolrClient().getById(collection,id));\n      }\n      log.info(\"The test success oldLeader:{} currentState:{}\", oldLeader, getCollectionState(collection));\n\n    } finally {\n      CollectionAdminRequest.deleteCollection(collection).process(cluster.getSolrClient());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["fc37eb63edc0a1db0d74e5f531a60b987f98f327"],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["1257989f08e6750eeab73e5e9f7847fc48b04a1a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1257989f08e6750eeab73e5e9f7847fc48b04a1a"]},"commit2Childs":{"1257989f08e6750eeab73e5e9f7847fc48b04a1a":["fc37eb63edc0a1db0d74e5f531a60b987f98f327","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fc37eb63edc0a1db0d74e5f531a60b987f98f327":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["a966532d92cf9ba2856f15a8140151bb6b518e4b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1257989f08e6750eeab73e5e9f7847fc48b04a1a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a966532d92cf9ba2856f15a8140151bb6b518e4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}