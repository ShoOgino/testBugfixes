{"path":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum))\n      pendingDeleteCount++;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (deletedDocs == null) {\n      deletedDocs = new BitVector(maxDoc());\n      deletedDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // deletedDocs BitVector so decRef the current deletedDocsRef,\n    // clone the BitVector, create a new deletedDocsRef\n    if (deletedDocsRef.get() > 1) {\n      AtomicInteger oldRef = deletedDocsRef;\n      deletedDocs = cloneDeletedDocs(deletedDocs);\n      deletedDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    deletedDocsDirty = true;\n    if (!deletedDocs.getAndSet(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75ec8c9aaa10ac00b30fd4c2465409770c838f7b","date":1323020115,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  // nocommit: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d6c554455db6752562dfe09614cdf3fd06062c3","date":1323301343,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  // nocommit: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3615ce4a1f785ae1b779244de52c6a7d99227e60","date":1323422019,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","date":1323437438,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  @Override\n  protected void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7d9cdceb051035b069ec36719809d0cd837777b","date":1323905856,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n    // liveDocs are now dirty:\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","sourceOld":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781537683b56c6c5aad3b1046f00daf1c7ea93ae","date":1323968781,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SegmentReader#doDelete(int).mjava","sourceNew":null,"sourceOld":"  // TODO: remove deletions from SR\n  void doDelete(int docNum) {\n    if (liveDocs == null) {\n      liveDocs = new BitVector(maxDoc());\n      liveDocs.setAll();\n      liveDocsRef = new AtomicInteger(1);\n    }\n    // there is more than 1 SegmentReader with a reference to this\n    // liveDocs BitVector so decRef the current liveDocsRef,\n    // clone the BitVector, create a new liveDocsRef\n    if (liveDocsRef.get() > 1) {\n      AtomicInteger oldRef = liveDocsRef;\n      liveDocs = cloneDeletedDocs(liveDocs);\n      liveDocsRef = new AtomicInteger(1);\n      oldRef.decrementAndGet();\n    }\n    // we need a key reflecting actual deletes (if existent or not):\n    combinedCoreAndDeletesKey = new Object();\n    // liveDocs are now dirty:\n    liveDocsDirty = true;\n    if (liveDocs.getAndClear(docNum)) {\n      pendingDeleteCount++;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["b7d9cdceb051035b069ec36719809d0cd837777b"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["01e5948db9a07144112d2f08f28ca2e3cd880348","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a3776dccca01c11e7046323cfad46a3b4a471233":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","7d6c554455db6752562dfe09614cdf3fd06062c3"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b"],"b7d9cdceb051035b069ec36719809d0cd837777b":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"45669a651c970812a680841b97a77cce06af559f":["9454a6510e2db155fb01faa5c049b06ece95fab9","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"781537683b56c6c5aad3b1046f00daf1c7ea93ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"75ec8c9aaa10ac00b30fd4c2465409770c838f7b":["7d6c554455db6752562dfe09614cdf3fd06062c3"],"ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00":[],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["75ec8c9aaa10ac00b30fd4c2465409770c838f7b","ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","3615ce4a1f785ae1b779244de52c6a7d99227e60"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"01e5948db9a07144112d2f08f28ca2e3cd880348":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3615ce4a1f785ae1b779244de52c6a7d99227e60":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","b7d9cdceb051035b069ec36719809d0cd837777b"],"7d6c554455db6752562dfe09614cdf3fd06062c3":["3615ce4a1f785ae1b779244de52c6a7d99227e60"],"b7d9cdceb051035b069ec36719809d0cd837777b":["781537683b56c6c5aad3b1046f00daf1c7ea93ae"],"45669a651c970812a680841b97a77cce06af559f":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["135621f3a0670a9394eb563224a3b76cc4dddc0f","01e5948db9a07144112d2f08f28ca2e3cd880348","a3776dccca01c11e7046323cfad46a3b4a471233","45669a651c970812a680841b97a77cce06af559f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ba5bc70a1fc1e0abc1eb4171af0d6f2532711c00","135621f3a0670a9394eb563224a3b76cc4dddc0f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","45669a651c970812a680841b97a77cce06af559f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}