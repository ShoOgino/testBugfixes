{"path":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","commits":[{"id":"8b49777657109e40eeddc1c8b0f7850d3c06e1ed","date":1428506188,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery q = newBooleanQuery(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery q = newBooleanQuery(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"804b857d1066ab5185b3b9101bde41b0b71426ec","date":1435846169,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q.build();\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BytesRef bytes = termAtt.getBytesRef();\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      termAtt.fillBytesRef();\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(bytes)));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81d0720146de53dd3a4a023d2a3d1089d86d748d","date":1442268215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    BooleanQuery.Builder q = new BooleanQuery.Builder();\n    q.setDisableCoord(true);\n\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    while (stream.incrementToken()) {\n      Query currentQuery = newTermQuery(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n      q.add(currentQuery, BooleanClause.Occur.SHOULD);\n    }\n    \n    return q.build();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38b5bd3ae837751f57f363e9a41b833794222814","date":1445342257,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, BytesRef.deepCopyOf(termAtt.getBytesRef())));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bd564443cc619840b8e9859c46194b087f94ffce","date":1479727773,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  protected Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd70af1186a18d10a788433cc33be44327a83ce7","date":1479767946,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  protected Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  private Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ac99c5ad157ae4ccdb201f140463a90f12f07b3","date":1582540181,"type":3,"author":"Alessandro Benedetti","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/QueryBuilder#analyzeBoolean(String,TokenStream).mjava","sourceNew":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  protected Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    BoostAttribute boostAtt = stream.addAttribute(BoostAttribute.class);\n    \n    stream.reset();\n    List<TermAndBoost> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new TermAndBoost(new Term(field, termAtt.getBytesRef()), boostAtt.getBoost()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new TermAndBoost[0]));\n  }\n\n","sourceOld":"  /** \n   * Creates simple boolean query from the cached tokenstream contents \n   */\n  protected Query analyzeBoolean(String field, TokenStream stream) throws IOException {\n    TermToBytesRefAttribute termAtt = stream.getAttribute(TermToBytesRefAttribute.class);\n    \n    stream.reset();\n    List<Term> terms = new ArrayList<>();\n    while (stream.incrementToken()) {\n      terms.add(new Term(field, termAtt.getBytesRef()));\n    }\n    \n    return newSynonymQuery(terms.toArray(new Term[terms.size()]));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["bd564443cc619840b8e9859c46194b087f94ffce"],"804b857d1066ab5185b3b9101bde41b0b71426ec":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bd564443cc619840b8e9859c46194b087f94ffce":["38b5bd3ae837751f57f363e9a41b833794222814"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"38b5bd3ae837751f57f363e9a41b833794222814":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"cd70af1186a18d10a788433cc33be44327a83ce7":["38b5bd3ae837751f57f363e9a41b833794222814","bd564443cc619840b8e9859c46194b087f94ffce"],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3"]},"commit2Childs":{"3ac99c5ad157ae4ccdb201f140463a90f12f07b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"804b857d1066ab5185b3b9101bde41b0b71426ec":["81d0720146de53dd3a4a023d2a3d1089d86d748d"],"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["804b857d1066ab5185b3b9101bde41b0b71426ec"],"8b49777657109e40eeddc1c8b0f7850d3c06e1ed":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"bd564443cc619840b8e9859c46194b087f94ffce":["3ac99c5ad157ae4ccdb201f140463a90f12f07b3","cd70af1186a18d10a788433cc33be44327a83ce7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8b49777657109e40eeddc1c8b0f7850d3c06e1ed"],"38b5bd3ae837751f57f363e9a41b833794222814":["bd564443cc619840b8e9859c46194b087f94ffce","cd70af1186a18d10a788433cc33be44327a83ce7"],"cd70af1186a18d10a788433cc33be44327a83ce7":[],"81d0720146de53dd3a4a023d2a3d1089d86d748d":["38b5bd3ae837751f57f363e9a41b833794222814"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd70af1186a18d10a788433cc33be44327a83ce7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}