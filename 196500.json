{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","commits":[{"id":"10b9c6c42133576daaccbd79bd04c88511b9caca","date":1455930223,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"/dev/null","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"915201312eef398482b3dffe8a297e1809f3b29a","date":1468722990,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = 0;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = 0;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c969f15cd04d31e520319c619a445ae21f02d72","date":1479263638,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap<>();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n    Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, liveNodes);\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = 0;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap<>();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n    Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, liveNodes);\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Collection<Slice> slices = clusterState.getActiveSlices(collection);\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint = 0;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, clusterState.getLiveNodes());\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c84df91ca6a2e8d6f26f185663112546a27f6b45","date":1536077760,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TopicStream#getCheckpoints().mjava","sourceNew":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap<>();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n    Slice[] slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, liveNodes);\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","sourceOld":"  private void getCheckpoints() throws IOException {\n    this.checkpoints = new HashMap<>();\n    ZkStateReader zkStateReader = cloudSolrClient.getZkStateReader();\n\n    Collection<Slice> slices = CloudSolrStream.getSlices(this.collection, zkStateReader, false);\n\n    ClusterState clusterState = zkStateReader.getClusterState();\n    Set<String> liveNodes = clusterState.getLiveNodes();\n\n    for(Slice slice : slices) {\n      String sliceName = slice.getName();\n      long checkpoint;\n      if(initialCheckpoint > -1) {\n        checkpoint = initialCheckpoint;\n      } else {\n        checkpoint = getCheckpoint(slice, liveNodes);\n      }\n\n      this.checkpoints.put(sliceName, checkpoint);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["8c969f15cd04d31e520319c619a445ae21f02d72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","8c969f15cd04d31e520319c619a445ae21f02d72"],"915201312eef398482b3dffe8a297e1809f3b29a":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"8c969f15cd04d31e520319c619a445ae21f02d72":["915201312eef398482b3dffe8a297e1809f3b29a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["10b9c6c42133576daaccbd79bd04c88511b9caca","915201312eef398482b3dffe8a297e1809f3b29a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c84df91ca6a2e8d6f26f185663112546a27f6b45"]},"commit2Childs":{"10b9c6c42133576daaccbd79bd04c88511b9caca":["915201312eef398482b3dffe8a297e1809f3b29a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c84df91ca6a2e8d6f26f185663112546a27f6b45":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["10b9c6c42133576daaccbd79bd04c88511b9caca"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":[],"915201312eef398482b3dffe8a297e1809f3b29a":["8c969f15cd04d31e520319c619a445ae21f02d72","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"8c969f15cd04d31e520319c619a445ae21f02d72":["c84df91ca6a2e8d6f26f185663112546a27f6b45","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}