{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"/dev/null","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(prefix, new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1ec890fad2ea96317f4429e0aa0085bb25673641"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsWriter.PendingBlock#compileIndex(List[PendingBlock],RAMOutputStream).mjava","sourceNew":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(prefix, new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","sourceOld":"    public void compileIndex(List<PendingBlock> floorBlocks, RAMOutputStream scratchBytes) throws IOException {\n\n      assert (isFloor && floorBlocks != null && floorBlocks.size() != 0) || (!isFloor && floorBlocks == null): \"isFloor=\" + isFloor + \" floorBlocks=\" + floorBlocks;\n\n      assert scratchBytes.getFilePointer() == 0;\n\n      // TODO: try writing the leading vLong in MSB order\n      // (opposite of what Lucene does today), for better\n      // outputs sharing in the FST\n      scratchBytes.writeVLong(encodeOutput(fp, hasTerms, isFloor));\n      if (isFloor) {\n        scratchBytes.writeVInt(floorBlocks.size());\n        for (PendingBlock sub : floorBlocks) {\n          assert sub.floorLeadByte != -1;\n          //if (DEBUG) {\n          //  System.out.println(\"    write floorLeadByte=\" + Integer.toHexString(sub.floorLeadByte&0xff));\n          //}\n          scratchBytes.writeByte((byte) sub.floorLeadByte);\n          assert sub.fp > fp;\n          scratchBytes.writeVLong((sub.fp - fp) << 1 | (sub.hasTerms ? 1 : 0));\n        }\n      }\n\n      final ByteSequenceOutputs outputs = ByteSequenceOutputs.getSingleton();\n      final Builder<BytesRef> indexBuilder = new Builder<BytesRef>(FST.INPUT_TYPE.BYTE1,\n                                                                   0, 0, true, false, Integer.MAX_VALUE,\n                                                                   outputs, null);\n      //if (DEBUG) {\n      //  System.out.println(\"  compile index for prefix=\" + prefix);\n      //}\n      //indexBuilder.DEBUG = false;\n      final byte[] bytes = new byte[(int) scratchBytes.getFilePointer()];\n      assert bytes.length > 0;\n      scratchBytes.writeTo(bytes, 0);\n      indexBuilder.add(prefix, new BytesRef(bytes, 0, bytes.length));\n      scratchBytes.reset();\n\n      // Copy over index for all sub-blocks\n\n      if (subIndices != null) {\n        for(FST<BytesRef> subIndex : subIndices) {\n          append(indexBuilder, subIndex);\n        }\n      }\n\n      if (floorBlocks != null) {\n        for (PendingBlock sub : floorBlocks) {\n          if (sub.subIndices != null) {\n            for(FST<BytesRef> subIndex : sub.subIndices) {\n              append(indexBuilder, subIndex);\n            }\n          }\n          sub.subIndices = null;\n        }\n      }\n\n      index = indexBuilder.finish();\n      subIndices = null;\n\n      /*\n      Writer w = new OutputStreamWriter(new FileOutputStream(\"out.dot\"));\n      Util.toDot(index, w, false, false);\n      System.out.println(\"SAVED to out.dot\");\n      w.close();\n      */\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}