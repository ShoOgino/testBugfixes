{"path":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","commits":[{"id":"fd9cc9d77712aba3662f24632df7539ab75e3667","date":1309095238,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seek(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seek(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b91922b55d15444d554721b352861d028eb8278","date":1320421415,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryPostingsFormat.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/memory/MemoryCodec.FSTTermsEnum#seekCeil(BytesRef,boolean).mjava","sourceNew":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public SeekStatus seekCeil(BytesRef text, boolean useCache /* ignored */) throws IOException {\n      if (VERBOSE) System.out.println(\"te.seek text=\" + field.name + \":\" + text.utf8ToString() + \" this=\" + this);\n      current = fstEnum.seekCeil(text);\n      if (current == null) {\n        return SeekStatus.END;\n      } else {\n        if (VERBOSE) {\n          System.out.println(\"  got term=\" + current.input.utf8ToString());\n          for(int i=0;i<current.output.length;i++) {\n            System.out.println(\"    \" + Integer.toHexString(current.output.bytes[i]&0xFF));\n          }\n        }\n\n        didDecode = false;\n\n        if (text.equals(current.input)) {\n          if (VERBOSE) System.out.println(\"  found!\");\n          return SeekStatus.FOUND;\n        } else {\n          if (VERBOSE) System.out.println(\"  not found: \" + current.input.utf8ToString());\n          return SeekStatus.NOT_FOUND;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7b91922b55d15444d554721b352861d028eb8278":["fd9cc9d77712aba3662f24632df7539ab75e3667"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2553b00f699380c64959ccb27991289aae87be2e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"fd9cc9d77712aba3662f24632df7539ab75e3667":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fd9cc9d77712aba3662f24632df7539ab75e3667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b91922b55d15444d554721b352861d028eb8278"]},"commit2Childs":{"7b91922b55d15444d554721b352861d028eb8278":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2553b00f699380c64959ccb27991289aae87be2e","fd9cc9d77712aba3662f24632df7539ab75e3667","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"2553b00f699380c64959ccb27991289aae87be2e":[],"fd9cc9d77712aba3662f24632df7539ab75e3667":["7b91922b55d15444d554721b352861d028eb8278","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}