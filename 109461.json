{"path":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","commits":[{"id":"7395bdaa5646a7eb2087b1043b713b4bf3294a5c","date":1305324215,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3a8a449466c1ff7ce2274fe73dab487256964b4","date":1305735867,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","date":1309197122,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2553b00f699380c64959ccb27991289aae87be2e","date":1309290151,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/SolrTestCaseJ4#assertJQ(SolrQueryRequest,double,String...).mjava","sourceNew":"  /**\n   * Validates a query matches some JSON test expressions and closes the\n   * query. The text expression is of the form path:JSON.  To facilitate\n   * easy embedding in Java strings, the JSON can have double quotes\n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete\n   * structures, but doing so can result in fragile tests if you are\n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","sourceOld":"  /** \n   * Validates a query matches some JSON test expressions and closes the \n   * query. The text expression is of the form path:JSON.  To facilitate \n   * easy embedding in Java strings, the JSON can have double quotes \n   * replaced with single quotes.\n   * <p>\n   * Please use this with care: this makes it easy to match complete \n   * structures, but doing so can result in fragile tests if you are \n   * matching more than what you want to test.\n   * </p>\n   * @param req Solr request to execute\n   * @param delta tollerance allowed in comparing float/double values\n   * @param tests JSON path expression + '==' + expected value\n   */\n  public static void assertJQ(SolrQueryRequest req, double delta, String... tests) throws Exception {\n    SolrParams params =  null;\n    try {\n      params = req.getParams();\n      if (!\"json\".equals(params.get(\"wt\",\"xml\")) || params.get(\"indent\")==null) {\n        ModifiableSolrParams newParams = new ModifiableSolrParams(params);\n        newParams.set(\"wt\",\"json\");\n        if (params.get(\"indent\")==null) newParams.set(\"indent\",\"true\");\n        req.setParams(newParams);\n      }\n\n      String response;\n      boolean failed=true;\n      try {\n        response = h.query(req);\n        failed = false;\n      } finally {\n        if (failed) {\n          log.error(\"REQUEST FAILED: \" + req.getParamString());\n        }\n      }\n\n      for (String test : tests) {\n        if (test == null || test.length()==0) continue;\n        String testJSON = test.replace('\\'', '\"');\n\n        try {\n          failed = true;\n          String err = JSONTestUtil.match(response, testJSON, delta);\n          failed = false;\n          if (err != null) {\n            log.error(\"query failed JSON validation. error=\" + err +\n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n            throw new RuntimeException(err);\n          }\n        } finally {\n          if (failed) {\n            log.error(\"JSON query validation threw an exception.\" + \n                \"\\n expected =\" + testJSON +\n                \"\\n response = \" + response +\n                \"\\n request = \" + req.getParamString()\n            );\n          }\n        }\n      }\n    } finally {\n      // restore the params\n      if (params != null && params != req.getParams()) req.setParams(params);\n    }\n  }  \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["2553b00f699380c64959ccb27991289aae87be2e"],"c26f00b574427b55127e869b935845554afde1fa":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c"],"2553b00f699380c64959ccb27991289aae87be2e":["a3776dccca01c11e7046323cfad46a3b4a471233","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"7395bdaa5646a7eb2087b1043b713b4bf3294a5c":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233","f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"c3a8a449466c1ff7ce2274fe73dab487256964b4":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":["2553b00f699380c64959ccb27991289aae87be2e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7395bdaa5646a7eb2087b1043b713b4bf3294a5c","c3a8a449466c1ff7ce2274fe73dab487256964b4","a3776dccca01c11e7046323cfad46a3b4a471233"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"2553b00f699380c64959ccb27991289aae87be2e":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"f8bf47b67b38083a0c4d9d2e3f53b59a48e8db34":["c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","2553b00f699380c64959ccb27991289aae87be2e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c3a8a449466c1ff7ce2274fe73dab487256964b4","a258fbb26824fd104ed795e5d9033d2d040049ee","d083e83f225b11e5fdd900e83d26ddb385b6955c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}