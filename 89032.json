{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object[]).mjava","commits":[{"id":"ad296b823241a7204dcaa288b06f3df339fb2ed6","date":1551795554,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object).mjava","sourceNew":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object value) throws IOException {\n\n    if(!(value instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", value.getClass().getName(), value.toString());\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution();\n    \n    double[] backingValues = ((List<?>)value).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ecccbbb5df38d30672b757f22eeef2050098e9","date":1576767784,"type":5,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4c66470e527299cc148ad0b3441d08dfb7cb9e03","date":1576859740,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/eval/EmpiricalDistributionEvaluator#doWork(Object[]).mjava","sourceNew":"  @Override\n  public Object doWork(Object... values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","sourceOld":"  @Override\n  public Object doWork(Object[] values) throws IOException {\n\n    if(!(values[0] instanceof List<?>)){\n      throw new StreamEvaluatorException(\"List value expected but found type %s for value %s\", values[0].getClass().getName(), values[0].toString());\n    }\n\n    if(values.length == 2) {\n      Number n = (Number)values[1];\n      bins = n.intValue();\n    }\n\n    EmpiricalDistribution empiricalDistribution = new EmpiricalDistribution(bins);\n    \n    double[] backingValues = ((List<?>)values[0]).stream().mapToDouble(innerValue -> ((Number)innerValue).doubleValue()).sorted().toArray();\n\n    empiricalDistribution.load(backingValues);\n\n    return empiricalDistribution;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":["ad296b823241a7204dcaa288b06f3df339fb2ed6","a1ecccbbb5df38d30672b757f22eeef2050098e9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a1ecccbbb5df38d30672b757f22eeef2050098e9"]},"commit2Childs":{"a1ecccbbb5df38d30672b757f22eeef2050098e9":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ad296b823241a7204dcaa288b06f3df339fb2ed6"],"ad296b823241a7204dcaa288b06f3df339fb2ed6":["a1ecccbbb5df38d30672b757f22eeef2050098e9","4c66470e527299cc148ad0b3441d08dfb7cb9e03"],"4c66470e527299cc148ad0b3441d08dfb7cb9e03":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4c66470e527299cc148ad0b3441d08dfb7cb9e03","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}