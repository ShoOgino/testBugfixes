{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(new Field(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dadf0f3286a34a0fee6e788ffce88624bf2984e","date":1294260428,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,Filter,boolean).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":"  public void searchFiltered(IndexWriter writer, Directory directory, Filter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":4,"author":"Michael Busch","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":null,"sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredSearch#searchFiltered(IndexWriter,Directory,SimpleDocIdSetFilter,boolean).mjava","sourceNew":null,"sourceOld":"  public void searchFiltered(IndexWriter writer, Directory directory, SimpleDocIdSetFilter filter, boolean optimize) {\n    try {\n      for (int i = 0; i < 60; i++) {//Simple docs\n        Document doc = new Document();\n        doc.add(newField(FIELD, Integer.toString(i), Field.Store.YES, Field.Index.NOT_ANALYZED));\n        writer.addDocument(doc);\n      }\n      if(optimize)\n        writer.optimize();\n      writer.close();\n\n      BooleanQuery booleanQuery = new BooleanQuery();\n      booleanQuery.add(new TermQuery(new Term(FIELD, \"36\")), BooleanClause.Occur.SHOULD);\n     \n     \n      IndexSearcher indexSearcher = new IndexSearcher(directory, true);\n      filter.setTopReader(indexSearcher.getIndexReader());\n      ScoreDoc[] hits = indexSearcher.search(booleanQuery, filter, 1000).scoreDocs;\n      assertEquals(\"Number of matched documents\", 1, hits.length);\n      indexSearcher.close();\n    }\n    catch (IOException e) {\n      fail(e.getMessage());\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["132903c28af3aa6f67284b78de91c0f0a99488c2","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","132903c28af3aa6f67284b78de91c0f0a99488c2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","2dadf0f3286a34a0fee6e788ffce88624bf2984e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dadf0f3286a34a0fee6e788ffce88624bf2984e"]},"commit2Childs":{"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"2dadf0f3286a34a0fee6e788ffce88624bf2984e":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["29ef99d61cda9641b6250bf9567329a6e65f901d","2dadf0f3286a34a0fee6e788ffce88624bf2984e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}