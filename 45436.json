{"path":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","commits":[{"id":"4f29ba80b723649f5feb7e37afe1a558dd2c1304","date":1278318805,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(String,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term.utf8ToString(), termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","sourceOld":"    public void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term, termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"/dev/null","sourceNew":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term.utf8ToString(), termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5f7137bd9491c6596681b1f56e481e17964e581","date":1294458451,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term.utf8ToString(), termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term.utf8ToString(), termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList termInfo = new NamedList();\n        fieldNL.add(term.utf8ToString(), termInfo);\n        if (fieldOptions.termFreq == true) {\n          termInfo.add(\"tf\", frequency);\n        }\n        if (useOffsets == true) {\n          NamedList theOffsets = new NamedList();\n          termInfo.add(\"offsets\", theOffsets);\n          for (int i = 0; i < offsets.length; i++) {\n            TermVectorOffsetInfo offset = offsets[i];\n            theOffsets.add(\"start\", offset.getStartOffset());\n            theOffsets.add(\"end\", offset.getEndOffset());\n          }\n        }\n        if (usePositions == true) {\n          NamedList positionsNL = new NamedList();\n          for (int i = 0; i < positions.length; i++) {\n            positionsNL.add(\"position\", positions[i]);\n          }\n          termInfo.add(\"positions\", positionsNL);\n        }\n        if (fieldOptions.docFreq == true) {\n          termInfo.add(\"df\", getDocFreq(term));\n        }\n        if (fieldOptions.tfIdf == true) {\n          double tfIdfVal = ((double) frequency) / getDocFreq(term);\n          termInfo.add(\"tf-idf\", tfIdfVal);\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b48b42b82c149773b4ccb139507e9bd29da91ca2","date":1309410544,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets == true) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions == true) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq == true) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf == true) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","pathOld":"solr/src/java/org/apache/solr/handler/component/TermVectorComponent.TVMapper#map(BytesRef,int,TermVectorOffsetInfo[],int[]).mjava","sourceNew":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void map(BytesRef term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n      NamedList<Object> termInfo = new NamedList<Object>();\n      fieldNL.add(term.utf8ToString(), termInfo);\n      if (fieldOptions.termFreq == true) {\n        termInfo.add(\"tf\", frequency);\n      }\n      if (useOffsets) {\n        NamedList<Number> theOffsets = new NamedList<Number>();\n        termInfo.add(\"offsets\", theOffsets);\n        for (int i = 0; i < offsets.length; i++) {\n          TermVectorOffsetInfo offset = offsets[i];\n          theOffsets.add(\"start\", offset.getStartOffset());\n          theOffsets.add(\"end\", offset.getEndOffset());\n        }\n      }\n      if (usePositions) {\n        NamedList<Integer> positionsNL = new NamedList<Integer>();\n        for (int i = 0; i < positions.length; i++) {\n          positionsNL.add(\"position\", positions[i]);\n        }\n        termInfo.add(\"positions\", positionsNL);\n      }\n      if (fieldOptions.docFreq) {\n        termInfo.add(\"df\", getDocFreq(term));\n      }\n      if (fieldOptions.tfIdf) {\n        double tfIdfVal = ((double) frequency) / getDocFreq(term);\n        termInfo.add(\"tf-idf\", tfIdfVal);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b5f7137bd9491c6596681b1f56e481e17964e581"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5f7137bd9491c6596681b1f56e481e17964e581":["4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"c26f00b574427b55127e869b935845554afde1fa":["b48b42b82c149773b4ccb139507e9bd29da91ca2","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"5f4e87790277826a2aea119328600dfb07761f32":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4f29ba80b723649f5feb7e37afe1a558dd2c1304"],"b48b42b82c149773b4ccb139507e9bd29da91ca2":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","b48b42b82c149773b4ccb139507e9bd29da91ca2"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","b48b42b82c149773b4ccb139507e9bd29da91ca2"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["b48b42b82c149773b4ccb139507e9bd29da91ca2"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["5f4e87790277826a2aea119328600dfb07761f32","b5f7137bd9491c6596681b1f56e481e17964e581"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["b48b42b82c149773b4ccb139507e9bd29da91ca2","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4f29ba80b723649f5feb7e37afe1a558dd2c1304":["b5f7137bd9491c6596681b1f56e481e17964e581","5f4e87790277826a2aea119328600dfb07761f32","29ef99d61cda9641b6250bf9567329a6e65f901d"],"b5f7137bd9491c6596681b1f56e481e17964e581":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","868da859b43505d9d2a023bfeae6dd0c795f5295"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f4e87790277826a2aea119328600dfb07761f32":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"b48b42b82c149773b4ccb139507e9bd29da91ca2":["c26f00b574427b55127e869b935845554afde1fa","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","a258fbb26824fd104ed795e5d9033d2d040049ee"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4f29ba80b723649f5feb7e37afe1a558dd2c1304","5f4e87790277826a2aea119328600dfb07761f32"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}