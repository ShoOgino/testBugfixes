{"path":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","commits":[{"id":"84b6c001c19319635b53dd80ee9fc1ba9a5b4574","date":1213883214,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n                DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n                false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens, reader, count, onlyMorePopular,\n                extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q, extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf85cf9d20b86c2466d0431fa85b9a12ab01233d","date":1214570136,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, defaults.getInt(\n            SPELLCHECK_COUNT, 1));\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            defaults.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n                DEFAULT_ONLY_MORE_POPULAR));\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            defaults.getBool(SPELLCHECK_EXTENDED_RESULTS, false));\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, defaults.getBool(\n            SPELLCHECK_COLLATE, false));\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n                DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n                false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens, reader, count, onlyMorePopular,\n                extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q, extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n                \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["629d9520cba6a0b538ea276f0a082e67f8204dc0","d6aab5206b894bf0ea232b059a45cf2de460726f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"629d9520cba6a0b538ea276f0a082e67f8204dc0","date":1214849003,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, defaults.getInt(\n            SPELLCHECK_COUNT, 1));\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            defaults.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n                DEFAULT_ONLY_MORE_POPULAR));\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            defaults.getBool(SPELLCHECK_EXTENDED_RESULTS, false));\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, defaults.getBool(\n            SPELLCHECK_COLLATE, false));\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":["bf85cf9d20b86c2466d0431fa85b9a12ab01233d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ecdc9e67a940a2693bc6fbf5b132222701620e25","date":1218705691,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = params.get(CommonParams.Q);\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","pathOld":"src/java/org/apache/solr/handler/component/SpellCheckComponent#process(ResponseBuilder).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    if (!params.getBool(COMPONENT_NAME, false) || spellCheckers.isEmpty()) {\n      return;\n    }\n    String q = params.get(SPELLCHECK_Q);\n    SolrSpellChecker spellChecker = getSpellChecker(params);\n    Collection<Token> tokens = null;\n    if (q != null) {\n      //we have a spell check param, tokenize it with the query analyzer applicable for this spellchecker\n      tokens = getTokens(q, spellChecker.getQueryAnalyzer());\n    } else {\n      q = rb.getQueryString();\n      if (q == null) {\n        q = params.get(CommonParams.Q);\n      }\n      tokens = queryConverter.convert(q);\n    }\n    if (tokens != null && tokens.isEmpty() == false) {\n      if (spellChecker != null) {\n        int count = params.getInt(SPELLCHECK_COUNT, 1);\n        boolean onlyMorePopular = params.getBool(SPELLCHECK_ONLY_MORE_POPULAR,\n            DEFAULT_ONLY_MORE_POPULAR);\n        boolean extendedResults = params.getBool(SPELLCHECK_EXTENDED_RESULTS,\n            false);\n        NamedList response = new SimpleOrderedMap();\n        IndexReader reader = rb.req.getSearcher().getReader();\n        boolean collate = params.getBool(SPELLCHECK_COLLATE, false);\n        SpellingResult spellingResult = spellChecker.getSuggestions(tokens,\n            reader, count, onlyMorePopular, extendedResults);\n        if (spellingResult != null) {\n          response.add(\"suggestions\", toNamedList(spellingResult, q,\n              extendedResults, collate));\n          rb.rsp.add(\"spellcheck\", response);\n        }\n\n      } else {\n        throw new SolrException(SolrException.ErrorCode.NOT_FOUND,\n            \"Specified dictionary does not exist.\");\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ecdc9e67a940a2693bc6fbf5b132222701620e25":["629d9520cba6a0b538ea276f0a082e67f8204dc0"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"629d9520cba6a0b538ea276f0a082e67f8204dc0":["bf85cf9d20b86c2466d0431fa85b9a12ab01233d"],"bf85cf9d20b86c2466d0431fa85b9a12ab01233d":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"ad94625fb8d088209f46650c8097196fec67f00c":["ecdc9e67a940a2693bc6fbf5b132222701620e25"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ecdc9e67a940a2693bc6fbf5b132222701620e25":["ad94625fb8d088209f46650c8097196fec67f00c"],"84b6c001c19319635b53dd80ee9fc1ba9a5b4574":["bf85cf9d20b86c2466d0431fa85b9a12ab01233d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["84b6c001c19319635b53dd80ee9fc1ba9a5b4574"],"629d9520cba6a0b538ea276f0a082e67f8204dc0":["ecdc9e67a940a2693bc6fbf5b132222701620e25"],"bf85cf9d20b86c2466d0431fa85b9a12ab01233d":["629d9520cba6a0b538ea276f0a082e67f8204dc0"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}