{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["de1b5af63e30db5c72e34a3260be96b4ce383d6f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa3636f020dd2f593d4df8cf2a55798e984ae749","date":1483541265,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"491c9672ec42582fe43960452dbd37f1c80fe0f0","date":1483739222,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"449bfd05ae28dcff263bf35fdb5fb75ae72446d3","date":1484383935,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"507e7decdf00981d09a74632ea30299a4ce6ba72","date":1484600874,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    List<Group> requestedGroups = parseGroups(req);\n\n    NamedList response = new NamedList();\n    for (Group group : requestedGroups) {\n      String registryName = SolrMetricManager.getRegistryName(group);\n      if (group == Group.core) {\n        // this requires special handling because of the way we create registry name for a core (deeply nested)\n        container.getAllCoreNames().forEach(s -> {\n          String coreRegistryName;\n          try (SolrCore core = container.getCore(s)) {\n            coreRegistryName = core.getCoreMetricManager().getRegistryName();\n          }\n          MetricRegistry registry = metricManager.registry(coreRegistryName);\n          response.add(coreRegistryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n        });\n      } else {\n        MetricRegistry registry = metricManager.registry(registryName);\n        response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false, false, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f34d83c894e07c24f5f957820777b5da2cc29e5a","date":1489491395,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false, false, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b","date":1489651910,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false, false, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab68488225b6a6c357dda72ed11dedca9914a192","date":1490013111,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false, false, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"dab78f8a6599f23a28441dde36c8ac45c556b51f","date":1491295831,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"de1b5af63e30db5c72e34a3260be96b4ce383d6f","date":1491296431,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new NamedList();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"816521ebaad5add9cb96bb88c577394e2938c40b","date":1491931343,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0d6879a535f14bc53be7c86de58142558c4f9eee","date":1492512399,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      response.add(registryName, MetricUtils.toNamedList(registry, metricFilters, mustMatchFilter, false,\n          false, compact, null));\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"daeaac5f7b42498079f0fb7c3a91802e588fc21a","date":1493066118,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, false);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    String[] keys = req.getParams().getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, req, rsp);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    String[] keys = req.getParams().getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, req, rsp);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (metricManager == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"SolrMetricManager instance not initialized\");\n    }\n\n    handleRequest(req.getParams(), (k, v) -> rsp.add(k, v));\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (container == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"Core container instance not initialized\");\n    }\n\n    boolean compact = req.getParams().getBool(COMPACT_PARAM, true);\n    String[] keys = req.getParams().getParams(KEY_PARAM);\n    if (keys != null && keys.length > 0) {\n      handleKeyRequest(keys, req, rsp);\n      return;\n    }\n    MetricFilter mustMatchFilter = parseMustMatchFilter(req);\n    MetricUtils.PropertyFilter propertyFilter = parsePropertyFilter(req);\n    List<MetricType> metricTypes = parseMetricTypes(req);\n    List<MetricFilter> metricFilters = metricTypes.stream().map(MetricType::asMetricFilter).collect(Collectors.toList());\n    Set<String> requestedRegistries = parseRegistries(req);\n\n    NamedList response = new SimpleOrderedMap();\n    for (String registryName : requestedRegistries) {\n      MetricRegistry registry = metricManager.registry(registryName);\n      SimpleOrderedMap result = new SimpleOrderedMap();\n      MetricUtils.toMaps(registry, metricFilters, mustMatchFilter, propertyFilter, false,\n          false, compact, false, (k, v) -> result.add(k, v));\n      if (result.size() > 0) {\n        response.add(registryName, result);\n      }\n    }\n    rsp.getValues().add(\"metrics\", response);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750239682d222924398443d581163940f48d68fc","date":1533297311,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHandler#handleRequestBody(SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (metricManager == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"SolrMetricManager instance not initialized\");\n    }\n\n    if (cc != null && AdminHandlersProxy.maybeProxyToNodes(req, rsp, cc)) {\n      return; // Request was proxied to other node\n    }\n\n    handleRequest(req.getParams(), (k, v) -> rsp.add(k, v));\n  }\n\n","sourceOld":"  @Override\n  public void handleRequestBody(SolrQueryRequest req, SolrQueryResponse rsp) throws Exception {\n    if (metricManager == null) {\n      throw new SolrException(SolrException.ErrorCode.INVALID_STATE, \"SolrMetricManager instance not initialized\");\n    }\n\n    handleRequest(req.getParams(), (k, v) -> rsp.add(k, v));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["de1b5af63e30db5c72e34a3260be96b4ce383d6f"],"dab78f8a6599f23a28441dde36c8ac45c556b51f":["f34d83c894e07c24f5f957820777b5da2cc29e5a"],"de1b5af63e30db5c72e34a3260be96b4ce383d6f":["ab68488225b6a6c357dda72ed11dedca9914a192"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["0265144286422ad99682a00904cc2536b79c8535"],"507e7decdf00981d09a74632ea30299a4ce6ba72":["491c9672ec42582fe43960452dbd37f1c80fe0f0","449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"816521ebaad5add9cb96bb88c577394e2938c40b":["dab78f8a6599f23a28441dde36c8ac45c556b51f"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["aa3636f020dd2f593d4df8cf2a55798e984ae749"],"ab68488225b6a6c357dda72ed11dedca9914a192":["073f1aa70444ec64f3e216816af2a3b43fa38fe7","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"750239682d222924398443d581163940f48d68fc":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["750239682d222924398443d581163940f48d68fc"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"0d6879a535f14bc53be7c86de58142558c4f9eee":["816521ebaad5add9cb96bb88c577394e2938c40b"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","aa3636f020dd2f593d4df8cf2a55798e984ae749"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["e9017cf144952056066919f1ebc7897ff9bd71b1"],"de1b5af63e30db5c72e34a3260be96b4ce383d6f":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb"],"dab78f8a6599f23a28441dde36c8ac45c556b51f":["816521ebaad5add9cb96bb88c577394e2938c40b"],"aa3636f020dd2f593d4df8cf2a55798e984ae749":["449bfd05ae28dcff263bf35fdb5fb75ae72446d3","491c9672ec42582fe43960452dbd37f1c80fe0f0"],"507e7decdf00981d09a74632ea30299a4ce6ba72":[],"816521ebaad5add9cb96bb88c577394e2938c40b":["0d6879a535f14bc53be7c86de58142558c4f9eee"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"0265144286422ad99682a00904cc2536b79c8535":["aa3636f020dd2f593d4df8cf2a55798e984ae749","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["750239682d222924398443d581163940f48d68fc"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["491c9672ec42582fe43960452dbd37f1c80fe0f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f34d83c894e07c24f5f957820777b5da2cc29e5a","ab68488225b6a6c357dda72ed11dedca9914a192","0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b"],"f34d83c894e07c24f5f957820777b5da2cc29e5a":["dab78f8a6599f23a28441dde36c8ac45c556b51f"],"449bfd05ae28dcff263bf35fdb5fb75ae72446d3":["507e7decdf00981d09a74632ea30299a4ce6ba72","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"ab68488225b6a6c357dda72ed11dedca9914a192":["de1b5af63e30db5c72e34a3260be96b4ce383d6f"],"750239682d222924398443d581163940f48d68fc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"491c9672ec42582fe43960452dbd37f1c80fe0f0":["507e7decdf00981d09a74632ea30299a4ce6ba72"],"daeaac5f7b42498079f0fb7c3a91802e588fc21a":["e9017cf144952056066919f1ebc7897ff9bd71b1","68541eebed1904d72a1ab713fc1afcec49e3f466"],"0d5e442cae8cd58c4f22df43dacbd0018fc0ac1b":["ab68488225b6a6c357dda72ed11dedca9914a192"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"0d6879a535f14bc53be7c86de58142558c4f9eee":["daeaac5f7b42498079f0fb7c3a91802e588fc21a"]},"heads":["507e7decdf00981d09a74632ea30299a4ce6ba72","e75e40c2252a5624016ad28ba7e8d3354c4d9c86","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}