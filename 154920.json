{"path":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","commits":[{"id":"893269407f5c988a4b2ee13c7ffc01ec43136c1d","date":1268598046,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","date":1268599006,"type":4,"author":"Mark Robert Miller","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da8d55113b689b06716246649de6f62430f15c0","date":1453508340,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c8b12bda3f5864b27e3e04df1be4f6736ec067a","date":1270088127,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = addAttribute(TermAttribute.class);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = (TermAttribute)addAttribute(TermAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607dd1b6a2a91a5060091ce0a0823f2eab6de523","date":1270915245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = addAttribute(CharTermAttribute.class);\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = addAttribute(TermAttribute.class);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d085fb336a7208eea2214e5ffcc803960819b60b","date":1270981894,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.termAtt = addAttribute(CharTermAttribute.class);\n    this.m = p.matcher(termAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"540f57ba7d9d46ccc6f0157e8b8021a4c969770d","date":1272974241,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/java/org/apache/lucene/analysis/pattern/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","pathOld":"solr/src/java/org/apache/solr/analysis/PatternReplaceFilter#PatternReplaceFilter(TokenStream,Pattern,String,boolean).mjava","sourceNew":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","sourceOld":"  /**\n   * Constructs an instance to replace either the first, or all occurances\n   *\n   * @param in the TokenStream to process\n   * @param p the patterm to apply to each Token\n   * @param replacement the \"replacement string\" to substitute, if null a\n   *        blank string will be used. Note that this is not the literal\n   *        string that will be used, '$' and '\\' have special meaning.\n   * @param all if true, all matches will be replaced otherwise just the first match.\n   * @see Matcher#quoteReplacement\n   */\n  public PatternReplaceFilter(TokenStream in,\n                              Pattern p,\n                              String replacement,\n                              boolean all) {\n    super(in);\n    this.p=p;\n    this.replacement = (null == replacement) ? \"\" : replacement;\n    this.all=all;\n    this.m = p.matcher(termAtt);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["1da8d55113b689b06716246649de6f62430f15c0"],"1da8d55113b689b06716246649de6f62430f15c0":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8","ad94625fb8d088209f46650c8097196fec67f00c"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["d085fb336a7208eea2214e5ffcc803960819b60b"],"ad94625fb8d088209f46650c8097196fec67f00c":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"d085fb336a7208eea2214e5ffcc803960819b60b":["607dd1b6a2a91a5060091ce0a0823f2eab6de523"],"607dd1b6a2a91a5060091ce0a0823f2eab6de523":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"]},"commit2Childs":{"9c8b12bda3f5864b27e3e04df1be4f6736ec067a":["607dd1b6a2a91a5060091ce0a0823f2eab6de523"],"1da8d55113b689b06716246649de6f62430f15c0":["9c8b12bda3f5864b27e3e04df1be4f6736ec067a"],"893269407f5c988a4b2ee13c7ffc01ec43136c1d":["a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8"],"a89acb2b4321b599bbfa1e802c00c4dbbc8ee6b8":["1da8d55113b689b06716246649de6f62430f15c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["893269407f5c988a4b2ee13c7ffc01ec43136c1d"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ad94625fb8d088209f46650c8097196fec67f00c"],"540f57ba7d9d46ccc6f0157e8b8021a4c969770d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":["1da8d55113b689b06716246649de6f62430f15c0"],"d085fb336a7208eea2214e5ffcc803960819b60b":["540f57ba7d9d46ccc6f0157e8b8021a4c969770d"],"607dd1b6a2a91a5060091ce0a0823f2eab6de523":["d085fb336a7208eea2214e5ffcc803960819b60b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}