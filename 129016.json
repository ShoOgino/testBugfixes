{"path":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(DistributedUpdateProcessor.VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(DistributedUpdateProcessor.VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(DistributedUpdateProcessor.VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(DistributedUpdateProcessor.VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6d2dadc1f5ca8703d8659f4964961f9967935d75","date":1490231750,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(DistributedUpdateProcessor.VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(DistributedUpdateProcessor.VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5fa6615014cd2288fe930f8c8bb726f9504961d","date":1490280013,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(DistributedUpdateProcessor.VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(DistributedUpdateProcessor.VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a9344cff6a72bc4c1ef080c69e10ad0635b811","date":1490410892,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getDocFetcher().getNonStoredDVs(false): onlyTheseFields;\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.getDocFetcher().decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de548de3ce5405595899f548152d4b93ac9eb9cc","date":1490594650,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/RealTimeGetComponent#mergePartialDocWithFullDocFromIndex(SolrCore,BytesRef,ReturnFields,Set[String],SolrInputDocument).mjava","sourceNew":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getDocFetcher().getNonStoredDVs(false): onlyTheseFields;\n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.getDocFetcher().decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Gets a document from the index by id. If a non-null partial document (for in-place update) is passed in,\n   * this method obtains the document from the tlog/index by the given id, merges the partial document on top of it and then returns\n   * the resultant document.\n   *\n   * @param core           A SolrCore instance, useful for obtaining a realtimesearcher and the schema\n   * @param idBytes        Binary representation of the value of the unique key field\n   * @param returnFields   Return fields, as requested\n   * @param onlyTheseFields When a non-null set of field names is passed in, the merge process only attempts to merge\n   *        the given fields in this set. When this set is null, it merges all fields.\n   * @param partialDoc     A partial document (containing an in-place update) used for merging against a full document\n   *                       from index; this maybe be null.\n   * @return If partial document is null, this returns document from the index or null if not found. \n   *         If partial document is not null, this returns a document from index merged with the partial document, or null if\n   *         document doesn't exist in the index.\n   */\n  private static SolrDocument mergePartialDocWithFullDocFromIndex(SolrCore core, BytesRef idBytes, ReturnFields returnFields,\n             Set<String> onlyTheseFields, SolrInputDocument partialDoc) throws IOException {\n    RefCounted<SolrIndexSearcher> searcherHolder = core.getRealtimeSearcher(); //Searcher();\n    try {\n      // now fetch last document from index, and merge partialDoc on top of it\n      SolrIndexSearcher searcher = searcherHolder.get();\n      SchemaField idField = core.getLatestSchema().getUniqueKeyField();\n      Term idTerm = new Term(idField.getName(), idBytes);\n\n      int docid = searcher.getFirstMatch(idTerm);\n      if (docid < 0) {\n        // The document was not found in index! Reopen a new RT searcher (to be sure) and get again.\n        // This should be because the document was deleted recently.\n        SolrDocument doc = reopenRealtimeSearcherAndGet(core, idTerm, returnFields);\n        if (doc == null) {\n          // Unable to resolve the last full doc in tlog fully,\n          // and document not found in index even after opening new rt searcher.\n          // This must be a case of deleted doc\n          return null;\n        }\n        return doc;\n      }\n\n      SolrDocument doc;\n      Set<String> decorateFields = onlyTheseFields == null ? searcher.getNonStoredDVs(false): onlyTheseFields; \n      Document luceneDocument = searcher.doc(docid, returnFields.getLuceneFieldNames());\n      doc = toSolrDoc(luceneDocument, core.getLatestSchema());\n      searcher.decorateDocValueFields(doc, docid, decorateFields);\n\n      long docVersion = (long) doc.getFirstValue(VERSION_FIELD);\n      Object partialVersionObj = partialDoc.getFieldValue(VERSION_FIELD);\n      long partialDocVersion = partialVersionObj instanceof Field? ((Field) partialVersionObj).numericValue().longValue():\n        partialVersionObj instanceof Number? ((Number) partialVersionObj).longValue(): Long.parseLong(partialVersionObj.toString());\n      if (docVersion > partialDocVersion) {\n        return doc;\n      }\n      for (String fieldName: (Iterable<String>) partialDoc.getFieldNames()) {\n        doc.setField(fieldName.toString(), partialDoc.getFieldValue(fieldName));  // since partial doc will only contain single valued fields, this is fine\n      }\n\n      return doc;\n    } finally {\n      if (searcherHolder != null) {\n        searcherHolder.decref();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"de548de3ce5405595899f548152d4b93ac9eb9cc":["e5fa6615014cd2288fe930f8c8bb726f9504961d"],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["6d2dadc1f5ca8703d8659f4964961f9967935d75"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["e5fa6615014cd2288fe930f8c8bb726f9504961d","598b5d23aa7c9732bf473c21a9cd309c44599394","6d2dadc1f5ca8703d8659f4964961f9967935d75"],"e5fa6615014cd2288fe930f8c8bb726f9504961d":["de548de3ce5405595899f548152d4b93ac9eb9cc"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"de548de3ce5405595899f548152d4b93ac9eb9cc":[],"63a9344cff6a72bc4c1ef080c69e10ad0635b811":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"6d2dadc1f5ca8703d8659f4964961f9967935d75":["63a9344cff6a72bc4c1ef080c69e10ad0635b811"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","de548de3ce5405595899f548152d4b93ac9eb9cc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}