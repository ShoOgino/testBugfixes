{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","commits":[{"id":"27d63bd6ea608c208e37fd3e13e7b27f06da6b60","date":1507105517,"type":1,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      publish(cd, Replica.State.DOWN, false, true);\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    if (cd.getCloudDescriptor().getShardId() == null && needsToBeAssignedShardId(cd, zkStateReader.getClusterState(), coreNodeName)) {\n      doGetShardIdAndNodeNameProcess(cd);\n    } else {\n      // still wait till we see us in local state\n      doGetShardIdAndNodeNameProcess(cd);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f","date":1522415499,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa5e39259dfd4a68287c824d3b7e1bc9097dc895","date":1522505041,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28ba172425e443e0f08a49de6d73586c418d7251","date":1523970991,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n      zkStateReader.registerCore(collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854","date":1588352817,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#preRegister(CoreDescriptor,boolean).mjava","sourceNew":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      if (log.isDebugEnabled()) {\n        log.debug(collection == null ?\n                \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n                \"Registering watch for collection {}\",\n            collectionName);\n      }\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","sourceOld":"  public void preRegister(CoreDescriptor cd, boolean publishState) {\n\n    String coreNodeName = getCoreNodeName(cd);\n\n    // before becoming available, make sure we are not live and active\n    // this also gets us our assigned shard id if it was not specified\n    try {\n      checkStateInZk(cd);\n\n      CloudDescriptor cloudDesc = cd.getCloudDescriptor();\n\n      // make sure the node name is set on the descriptor\n      if (cloudDesc.getCoreNodeName() == null) {\n        cloudDesc.setCoreNodeName(coreNodeName);\n      }\n\n      // publishState == false on startup\n      if (publishState || isPublishAsDownOnStartup(cloudDesc)) {\n        publish(cd, Replica.State.DOWN, false, true);\n      }\n      String collectionName = cd.getCloudDescriptor().getCollectionName();\n      DocCollection collection = zkStateReader.getClusterState().getCollectionOrNull(collectionName);\n      log.debug(collection == null ?\n              \"Collection {} not visible yet, but flagging it so a watch is registered when it becomes visible\" :\n              \"Registering watch for collection {}\",\n          collectionName);\n    } catch (KeeperException e) {\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      log.error(\"\", e);\n      throw new ZooKeeperException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    } catch (NotInClusterStateException e) {\n      // make the stack trace less verbose\n      throw e;\n    } catch (Exception e) {\n      log.error(\"\", e);\n      throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"\", e);\n    }\n\n    doGetShardIdAndNodeNameProcess(cd);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f"],"28ba172425e443e0f08a49de6d73586c418d7251":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["28ba172425e443e0f08a49de6d73586c418d7251"],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"]},"commit2Childs":{"27d63bd6ea608c208e37fd3e13e7b27f06da6b60":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["27d63bd6ea608c208e37fd3e13e7b27f06da6b60"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895","4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f"],"aa5e39259dfd4a68287c824d3b7e1bc9097dc895":["28ba172425e443e0f08a49de6d73586c418d7251"],"28ba172425e443e0f08a49de6d73586c418d7251":["55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854"],"4aea71c8b6a44bbbd3b8fcc42e5838a92b35634f":["aa5e39259dfd4a68287c824d3b7e1bc9097dc895"],"55b3f58cbc7d70156d61fad1f2c0ef2dd2d97854":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}