{"path":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.storePayloads) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.storePayloads) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.hasPayloads()) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.storePayloads) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.hasPayloads()) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.indexOptions != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.storePayloads) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/sep/SepPostingsReader#nextTerm(FieldInfo,BlockTermState).mjava","sourceNew":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.hasPayloads()) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void nextTerm(FieldInfo fieldInfo, BlockTermState _termState) throws IOException {\n    final SepTermState termState = (SepTermState) _termState;\n    final boolean isFirstTerm = termState.termBlockOrd == 0;\n    //System.out.println(\"SEPR.nextTerm termCount=\" + termState.termBlockOrd + \" isFirstTerm=\" + isFirstTerm + \" bytesReader.pos=\" + termState.bytesReader.getPosition());\n    //System.out.println(\"  docFreq=\" + termState.docFreq);\n    termState.docIndex.read(termState.bytesReader, isFirstTerm);\n    //System.out.println(\"  docIndex=\" + termState.docIndex);\n    if (fieldInfo.getIndexOptions() != IndexOptions.DOCS_ONLY) {\n      termState.freqIndex.read(termState.bytesReader, isFirstTerm);\n      if (fieldInfo.getIndexOptions() == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        //System.out.println(\"  freqIndex=\" + termState.freqIndex);\n        termState.posIndex.read(termState.bytesReader, isFirstTerm);\n        //System.out.println(\"  posIndex=\" + termState.posIndex);\n        if (fieldInfo.hasPayloads()) {\n          if (isFirstTerm) {\n            termState.payloadFP = termState.bytesReader.readVLong();\n          } else {\n            termState.payloadFP += termState.bytesReader.readVLong();\n          }\n          //System.out.println(\"  payloadFP=\" + termState.payloadFP);\n        }\n      }\n    }\n\n    if (termState.docFreq >= skipMinimum) {\n      //System.out.println(\"   readSkip @ \" + termState.bytesReader.getPosition());\n      if (isFirstTerm) {\n        termState.skipFP = termState.bytesReader.readVLong();\n      } else {\n        termState.skipFP += termState.bytesReader.readVLong();\n      }\n      //System.out.println(\"  skipFP=\" + termState.skipFP);\n    } else if (isFirstTerm) {\n      termState.skipFP = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}