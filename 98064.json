{"path":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","pathOld":"/dev/null","sourceNew":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumberUtils.double2sortableStr(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumberUtils.double2sortableStr(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumberUtils.double2sortableStr(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","sourceNew":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumberUtils.double2sortableStr(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumberUtils.double2sortableStr(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumberUtils.double2sortableStr(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","sourceOld":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumberUtils.double2sortableStr(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumberUtils.double2sortableStr(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumberUtils.double2sortableStr(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fe82b6af0f490fe9a473a5315847479e78f73f","date":1247758686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","sourceNew":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumericUtils.doubleToPrefixCoded(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","sourceOld":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumberUtils.double2sortableStr(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumberUtils.double2sortableStr(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumberUtils.double2sortableStr(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f44f07aa147c21735d6c43bafa4fde560d0362e1","date":1255024926,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","sourceNew":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.ANALYZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.ANALYZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumericUtils.doubleToPrefixCoded(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NOT_ANALYZED_NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NOT_ANALYZED_NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","sourceOld":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.TOKENIZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),Field.Store.YES, Field.Index.UN_TOKENIZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.TOKENIZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumericUtils.doubleToPrefixCoded(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","pathOld":"contrib/spatial/src/test/org/apache/lucene/spatial/tier/TestCartesian#addPoint(IndexWriter,String,double,double).mjava","sourceNew":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.ANALYZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.ANALYZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumericUtils.doubleToPrefixCoded(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NOT_ANALYZED_NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NOT_ANALYZED_NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","sourceOld":"  private void addPoint(IndexWriter writer, String name, double lat, double lng) throws IOException{\n    \n    Document doc = new Document();\n    \n    doc.add(new Field(\"name\", name,Field.Store.YES, Field.Index.ANALYZED));\n    \n    // convert the lat / long to lucene fields\n    doc.add(new Field(latField, NumericUtils.doubleToPrefixCoded(lat),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    doc.add(new Field(lngField, NumericUtils.doubleToPrefixCoded(lng),Field.Store.YES, Field.Index.NOT_ANALYZED));\n    \n    // add a default meta field to make searching all documents easy \n    doc.add(new Field(\"metafile\", \"doc\",Field.Store.YES, Field.Index.ANALYZED));\n    \n    int ctpsize = ctps.size();\n    for (int i =0; i < ctpsize; i++){\n      CartesianTierPlotter ctp = ctps.get(i);\n      doc.add(new Field(ctp.getTierFieldName(), \n          NumericUtils.doubleToPrefixCoded(ctp.getTierBoxId(lat,lng)),\n          Field.Store.YES, \n          Field.Index.NOT_ANALYZED_NO_NORMS));\n      \n      doc.add(new Field(geoHashPrefix, GeoHashUtils.encode(lat,lng), \n    \t\t  Field.Store.YES, \n    \t\t  Field.Index.NOT_ANALYZED_NO_NORMS));\n    }\n    writer.addDocument(doc);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"60fe82b6af0f490fe9a473a5315847479e78f73f":["0584ee2be458044f19041ac184df00c69c632b4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"0584ee2be458044f19041ac184df00c69c632b4d":["04a4a94db1eb59c8583adb166acfe686a031bedc"]},"commit2Childs":{"f44f07aa147c21735d6c43bafa4fde560d0362e1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"04a4a94db1eb59c8583adb166acfe686a031bedc":["0584ee2be458044f19041ac184df00c69c632b4d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["f44f07aa147c21735d6c43bafa4fde560d0362e1"],"0584ee2be458044f19041ac184df00c69c632b4d":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}