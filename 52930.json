{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","commits":[{"id":"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","date":1397789149,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean hasNext() {\n    if (nextCell != null)\n      return true;\n    while (true) {\n      if (stackIdx == -1)//the only condition in which we return false\n        return false;\n      //If we can descend...\n      if (descend && !(stackIdx == iterStack.length - 1 || iterStack[stackIdx].thisCell().isLeaf())) {\n        CellIterator nextIter = iterStack[stackIdx].thisCell().getNextLevelCells(shapeFilter);\n        //push stack\n        iterStack[++stackIdx] = nextIter;\n      }\n      //Get sibling...\n      if (iterStack[stackIdx].hasNext()) {\n        nextCell = iterStack[stackIdx].next();\n        //at detailLevel\n        if (stackIdx == iterStack.length - 1 && !(shapeFilter instanceof Point)) //point check is a kludge\n          nextCell.setLeaf();//because at bottom\n        break;\n      }\n      //Couldn't get next; go up...\n      //pop stack\n      iterStack[stackIdx--] = null;\n      descend = false;//so that we don't re-descend where we just were\n    }\n    assert nextCell != null;\n    descend = true;//reset\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","sourceNew":"  @Override\n  public boolean hasNext() {\n    if (nextCell != null)\n      return true;\n    while (true) {\n      if (stackIdx == -1)//the only condition in which we return false\n        return false;\n      //If we can descend...\n      if (descend && !(stackIdx == iterStack.length - 1 || iterStack[stackIdx].thisCell().isLeaf())) {\n        CellIterator nextIter = iterStack[stackIdx].thisCell().getNextLevelCells(shapeFilter);\n        //push stack\n        iterStack[++stackIdx] = nextIter;\n      }\n      //Get sibling...\n      if (iterStack[stackIdx].hasNext()) {\n        nextCell = iterStack[stackIdx].next();\n        //at detailLevel\n        if (stackIdx == iterStack.length - 1 && !(shapeFilter instanceof Point)) //point check is a kludge\n          nextCell.setLeaf();//because at bottom\n        break;\n      }\n      //Couldn't get next; go up...\n      //pop stack\n      iterStack[stackIdx--] = null;\n      descend = false;//so that we don't re-descend where we just were\n    }\n    assert nextCell != null;\n    descend = true;//reset\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean hasNext() {\n    if (nextCell != null)\n      return true;\n    while (true) {\n      if (stackIdx == -1)//the only condition in which we return false\n        return false;\n      //If we can descend...\n      if (descend && !(stackIdx == iterStack.length - 1 || iterStack[stackIdx].thisCell().isLeaf())) {\n        CellIterator nextIter = iterStack[stackIdx].thisCell().getNextLevelCells(shapeFilter);\n        //push stack\n        iterStack[++stackIdx] = nextIter;\n      }\n      //Get sibling...\n      if (iterStack[stackIdx].hasNext()) {\n        nextCell = iterStack[stackIdx].next();\n        //at detailLevel\n        if (stackIdx == iterStack.length - 1 && !(shapeFilter instanceof Point)) //point check is a kludge\n          nextCell.setLeaf();//because at bottom\n        break;\n      }\n      //Couldn't get next; go up...\n      //pop stack\n      iterStack[stackIdx--] = null;\n      descend = false;//so that we don't re-descend where we just were\n    }\n    assert nextCell != null;\n    descend = true;//reset\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/TreeCellIterator#hasNext().mjava","sourceNew":"  @Override\n  public boolean hasNext() {\n    if (nextCell != null)\n      return true;\n    while (true) {\n      if (stackIdx == -1)//the only condition in which we return false\n        return false;\n      //If we can descend...\n      if (descend && !(stackIdx == iterStack.length - 1 || iterStack[stackIdx].thisCell().isLeaf())) {\n        CellIterator nextIter = iterStack[stackIdx].thisCell().getNextLevelCells(shapeFilter);\n        //push stack\n        iterStack[++stackIdx] = nextIter;\n      }\n      //Get sibling...\n      if (iterStack[stackIdx].hasNext()) {\n        nextCell = iterStack[stackIdx].next();\n        //at detailLevel\n        if (stackIdx == iterStack.length - 1 && !(shapeFilter instanceof Point)) //point check is a kludge\n          nextCell.setLeaf();//because at bottom\n        break;\n      }\n      //Couldn't get next; go up...\n      //pop stack\n      iterStack[stackIdx--] = null;\n      descend = false;//so that we don't re-descend where we just were\n    }\n    assert nextCell != null;\n    descend = true;//reset\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean hasNext() {\n    if (nextCell != null)\n      return true;\n    while (true) {\n      if (stackIdx == -1)//the only condition in which we return false\n        return false;\n      //If we can descend...\n      if (descend && !(stackIdx == iterStack.length - 1 || iterStack[stackIdx].thisCell().isLeaf())) {\n        CellIterator nextIter = iterStack[stackIdx].thisCell().getNextLevelCells(shapeFilter);\n        //push stack\n        iterStack[++stackIdx] = nextIter;\n      }\n      //Get sibling...\n      if (iterStack[stackIdx].hasNext()) {\n        nextCell = iterStack[stackIdx].next();\n        //at detailLevel\n        if (stackIdx == iterStack.length - 1 && !(shapeFilter instanceof Point)) //point check is a kludge\n          nextCell.setLeaf();//because at bottom\n        break;\n      }\n      //Couldn't get next; go up...\n      //pop stack\n      iterStack[stackIdx--] = null;\n      descend = false;//so that we don't re-descend where we just were\n    }\n    assert nextCell != null;\n    descend = true;//reset\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"8cbeee6a8b7dcd5efc02f4d24cef933a45e065e6":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}