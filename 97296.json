{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20689256739f1d0404e9ad0df081350fbbb733eb","date":1249339527,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkTokenizer sink = new DateRecognizerSinkTokenizer(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeTokenFilter tee = new TeeTokenFilter(new WhitespaceTokenizer(new StringReader(test)), sink);\n    int count = 0;\n    final Token reusableToken = new Token();\n    for (Token nextToken = tee.next(reusableToken); nextToken != null; nextToken = tee.next(reusableToken)) {\n      assertTrue(\"nextToken is null and it shouldn't be\", nextToken != null);\n      if (nextToken.termBuffer()[0] == '7'){\n        assertTrue(nextToken.type() + \" is not equal to \" + DateRecognizerSinkTokenizer.DATE_TYPE,\n                nextToken.type().equals(DateRecognizerSinkTokenizer.DATE_TYPE) == true);\n      }\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    assertTrue(\"sink Size: \" + sink.getTokens().size() + \" is not: \" + 2, sink.getTokens().size() == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5926f3d4419dfc5e055947d4245df95c8f0d996","date":1251102694,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\"));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85722042902595d9b0fbf38b7b57b139bdc12e4b","date":1264953677,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a","date":1267298041,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(Version.LUCENE_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":["fcbc12aa8147f5203ca283e7252ba4280d6ffd16"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest#test().mjava","sourceNew":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    DateRecognizerSinkFilter sinkFilter = new DateRecognizerSinkFilter(new SimpleDateFormat(\"MM/dd/yyyy\", Locale.US));\n    String test = \"The quick red fox jumped over the lazy brown dogs on 7/11/2006  The dogs finally reacted on 7/12/2006\";\n    TeeSinkTokenFilter tee = new TeeSinkTokenFilter(new WhitespaceTokenizer(TEST_VERSION_CURRENT, new StringReader(test)));\n    SinkTokenStream sink = tee.newSinkTokenStream(sinkFilter);\n    int count = 0;\n    \n    tee.reset();\n    while (tee.incrementToken()) {\n      count++;\n    }\n    assertTrue(count + \" does not equal: \" + 18, count == 18);\n    \n    int sinkCount = 0;\n    sink.reset();\n    while (sink.incrementToken()) {\n      sinkCount++;\n    }\n    assertTrue(\"sink Size: \" + sinkCount + \" is not: \" + 2, sinkCount == 2);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e5926f3d4419dfc5e055947d4245df95c8f0d996":["20689256739f1d0404e9ad0df081350fbbb733eb"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20689256739f1d0404e9ad0df081350fbbb733eb":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["e5926f3d4419dfc5e055947d4245df95c8f0d996"]},"commit2Childs":{"e5926f3d4419dfc5e055947d4245df95c8f0d996":["85722042902595d9b0fbf38b7b57b139bdc12e4b"],"dd745d580729e528151b58aeda87ef82f1b95c9b":["20689256739f1d0404e9ad0df081350fbbb733eb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"20689256739f1d0404e9ad0df081350fbbb733eb":["e5926f3d4419dfc5e055947d4245df95c8f0d996"],"a9ac13b5f0ce5ef1b2ce168367d993a79594b23a":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"85722042902595d9b0fbf38b7b57b139bdc12e4b":["a9ac13b5f0ce5ef1b2ce168367d993a79594b23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}