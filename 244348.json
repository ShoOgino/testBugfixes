{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4e54ed7cef46f86888b5fb547594f62160395c","date":1340006971,"type":4,"author":"Shai Erera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":null,"sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(\"matchVersion=\").append(matchVersion).append(\"\\n\");\n    sb.append(\"analyzer=\").append(analyzer == null ? \"null\" : analyzer.getClass().getName()).append(\"\\n\");\n    sb.append(\"delPolicy=\").append(delPolicy.getClass().getName()).append(\"\\n\");\n    sb.append(\"commit=\").append(commit == null ? \"null\" : commit).append(\"\\n\");\n    sb.append(\"openMode=\").append(openMode).append(\"\\n\");\n    sb.append(\"similarity=\").append(similarity.getClass().getName()).append(\"\\n\");\n    sb.append(\"termIndexInterval=\").append(termIndexInterval).append(\"\\n\"); // TODO: this should be private to the codec, not settable here\n    sb.append(\"mergeScheduler=\").append(mergeScheduler.getClass().getName()).append(\"\\n\");\n    sb.append(\"default WRITE_LOCK_TIMEOUT=\").append(WRITE_LOCK_TIMEOUT).append(\"\\n\");\n    sb.append(\"writeLockTimeout=\").append(writeLockTimeout).append(\"\\n\");\n    sb.append(\"maxBufferedDeleteTerms=\").append(maxBufferedDeleteTerms).append(\"\\n\");\n    sb.append(\"ramBufferSizeMB=\").append(ramBufferSizeMB).append(\"\\n\");\n    sb.append(\"maxBufferedDocs=\").append(maxBufferedDocs).append(\"\\n\");\n    sb.append(\"mergedSegmentWarmer=\").append(mergedSegmentWarmer).append(\"\\n\");\n    sb.append(\"codec=\").append(codec).append(\"\\n\");\n    sb.append(\"infoStream=\").append(infoStream.getClass().getName()).append(\"\\n\");\n    sb.append(\"mergePolicy=\").append(mergePolicy).append(\"\\n\");\n    sb.append(\"indexerThreadPool=\").append(indexerThreadPool).append(\"\\n\");\n    sb.append(\"readerPooling=\").append(readerPooling).append(\"\\n\");\n    sb.append(\"readerTermsIndexDivisor=\").append(readerTermsIndexDivisor).append(\"\\n\");\n    sb.append(\"flushPolicy=\").append(flushPolicy).append(\"\\n\");\n    sb.append(\"perThreadHardLimitMB=\").append(perThreadHardLimitMB).append(\"\\n\");\n\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ce24aa081e44190692bbebc8aead342ad7060e8","date":1374951664,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(\"writer=\").append(writer).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(\"writer=\").append(writer).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba45a22312e230cf8c9ada0f1199670ecf767d07","date":1420626256,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#toString().mjava","sourceNew":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(\"writer=\").append(writer.get()).append(\"\\n\");\n    return sb.toString();\n  }\n\n","sourceOld":"  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder(super.toString());\n    sb.append(\"writer=\").append(writer).append(\"\\n\");\n    return sb.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4ce24aa081e44190692bbebc8aead342ad7060e8":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba45a22312e230cf8c9ada0f1199670ecf767d07":["4ce24aa081e44190692bbebc8aead342ad7060e8"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ba45a22312e230cf8c9ada0f1199670ecf767d07"]},"commit2Childs":{"4ce24aa081e44190692bbebc8aead342ad7060e8":["ba45a22312e230cf8c9ada0f1199670ecf767d07"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f4e54ed7cef46f86888b5fb547594f62160395c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7f4e54ed7cef46f86888b5fb547594f62160395c":["4ce24aa081e44190692bbebc8aead342ad7060e8","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee"],"ba45a22312e230cf8c9ada0f1199670ecf767d07":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}