{"path":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","commits":[{"id":"b2e70b697d9f5a6130848741a4f0cdc08a1fe258","date":1168661303,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"/dev/null","sourceNew":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.utils.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    // we use separate (identical) instances for each \"read\" task type, so each can iterate the quries separately.\r\n    Class qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.utils.SimpleQueryMaker\"));\r\n    searchQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchQueryMaker.setConfig(config);\r\n    searchTravQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravQueryMaker.setConfig(config);\r\n    searchTravRetQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravRetQueryMaker.setConfig(config);\r\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getSearchQueryMaker().printQueries());\r\n    }\r\n\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b931634080ffdd860770bff5ce234c982053ac0","date":1174200666,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    // we use separate (identical) instances for each \"read\" task type, so each can iterate the quries separately.\r\n    Class qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\r\n    searchQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchQueryMaker.setConfig(config);\r\n    searchTravQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravQueryMaker.setConfig(config);\r\n    searchTravRetQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravRetQueryMaker.setConfig(config);\r\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getSearchQueryMaker().printQueries());\r\n    }\r\n\r\n  }\r\n\n","sourceOld":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.utils.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    // we use separate (identical) instances for each \"read\" task type, so each can iterate the quries separately.\r\n    Class qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.utils.SimpleQueryMaker\"));\r\n    searchQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchQueryMaker.setConfig(config);\r\n    searchTravQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravQueryMaker.setConfig(config);\r\n    searchTravRetQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravRetQueryMaker.setConfig(config);\r\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getSearchQueryMaker().printQueries());\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0","date":1174485154,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\r\n\r\n  }\r\n\n","sourceOld":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    // we use separate (identical) instances for each \"read\" task type, so each can iterate the quries separately.\r\n    Class qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\r\n    searchQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchQueryMaker.setConfig(config);\r\n    searchTravQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravQueryMaker.setConfig(config);\r\n    searchTravRetQueryMaker = (QueryMaker) qmkrClass.newInstance();\r\n    searchTravRetQueryMaker.setConfig(config);\r\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getSearchQueryMaker().printQueries());\r\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81573e29e6e5db648330b225c60d44b1c3eb388e","date":1174927593,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\r\n    // html parser, used for some doc makers\r\n    htmlParser = (HTMLParser) Class.forName(config.get(\"html.parser\",\"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser\")).newInstance();\r\n    docMaker.setHTMLParser(htmlParser);\n\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\r\n\r\n  }\r\n\n","sourceOld":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3738fa43eaa87dc7b393fe98b04cde1019e20bac","date":1175557034,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n    // html parser, used for some doc makers\n    htmlParser = (HTMLParser) Class.forName(config.get(\"html.parser\",\"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser\")).newInstance();\n    docMaker.setHTMLParser(htmlParser);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","sourceOld":"  // constructor\r\n  public PerfRunData (Config config) throws Exception {\r\n    this.config = config;\r\n    // analyzer (default is standard analyzer)\r\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\r\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\r\n    // doc maker\r\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\r\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\r\n    docMaker.setConfig(config);\r\n    // query makers\r\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\r\n    // html parser, used for some doc makers\r\n    htmlParser = (HTMLParser) Class.forName(config.get(\"html.parser\",\"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser\")).newInstance();\r\n    docMaker.setHTMLParser(htmlParser);\n\n    // index stuff\r\n    reinit(false);\r\n    \r\n    // statistic points\r\n    points = new Points(config);\r\n    \r\n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\r\n      System.out.println(\"------------> queries:\");\r\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\r\n\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b","date":1245355139,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.SimpleDocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n    // html parser, used for some doc makers\n    htmlParser = (HTMLParser) Class.forName(config.get(\"html.parser\",\"org.apache.lucene.benchmark.byTask.feeds.DemoHTMLParser\")).newInstance();\n    docMaker.setHTMLParser(htmlParser);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = (Analyzer) Class.forName(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\")).newInstance();\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ffdf794cee8d43eb612df752c592cef2dc3e75ae","date":1256465578,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = (DocMaker) Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\"));\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90cb6b3f4e5652555b614adc90204287fbebd27c","date":1259494272,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/byTask/PerfRunData#PerfRunData(Config).mjava","sourceNew":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","sourceOld":"  // constructor\n  public PerfRunData (Config config) throws Exception {\n    this.config = config;\n    // analyzer (default is standard analyzer)\n    analyzer = NewAnalyzerTask.createAnalyzer(config.get(\"analyzer\",\n        \"org.apache.lucene.analysis.standard.StandardAnalyzer\"));\n    // doc maker\n    docMaker = Class.forName(config.get(\"doc.maker\",\n        \"org.apache.lucene.benchmark.byTask.feeds.DocMaker\")).asSubclass(DocMaker.class).newInstance();\n    docMaker.setConfig(config);\n    // query makers\n    readTaskQueryMaker = new HashMap<Class<? extends ReadTask>,QueryMaker>();\n    qmkrClass = Class.forName(config.get(\"query.maker\",\"org.apache.lucene.benchmark.byTask.feeds.SimpleQueryMaker\")).asSubclass(QueryMaker.class);\n\n    // index stuff\n    reinit(false);\n    \n    // statistic points\n    points = new Points(config);\n    \n    if (Boolean.valueOf(config.get(\"log.queries\",\"false\")).booleanValue()) {\n      System.out.println(\"------------> queries:\");\n      System.out.println(getQueryMaker(new SearchTask(this)).printQueries());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["2b931634080ffdd860770bff5ce234c982053ac0"],"2b931634080ffdd860770bff5ce234c982053ac0":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90cb6b3f4e5652555b614adc90204287fbebd27c"]},"commit2Childs":{"1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0":["81573e29e6e5db648330b225c60d44b1c3eb388e"],"2b931634080ffdd860770bff5ce234c982053ac0":["1ebcfbd9662f54e73fdfe1f4d675ea39531fb9b0"],"ffdf794cee8d43eb612df752c592cef2dc3e75ae":["90cb6b3f4e5652555b614adc90204287fbebd27c"],"90cb6b3f4e5652555b614adc90204287fbebd27c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6944b9fa6d8ef96b83ae2d3a4332d03b3857355b":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b2e70b697d9f5a6130848741a4f0cdc08a1fe258"],"3738fa43eaa87dc7b393fe98b04cde1019e20bac":["6944b9fa6d8ef96b83ae2d3a4332d03b3857355b"],"b2e70b697d9f5a6130848741a4f0cdc08a1fe258":["2b931634080ffdd860770bff5ce234c982053ac0"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["ffdf794cee8d43eb612df752c592cef2dc3e75ae"],"81573e29e6e5db648330b225c60d44b1c3eb388e":["3738fa43eaa87dc7b393fe98b04cde1019e20bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}