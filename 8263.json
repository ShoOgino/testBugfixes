{"path":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","commits":[{"id":"6f2639dac7d9a6031cd30959c85c189fc690e1f5","date":1426025590,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer()\n  {\n    return new Analyzer() {\n      \n      @Override\n      protected TokenStreamComponents createComponents(final String fieldName) {\n        return new TokenStreamComponents(new KeywordTokenizer()) {\n          private Shape shape = null;\n          \n          protected void setReader(final Reader reader) throws IOException {\n            source.setReader(reader);\n            shape = parseShape(IOUtils.toString(reader));\n          }\n          \n          public TokenStream getTokenStream() {\n            PrefixTreeStrategy s = newSpatialStrategy(fieldName==null ? getTypeName() : fieldName);\n            return s.createIndexableFields(shape)[0].tokenStreamValue();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer()\n  {\n    return new Analyzer() {\n      \n      @Override\n      protected TokenStreamComponents createComponents(final String fieldName) {\n        return new TokenStreamComponents(new KeywordTokenizer()) {\n          private Shape shape = null;\n          \n          protected void setReader(final Reader reader) throws IOException {\n            source.setReader(reader);\n            shape = parseShape(IOUtils.toString(reader));\n          }\n          \n          public TokenStream getTokenStream() {\n            PrefixTreeStrategy s = newSpatialStrategy(fieldName==null ? getTypeName() : fieldName);\n            return s.createIndexableFields(shape)[0].tokenStreamValue();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e859719dc778fb66d3d21e7be08cd408fc2bde98","date":1446717611,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","sourceNew":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer()\n  {\n    return new Analyzer() {\n      \n      @Override\n      protected TokenStreamComponents createComponents(final String fieldName) {\n        return new TokenStreamComponents(new KeywordTokenizer()) {\n          private Shape shape = null;\n          \n          protected void setReader(final Reader reader) {\n            source.setReader(reader);\n            try {\n              shape = parseShape(IOUtils.toString(reader));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n          \n          public TokenStream getTokenStream() {\n            PrefixTreeStrategy s = newSpatialStrategy(fieldName==null ? getTypeName() : fieldName);\n            return s.createIndexableFields(shape)[0].tokenStreamValue();\n          }\n        };\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer()\n  {\n    return new Analyzer() {\n      \n      @Override\n      protected TokenStreamComponents createComponents(final String fieldName) {\n        return new TokenStreamComponents(new KeywordTokenizer()) {\n          private Shape shape = null;\n          \n          protected void setReader(final Reader reader) throws IOException {\n            source.setReader(reader);\n            shape = parseShape(IOUtils.toString(reader));\n          }\n          \n          public TokenStream getTokenStream() {\n            PrefixTreeStrategy s = newSpatialStrategy(fieldName==null ? getTypeName() : fieldName);\n            return s.createIndexableFields(shape)[0].tokenStreamValue();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fac252ef8e3d0bbff9303ffbf675e824a729dfaf","date":1537347776,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/AbstractSpatialPrefixTreeFieldType#getIndexAnalyzer().mjava","sourceNew":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer() {\n    return new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        PrefixTreeStrategy s = newSpatialStrategy(fieldName == null ? getTypeName() : fieldName);\n        PrefixTreeStrategy.ShapeTokenStream ts = s.tokenStream();\n        return new TokenStreamComponents(r -> {\n          try {\n            ts.setShape(parseShape(IOUtils.toString(r)));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }, ts);\n      }\n    };\n  }\n\n","sourceOld":"  /**\n   * This analyzer is not actually used for indexing.  It is implemented here\n   * so that the analysis UI will show reasonable tokens.\n   */\n  @Override\n  public Analyzer getIndexAnalyzer()\n  {\n    return new Analyzer() {\n      \n      @Override\n      protected TokenStreamComponents createComponents(final String fieldName) {\n        return new TokenStreamComponents(new KeywordTokenizer()) {\n          private Shape shape = null;\n          \n          protected void setReader(final Reader reader) {\n            source.setReader(reader);\n            try {\n              shape = parseShape(IOUtils.toString(reader));\n            } catch (IOException e) {\n              throw new RuntimeException(e);\n            }\n          }\n          \n          public TokenStream getTokenStream() {\n            PrefixTreeStrategy s = newSpatialStrategy(fieldName==null ? getTypeName() : fieldName);\n            return s.createIndexableFields(shape)[0].tokenStreamValue();\n          }\n        };\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6f2639dac7d9a6031cd30959c85c189fc690e1f5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6f2639dac7d9a6031cd30959c85c189fc690e1f5"],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["e859719dc778fb66d3d21e7be08cd408fc2bde98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["6f2639dac7d9a6031cd30959c85c189fc690e1f5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"]},"commit2Childs":{"6f2639dac7d9a6031cd30959c85c189fc690e1f5":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","e859719dc778fb66d3d21e7be08cd408fc2bde98"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"fac252ef8e3d0bbff9303ffbf675e824a729dfaf":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6f2639dac7d9a6031cd30959c85c189fc690e1f5","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"e859719dc778fb66d3d21e7be08cd408fc2bde98":["fac252ef8e3d0bbff9303ffbf675e824a729dfaf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}