{"path":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","commits":[{"id":"fc25891451b288866eb099252dfdaacdb8eaefd2","date":1181874819,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            doc.addField(name, text.toString() );\n            if(boost != null) {\n              doc.setBoost( name, boost );\n            }\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76eb9a31b3f158d4803594a76191193a920c2dd","date":1182104048,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            doc.addField(name, text.toString() );\n            if(boost != null) {\n              // The lucene API and solr XML field specification make it possible to set boosts\n              // on multi-value fields even though lucene indexing does not support this.\n              // To keep behavior consistent with what happens in the lucene index, we accumulate\n              // the product of all boosts specified for this field.\n              Float old = doc.getBoost( name );\n              if( old != null ) {\n                doc.setBoost( name, boost*old );\n              }\n              else {\n                doc.setBoost( name, boost );\n              }\n            }\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            doc.addField(name, text.toString() );\n            if(boost != null) {\n              doc.setBoost( name, boost );\n            }\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6953627e65bb93fb25bba28619071a1554da9604","date":1183228487,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            if(boost != null) {\n              // The lucene API and solr XML field specification make it possible to set boosts\n              // on multi-value fields even though lucene indexing does not support this.\n              // To keep behavior consistent with what happens in the lucene index, we accumulate\n              // the product of all boosts specified for this field.\n              Float old = doc.getBoost( name );\n              if( old != null ) {\n                doc.setBoost( name, boost*old );\n              }\n              else {\n                doc.setBoost( name, boost );\n              }\n            }\n            doc.addField(name, text.toString() );\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            doc.addField(name, text.toString() );\n            if(boost != null) {\n              // The lucene API and solr XML field specification make it possible to set boosts\n              // on multi-value fields even though lucene indexing does not support this.\n              // To keep behavior consistent with what happens in the lucene index, we accumulate\n              // the product of all boosts specified for this field.\n              Float old = doc.getBoost( name );\n              if( old != null ) {\n                doc.setBoost( name, boost*old );\n              }\n              else {\n                doc.setBoost( name, boost );\n              }\n            }\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4039ee26c484fda13f0428eeeb09969370ff9149","date":1183229536,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/XmlUpdateRequestHandler#readDoc(XMLStreamReader).mjava","pathOld":"src/java/org/apache/solr/handler/StaxUpdateRequestHandler#readDoc(XMLStreamReader).mjava","sourceNew":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            if(boost != null) {\n              // The lucene API and solr XML field specification make it possible to set boosts\n              // on multi-value fields even though lucene indexing does not support this.\n              // To keep behavior consistent with what happens in the lucene index, we accumulate\n              // the product of all boosts specified for this field.\n              Float old = doc.getBoost( name );\n              if( old != null ) {\n                doc.setBoost( name, boost*old );\n              }\n              else {\n                doc.setBoost( name, boost );\n              }\n            }\n            doc.addField(name, text.toString() );\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Given the input stream, read a document\n   * \n   * @since solr 1.3\n   */\n  SolrInputDocument readDoc(XMLStreamReader parser) throws XMLStreamException {\n    SolrInputDocument doc = new SolrInputDocument();\n    \n    String attrName = \"\";\n    for (int i = 0; i < parser.getAttributeCount(); i++) {\n      attrName = parser.getAttributeLocalName(i);\n      if (\"boost\".equals(attrName)) {\n        doc.setBoost( null, Float.parseFloat(parser.getAttributeValue(i)) );\n      } else {\n        log.warning(\"Unknown attribute doc/@\" + attrName);\n      }\n    }\n    \n    StringBuilder text = new StringBuilder();\n    String name = null;\n    Float boost = null;\n    boolean isNull = false;\n    while (true) {\n      int event = parser.next();\n      switch (event) {\n      // Add everything to the text\n      case XMLStreamConstants.SPACE:\n      case XMLStreamConstants.CDATA:\n      case XMLStreamConstants.CHARACTERS:\n        text.append( parser.getText() );\n        break;\n        \n      case XMLStreamConstants.END_ELEMENT:\n        if (\"doc\".equals(parser.getLocalName())) {\n          return doc;\n        } \n        else if (\"field\".equals(parser.getLocalName())) {\n          if (!isNull) {\n            if(boost != null) {\n              // The lucene API and solr XML field specification make it possible to set boosts\n              // on multi-value fields even though lucene indexing does not support this.\n              // To keep behavior consistent with what happens in the lucene index, we accumulate\n              // the product of all boosts specified for this field.\n              Float old = doc.getBoost( name );\n              if( old != null ) {\n                doc.setBoost( name, boost*old );\n              }\n              else {\n                doc.setBoost( name, boost );\n              }\n            }\n            doc.addField(name, text.toString() );\n          }\n        }\n        break;\n        \n      case XMLStreamConstants.START_ELEMENT:\n        text.setLength(0);\n        String localName = parser.getLocalName();\n        if (!\"field\".equals(localName)) {\n          log.warning(\"unexpected XML tag doc/\" + localName);\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \n              \"unexpected XML tag doc/\" + localName);\n        }\n        boost = null;\n        String attrVal = \"\";\n        for (int i = 0; i < parser.getAttributeCount(); i++) {\n          attrName = parser.getAttributeLocalName(i);\n          attrVal = parser.getAttributeValue(i);\n          if (\"name\".equals(attrName)) {\n            name = attrVal;\n          } else if (\"boost\".equals(attrName)) {\n            boost = Float.parseFloat(attrVal);\n          } else if (\"null\".equals(attrName)) {\n            isNull = StrUtils.parseBoolean(attrVal);\n          } else {\n            log.warning(\"Unknown attribute doc/field/@\" + attrName);\n          }\n        }\n        break;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4039ee26c484fda13f0428eeeb09969370ff9149":["6953627e65bb93fb25bba28619071a1554da9604"],"a76eb9a31b3f158d4803594a76191193a920c2dd":["fc25891451b288866eb099252dfdaacdb8eaefd2"],"6953627e65bb93fb25bba28619071a1554da9604":["a76eb9a31b3f158d4803594a76191193a920c2dd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"fc25891451b288866eb099252dfdaacdb8eaefd2":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4039ee26c484fda13f0428eeeb09969370ff9149":[],"a76eb9a31b3f158d4803594a76191193a920c2dd":["6953627e65bb93fb25bba28619071a1554da9604"],"6953627e65bb93fb25bba28619071a1554da9604":["4039ee26c484fda13f0428eeeb09969370ff9149"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["fc25891451b288866eb099252dfdaacdb8eaefd2"],"fc25891451b288866eb099252dfdaacdb8eaefd2":["a76eb9a31b3f158d4803594a76191193a920c2dd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4039ee26c484fda13f0428eeeb09969370ff9149","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}