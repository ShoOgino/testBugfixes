{"path":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","commits":[{"id":"2102da8a037e2ce5cb9f72256c58c8722b9cd706","date":1374864457,"type":0,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within \n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":0,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"/dev/null","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within \n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30de45e50bdc1a79a6797f34dca6271c8866cb6e","date":1427790465,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within \n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fab172655716b96f7e42376116235017a922de3a","date":1427850611,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within \n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7d57d8425f061bbc789486399b498a35f960765e","date":1478627123,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. Inversely, a negative\n   * <code>dist</code> value may be used to specify a certain amount of allowable\n   * overlap. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/spans/SpanNotQuery#SpanNotQuery(SpanQuery,SpanQuery,int).mjava","sourceNew":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. Inversely, a negative\n   * <code>dist</code> value may be used to specify a certain amount of allowable\n   * overlap. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","sourceOld":"  /** Construct a SpanNotQuery matching spans from <code>include</code> which\n   * have no overlap with spans from <code>exclude</code> within\n   * <code>dist</code> tokens of <code>include</code>. */\n  public SpanNotQuery(SpanQuery include, SpanQuery exclude, int dist) {\n     this(include, exclude, dist, dist);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","7d57d8425f061bbc789486399b498a35f960765e"],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"fab172655716b96f7e42376116235017a922de3a":["2102da8a037e2ce5cb9f72256c58c8722b9cd706","30de45e50bdc1a79a6797f34dca6271c8866cb6e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7d57d8425f061bbc789486399b498a35f960765e"],"7d57d8425f061bbc789486399b498a35f960765e":["30de45e50bdc1a79a6797f34dca6271c8866cb6e"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","2102da8a037e2ce5cb9f72256c58c8722b9cd706"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"2102da8a037e2ce5cb9f72256c58c8722b9cd706":["30de45e50bdc1a79a6797f34dca6271c8866cb6e","fab172655716b96f7e42376116235017a922de3a"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"30de45e50bdc1a79a6797f34dca6271c8866cb6e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","fab172655716b96f7e42376116235017a922de3a","7d57d8425f061bbc789486399b498a35f960765e"],"fab172655716b96f7e42376116235017a922de3a":[],"7d57d8425f061bbc789486399b498a35f960765e":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","199dfa410f1fdbfd3294106b04096cce5ed34b21","fab172655716b96f7e42376116235017a922de3a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}