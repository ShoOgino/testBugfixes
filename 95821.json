{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","commits":[{"id":"a870f9917149dc600c4ad4417d615c1795de5864","date":1445975387,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","pathOld":"/dev/null","sourceNew":"      // binary search reverse index to find smaller\n      // range of blocks to search\n      long binarySearchIndex(BytesRef text) throws IOException {\n        long low = 0;\n        long high = numReverseIndexValues - 1;\n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          reverseTerms.fill(scratch, reverseAddresses.get(mid));\n          int cmp = scratch.compareTo(text);\n\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","date":1475755647,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","sourceNew":"      // binary search reverse index to find smaller\n      // range of blocks to search\n      long binarySearchIndex(BytesRef text) throws IOException {\n        long low = 0;\n        long high = numReverseIndexValues - 1;\n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          reverseTerms.fill(scratch, reverseAddresses.get(mid));\n          int cmp = scratch.compareTo(text);\n\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":"      // binary search reverse index to find smaller\n      // range of blocks to search\n      long binarySearchIndex(BytesRef text) throws IOException {\n        long low = 0;\n        long high = numReverseIndexValues - 1;\n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          reverseTerms.fill(scratch, reverseAddresses.get(mid));\n          int cmp = scratch.compareTo(text);\n\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene54/Lucene54DocValuesProducer.CompressedBinaryDocValues.CompressedBinaryTermsEnum#binarySearchIndex(BytesRef).mjava","sourceNew":"      // binary search reverse index to find smaller\n      // range of blocks to search\n      long binarySearchIndex(BytesRef text) throws IOException {\n        long low = 0;\n        long high = numReverseIndexValues - 1;\n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          reverseTerms.fill(scratch, reverseAddresses.get(mid));\n          int cmp = scratch.compareTo(text);\n\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","sourceOld":"      // binary search reverse index to find smaller\n      // range of blocks to search\n      long binarySearchIndex(BytesRef text) throws IOException {\n        long low = 0;\n        long high = numReverseIndexValues - 1;\n        while (low <= high) {\n          long mid = (low + high) >>> 1;\n          reverseTerms.fill(scratch, reverseAddresses.get(mid));\n          int cmp = scratch.compareTo(text);\n\n          if (cmp < 0) {\n            low = mid + 1;\n          } else if (cmp > 0) {\n            high = mid - 1;\n          } else {\n            return mid;\n          }\n        }\n        return high;\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["a870f9917149dc600c4ad4417d615c1795de5864"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a870f9917149dc600c4ad4417d615c1795de5864":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a870f9917149dc600c4ad4417d615c1795de5864","7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262"]},"commit2Childs":{"7f3090f7e0cab5b1f5acf12d21f31f00fe74a262":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a870f9917149dc600c4ad4417d615c1795de5864"],"a870f9917149dc600c4ad4417d615c1795de5864":["7f3090f7e0cab5b1f5acf12d21f31f00fe74a262","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}