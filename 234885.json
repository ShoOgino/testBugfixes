{"path":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","pathOld":"/dev/null","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = BKDUtil.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = BKDUtil.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = BKDUtil.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = BKDUtil.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestPointQueries#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestDimensionalRangeQuery#matches(int,byte[][],boolean[],byte[][],boolean[],byte[][]).mjava","sourceNew":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  private static boolean matches(int bytesPerDim, byte[][] lower, boolean[] includeLower, byte[][] upper, boolean[] includeUpper, byte[][] value) {\n    int numDims = lower.length;\n    for(int dim=0;dim<numDims;dim++) {\n      int cmp;\n      if (lower[dim] == null) {\n        cmp = 1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, lower[dim], 0);\n      }\n\n      if (cmp < 0 || (cmp == 0 && includeLower[dim] == false)) {\n        // Value is below the lower bound, on this dim\n        return false;\n      }\n\n      if (upper[dim] == null) {\n        cmp = -1;\n      } else {\n        cmp = NumericUtils.compare(bytesPerDim, value[dim], 0, upper[dim], 0);\n      }\n\n      if (cmp > 0 || (cmp == 0 && includeUpper[dim] == false)) {\n        // Value is above the upper bound, on this dim\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["770342641f7b505eaa8dccdc666158bff2419109"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}