{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","commits":[{"id":"e230a61047bc041516c811baa08a7174d6f8322a","date":1306175633,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2e10cb22a8bdb44339e282925a29182bb2f3174d","date":1306841137,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","pathOld":"solr/src/java/org/apache/solr/spelling/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f2bf10c11daad40c1e46fabd0d414c19a3e605b","date":1310410393,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","sourceNew":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(FST.INPUT_TYPE.BYTE4, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","sourceOld":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = \n      new Builder<Object>(FST.INPUT_TYPE.BYTE4, 0, 0, true, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTLookup#buildAutomaton(List[Entry]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Builds the final automaton from a list of entries. \n   */\n  private FST<Object> buildAutomaton(List<Entry> entries) throws IOException {\n    if (entries.size() == 0)\n      return null;\n    \n    // Sort by utf16 (raw char value)\n    final Comparator<Entry> comp = new Comparator<Entry>() {\n      public int compare(Entry o1, Entry o2) {\n        char [] ch1 = o1.term;\n        char [] ch2 = o2.term;\n        int len1 = ch1.length;\n        int len2 = ch2.length;\n\n        int max = Math.min(len1, len2);\n        for (int i = 0; i < max; i++) {\n          int v = ch1[i] - ch2[i];\n          if (v != 0) return v;\n        }\n        return len1 - len2;\n      }\n    };\n    Collections.sort(entries, comp);\n\n    // Avoid duplicated identical entries, if possible. This is required because\n    // it breaks automaton construction otherwise.\n    int len = entries.size();\n    int j = 0;\n    for (int i = 1; i < len; i++) {\n      if (comp.compare(entries.get(j), entries.get(i)) != 0) {\n        entries.set(++j, entries.get(i));\n      }\n    }\n    entries = entries.subList(0, j + 1);\n\n    // Build the automaton.\n    final Outputs<Object> outputs = NoOutputs.getSingleton();\n    final Object empty = outputs.getNoOutput();\n    final Builder<Object> builder = new Builder<Object>(FST.INPUT_TYPE.BYTE4, outputs);\n    final IntsRef scratchIntsRef = new IntsRef(10);\n    for (Entry e : entries) {\n      final int termLength = scratchIntsRef.length = e.term.length;\n\n      scratchIntsRef.grow(termLength);\n      final int [] ints = scratchIntsRef.ints;\n      final char [] chars = e.term;\n      for (int i = termLength; --i >= 0;) {\n        ints[i] = chars[i];\n      }\n      builder.add(scratchIntsRef, empty);\n    }\n    return builder.finish();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["4f2bf10c11daad40c1e46fabd0d414c19a3e605b"],"e230a61047bc041516c811baa08a7174d6f8322a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["e230a61047bc041516c811baa08a7174d6f8322a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"2e10cb22a8bdb44339e282925a29182bb2f3174d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e230a61047bc041516c811baa08a7174d6f8322a"]},"commit2Childs":{"7bf07f4ebadc7539de83a531e64678350d78ca26":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e230a61047bc041516c811baa08a7174d6f8322a":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","4f2bf10c11daad40c1e46fabd0d414c19a3e605b","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e230a61047bc041516c811baa08a7174d6f8322a","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"4f2bf10c11daad40c1e46fabd0d414c19a3e605b":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2e10cb22a8bdb44339e282925a29182bb2f3174d":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817","2e10cb22a8bdb44339e282925a29182bb2f3174d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}