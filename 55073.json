{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","commits":[{"id":"285d2e15f5866fae57313f480e7499581389acad","date":1558506140,"type":0,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","pathOld":"/dev/null","sourceNew":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","sourceNew":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","sourceNew":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","sourceOld":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .setMaxShardsPerNode(4)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/AutoScalingHandlerTest#testDiagnosticsWithPayload().mjava","sourceNew":null,"sourceOld":"  public void testDiagnosticsWithPayload() throws Exception {\n    CloudSolrClient solrClient = cluster.getSolrClient();\n    String COLLNAME = \"testDiagnosticsWithPayload.COLL\";\n    CollectionAdminResponse adminResponse = CollectionAdminRequest.createCollection(COLLNAME, CONFIGSET_NAME, 1, 2)\n        .process(solrClient);\n    cluster.waitForActiveCollection(COLLNAME, 1, 2);\n    DocCollection collection = solrClient.getClusterStateProvider().getCollection(COLLNAME);\n    Replica aReplica = collection.getReplicas().get(0);\n\n    String configPayload = \"{\\n\" +\n        \"  'cluster-policy': [{'replica': 0, 'node': '_NODE'}]\\n\" +\n        \"}\";\n    configPayload = configPayload.replaceAll(\"_NODE\", aReplica.getNodeName());\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, \"/diagnostics\", configPayload);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response._getStr(\"diagnostics/violations[0]/node\",null),response._getStr(\"diagnostics/violations[0]/node\",null));\n    CollectionAdminRequest.deleteCollection(COLLNAME)\n        .process(cluster.getSolrClient());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["285d2e15f5866fae57313f480e7499581389acad"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"285d2e15f5866fae57313f480e7499581389acad":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"285d2e15f5866fae57313f480e7499581389acad":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["285d2e15f5866fae57313f480e7499581389acad"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}