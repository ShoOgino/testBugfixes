{"path":"backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, seg + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestTermVectorsReader#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, seg + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    /*\n    for (int i = 0; i < testFields.length; i++) {\n      fieldInfos.add(testFields[i], true, true, testFieldsStorePos[i], testFieldsStoreOff[i]);\n    }\n    */\n\n    Arrays.sort(testTerms);\n    int tokenUpto = 0;\n    for (int i = 0; i < testTerms.length; i++) {\n      positions[i] = new int[TERM_FREQ];\n      offsets[i] = new TermVectorOffsetInfo[TERM_FREQ];\n      // first position must be 0\n      for (int j = 0; j < TERM_FREQ; j++) {\n        // positions are always sorted in increasing order\n        positions[i][j] = (int) (j * 10 + Math.random() * 10);\n        // offsets are always sorted in increasing order\n        offsets[i][j] = new TermVectorOffsetInfo(j * 10, j * 10 + testTerms[i].length());\n        TestToken token = tokens[tokenUpto++] = new TestToken();\n        token.text = testTerms[i];\n        token.pos = positions[i][j];\n        token.startOffset = offsets[i][j].getStartOffset();\n        token.endOffset = offsets[i][j].getEndOffset();\n      }\n    }\n    Arrays.sort(tokens);\n\n    IndexWriter writer = new IndexWriter(dir, new MyAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setUseCompoundFile(false);\n    Document doc = new Document();\n    for(int i=0;i<testFields.length;i++) {\n      final Field.TermVector tv;\n      if (testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS_OFFSETS;\n      else if (testFieldsStorePos[i] && !testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_POSITIONS;\n      else if (!testFieldsStorePos[i] && testFieldsStoreOff[i])\n        tv = Field.TermVector.WITH_OFFSETS;\n      else\n        tv = Field.TermVector.YES;\n      doc.add(new Field(testFields[i], \"\", Field.Store.NO, Field.Index.ANALYZED, tv));\n    }\n\n    //Create 5 documents for testing, they all have the same\n    //terms\n    for(int j=0;j<5;j++)\n      writer.addDocument(doc);\n    writer.commit();\n    seg = writer.newestSegment().name;\n    writer.close();\n\n    fieldInfos = new FieldInfos(dir, seg + \".\" + IndexFileNames.FIELD_INFOS_EXTENSION);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}