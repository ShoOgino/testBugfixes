{"path":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","commits":[{"id":"788184b02a01588fb0bca602e39018a580397a99","date":1378925127,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Lists.newArrayList(\"lingo\", \"stc\", \"mock\", \"default\"),\n        Lists.newArrayList(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","date":1440505299,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","sourceNew":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Lists.newArrayList(\"unavailable\", \"lingo\", \"stc\", \"mock\", \"default\"),\n        Lists.newArrayList(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","sourceOld":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Lists.newArrayList(\"lingo\", \"stc\", \"mock\", \"default\"),\n        Lists.newArrayList(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","date":1478271720,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","sourceNew":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Arrays.asList(\"unavailable\", \"lingo\", \"stc\", \"mock\", \"default\"),\n        new ArrayList<>(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","sourceOld":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Lists.newArrayList(\"unavailable\", \"lingo\", \"stc\", \"mock\", \"default\"),\n        Lists.newArrayList(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","pathOld":"solr/contrib/clustering/src/test/org/apache/solr/handler/clustering/carrot2/CarrotClusteringEngineTest#testDeclarationEngineOrder().mjava","sourceNew":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Arrays.asList(\"unavailable\", \"lingo\", \"stc\", \"mock\", \"default\"),\n        new ArrayList<>(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","sourceOld":"  @Test\n  public void testDeclarationEngineOrder() throws Exception {\n    ClusteringComponent comp = (ClusteringComponent) h.getCore().getSearchComponent(\"clustering-name-decl-order\");\n    Map<String,SearchClusteringEngine> engines = getSearchClusteringEngines(comp);\n    assertEquals(\n        Lists.newArrayList(\"unavailable\", \"lingo\", \"stc\", \"mock\", \"default\"),\n        Lists.newArrayList(engines.keySet()));\n    assertEquals(\n        LingoClusteringAlgorithm.class,\n        ((CarrotClusteringEngine) engines.get(ClusteringEngine.DEFAULT_ENGINE_NAME)).getClusteringAlgorithmClass());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"788184b02a01588fb0bca602e39018a580397a99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["788184b02a01588fb0bca602e39018a580397a99"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5","7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f"]},"commit2Childs":{"7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["788184b02a01588fb0bca602e39018a580397a99"],"788184b02a01588fb0bca602e39018a580397a99":["5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5"],"5275eb9c84ba42bd01ecb9ab2b5f7e42519a97b5":["7290fa7ae2cc2a80abb6aecc0b0dd90cbfde2b7f","199dfa410f1fdbfd3294106b04096cce5ed34b21"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}