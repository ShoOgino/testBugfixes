{"path":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Term().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Term().mjava","pathOld":"contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Term().mjava","sourceNew":"  public void testQueryPhraseMap1Term() throws Exception {\n    Query query = tq( \"a\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // boost != 1\n    query = tq( 2, \"a\" );\n    fq = new FieldQuery( query, true, true );\n    map = fq.rootMaps;\n    qpm = map.get( F );\n    assertEquals( 2F, qpm.subMap.get( \"a\" ).boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Term() throws Exception {\n    Query query = tq( \"a\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // boost != 1\n    query = tq( 2, \"a\" );\n    fq = new FieldQuery( query, true, true );\n    map = fq.rootMaps;\n    qpm = map.get( F );\n    assertEquals( 2F, qpm.subMap.get( \"a\" ).boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36f91bf9cfc9d0c3155edab43359e7670ea8a5af","date":1269580873,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Term().mjava","pathOld":"lucene/contrib/fast-vector-highlighter/src/test/org/apache/lucene/search/vectorhighlight/FieldQueryTest#testQueryPhraseMap1Term().mjava","sourceNew":"  public void testQueryPhraseMap1Term() throws Exception {\n    Query query = tq( \"a\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // boost != 1\n    query = tq( 2, \"a\" );\n    fq = new FieldQuery( query, true, true );\n    map = fq.rootMaps;\n    qpm = map.get( F );\n    assertEquals( 2F, qpm.subMap.get( \"a\" ).boost );\n  }\n\n","sourceOld":"  public void testQueryPhraseMap1Term() throws Exception {\n    Query query = tq( \"a\" );\n    \n    // phraseHighlight = true, fieldMatch = true\n    FieldQuery fq = new FieldQuery( query, true, true );\n    Map<String, QueryPhraseMap> map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    QueryPhraseMap qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = true, fieldMatch = false\n    fq = new FieldQuery( query, true, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = true\n    fq = new FieldQuery( query, false, true );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( null ) );\n    assertNotNull( map.get( F ) );\n    qpm = map.get( F );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // phraseHighlight = false, fieldMatch = false\n    fq = new FieldQuery( query, false, false );\n    map = fq.rootMaps;\n    assertEquals( 1, map.size() );\n    assertNull( map.get( F ) );\n    assertNotNull( map.get( null ) );\n    qpm = map.get( null );\n    assertEquals( 1, qpm.subMap.size() );\n    assertTrue( qpm.subMap.get( \"a\" ) != null );\n    assertTrue( qpm.subMap.get( \"a\" ).terminal );\n    assertEquals( 1F, qpm.subMap.get( \"a\" ).boost );\n    \n    // boost != 1\n    query = tq( 2, \"a\" );\n    fq = new FieldQuery( query, true, true );\n    map = fq.rootMaps;\n    qpm = map.get( F );\n    assertEquals( 2F, qpm.subMap.get( \"a\" ).boost );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"36f91bf9cfc9d0c3155edab43359e7670ea8a5af":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["36f91bf9cfc9d0c3155edab43359e7670ea8a5af"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}