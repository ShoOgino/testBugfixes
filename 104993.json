{"path":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","commits":[{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"lucene/contrib/analyzers/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1c25e111e7f6a7353d2b9b46643b7f7507c6584","date":1286049515,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  @Deprecated\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e8cc373c801e54cec75daf9f52792cb4b17f536","date":1291116159,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  @Deprecated\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3bb13258feba31ab676502787ab2e1779f129b7a","date":1291596436,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  @Deprecated\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   * @deprecated only tests TermAttribute!\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer#tsToString(TokenStream).mjava","sourceNew":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","sourceOld":"  /** \n   * TODO: rewrite tests not to use string comparison.\n   */\n  private static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    CharTermAttribute termAtt = in.addAttribute(CharTermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setEmpty().append(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.toString());\n      in.clearAttributes();\n      termAtt.setEmpty().append(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["0f080986da691a3bba7b757f43ab72cdc82b57ce","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"3bb13258feba31ab676502787ab2e1779f129b7a":["a1c25e111e7f6a7353d2b9b46643b7f7507c6584","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["a1c25e111e7f6a7353d2b9b46643b7f7507c6584"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a1c25e111e7f6a7353d2b9b46643b7f7507c6584"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"a1c25e111e7f6a7353d2b9b46643b7f7507c6584":["3bb13258feba31ab676502787ab2e1779f129b7a","4e8cc373c801e54cec75daf9f52792cb4b17f536"],"3bb13258feba31ab676502787ab2e1779f129b7a":[],"4e8cc373c801e54cec75daf9f52792cb4b17f536":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","3bb13258feba31ab676502787ab2e1779f129b7a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}