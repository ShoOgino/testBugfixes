{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","commits":[{"id":"c51a2dcb8b4e1820a44f35f11961110201e06cdb","date":1329994529,"type":0,"author":"Sami Siren","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * sync internal state with zk on startup\n   */\n  private void syncNodeState() throws KeeperException, InterruptedException {\n    log.debug(\"Syncing internal state with zk. Current: \" + coreStates);\n    final String path = Overseer.STATES_NODE + \"/\" + getNodeName();\n\n    final byte[] data = zkClient.getData(path, null, null, true);\n\n    coreStates = new HashMap<String,CoreState>();\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        for(CoreState coreState: stateList) {\n          coreStates.put(coreState.getCoreName(), coreState);\n        }\n    }\n    log.debug(\"after sync: \" + coreStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcc2d78a3da72b8259df3f88453b4d81638b416b","date":1330135232,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","sourceNew":"  /*\n   * sync internal state with zk on startup\n   */\n  private void syncNodeState() throws KeeperException, InterruptedException {\n    log.debug(\"Syncing internal state with zk. Current: \" + coreStates);\n    final String path = Overseer.STATES_NODE + \"/\" + getNodeName();\n\n    final byte[] data = zkClient.getData(path, null, null, true);\n\n    if (data != null) {\n      CoreState[] states = CoreState.load(data);\n      synchronized (coreStates) {\n        coreStates.clear();    // TODO: should we do this?\n        for(CoreState coreState: states) {\n          coreStates.put(coreState.getCoreName(), coreState);\n        }\n      }\n    }\n    log.debug(\"after sync: \" + coreStates);\n  }\n\n","sourceOld":"  /*\n   * sync internal state with zk on startup\n   */\n  private void syncNodeState() throws KeeperException, InterruptedException {\n    log.debug(\"Syncing internal state with zk. Current: \" + coreStates);\n    final String path = Overseer.STATES_NODE + \"/\" + getNodeName();\n\n    final byte[] data = zkClient.getData(path, null, null, true);\n\n    coreStates = new HashMap<String,CoreState>();\n\n    if (data != null) {\n        CoreState[] states = CoreState.load(data);\n        List<CoreState> stateList = Arrays.asList(states);\n        for(CoreState coreState: stateList) {\n          coreStates.put(coreState.getCoreName(), coreState);\n        }\n    }\n    log.debug(\"after sync: \" + coreStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","pathOld":"/dev/null","sourceNew":"  /*\n   * sync internal state with zk on startup\n   */\n  private void syncNodeState() throws KeeperException, InterruptedException {\n    log.debug(\"Syncing internal state with zk. Current: \" + coreStates);\n    final String path = Overseer.STATES_NODE + \"/\" + getNodeName();\n\n    final byte[] data = zkClient.getData(path, null, null, true);\n\n    if (data != null) {\n      CoreState[] states = CoreState.load(data);\n      synchronized (coreStates) {\n        coreStates.clear();    // TODO: should we do this?\n        for(CoreState coreState: states) {\n          coreStates.put(coreState.getCoreName(), coreState);\n        }\n      }\n    }\n    log.debug(\"after sync: \" + coreStates);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5093a9e893633cc091cf2f729d7863671c2b715","date":1339132888,"type":4,"author":"Sami Siren","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#syncNodeState().mjava","sourceNew":null,"sourceOld":"  /*\n   * sync internal state with zk on startup\n   */\n  private void syncNodeState() throws KeeperException, InterruptedException {\n    log.debug(\"Syncing internal state with zk. Current: \" + coreStates);\n    final String path = Overseer.STATES_NODE + \"/\" + getNodeName();\n\n    final byte[] data = zkClient.getData(path, null, null, true);\n\n    if (data != null) {\n      CoreState[] states = CoreState.load(data);\n      synchronized (coreStates) {\n        coreStates.clear();    // TODO: should we do this?\n        for(CoreState coreState: states) {\n          coreStates.put(coreState.getCoreName(), coreState);\n        }\n      }\n    }\n    log.debug(\"after sync: \" + coreStates);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bcc2d78a3da72b8259df3f88453b4d81638b416b":["c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bcc2d78a3da72b8259df3f88453b4d81638b416b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a5093a9e893633cc091cf2f729d7863671c2b715":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a5093a9e893633cc091cf2f729d7863671c2b715"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"bcc2d78a3da72b8259df3f88453b4d81638b416b":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a5093a9e893633cc091cf2f729d7863671c2b715"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c51a2dcb8b4e1820a44f35f11961110201e06cdb"],"a5093a9e893633cc091cf2f729d7863671c2b715":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c51a2dcb8b4e1820a44f35f11961110201e06cdb":["bcc2d78a3da72b8259df3f88453b4d81638b416b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}