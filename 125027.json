{"path":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,DataType,T,T,boolean,boolean).mjava","commits":[{"id":"7f1640a619bcb2540ce0703e0db764ce7327c1a5","date":1321704123,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,DataType,T,T,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,int,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final DataType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric DataType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final int valSize,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    assert (valSize == 32 || valSize == 64);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.valSize = valSize;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (valSize) {\n      case 64:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case 32:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"valSize must be 32 or 64\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,DataType,T,T,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/NumericRangeQuery#NumericRangeQuery(String,int,DataType,T,T,boolean,boolean).mjava","sourceNew":"  private NumericRangeQuery(final String field, final int precisionStep, final DataType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric DataType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","sourceOld":"  private NumericRangeQuery(final String field, final int precisionStep, final DataType dataType,\n    T min, T max, final boolean minInclusive, final boolean maxInclusive\n  ) {\n    super(field);\n    if (precisionStep < 1)\n      throw new IllegalArgumentException(\"precisionStep must be >=1\");\n    this.precisionStep = precisionStep;\n    this.dataType = dataType;\n    this.min = min;\n    this.max = max;\n    this.minInclusive = minInclusive;\n    this.maxInclusive = maxInclusive;\n\n    // For bigger precisionSteps this query likely\n    // hits too many terms, so set to CONSTANT_SCORE_FILTER right off\n    // (especially as the FilteredTermsEnum is costly if wasted only for AUTO tests because it\n    // creates new enums from IndexReader for each sub-range)\n    switch (dataType) {\n      case LONG:\n      case DOUBLE:\n        setRewriteMethod( (precisionStep > 6) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      case INT:\n      case FLOAT:\n        setRewriteMethod( (precisionStep > 8) ?\n          CONSTANT_SCORE_FILTER_REWRITE : \n          CONSTANT_SCORE_AUTO_REWRITE_DEFAULT\n        );\n        break;\n      default:\n        // should never happen\n        throw new IllegalArgumentException(\"Invalid numeric DataType\");\n    }\n    \n    // shortcut if upper bound == lower bound\n    if (min != null && min.equals(max)) {\n      setRewriteMethod(CONSTANT_SCORE_BOOLEAN_QUERY_REWRITE);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"7f1640a619bcb2540ce0703e0db764ce7327c1a5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f1640a619bcb2540ce0703e0db764ce7327c1a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}