{"path":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","commits":[{"id":"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","date":1435150219,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    protected void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","sourceNew":"    @Override\n    public void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","sourceNew":"    @Override\n    public void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","pathOld":"solr/core/src/java/org/apache/solr/response/SmileResponseWriter.SmileWriter#writeNumber(String,Number).mjava","sourceNew":"    @Override\n    public void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","sourceOld":"    @Override\n    protected void writeNumber(String name, Number val) throws IOException {\n      if (val instanceof Integer) {\n        gen.writeNumber(val.intValue());\n      } else if (val instanceof Long) {\n        gen.writeNumber(val.longValue());\n      } else if (val instanceof Float) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Double) {\n        gen.writeNumber(val.floatValue());\n      } else if (val instanceof Short) {\n        gen.writeNumber(val.shortValue());\n      } else if (val instanceof Byte) {\n        gen.writeNumber(val.byteValue());\n      } else if (val instanceof BigInteger) {\n        gen.writeNumber((BigInteger) val);\n      } else if (val instanceof BigDecimal) {\n        gen.writeNumber((BigDecimal) val);\n      } else {\n        gen.writeString(val.getClass().getName() + ':' + val.toString());\n        // default... for debugging only\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","26dad91f15019714a045b4d8c5f40162b2058b54"],"26dad91f15019714a045b4d8c5f40162b2058b54":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235"],"be73df8ac65c8f1ebef4eed2c0bd3a3b8167e235":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","26dad91f15019714a045b4d8c5f40162b2058b54","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}