{"path":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","commits":[{"id":"ccc08aa684aee4964baee0644a6ba047bfd70829","date":1316263707,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(\"group.distibuted.first\",\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["27270b721a573cf4b774ce70b062078ef490388e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"27270b721a573cf4b774ce70b062078ef490388e","date":1329092012,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(\"group.distributed.first\",\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(\"group.distibuted.first\",\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"bugIntro":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3","date":1332285979,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(\"group.distributed.first\",\"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":["27270b721a573cf4b774ce70b062078ef490388e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a80a37ae73034270b57bfd57a44f8fcadc952fa0","date":1515440719,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/grouping/distributed/requestfactory/SearchGroupsRequestFactory#constructRequest(ResponseBuilder).mjava","sourceNew":"  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","sourceOld":"  /**\n   * {@inheritDoc}\n   */\n  @Override\n  public ShardRequest[] constructRequest(ResponseBuilder rb) {\n    ShardRequest sreq = new ShardRequest();\n    GroupingSpecification groupingSpecification = rb.getGroupingSpec();\n    if (groupingSpecification.getFields().length == 0) {\n      return new ShardRequest[0];\n    }\n\n    sreq.purpose = ShardRequest.PURPOSE_GET_TOP_GROUPS;\n\n    sreq.params = new ModifiableSolrParams(rb.req.getParams());\n    // TODO: base on current params or original params?\n\n    // don't pass through any shards param\n    sreq.params.remove(ShardParams.SHARDS);\n\n    // set the start (offset) to 0 for each shard request so we can properly merge\n    // results from the start.\n    if(rb.shards_start > -1) {\n      // if the client set shards.start set this explicitly\n      sreq.params.set(CommonParams.START,rb.shards_start);\n    } else {\n      sreq.params.set(CommonParams.START, \"0\");\n    }\n    // TODO: should we even use the SortSpec?  That's obtained from the QParser, and\n    // perhaps we shouldn't attempt to parse the query at this level?\n    // Alternate Idea: instead of specifying all these things at the upper level,\n    // we could just specify that this is a shard request.\n    if(rb.shards_rows > -1) {\n      // if the client set shards.rows set this explicity\n      sreq.params.set(CommonParams.ROWS,rb.shards_rows);\n    } else {\n      sreq.params.set(CommonParams.ROWS, rb.getSortSpec().getOffset() + rb.getSortSpec().getCount());\n    }\n\n    // in this first phase, request only the unique key field\n    // and any fields needed for merging.\n    sreq.params.set(GroupParams.GROUP_DISTRIBUTED_FIRST, \"true\");\n\n    if ( (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES)!=0 || rb.getSortSpec().includesScore()) {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName() + \",score\");\n    } else {\n      sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    }\n    return new ShardRequest[] {sreq};\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3","7530de27b87b961b51f01bd1299b7004d46e8823"],"b94236357aaa22b76c10629851fe4e376e0cea82":["7530de27b87b961b51f01bd1299b7004d46e8823","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"27270b721a573cf4b774ce70b062078ef490388e":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3":["27270b721a573cf4b774ce70b062078ef490388e"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27270b721a573cf4b774ce70b062078ef490388e":["b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3"],"b83283b2e5ac002ef83f3f5972fa40fb0bc24ed3":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a80a37ae73034270b57bfd57a44f8fcadc952fa0":["b94236357aaa22b76c10629851fe4e376e0cea82"],"ccc08aa684aee4964baee0644a6ba047bfd70829":["27270b721a573cf4b774ce70b062078ef490388e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ccc08aa684aee4964baee0644a6ba047bfd70829"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","b94236357aaa22b76c10629851fe4e376e0cea82","a80a37ae73034270b57bfd57a44f8fcadc952fa0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}