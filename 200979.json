{"path":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet45/Facet45Codec#Facet45Codec(FacetIndexingParams).mjava","commits":[{"id":"09a42395865f791464f0bd5f6118a4abbfa3eb8a","date":1376920143,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet45/Facet45Codec#Facet45Codec(FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42Codec#Facet42Codec(FacetIndexingParams).mjava","sourceNew":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet45Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet42Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet45/Facet45Codec#Facet45Codec(FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet42/Facet42Codec#Facet42Codec(FacetIndexingParams).mjava","sourceNew":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet45Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet42Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet45/Facet45Codec#Facet45Codec(FacetIndexingParams).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet45Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8435160e9702b19398118ddf76b61c846612b6a4","date":1380349140,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet46/Facet46Codec#Facet46Codec(FacetIndexingParams).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/codecs/facet45/Facet45Codec#Facet45Codec(FacetIndexingParams).mjava","sourceNew":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet46Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","sourceOld":"  /**\n   * Initializes with the given {@link FacetIndexingParams}. Returns the proper\n   * {@link DocValuesFormat} for the fields that are returned by\n   * {@link FacetIndexingParams#getAllCategoryListParams()}.\n   */\n  public Facet45Codec(FacetIndexingParams fip) {\n    if (fip.getPartitionSize() != Integer.MAX_VALUE) {\n      throw new IllegalArgumentException(\"this Codec does not support partitions\");\n    }\n    this.facetFields = new HashSet<String>();\n    for (CategoryListParams clp : fip.getAllCategoryListParams()) {\n      facetFields.add(clp.field);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8435160e9702b19398118ddf76b61c846612b6a4":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8435160e9702b19398118ddf76b61c846612b6a4"]},"commit2Childs":{"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","09a42395865f791464f0bd5f6118a4abbfa3eb8a"],"8435160e9702b19398118ddf76b61c846612b6a4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","8435160e9702b19398118ddf76b61c846612b6a4"],"09a42395865f791464f0bd5f6118a4abbfa3eb8a":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}