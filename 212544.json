{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","commits":[{"id":"56df73d43b6fc340f5332322862382c7e30f4368","date":1378304988,"type":1,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/temp/TempTermOutputs#write(TempTermData,DataOutput).mjava","sourceNew":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(TempTermData data, DataOutput out) throws IOException {\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f948dd442d23baa6cbb28daf77c8db78b351329","date":1378742876,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa80a35d7c4b2b1e83082b275e3e8328ab93db52","date":1381766157,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","sourceNew":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    assert hasPos || data.totalTermFreq == -1;\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb77022ef17ff655c519a3f6ecd393747ac88bcf","date":1578579386,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    assert hasPos || data.totalTermFreq == -1;\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06ab276a5660cb79daae8c5ede063531c700a03a","date":1578587874,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    assert hasPos || data.totalTermFreq == -1;\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08a5168e06e037794c0aba7f94f76ff3c09704d2","date":1579264785,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/memory/FSTTermOutputs#write(TermData,DataOutput).mjava","sourceNew":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    assert hasPos || data.totalTermFreq == -1;\n    int bit0 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1);\n    int bit1 = ((data.docFreq == 0)  ? 0 : 1) << 1;\n    int bits = bit0 | bit1;\n    if (bit0 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 2);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit1 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(TermData data, DataOutput out) throws IOException {\n    assert hasPos || data.totalTermFreq == -1;\n    int bit0 = allZero(data.longs) ? 0 : 1;\n    int bit1 = ((data.bytes == null || data.bytes.length == 0) ? 0 : 1) << 1;\n    int bit2 = ((data.docFreq == 0)  ? 0 : 1) << 2;\n    int bits = bit0 | bit1 | bit2;\n    if (bit1 > 0) {  // determine extra length\n      if (data.bytes.length < 32) {\n        bits |= (data.bytes.length << 3);\n        out.writeByte((byte)bits);\n      } else {\n        out.writeByte((byte)bits);\n        out.writeVInt(data.bytes.length);\n      }\n    } else {\n      out.writeByte((byte)bits);\n    }\n    if (bit0 > 0) {  // not all-zero case\n      for (int pos = 0; pos < longsSize; pos++) {\n        out.writeVLong(data.longs[pos]);\n      }\n    }\n    if (bit1 > 0) {  // bytes exists\n      out.writeBytes(data.bytes, 0, data.bytes.length);\n    }\n    if (bit2 > 0) {  // stats exist\n      if (hasPos) {\n        if (data.docFreq == data.totalTermFreq) {\n          out.writeVInt((data.docFreq << 1) | 1);\n        } else {\n          out.writeVInt((data.docFreq << 1));\n          out.writeVLong(data.totalTermFreq - data.docFreq);\n        }\n      } else {\n        out.writeVInt(data.docFreq);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56df73d43b6fc340f5332322862382c7e30f4368":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["06ab276a5660cb79daae8c5ede063531c700a03a"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","56df73d43b6fc340f5332322862382c7e30f4368"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"06ab276a5660cb79daae8c5ede063531c700a03a":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"]},"commit2Childs":{"56df73d43b6fc340f5332322862382c7e30f4368":["2f948dd442d23baa6cbb28daf77c8db78b351329"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["56df73d43b6fc340f5332322862382c7e30f4368","2f948dd442d23baa6cbb28daf77c8db78b351329"],"cb77022ef17ff655c519a3f6ecd393747ac88bcf":["06ab276a5660cb79daae8c5ede063531c700a03a"],"fa80a35d7c4b2b1e83082b275e3e8328ab93db52":["cb77022ef17ff655c519a3f6ecd393747ac88bcf"],"08a5168e06e037794c0aba7f94f76ff3c09704d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2f948dd442d23baa6cbb28daf77c8db78b351329":["fa80a35d7c4b2b1e83082b275e3e8328ab93db52"],"06ab276a5660cb79daae8c5ede063531c700a03a":["08a5168e06e037794c0aba7f94f76ff3c09704d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}