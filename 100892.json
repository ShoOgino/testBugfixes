{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"/dev/null","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"18255ef03f6449839fece69b2dbad04f214e55eb","date":1496169578,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"/dev/null","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a","date":1514477671,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          if(bucket.get(\"facet_\"+m) != null) {\n            Number d = (Number) bucket.get(\"facet_\" + m);\n            if (metric.outputLong) {\n              t.put(identifier, Math.round(d.doubleValue()));\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          double d = (double)bucket.get(\"facet_\"+m);\n          if(metric.outputLong) {\n            t.put(identifier, Math.round(d));\n          } else {\n            t.put(identifier, d);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"662912688ad17e8f9ba6804db6c987892f59a713","date":1536280466,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          if(bucket.get(\"facet_\"+m) != null) {\n            Number d = (Number) bucket.get(\"facet_\" + m);\n            if (metric.outputLong) {\n              t.put(identifier, Math.round(d.doubleValue()));\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n          } else {\n            t.put(identifier, 0);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          if(bucket.get(\"facet_\"+m) != null) {\n            Number d = (Number) bucket.get(\"facet_\" + m);\n            if (metric.outputLong) {\n              t.put(identifier, Math.round(d.doubleValue()));\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75","date":1591744896,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#fillTuples(List[Tuple],Tuple,NamedList,String,Metric[]).mjava","sourceNew":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          @SuppressWarnings({\"rawtypes\"})NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    @SuppressWarnings({\"rawtypes\"})\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      @SuppressWarnings({\"rawtypes\"})\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          if(bucket.get(\"facet_\"+m) != null) {\n            Number d = (Number) bucket.get(\"facet_\" + m);\n            if (metric.outputLong) {\n              t.put(identifier, Math.round(d.doubleValue()));\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n          } else {\n            t.put(identifier, 0);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","sourceOld":"  private void fillTuples(List<Tuple> tuples,\n                          Tuple currentTuple,\n                          NamedList facets,\n                          String field,\n                          Metric[] _metrics) {\n\n    NamedList nl = (NamedList)facets.get(\"timeseries\");\n    if(nl == null) {\n      return;\n    }\n\n    List allBuckets = (List)nl.get(\"buckets\");\n    for(int b=0; b<allBuckets.size(); b++) {\n      NamedList bucket = (NamedList)allBuckets.get(b);\n      Object val = bucket.get(\"val\");\n\n      if(formatter != null) {\n        LocalDateTime localDateTime = LocalDateTime.ofInstant(((java.util.Date) val).toInstant(), ZoneOffset.UTC);\n        val = localDateTime.format(formatter);\n      }\n\n      Tuple t = currentTuple.clone();\n      t.put(field, val);\n      int m = 0;\n      for(Metric metric : _metrics) {\n        String identifier = metric.getIdentifier();\n        if(!identifier.startsWith(\"count(\")) {\n          if(bucket.get(\"facet_\"+m) != null) {\n            Number d = (Number) bucket.get(\"facet_\" + m);\n            if (metric.outputLong) {\n              t.put(identifier, Math.round(d.doubleValue()));\n            } else {\n              t.put(identifier, d.doubleValue());\n            }\n          } else {\n            t.put(identifier, 0);\n          }\n          ++m;\n        } else {\n          long l = ((Number)bucket.get(\"count\")).longValue();\n          t.put(\"count(*)\", l);\n        }\n      }\n      tuples.add(t);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","18255ef03f6449839fece69b2dbad04f214e55eb"],"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"18255ef03f6449839fece69b2dbad04f214e55eb":["c35d3c01114129fff707f0777080210fa9deb2a7"],"662912688ad17e8f9ba6804db6c987892f59a713":["39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a"],"44b289ba5434fa10782118c697fa706d6cf231df":["c35d3c01114129fff707f0777080210fa9deb2a7","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["662912688ad17e8f9ba6804db6c987892f59a713"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c35d3c01114129fff707f0777080210fa9deb2a7","18255ef03f6449839fece69b2dbad04f214e55eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a":["662912688ad17e8f9ba6804db6c987892f59a713"],"c35d3c01114129fff707f0777080210fa9deb2a7":["18255ef03f6449839fece69b2dbad04f214e55eb","44b289ba5434fa10782118c697fa706d6cf231df","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"18255ef03f6449839fece69b2dbad04f214e55eb":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"662912688ad17e8f9ba6804db6c987892f59a713":["2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"2b7d28aa15134f77b3a8f4c2724bdc7cb402ab75":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["39298ef8656bc999dea7f9bf8dfa60bdc2d2f88a","44b289ba5434fa10782118c697fa706d6cf231df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}