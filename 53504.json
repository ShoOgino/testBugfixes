{"path":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","commits":[{"id":"4e9bbb27241bcf9645bb2f724c137537aa69918a","date":1287780008,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b12d3e81e0f95a4527b5703953c503f71120ffcc","date":1288080933,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParser#newRangeQuery(String,String,String,boolean).mjava","sourceNew":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param inclusive true if range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bed62fe6383040eaff2ec720cdc55bb1462c61da","date":1296408595,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":["87778e49fc2a9683c4dc9217a451004dc7edf6da"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\r\n   * Builds a new TermRangeQuery instance\r\n   * @param field Field\r\n   * @param part1 min\r\n   * @param part2 max\r\n   * @param startInclusive true if the start of the range is inclusive\r\n   * @param endInclusive true if the end of the range is inclusive\r\n   * @return new TermRangeQuery instance\r\n   */\r\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\r\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\r\n    query.setRewriteMethod(multiTermRewriteMethod);\r\n    return query;\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e492fb0f2bb0b4b47208286f9331ff55963c656","date":1298870150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final TermRangeQuery query = new TermRangeQuery(field, part1, part2, startInclusive, endInclusive, rangeCollator);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":5,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/queryParser/QueryParserBase#newRangeQuery(String,String,String,boolean,boolean).mjava","sourceNew":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":"  /**\n   * Builds a new TermRangeQuery instance\n   * @param field Field\n   * @param part1 min\n   * @param part2 max\n   * @param startInclusive true if the start of the range is inclusive\n   * @param endInclusive true if the end of the range is inclusive\n   * @return new TermRangeQuery instance\n   */\n  protected Query newRangeQuery(String field, String part1, String part2, boolean startInclusive, boolean endInclusive) {\n    final BytesRef start;\n    final BytesRef end;\n     \n    if (part1 == null) {\n      start = null;\n    } else {\n      start = analyzeRangeTerms ? analyzeRangePart(field, part1) : new BytesRef(part1);\n    }\n     \n    if (part2 == null) {\n      end = null;\n    } else {\n      end = analyzeRangeTerms ? analyzeRangePart(field, part2) : new BytesRef(part2);\n    }\n      \n    final TermRangeQuery query = new TermRangeQuery(field, start, end, startInclusive, endInclusive);\n\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["bde51b089eb7f86171eb3406e38a274743f9b7ac","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["b12d3e81e0f95a4527b5703953c503f71120ffcc","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["3e492fb0f2bb0b4b47208286f9331ff55963c656"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["bed62fe6383040eaff2ec720cdc55bb1462c61da"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4e9bbb27241bcf9645bb2f724c137537aa69918a"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["4e9bbb27241bcf9645bb2f724c137537aa69918a"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"29ef99d61cda9641b6250bf9567329a6e65f901d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"4e9bbb27241bcf9645bb2f724c137537aa69918a":["b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","bed62fe6383040eaff2ec720cdc55bb1462c61da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4e9bbb27241bcf9645bb2f724c137537aa69918a","b12d3e81e0f95a4527b5703953c503f71120ffcc","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b12d3e81e0f95a4527b5703953c503f71120ffcc":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"3e492fb0f2bb0b4b47208286f9331ff55963c656":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"bed62fe6383040eaff2ec720cdc55bb1462c61da":["29ef99d61cda9641b6250bf9567329a6e65f901d","3e492fb0f2bb0b4b47208286f9331ff55963c656","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}