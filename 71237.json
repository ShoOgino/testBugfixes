{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#Lucene50CompoundReader(byte[],Directory,String,IOContext).mjava","commits":[{"id":"7f936b67ab4a872d22231aae4f63608e7f411071","date":1412266152,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#Lucene50CompoundReader(byte[],Directory,String,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene50CompoundReader(byte[] segmentID, Directory directory, String fileName, IOContext context) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.entries = readEntries(segmentID, directory, fileName);\n    boolean success = false;\n    handle = directory.openInput(fileName, context);\n    try {\n      CodecUtil.checkSegmentHeader(handle, Lucene50CompoundFormat.DATA_CODEC, version, version, segmentID, \"\");\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(handle);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(handle);\n      }\n    }\n    this.isOpen = true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c34e07420c03a037d73169b35f349c2ad6fd8c7","date":1412304383,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#Lucene50CompoundReader(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader#Lucene50CompoundReader(byte[],Directory,String,IOContext).mjava","sourceNew":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene50CompoundReader(Directory directory, SegmentInfo si, IOContext context) throws IOException {\n    this.directory = directory;\n    this.segmentName = si.name;\n    String dataFileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene50CompoundFormat.DATA_EXTENSION);\n    String entriesFileName = IndexFileNames.segmentFileName(segmentName, \"\", Lucene50CompoundFormat.ENTRIES_EXTENSION);\n    this.entries = readEntries(si.getId(), directory, entriesFileName);\n    boolean success = false;\n    handle = directory.openInput(dataFileName, context);\n    try {\n      CodecUtil.checkSegmentHeader(handle, Lucene50CompoundFormat.DATA_CODEC, version, version, si.getId(), \"\");\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(handle);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(handle);\n      }\n    }\n    this.isOpen = true;\n  }\n\n","sourceOld":"  /**\n   * Create a new CompoundFileDirectory.\n   */\n  public Lucene50CompoundReader(byte[] segmentID, Directory directory, String fileName, IOContext context) throws IOException {\n    this.directory = directory;\n    this.fileName = fileName;\n    this.entries = readEntries(segmentID, directory, fileName);\n    boolean success = false;\n    handle = directory.openInput(fileName, context);\n    try {\n      CodecUtil.checkSegmentHeader(handle, Lucene50CompoundFormat.DATA_CODEC, version, version, segmentID, \"\");\n      \n      // NOTE: data file is too costly to verify checksum against all the bytes on open,\n      // but for now we at least verify proper structure of the checksum footer: which looks\n      // for FOOTER_MAGIC + algorithmID. This is cheap and can detect some forms of corruption\n      // such as file truncation.\n      CodecUtil.retrieveChecksum(handle);\n      success = true;\n    } finally {\n      if (!success) {\n        IOUtils.closeWhileHandlingException(handle);\n      }\n    }\n    this.isOpen = true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9c34e07420c03a037d73169b35f349c2ad6fd8c7":["7f936b67ab4a872d22231aae4f63608e7f411071"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7f936b67ab4a872d22231aae4f63608e7f411071":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"9c34e07420c03a037d73169b35f349c2ad6fd8c7":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f936b67ab4a872d22231aae4f63608e7f411071","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7f936b67ab4a872d22231aae4f63608e7f411071":["9c34e07420c03a037d73169b35f349c2ad6fd8c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c34e07420c03a037d73169b35f349c2ad6fd8c7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}