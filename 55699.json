{"path":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","commits":[{"id":"6c549981010959551e1af64d7753f9dc92bd2d12","date":1342824545,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","date":1343059585,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aba371508186796cc6151d8223a5b4e16d02e26e","date":1343474871,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52","date":1370989568,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException | NoSuchFileException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","bugFix":["6c549981010959551e1af64d7753f9dc92bd2d12"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd4e13d997cf4fb810398a20a299c2c5a9f6b796","date":1395594336,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(slowFileExists(dir, fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException | NoSuchFileException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","sourceOld":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(dir.fileExists(fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException | NoSuchFileException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c15a75016387504d70a40cba6e9314b8885307f0","date":1397542349,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/store/BaseDirectoryTestCase#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final Directory raw = getDirectory(createTempDir(\"testThreadSafety\"));\n    final BaseDirectoryWrapper dir = newDirectory(raw);\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(MockDirectoryWrapper.Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(slowFileExists(dir, fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException | NoSuchFileException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n    raw.close();\n  }\n\n","sourceOld":"  // test is occasionally very slow, i dont know why\n  // try this seed: 7D7E036AD12927F5:93333EF9E6DE44DE\n  @Nightly\n  public void testThreadSafety() throws Exception {\n    final BaseDirectoryWrapper dir = newDirectory();\n    dir.setCheckIndexOnClose(false); // we arent making an index\n    if (dir instanceof MockDirectoryWrapper) {\n      ((MockDirectoryWrapper)dir).setThrottling(Throttling.NEVER); // makes this test really slow\n    }\n    \n    if (VERBOSE) {\n      System.out.println(dir);\n    }\n\n    class TheThread extends Thread {\n      private String name;\n\n      public TheThread(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 3000; i++) {\n          String fileName = this.name + i;\n          try {\n            //System.out.println(\"create:\" + fileName);\n            IndexOutput output = dir.createOutput(fileName, newIOContext(random()));\n            output.close();\n            assertTrue(slowFileExists(dir, fileName));\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    class TheThread2 extends Thread {\n      private String name;\n\n      public TheThread2(String name) {\n        this.name = name;\n      }\n      \n      @Override\n      public void run() {\n        for (int i = 0; i < 10000; i++) {\n          try {\n            String[] files = dir.listAll();\n            for (String file : files) {\n              //System.out.println(\"file:\" + file);\n             try {\n              IndexInput input = dir.openInput(file, newIOContext(random()));\n              input.close();\n              } catch (FileNotFoundException | NoSuchFileException e) {\n                // ignore\n              } catch (IOException e) {\n                if (e.getMessage().contains(\"still open for writing\")) {\n                  // ignore\n                } else {\n                  throw new RuntimeException(e);\n                }\n              }\n              if (random().nextBoolean()) {\n                break;\n              }\n            }\n          } catch (IOException e) {\n            throw new RuntimeException(e);\n          }\n        }\n      }\n    };\n    \n    TheThread theThread = new TheThread(\"t1\");\n    TheThread2 theThread2 = new TheThread2(\"t2\");\n    theThread.start();\n    theThread2.start();\n    \n    theThread.join();\n    theThread2.join();\n    \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b4f556b82db31fb563c4d6c44604ac6c92017a8","date":1397571871,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","pathOld":"/dev/null","sourceNew":"  // we wrap the directory in slow stuff, so only run nightly\n  @Override @Nightly\n  public void testThreadSafety() throws Exception {\n    super.testThreadSafety();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a","date":1429550638,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/test/org/apache/lucene/store/TestMockDirectoryWrapper#testThreadSafety().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/store/TestDirectory#testThreadSafety().mjava","sourceNew":"  // we wrap the directory in slow stuff, so only run nightly\n  @Override @Nightly\n  public void testThreadSafety() throws Exception {\n    super.testThreadSafety();\n  }\n\n","sourceOld":"  // we wrap the directory in slow stuff, so only run nightly\n  @Override @Nightly\n  public void testThreadSafety() throws Exception {\n    super.testThreadSafety();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["6c549981010959551e1af64d7753f9dc92bd2d12","7530de27b87b961b51f01bd1299b7004d46e8823"],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["7530de27b87b961b51f01bd1299b7004d46e8823"],"aba371508186796cc6151d8223a5b4e16d02e26e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c549981010959551e1af64d7753f9dc92bd2d12"],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c15a75016387504d70a40cba6e9314b8885307f0":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6c549981010959551e1af64d7753f9dc92bd2d12"],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["2b4f556b82db31fb563c4d6c44604ac6c92017a8"],"2b4f556b82db31fb563c4d6c44604ac6c92017a8":["c15a75016387504d70a40cba6e9314b8885307f0"],"6c549981010959551e1af64d7753f9dc92bd2d12":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["6c549981010959551e1af64d7753f9dc92bd2d12"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52":["cd4e13d997cf4fb810398a20a299c2c5a9f6b796"],"aba371508186796cc6151d8223a5b4e16d02e26e":[],"cd4e13d997cf4fb810398a20a299c2c5a9f6b796":["c15a75016387504d70a40cba6e9314b8885307f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","6c549981010959551e1af64d7753f9dc92bd2d12"],"c15a75016387504d70a40cba6e9314b8885307f0":["2b4f556b82db31fb563c4d6c44604ac6c92017a8"],"4b51f65902cc2d20ddeb7a5b949aaddf990f31a7":[],"b52491e71f0d5d0f0160d6ed0d39e0dd661be68a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6c549981010959551e1af64d7753f9dc92bd2d12":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","7530de27b87b961b51f01bd1299b7004d46e8823"],"2b4f556b82db31fb563c4d6c44604ac6c92017a8":["b52491e71f0d5d0f0160d6ed0d39e0dd661be68a"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","d1498f09c87cd5e5f3085bdcbdb9a6bc30410d52"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","aba371508186796cc6151d8223a5b4e16d02e26e","4b51f65902cc2d20ddeb7a5b949aaddf990f31a7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}