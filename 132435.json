{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testSameScore().mjava","commits":[{"id":"15c07295375e0ec8be1c0ec46de21292455b3af8","date":1542792270,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testSameScore().mjava","pathOld":"/dev/null","sourceNew":"  public void testSameScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"g\", \"a\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BM25FQuery query = new BM25FQuery.Builder()\n        .addField(\"f\", 1f)\n        .addField(\"g\", 1f)\n        .addTerm(new BytesRef(\"a\"))\n        .build();\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), Integer.MAX_VALUE), null, Integer.MAX_VALUE);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    assertEquals(TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    assertEquals(11, topDocs.totalHits.value);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4","date":1548850288,"type":3,"author":"Luca Cavanna","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testSameScore().mjava","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestBM25FQuery#testSameScore().mjava","sourceNew":"  public void testSameScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"g\", \"a\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BM25FQuery query = new BM25FQuery.Builder()\n        .addField(\"f\", 1f)\n        .addField(\"g\", 1f)\n        .addTerm(new BytesRef(\"a\"))\n        .build();\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), Integer.MAX_VALUE), null, Integer.MAX_VALUE);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    assertEquals(new TotalHits(11, TotalHits.Relation.EQUAL_TO), topDocs.totalHits);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testSameScore() throws IOException {\n    Directory dir = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    Document doc = new Document();\n    doc.add(new StringField(\"f\", \"a\", Store.NO));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"g\", \"a\", Store.NO));\n    for (int i = 0; i < 10; ++i) {\n      w.addDocument(doc);\n    }\n\n    IndexReader reader = w.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    BM25FQuery query = new BM25FQuery.Builder()\n        .addField(\"f\", 1f)\n        .addField(\"g\", 1f)\n        .addTerm(new BytesRef(\"a\"))\n        .build();\n    TopScoreDocCollector collector = TopScoreDocCollector.create(Math.min(reader.numDocs(), Integer.MAX_VALUE), null, Integer.MAX_VALUE);\n    searcher.search(query, collector);\n    TopDocs topDocs = collector.topDocs();\n    assertEquals(TotalHits.Relation.EQUAL_TO, topDocs.totalHits.relation);\n    assertEquals(11, topDocs.totalHits.value);\n    // All docs must have the same score\n    for (int i = 0; i < topDocs.scoreDocs.length; ++i) {\n      assertEquals(topDocs.scoreDocs[0].score, topDocs.scoreDocs[i].score, 0.0f);\n    }\n\n    reader.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"15c07295375e0ec8be1c0ec46de21292455b3af8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4"]},"commit2Childs":{"c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15c07295375e0ec8be1c0ec46de21292455b3af8"],"15c07295375e0ec8be1c0ec46de21292455b3af8":["c8cfef9a283b113d2e08b7bf1bbf0cee52b894f4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}