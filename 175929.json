{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testNonPreservingMultiwordSynonyms().mjava","commits":[{"id":"24a98f5fdd23e04f85819dbc63b47a12f7c44311","date":1482439157,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testNonPreservingMultiwordSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts, with non preserving, explicit rules.\n   */\n  public void testNonPreservingMultiwordSynonyms() throws Exception {\n    String testFile =\n      \"aaa => two words\\n\" +\n      \"bbb => one two, very many multiple words\\n\" +\n      \"ee ff, gg, h i j k, h i => one\\n\" +\n      \"cc dd => usa,united states,u s a,united states of america\";\n\n    Analyzer analyzer = solrSynsToAnalyzer(testFile);\n\n    assertAnalyzesTo(analyzer, \"aaa\",\n        new String[]{\"two\", \"words\"},\n        new int[]{0, 0},\n        new int[]{3, 3},\n        new String[]{\"SYNONYM\", \"SYNONYM\"},\n        new int[]{1, 1},\n        new int[]{1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing aaa\",\n        new String[]{\"amazing\", \"two\", \"words\"},\n        new String[]{\"word\", \"SYNONYM\", \"SYNONYM\"},\n        new int[]{1, 1, 1},\n        new int[]{1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p bbb s\",\n        new String[]{\"p\", \"one\", \"very\", \"two\", \"many\", \"multiple\", \"words\", \"s\"},\n        new int[]{0, 2, 2, 2, 2, 2, 2, 6},\n        new int[]{1, 5, 5, 5, 5, 5, 5, 7},\n        new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\"},\n        new int[]{1, 1, 0, 1, 0, 1, 1, 1},\n        new int[]{1, 1, 1, 3, 1, 1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p ee ff s\",\n        new String[]{\"p\", \"one\", \"s\"},\n        new int[]{0, 2, 8},\n        new int[]{1, 7, 9},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 1, 1},\n        new int[]{1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p h i j s\",\n        new String[]{\"p\", \"one\", \"j\", \"s\"},\n        new int[]{0, 2, 6, 8},\n        new int[]{1, 5, 7, 9},\n        new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n        new int[]{1, 1, 1, 1},\n        new int[]{1, 1, 1, 1});\n\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/synonym/TestSynonymGraphFilter#testNonPreservingMultiwordSynonyms().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * verify type of token and positionLengths on synonyms of different word counts, with non preserving, explicit rules.\n   */\n  public void testNonPreservingMultiwordSynonyms() throws Exception {\n    String testFile =\n      \"aaa => two words\\n\" +\n      \"bbb => one two, very many multiple words\\n\" +\n      \"ee ff, gg, h i j k, h i => one\\n\" +\n      \"cc dd => usa,united states,u s a,united states of america\";\n\n    Analyzer analyzer = solrSynsToAnalyzer(testFile);\n\n    assertAnalyzesTo(analyzer, \"aaa\",\n        new String[]{\"two\", \"words\"},\n        new int[]{0, 0},\n        new int[]{3, 3},\n        new String[]{\"SYNONYM\", \"SYNONYM\"},\n        new int[]{1, 1},\n        new int[]{1, 1});\n\n    assertAnalyzesToPositions(analyzer, \"amazing aaa\",\n        new String[]{\"amazing\", \"two\", \"words\"},\n        new String[]{\"word\", \"SYNONYM\", \"SYNONYM\"},\n        new int[]{1, 1, 1},\n        new int[]{1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p bbb s\",\n        new String[]{\"p\", \"one\", \"very\", \"two\", \"many\", \"multiple\", \"words\", \"s\"},\n        new int[]{0, 2, 2, 2, 2, 2, 2, 6},\n        new int[]{1, 5, 5, 5, 5, 5, 5, 7},\n        new String[]{\"word\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"SYNONYM\", \"word\"},\n        new int[]{1, 1, 0, 1, 0, 1, 1, 1},\n        new int[]{1, 1, 1, 3, 1, 1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p ee ff s\",\n        new String[]{\"p\", \"one\", \"s\"},\n        new int[]{0, 2, 8},\n        new int[]{1, 7, 9},\n        new String[]{\"word\", \"SYNONYM\", \"word\"},\n        new int[]{1, 1, 1},\n        new int[]{1, 1, 1});\n\n    assertAnalyzesTo(analyzer, \"p h i j s\",\n        new String[]{\"p\", \"one\", \"j\", \"s\"},\n        new int[]{0, 2, 6, 8},\n        new int[]{1, 5, 7, 9},\n        new String[]{\"word\", \"SYNONYM\", \"word\", \"word\"},\n        new int[]{1, 1, 1, 1},\n        new int[]{1, 1, 1, 1});\n\n    analyzer.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["24a98f5fdd23e04f85819dbc63b47a12f7c44311"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","24a98f5fdd23e04f85819dbc63b47a12f7c44311"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["24a98f5fdd23e04f85819dbc63b47a12f7c44311","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"24a98f5fdd23e04f85819dbc63b47a12f7c44311":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","f03e4bed5023ec3ef93a771b8888cae991cf448d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}