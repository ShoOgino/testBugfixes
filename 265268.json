{"path":"src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","commits":[{"id":"d65be9efd1a01c467bd685fd63511b92311257f5","date":1253066235,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","pathOld":"/dev/null","sourceNew":"  public void testInfoRegistry() throws Exception {\n    //TEst that SolrInfoMBeans are registered, including SearchComponents\n    SolrCore core = h.getCore();\n\n    Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    assertTrue(\"infoRegistry Size: \" + infoRegistry.size() + \" is not greater than: \" + 0, infoRegistry.size() > 0);\n    //try out some that we know are in the config\n    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a default one\n    bean = infoRegistry.get(QueryComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a Req Handler, which are stored by name, not clas\n    bean = infoRegistry.get(\"standard\");\n    assertNotNull(\"bean not registered\", bean);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6036b7cd3ea2bcc0e2a9530a27c6c4b98805ebc","date":1253460658,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","sourceNew":null,"sourceOld":"  public void testInfoRegistry() throws Exception {\n    //TEst that SolrInfoMBeans are registered, including SearchComponents\n    SolrCore core = h.getCore();\n\n    Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    assertTrue(\"infoRegistry Size: \" + infoRegistry.size() + \" is not greater than: \" + 0, infoRegistry.size() > 0);\n    //try out some that we know are in the config\n    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a default one\n    bean = infoRegistry.get(QueryComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a Req Handler, which are stored by name, not clas\n    bean = infoRegistry.get(\"standard\");\n    assertNotNull(\"bean not registered\", bean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efde1ddfc9d0125b5cccad6d1130f34fa0b33d61","date":1253593710,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","pathOld":"/dev/null","sourceNew":"  public void testInfoRegistry() throws Exception {\n    //TEst that SolrInfoMBeans are registered, including SearchComponents\n    SolrCore core = h.getCore();\n\n    Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    assertTrue(\"infoRegistry Size: \" + infoRegistry.size() + \" is not greater than: \" + 0, infoRegistry.size() > 0);\n    //try out some that we know are in the config\n    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a default one\n    bean = infoRegistry.get(QueryComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a Req Handler, which are stored by name, not clas\n    bean = infoRegistry.get(\"standard\");\n    assertNotNull(\"bean not registered\", bean);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","pathOld":"src/test/org/apache/solr/core/SolrCoreTest#testInfoRegistry().mjava","sourceNew":"  public void testInfoRegistry() throws Exception {\n    //TEst that SolrInfoMBeans are registered, including SearchComponents\n    SolrCore core = h.getCore();\n\n    Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    assertTrue(\"infoRegistry Size: \" + infoRegistry.size() + \" is not greater than: \" + 0, infoRegistry.size() > 0);\n    //try out some that we know are in the config\n    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a default one\n    bean = infoRegistry.get(QueryComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a Req Handler, which are stored by name, not clas\n    bean = infoRegistry.get(\"standard\");\n    assertNotNull(\"bean not registered\", bean);\n  }\n\n","sourceOld":"  public void testInfoRegistry() throws Exception {\n    //TEst that SolrInfoMBeans are registered, including SearchComponents\n    SolrCore core = h.getCore();\n\n    Map<String, SolrInfoMBean> infoRegistry = core.getInfoRegistry();\n    assertTrue(\"infoRegistry Size: \" + infoRegistry.size() + \" is not greater than: \" + 0, infoRegistry.size() > 0);\n    //try out some that we know are in the config\n    SolrInfoMBean bean = infoRegistry.get(SpellCheckComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a default one\n    bean = infoRegistry.get(QueryComponent.class.getName());\n    assertNotNull(\"bean not registered\", bean);\n    //try a Req Handler, which are stored by name, not clas\n    bean = infoRegistry.get(\"standard\");\n    assertNotNull(\"bean not registered\", bean);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d65be9efd1a01c467bd685fd63511b92311257f5":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["efde1ddfc9d0125b5cccad6d1130f34fa0b33d61"],"efde1ddfc9d0125b5cccad6d1130f34fa0b33d61":["b6036b7cd3ea2bcc0e2a9530a27c6c4b98805ebc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b6036b7cd3ea2bcc0e2a9530a27c6c4b98805ebc":["d65be9efd1a01c467bd685fd63511b92311257f5"]},"commit2Childs":{"d65be9efd1a01c467bd685fd63511b92311257f5":["b6036b7cd3ea2bcc0e2a9530a27c6c4b98805ebc"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["d65be9efd1a01c467bd685fd63511b92311257f5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"efde1ddfc9d0125b5cccad6d1130f34fa0b33d61":["ad94625fb8d088209f46650c8097196fec67f00c"],"b6036b7cd3ea2bcc0e2a9530a27c6c4b98805ebc":["efde1ddfc9d0125b5cccad6d1130f34fa0b33d61"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}