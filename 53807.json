{"path":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","commits":[{"id":"b0d06946f61921459f43309f86ed621ebe67eebe","date":1294182697,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n\n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n\n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","date":1294877328,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n    if (normsCache.containsKey(field)) // cached omitNorms, not missing key\n      return null;\n    \n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n\n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n    if (normsCache.containsKey(field)) // cached omitNorms, not missing key\n      return null;\n    \n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","sourceNew":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n    if (normsCache.containsKey(field)) // cached omitNorms, not missing key\n      return null;\n    \n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n\n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6e3376a314fcc2b31bc46d399c2ff23552b78d6","date":1325780477,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/index/SlowMultiReaderWrapper#norms(String).mjava","sourceNew":null,"sourceOld":"  @Override\n  public synchronized byte[] norms(String field) throws IOException {\n    ensureOpen();\n    byte[] bytes = normsCache.get(field);\n    if (bytes != null)\n      return bytes;\n    if (!hasNorms(field))\n      return null;\n    if (normsCache.containsKey(field)) // cached omitNorms, not missing key\n      return null;\n    \n    bytes = MultiNorms.norms(in, field);\n    normsCache.put(field, bytes);\n    return bytes;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["b0d06946f61921459f43309f86ed621ebe67eebe"],"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b0d06946f61921459f43309f86ed621ebe67eebe"],"b0d06946f61921459f43309f86ed621ebe67eebe":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a54e23e03b47f3d568ab3020bdd386e4b2f0a05"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f6e3376a314fcc2b31bc46d399c2ff23552b78d6"]},"commit2Childs":{"7a54e23e03b47f3d568ab3020bdd386e4b2f0a05":["29ef99d61cda9641b6250bf9567329a6e65f901d","f6e3376a314fcc2b31bc46d399c2ff23552b78d6","868da859b43505d9d2a023bfeae6dd0c795f5295"],"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"b0d06946f61921459f43309f86ed621ebe67eebe":["7a54e23e03b47f3d568ab3020bdd386e4b2f0a05","70ad682703b8585f5d0a637efec044d57ec05efb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","b0d06946f61921459f43309f86ed621ebe67eebe","868da859b43505d9d2a023bfeae6dd0c795f5295"],"f6e3376a314fcc2b31bc46d399c2ff23552b78d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}