{"path":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"439b0fe2f799d1c722151e88e32bdefad8d34ebe","date":1255282509,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List list = new ArrayList();\n    final org.apache.lucene.analysis.Token reusableToken = new org.apache.lucene.analysis.Token();\n    org.apache.lucene.analysis.Token nextToken;\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n\n    while (true) {\n      try {\n        nextToken = source.next(reusableToken);\n      }\n      catch (IOException e) {\n        nextToken = null;\n      }\n      if (nextToken == null)\n        break;\n      list.add(nextToken.clone());\n      if (nextToken.getPositionIncrement() == 1)\n        positionCount++;\n      else\n        severalTokensAtSamePosition = true;\n    }\n    try {\n      source.close();\n    }\n    catch (IOException e) {\n      // ignore\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      nextToken = (org.apache.lucene.analysis.Token) list.get(0);\n      return new TermQuery(new Term(field, nextToken.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, nextToken.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List multiTerms = new ArrayList();\n          for (int i = 0; i < list.size(); i++) {\n            nextToken = (org.apache.lucene.analysis.Token) list.get(i);\n            if (nextToken.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, nextToken.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          q.add(new Term(field, ((org.apache.lucene.analysis.Token)\n              list.get(i)).term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f11899016a0460a7ea2e4b008d002e1e75c7d867","date":1256772085,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add((Term[])multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add((Term[])multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getFieldQuery(String,String).mjava","sourceNew":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source = analyzer.tokenStream(field, new StringReader(queryText));\n    List<AttributeSource.State> list = new ArrayList<AttributeSource.State>();\n    int positionCount = 0;\n    boolean severalTokensAtSamePosition = false;\n    TermAttribute termAtt = source.addAttribute(TermAttribute.class);\n    PositionIncrementAttribute posincrAtt = source.addAttribute(PositionIncrementAttribute.class);\n\n    try {\n      while (source.incrementToken()) {\n        list.add(source.captureState());\n        if (posincrAtt.getPositionIncrement() == 1)\n          positionCount++;\n        else\n          severalTokensAtSamePosition = true;\n      }\n      source.end();\n      source.close();\n    } catch (IOException e) {\n      // ignore, should never happen for StringReaders\n    }\n\n    if (list.size() == 0)\n      return null;\n    else if (list.size() == 1) {\n      source.restoreState(list.get(0));\n      return new TermQuery(new Term(field, termAtt.term()));\n    } else {\n      if (severalTokensAtSamePosition) {\n        if (positionCount == 1) {\n          // no phrase query:\n          BooleanQuery q = new BooleanQuery();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            TermQuery currentQuery = new TermQuery(\n                new Term(field, termAtt.term()));\n            q.add(currentQuery, BooleanClause.Occur.SHOULD);\n          }\n          return q;\n        }\n        else {\n          // phrase query:\n          MultiPhraseQuery mpq = new MultiPhraseQuery();\n          List<Term> multiTerms = new ArrayList<Term>();\n          for (int i = 0; i < list.size(); i++) {\n            source.restoreState(list.get(i));\n            if (posincrAtt.getPositionIncrement() == 1 && multiTerms.size() > 0) {\n              mpq.add(multiTerms.toArray(new Term[0]));\n              multiTerms.clear();\n            }\n            multiTerms.add(new Term(field, termAtt.term()));\n          }\n          mpq.add(multiTerms.toArray(new Term[0]));\n          return mpq;\n        }\n      }\n      else {\n        PhraseQuery q = new PhraseQuery();\n        q.setSlop(phraseSlop);\n        for (int i = 0; i < list.size(); i++) {\n          source.restoreState(list.get(i));\n          q.add(new Term(field, termAtt.term()));\n        }\n        return q;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["439b0fe2f799d1c722151e88e32bdefad8d34ebe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"439b0fe2f799d1c722151e88e32bdefad8d34ebe":["f11899016a0460a7ea2e4b008d002e1e75c7d867"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f11899016a0460a7ea2e4b008d002e1e75c7d867":["9454a6510e2db155fb01faa5c049b06ece95fab9"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}