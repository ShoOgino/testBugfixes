{"path":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","sourceNew":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","sourceOld":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","sourceNew":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","sourceOld":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","pathOld":"solr/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","sourceNew":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","sourceOld":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2639ce99440b7a55fa879228f7e66c337443e77a","date":1317007442,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","sourceNew":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    stream1.reset();\n    stream2.reset();\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n    stream1.end();\n    stream2.end();\n    stream1.close();\n    stream2.close();\n  }\n\n","sourceOld":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/analysis/TestCollationKeyFilterFactory#assertCollatesToSame(TokenStream,TokenStream).mjava","sourceNew":null,"sourceOld":"  private void assertCollatesToSame(TokenStream stream1, TokenStream stream2)\n      throws IOException {\n    stream1.reset();\n    stream2.reset();\n    CharTermAttribute term1 = stream1\n        .addAttribute(CharTermAttribute.class);\n    CharTermAttribute term2 = stream2\n        .addAttribute(CharTermAttribute.class);\n    assertTrue(stream1.incrementToken());\n    assertTrue(stream2.incrementToken());\n    assertEquals(term1.toString(), term2.toString());\n    assertFalse(stream1.incrementToken());\n    assertFalse(stream2.incrementToken());\n    stream1.end();\n    stream2.end();\n    stream1.close();\n    stream2.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2639ce99440b7a55fa879228f7e66c337443e77a":["c26f00b574427b55127e869b935845554afde1fa"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["2639ce99440b7a55fa879228f7e66c337443e77a"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"]},"commit2Childs":{"2639ce99440b7a55fa879228f7e66c337443e77a":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["2639ce99440b7a55fa879228f7e66c337443e77a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}