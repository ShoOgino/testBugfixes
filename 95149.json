{"path":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","commits":[{"id":"402061809f3a4629ea0c449e33e9f94a9772f3c3","date":1113967712,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"/dev/null","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63bc3238545c6012bd44f5d294077997f236bc4e","date":1233087321,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      final MultiReaderHitCollector hc;\n      if (results instanceof MultiReaderHitCollector) {\n        // results can shift\n        final MultiReaderHitCollector resultsMulti = (MultiReaderHitCollector) results;\n        hc = new MultiReaderHitCollector() {\n            public void collect(int doc, float score) {\n              resultsMulti.collect(doc, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) throws IOException {\n              resultsMulti.setNextReader(reader, start+docBase);\n            }\n          };\n      } else {\n        // We must shift the docIDs\n        hc = new MultiReaderHitCollector() {\n            private int docBase;\n            public void collect(int doc, float score) {\n              results.collect(doc + docBase + start, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) {\n              this.docBase = docBase;\n            }\n          };\n      }\n      \n      searchables[i].search(weight, filter, hc);\n    }\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      searchables[i].search(weight, filter, new HitCollector() {\n\t  public void collect(int doc, float score) {\n\t    results.collect(doc + start, score);\n\t  }\n\t});\n\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"64714133cf5ec732e3bbceee63351bb9af0117dc","date":1239647636,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":"  // inherit javadoc\n  /** @deprecated use {@link #search(Weight, Filter, Collector)} instead. */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","sourceOld":"  // inherit javadoc\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    for (int i = 0; i < searchables.length; i++) {\n\n      final int start = starts[i];\n\n      final MultiReaderHitCollector hc;\n      if (results instanceof MultiReaderHitCollector) {\n        // results can shift\n        final MultiReaderHitCollector resultsMulti = (MultiReaderHitCollector) results;\n        hc = new MultiReaderHitCollector() {\n            public void collect(int doc, float score) {\n              resultsMulti.collect(doc, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) throws IOException {\n              resultsMulti.setNextReader(reader, start+docBase);\n            }\n          };\n      } else {\n        // We must shift the docIDs\n        hc = new MultiReaderHitCollector() {\n            private int docBase;\n            public void collect(int doc, float score) {\n              results.collect(doc + docBase + start, score);\n            }\n\n            public void setNextReader(IndexReader reader, int docBase) {\n              this.docBase = docBase;\n            }\n          };\n      }\n      \n      searchables[i].search(weight, filter, hc);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"052fac7830290bd38a04cddee1a121ee07656b56","date":1245780702,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/MultiSearcher#search(Weight,Filter,HitCollector).mjava","sourceNew":null,"sourceOld":"  // inherit javadoc\n  /** @deprecated use {@link #search(Weight, Filter, Collector)} instead. */\n  public void search(Weight weight, Filter filter, final HitCollector results)\n    throws IOException {\n    search(weight, filter, new HitCollectorWrapper(results));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["63bc3238545c6012bd44f5d294077997f236bc4e"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"052fac7830290bd38a04cddee1a121ee07656b56":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"63bc3238545c6012bd44f5d294077997f236bc4e":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["052fac7830290bd38a04cddee1a121ee07656b56"]},"commit2Childs":{"64714133cf5ec732e3bbceee63351bb9af0117dc":["052fac7830290bd38a04cddee1a121ee07656b56"],"402061809f3a4629ea0c449e33e9f94a9772f3c3":["63bc3238545c6012bd44f5d294077997f236bc4e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["402061809f3a4629ea0c449e33e9f94a9772f3c3"],"63bc3238545c6012bd44f5d294077997f236bc4e":["64714133cf5ec732e3bbceee63351bb9af0117dc"],"052fac7830290bd38a04cddee1a121ee07656b56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}