{"path":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(Map[String,Automaton]).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(Map[String,Automaton]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automata a map from automaton identifiers to automata (of type\n   *          <code>Automaton</code>).\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that does not occur in the automaton map\n   */\n  public Automaton toAutomaton(Map<String,Automaton> automata)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(automata, null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(Map[String,Automaton]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/automaton/RegExp#toAutomaton(Map[String,Automaton]).mjava","sourceNew":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automata a map from automaton identifiers to automata (of type\n   *          <code>Automaton</code>).\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that does not occur in the automaton map\n   */\n  public Automaton toAutomaton(Map<String,Automaton> automata)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(automata, null);\n  }\n\n","sourceOld":"  /**\n   * Constructs new <code>Automaton</code> from this <code>RegExp</code>. The\n   * constructed automaton is minimal and deterministic and has no transitions\n   * to dead states.\n   * \n   * @param automata a map from automaton identifiers to automata (of type\n   *          <code>Automaton</code>).\n   * @exception IllegalArgumentException if this regular expression uses a named\n   *              identifier that does not occur in the automaton map\n   */\n  public Automaton toAutomaton(Map<String,Automaton> automata)\n      throws IllegalArgumentException {\n    return toAutomatonAllowMutate(automata, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}