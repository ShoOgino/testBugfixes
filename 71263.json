{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","commits":[{"id":"9a7edeee192980cdc45735957606fc0dbf22d437","date":1459455891,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941","date":1461079048,"type":3,"author":"Dennis Gove","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b71fe681187ac8552caaff9d5a7f1f3cac47b56","date":1461081992,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/graph/ShortestPathStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams mParams = new ModifiableSolrParams(queryParams);\n    for(Map.Entry<String, String[]> param : mParams.getMap().entrySet()){\n      String value = String.join(\",\", param.getValue());\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n\n    // collection\n    expression.addParameter(collection);\n\n    Set<Map.Entry<String,String>> entries =  queryParams.entrySet();\n    // parameters\n    for(Map.Entry param : entries){\n      String value = param.getValue().toString();\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey().toString(), value));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n    expression.addParameter(new StreamExpressionNamedParameter(\"maxDepth\", Integer.toString(maxDepth)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"threads\", Integer.toString(threads)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"partitionSize\", Integer.toString(joinBatchSize)));\n    expression.addParameter(new StreamExpressionNamedParameter(\"from\", fromNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"to\", toNode));\n    expression.addParameter(new StreamExpressionNamedParameter(\"edge\", fromField+\"=\"+toField));\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["9a7edeee192980cdc45735957606fc0dbf22d437","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"9a7edeee192980cdc45735957606fc0dbf22d437":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["9a7edeee192980cdc45735957606fc0dbf22d437"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","826d15444ddf61716dc768c229cd54b2c2ccce1c"]},"commit2Childs":{"3b71fe681187ac8552caaff9d5a7f1f3cac47b56":["e66a459d38c1c4a2f97128433dab546f683a9fed","826d15444ddf61716dc768c229cd54b2c2ccce1c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"9a7edeee192980cdc45735957606fc0dbf22d437":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56","e81b63c9ecb10b3cb98b3cc5e255b8d91021b941"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9a7edeee192980cdc45735957606fc0dbf22d437"],"e81b63c9ecb10b3cb98b3cc5e255b8d91021b941":["3b71fe681187ac8552caaff9d5a7f1f3cac47b56"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["e66a459d38c1c4a2f97128433dab546f683a9fed","d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}