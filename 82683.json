{"path":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skip(long).mjava","commits":[{"id":"733e01764d06768700a194141bccb026ff24bb29","date":1357643774,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skip(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skip(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37b84753dc1f66eba4973779932885fe42cde001","date":1358812051,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#skip(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skip(long).mjava","sourceNew":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","sourceOld":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReaderIterator#skip(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/packed/BlockPackedReader#skip(long).mjava","sourceNew":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","sourceOld":"  /** Skip exactly <code>count</code> values. */\n  public void skip(long count) throws IOException {\n    assert count >= 0;\n    if (ord + count > valueCount || ord + count < 0) {\n      throw new EOFException();\n    }\n\n    // 1. skip buffered values\n    final int skipBuffer = (int) Math.min(count, blockSize - off);\n    off += skipBuffer;\n    ord += skipBuffer;\n    count -= skipBuffer;\n    if (count == 0L) {\n      return;\n    }\n\n    // 2. skip as many blocks as necessary\n    assert off == blockSize;\n    while (count >= blockSize) {\n      final int token = in.readByte() & 0xFF;\n      final int bitsPerValue = token >>> BPV_SHIFT;\n      if (bitsPerValue > 64) {\n        throw new IOException(\"Corrupted\");\n      }\n      if ((token & MIN_VALUE_EQUALS_0) == 0) {\n        readVLong(in);\n      }\n      final long blockBytes = PackedInts.Format.PACKED.byteCount(packedIntsVersion, blockSize, bitsPerValue);\n      skipBytes(blockBytes);\n      ord += blockSize;\n      count -= blockSize;\n    }\n    if (count == 0L) {\n      return;\n    }\n\n    // 3. skip last values\n    assert count < blockSize;\n    refill();\n    ord += count;\n    off += count;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["733e01764d06768700a194141bccb026ff24bb29","37b84753dc1f66eba4973779932885fe42cde001"],"733e01764d06768700a194141bccb026ff24bb29":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"37b84753dc1f66eba4973779932885fe42cde001":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","733e01764d06768700a194141bccb026ff24bb29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"]},"commit2Childs":{"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"733e01764d06768700a194141bccb026ff24bb29":["d4d69c535930b5cce125cff868d40f6373dc27d4","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"37b84753dc1f66eba4973779932885fe42cde001":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["733e01764d06768700a194141bccb026ff24bb29","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["37b84753dc1f66eba4973779932885fe42cde001"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}