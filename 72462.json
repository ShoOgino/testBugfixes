{"path":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","commits":[{"id":"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8","date":1372293867,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseDoubleNonRootLocale() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    double value = 10898.83491;\n    String doubleString1 = \"10898,83491\";\n    String doubleString2 = \"10 898,83491\"; // no-break space: U+00A0\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"double_d\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":0,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","pathOld":"/dev/null","sourceNew":"  public void testParseDoubleNonRootLocale() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    double value = 10898.83491;\n    String doubleString1 = \"10898,83491\";\n    String doubleString2 = \"10 898,83491\"; // no-break space: U+00A0\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"double_d\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f","date":1561505163,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","sourceNew":"  public void testParseDoubleNonRootLocale() throws Exception {\n    {\n      final NumberFormat sanityCheck = NumberFormat.getInstance(new Locale(\"fr\",\"FR\"));\n      sanityCheck.setParseIntegerOnly(false);\n      sanityCheck.setRoundingMode(RoundingMode.CEILING);\n      assumeThat(\"Your JVM appears to have NumberFormat parse bugs using U+00A0 in the fr_FR Locale\",\n                 sanityCheck.parse(\"10 898\"), new IsNot(new IsEqual(10L)));\n    }\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    double value = 10898.83491;\n    String doubleString1 = \"10898,83491\";\n    String doubleString2 = \"10 898,83491\"; // no-break space: U+00A0\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"double_d\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertThat(d.getFieldValue(\"not_in_schema\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","sourceOld":"  public void testParseDoubleNonRootLocale() throws Exception {\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    double value = 10898.83491;\n    String doubleString1 = \"10898,83491\";\n    String doubleString2 = \"10 898,83491\"; // no-break space: U+00A0\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertTrue(d.getFieldValue(\"double_d\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertTrue(d.getFieldValue(\"not_in_schema\") instanceof Double);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99dd32bdb315bccd00286f17cd826637a241512e","date":1561749054,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","pathOld":"solr/core/src/test/org/apache/solr/update/processor/ParsingFieldUpdateProcessorsTest#testParseDoubleNonRootLocale().mjava","sourceNew":"  public void testParseDoubleNonRootLocale() throws Exception {\n    final DecimalFormatSymbols fr_FR = DecimalFormatSymbols.getInstance(new Locale(\"fr\",\"FR\"));\n    final char groupChar = fr_FR.getGroupingSeparator();\n    final char decimalChar = fr_FR.getDecimalSeparator();\n\n    double value = 10898.83491D;\n    String doubleString1 = \"10898\"+decimalChar+\"83491\";\n    String doubleString2 = \"10\"+groupChar+\"898\"+decimalChar+\"83491\";\n    \n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"double_d\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertThat(d.getFieldValue(\"not_in_schema\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","sourceOld":"  public void testParseDoubleNonRootLocale() throws Exception {\n    {\n      final NumberFormat sanityCheck = NumberFormat.getInstance(new Locale(\"fr\",\"FR\"));\n      sanityCheck.setParseIntegerOnly(false);\n      sanityCheck.setRoundingMode(RoundingMode.CEILING);\n      assumeThat(\"Your JVM appears to have NumberFormat parse bugs using U+00A0 in the fr_FR Locale\",\n                 sanityCheck.parse(\"10 898\"), new IsNot(new IsEqual(10L)));\n    }\n    IndexSchema schema = h.getCore().getLatestSchema();\n    assertNotNull(schema.getFieldOrNull(\"double_d\")); // should match dynamic field \"*_d\"\n    assertNull(schema.getFieldOrNull(\"not_in_schema\"));\n    double value = 10898.83491;\n    String doubleString1 = \"10898,83491\";\n    String doubleString2 = \"10 898,83491\"; // no-break space: U+00A0\n    SolrInputDocument d = processAdd(\"parse-double-french-no-run-processor\",\n                                     doc(f(\"id\", \"140\"), f(\"double_d\", doubleString1), \n                                         f(\"not_in_schema\", doubleString2)));\n    assertNotNull(d);\n    assertThat(d.getFieldValue(\"double_d\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"double_d\"), EPSILON);\n    assertThat(d.getFieldValue(\"not_in_schema\"), IS_DOUBLE);\n    assertEquals(value, (Double)d.getFieldValue(\"not_in_schema\"), EPSILON);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"99dd32bdb315bccd00286f17cd826637a241512e":["695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["99dd32bdb315bccd00286f17cd826637a241512e"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["37a0f60745e53927c4c876cfe5b5a58170f0646c","039a98d0ba2c3095541adb3e3ecbdee7812fc4b8"],"039a98d0ba2c3095541adb3e3ecbdee7812fc4b8":["37a0f60745e53927c4c876cfe5b5a58170f0646c","695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f"],"695a2ea9bbdf1f04153f1f6f0fa8595f3694b58f":["99dd32bdb315bccd00286f17cd826637a241512e"],"99dd32bdb315bccd00286f17cd826637a241512e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}