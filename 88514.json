{"path":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","commits":[{"id":"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab","date":1354403647,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"lucene/codecs/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","sourceNew":"  public void test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","sourceOld":"  public void test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0c3c76aa202009a206735eb7501d52a87ccaba79","date":1354660681,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","sourceNew":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n    return compressed;\n  }\n\n","sourceOld":"  public void test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n  }\n\n","bugFix":null,"bugIntro":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"/dev/null","sourceNew":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n    return compressed;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0da99fd4410e5349226b68858c369aae5d679f0","date":1357725616,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","sourceNew":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    return compressed;\n  }\n\n","sourceOld":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n    return compressed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4e6354dd7c71fe122926fc53d7d29f715b1283db","date":1357915185,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","sourceNew":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    return compressed;\n  }\n\n","sourceOld":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    assertArrayEquals(compressed, copyCompressedData(compressed, decompressed.length));\n    return compressed;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"175e4d353e3036fad2ad89ae6815c4418b4c3c8e","date":1378375735,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/compressing/AbstractTestCompressionMode#test(byte[]).mjava","sourceNew":"  public byte[] test(byte[] decompressed) throws IOException {\n    return test(decompressed, 0, decompressed.length);\n  }\n\n","sourceOld":"  public byte[] test(byte[] decompressed) throws IOException {\n    final byte[] compressed = compress(decompressed);\n    final byte[] restored = decompress(compressed, decompressed.length);\n    assertEquals(decompressed.length, restored.length);\n    return compressed;\n  }\n\n","bugFix":["0c3c76aa202009a206735eb7501d52a87ccaba79","5af6a67fb827380f7fe2fdf3baa34b10b783f2f1","9ee663728a95682ffb5dee37517ac9e863cd0820"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["d0da99fd4410e5349226b68858c369aae5d679f0"],"d0da99fd4410e5349226b68858c369aae5d679f0":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0c3c76aa202009a206735eb7501d52a87ccaba79"],"0c3c76aa202009a206735eb7501d52a87ccaba79":["1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":["407687e67faf6e1f02a211ca078d8e3eed631027","d0da99fd4410e5349226b68858c369aae5d679f0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e"],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"175e4d353e3036fad2ad89ae6815c4418b4c3c8e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d0da99fd4410e5349226b68858c369aae5d679f0":["175e4d353e3036fad2ad89ae6815c4418b4c3c8e","4e6354dd7c71fe122926fc53d7d29f715b1283db"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["407687e67faf6e1f02a211ca078d8e3eed631027","1a51ec81f1fd009bf893bd88ec1c7b964fae6fab"],"407687e67faf6e1f02a211ca078d8e3eed631027":["4e6354dd7c71fe122926fc53d7d29f715b1283db"],"0c3c76aa202009a206735eb7501d52a87ccaba79":["d0da99fd4410e5349226b68858c369aae5d679f0","407687e67faf6e1f02a211ca078d8e3eed631027"],"4e6354dd7c71fe122926fc53d7d29f715b1283db":[],"1a51ec81f1fd009bf893bd88ec1c7b964fae6fab":["0c3c76aa202009a206735eb7501d52a87ccaba79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4e6354dd7c71fe122926fc53d7d29f715b1283db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}