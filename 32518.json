{"path":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","commits":[{"id":"19c19f5fe7c2900a0f8797e4e6887222798ce4ac","date":1019248159,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"/dev/null","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Text(\"datefield\", DateField.timeToString(now - 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4a468ac4dc7f37071f9d4a982ef22771b387b85","date":1020887284,"type":3,"author":"Peter Carlson","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now - 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Text(\"datefield\", DateField.timeToString(now - 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bf6ea34bde57a561bb94a2841f48af1a6a26a8e","date":1020889014,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now + 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now - 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fbef6a5819e45bebee3624d440fe85a02fec6a6","date":1094423262,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateField.timeToString(now + 888888), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(Field.Keyword(\"datefield\", DateField.timeToString(now + 888888)));\n \tdoc.add(Field.Text(\"body\", \"Today is a very sunny day in New York City\"));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateField.timeToString(now + 888888), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\tDateFilter df1 = DateFilter.After(\"datefield\", now);\n\n\t// filter that should discard matches\n\tDateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n\n\t// search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af07783dbc171e26a694c4f7d735e30c2769faa","date":1211569075,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n\tHits result;\n\n\t// ensure that queries return expected results without DateFilter first\n\tresult = searcher.search(query1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query2);\n\tassertEquals(1, result.length());\n\n\n\t// run queries with DateFilter\n\tresult = searcher.search(query1, df1);\n\tassertEquals(0, result.length());\n\n\tresult = searcher.search(query1, df2);\n\tassertEquals(0, result.length());\n\n \tresult = searcher.search(query2, df1);\n \tassertEquals(1, result.length());\n\n\tresult = searcher.search(query2, df2);\n\tassertEquals(0, result.length());\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.UN_TOKENIZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.TOKENIZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f612096ab5275c4821d05f126bf45a89f4782b8","date":1246738452,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    RangeFilter df1 = new RangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    RangeFilter df2 = new RangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e8d1458a2543cbd30cbfe7929be4dcb5c5251659","date":1254582241,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a046c0c310bc77931fc8441bd920053b607dd14","date":1254584734,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe0932c1d340f83fb0a611e5829b3046a1cc1152","date":1264946739,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(Version.LUCENE_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new SimpleAnalyzer(TEST_VERSION_CURRENT), true, IndexWriter.MaxFieldLength.LIMITED);\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","pathOld":"src/test/org/apache/lucene/search/TestDateFilter#testAfter().mjava","sourceNew":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","sourceOld":"    /**\n     *\n     */\n    public static void testAfter()\n\tthrows IOException\n    {\n\t// create an index\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, new IndexWriterConfig(TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT)));\n\n \tlong now = System.currentTimeMillis();\n\n \tDocument doc = new Document();\n \t// add time that is in the future\n \tdoc.add(new Field(\"datefield\", DateTools.timeToString(now + 888888, DateTools.Resolution.MILLISECOND), Field.Store.YES, Field.Index.NOT_ANALYZED));\n \tdoc.add(new Field(\"body\", \"Today is a very sunny day in New York City\", Field.Store.YES, Field.Index.ANALYZED));\n  \twriter.addDocument(doc);\n \twriter.optimize();\n\twriter.close();\n\n\tIndexSearcher searcher = new IndexSearcher(indexStore, true);\n\n\t// filter that should preserve matches\n\t//DateFilter df1 = DateFilter.After(\"datefield\", now);\n    TermRangeFilter df1 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now, DateTools.Resolution.MILLISECOND),\n                                      DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND), true, false);\n\t// filter that should discard matches\n\t//DateFilter df2 = DateFilter.After(\"datefield\", now + 999999);\n    TermRangeFilter df2 = new TermRangeFilter(\"datefield\", DateTools.timeToString(now + 999999, DateTools.Resolution.MILLISECOND),\n                                          DateTools.timeToString(now + 999999999, DateTools.Resolution.MILLISECOND), false, true);\n\n    // search something that doesn't exist with DateFilter\n\tQuery query1 = new TermQuery(new Term(\"body\", \"NoMatchForThis\"));\n\n\t// search for something that does exists\n\tQuery query2 = new TermQuery(new Term(\"body\", \"sunny\"));\n\n  ScoreDoc[] result;\n\n\t// ensure that queries return expected results without DateFilter first\n  result = searcher.search(query1, null, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query2, null, 1000).scoreDocs;\n  assertEquals(1, result.length);\n\n\n\t// run queries with DateFilter\n  result = searcher.search(query1, df1, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n  result = searcher.search(query1, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n\n   result = searcher.search(query2, df1, 1000).scoreDocs;\n   assertEquals(1, result.length);\n\n  result = searcher.search(query2, df2, 1000).scoreDocs;\n  assertEquals(0, result.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fbef6a5819e45bebee3624d440fe85a02fec6a6":["2bf6ea34bde57a561bb94a2841f48af1a6a26a8e"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"0a046c0c310bc77931fc8441bd920053b607dd14":["0f612096ab5275c4821d05f126bf45a89f4782b8","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"d4a468ac4dc7f37071f9d4a982ef22771b387b85":["19c19f5fe7c2900a0f8797e4e6887222798ce4ac"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"2bf6ea34bde57a561bb94a2841f48af1a6a26a8e":["d4a468ac4dc7f37071f9d4a982ef22771b387b85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["0a046c0c310bc77931fc8441bd920053b607dd14"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["8fbef6a5819e45bebee3624d440fe85a02fec6a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5af07783dbc171e26a694c4f7d735e30c2769faa":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"19c19f5fe7c2900a0f8797e4e6887222798ce4ac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"8fbef6a5819e45bebee3624d440fe85a02fec6a6":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0a046c0c310bc77931fc8441bd920053b607dd14":["fe0932c1d340f83fb0a611e5829b3046a1cc1152"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0f612096ab5275c4821d05f126bf45a89f4782b8"],"d4a468ac4dc7f37071f9d4a982ef22771b387b85":["2bf6ea34bde57a561bb94a2841f48af1a6a26a8e"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["5af07783dbc171e26a694c4f7d735e30c2769faa"],"2bf6ea34bde57a561bb94a2841f48af1a6a26a8e":["8fbef6a5819e45bebee3624d440fe85a02fec6a6"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"0f612096ab5275c4821d05f126bf45a89f4782b8":["0a046c0c310bc77931fc8441bd920053b607dd14","e8d1458a2543cbd30cbfe7929be4dcb5c5251659"],"e8d1458a2543cbd30cbfe7929be4dcb5c5251659":["0a046c0c310bc77931fc8441bd920053b607dd14"],"fe0932c1d340f83fb0a611e5829b3046a1cc1152":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["19c19f5fe7c2900a0f8797e4e6887222798ce4ac"],"5af07783dbc171e26a694c4f7d735e30c2769faa":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"19c19f5fe7c2900a0f8797e4e6887222798ce4ac":["d4a468ac4dc7f37071f9d4a982ef22771b387b85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}