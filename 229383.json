{"path":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","commits":[{"id":"e0b950aef8cdf4606d480e28ea17bd870b93c81e","date":1060680143,"type":0,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery();\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, false, false);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2db8da778bc059db762a1d91f6e41624d01f0c1d","date":1093638047,"type":3,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery();\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery();\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, false, false);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db","date":1110223587,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery(true);\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery();\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cafa5491543830e9ff023323b859c809118a056","date":1174485527,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","sourceNew":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery(true);\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) // interned comparison \n        {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery(true);\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f7a11eba51d213f09b96054111cf56a1e5796a3","date":1226364000,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PrefixQuery#rewrite(IndexReader).mjava","sourceNew":null,"sourceOld":"  public Query rewrite(IndexReader reader) throws IOException {\n    BooleanQuery query = new BooleanQuery(true);\n    TermEnum enumerator = reader.terms(prefix);\n    try {\n      String prefixText = prefix.text();\n      String prefixField = prefix.field();\n      do {\n        Term term = enumerator.term();\n        if (term != null &&\n            term.text().startsWith(prefixText) &&\n            term.field() == prefixField) // interned comparison \n        {\n          TermQuery tq = new TermQuery(term);\t  // found a match\n          tq.setBoost(getBoost());                // set the boost\n          query.add(tq, BooleanClause.Occur.SHOULD);\t\t  // add to query\n          //System.out.println(\"added \" + term);\n        } else {\n          break;\n        }\n      } while (enumerator.next());\n    } finally {\n      enumerator.close();\n    }\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1cafa5491543830e9ff023323b859c809118a056":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["1cafa5491543830e9ff023323b859c809118a056"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"]},"commit2Childs":{"1cafa5491543830e9ff023323b859c809118a056":["6f7a11eba51d213f09b96054111cf56a1e5796a3"],"e0b950aef8cdf4606d480e28ea17bd870b93c81e":["2db8da778bc059db762a1d91f6e41624d01f0c1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0b950aef8cdf4606d480e28ea17bd870b93c81e"],"bcbc8ed27f45a5a299f8414d7a886340ce7bb3db":["1cafa5491543830e9ff023323b859c809118a056"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6f7a11eba51d213f09b96054111cf56a1e5796a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2db8da778bc059db762a1d91f6e41624d01f0c1d":["bcbc8ed27f45a5a299f8414d7a886340ce7bb3db"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}