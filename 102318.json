{"path":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","commits":[{"id":"dd6be878365e339c75cc43ad7d5df95ab4ea21e5","date":1435762101,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Filter,DoubleRange...).mjava","sourceNew":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Query as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, DoubleRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Filter as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Filter fastMatchFilter, DoubleRange... ranges) throws IOException {\n    super(field, ranges, fastMatchFilter);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf250cb8fdff62f4b753866d44e5bf59bfd1616","date":1483789944,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","sourceNew":"  /**\n   * Create {@code RangeFacetCounts}, using the provided\n   * {@link ValueSource}, and using the provided Query as\n   * a fastmatch: only documents matching the query are\n   * checked for the matching ranges.\n   *\n   * @deprecated Use ({@link #DoubleRangeFacetCounts(String, DoubleValuesSource, FacetsCollector, Query, DoubleRange...)}\n   */\n  @Deprecated\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, DoubleRange... ranges) throws IOException {\n    this(field, valueSource.asDoubleValuesSource(), hits, fastMatchQuery, ranges);\n  }\n\n","sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Query as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, DoubleRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9190e1c8e3ef93e60501a940d72d4cab5c78ff33","date":1483794433,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create {@code RangeFacetCounts}, using the provided\n   * {@link ValueSource}, and using the provided Query as\n   * a fastmatch: only documents matching the query are\n   * checked for the matching ranges.\n   *\n   * @deprecated Use ({@link #DoubleRangeFacetCounts(String, DoubleValuesSource, FacetsCollector, Query, DoubleRange...)}\n   */\n  @Deprecated\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, DoubleRange... ranges) throws IOException {\n    this(field, valueSource.asDoubleValuesSource(), hits, fastMatchQuery, ranges);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","date":1484239864,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/range/DoubleRangeFacetCounts#DoubleRangeFacetCounts(String,ValueSource,FacetsCollector,Query,DoubleRange...).mjava","sourceNew":null,"sourceOld":"  /** Create {@code RangeFacetCounts}, using the provided\n   *  {@link ValueSource}, and using the provided Query as\n   *  a fastmatch: only documents passing the filter are\n   *  checked for the matching ranges.  The filter must be\n   *  random access (implement {@link DocIdSet#bits}). */\n  public DoubleRangeFacetCounts(String field, ValueSource valueSource, FacetsCollector hits, Query fastMatchQuery, DoubleRange... ranges) throws IOException {\n    super(field, ranges, fastMatchQuery);\n    count(valueSource, hits.getMatchingDocs());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5","9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9190e1c8e3ef93e60501a940d72d4cab5c78ff33"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd6be878365e339c75cc43ad7d5df95ab4ea21e5"],"09ab8ee44ca898536770d0106a7c0ee4be4f0eb7":[],"9cf250cb8fdff62f4b753866d44e5bf59bfd1616":["9190e1c8e3ef93e60501a940d72d4cab5c78ff33"],"9190e1c8e3ef93e60501a940d72d4cab5c78ff33":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"dd6be878365e339c75cc43ad7d5df95ab4ea21e5":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","9cf250cb8fdff62f4b753866d44e5bf59bfd1616"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["09ab8ee44ca898536770d0106a7c0ee4be4f0eb7","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}