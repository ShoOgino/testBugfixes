{"path":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","commits":[{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["48ac186ac196fcb830592acc9904593e0e74902e","48ac186ac196fcb830592acc9904593e0e74902e","cfd28703065c4b03936cfebdd7192440dc10acf3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"/dev/null","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cfd28703065c4b03936cfebdd7192440dc10acf3","date":1413330239,"type":3,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content recieved for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dea8e36e8c36d610840396c282a5affe3f722f4e","date":1422297045,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/SnapPuller.FileFetcher#fetchPackets(FastInputStream).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/SnapPuller.DirectoryFileFetcher#fetchPackets(FastInputStream).mjava","sourceNew":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: {}\", fileName);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for file: {}\", fileName);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          file.write(buf, packetSize);\n          bytesDownloaded += packetSize;\n          LOG.debug(\"Fetched and wrote {} bytes of file: {}\", bytesDownloaded, fileName);\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorCount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching file: {} (downloaded {} of {} bytes)\",\n            fileName, bytesDownloaded, size, e);\n        //for any failure, increment the error count\n        errorCount++;\n        //if it fails for the same packet for MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n              \"Failed to fetch file: \" + fileName +\n                  \" (downloaded \" + bytesDownloaded + \" of \" + size + \" bytes\" +\n                  \", error count: \" + errorCount + \" > \" + MAX_RETRIES + \")\", e);\n        }\n        return ERR;\n      }\n    }\n\n","sourceOld":"    private int fetchPackets(FastInputStream fis) throws Exception {\n      byte[] intbytes = new byte[4];\n      byte[] longbytes = new byte[8];\n      try {\n        while (true) {\n          if (stop) {\n            stop = false;\n            aborted = true;\n            throw new ReplicationHandlerException(\"User aborted replication\");\n          }\n          long checkSumServer = -1;\n          fis.readFully(intbytes);\n          //read the size of the packet\n          int packetSize = readInt(intbytes);\n          if (packetSize <= 0) {\n            LOG.warn(\"No content received for file: \" + currentFile);\n            return NO_CONTENT;\n          }\n          if (buf.length < packetSize)\n            buf = new byte[packetSize];\n          if (checksum != null) {\n            //read the checksum\n            fis.readFully(longbytes);\n            checkSumServer = readLong(longbytes);\n          }\n          //then read the packet of bytes\n          fis.readFully(buf, 0, packetSize);\n          //compare the checksum as sent from the master\n          if (includeChecksum) {\n            checksum.reset();\n            checksum.update(buf, 0, packetSize);\n            long checkSumClient = checksum.getValue();\n            if (checkSumClient != checkSumServer) {\n              LOG.error(\"Checksum not matched between client and server for: \" + currentFile);\n              //if checksum is wrong it is a problem return for retry\n              return 1;\n            }\n          }\n          //if everything is fine, write down the packet to the file\n          writeBytes(packetSize);\n          bytesDownloaded += packetSize;\n          if (bytesDownloaded >= size)\n            return 0;\n          //errorcount is always set to zero after a successful packet\n          errorCount = 0;\n        }\n      } catch (ReplicationHandlerException e) {\n        throw e;\n      } catch (Exception e) {\n        LOG.warn(\"Error in fetching packets \", e);\n        //for any failure , increment the error count\n        errorCount++;\n        //if it fails for the same pacaket for   MAX_RETRIES fail and come out\n        if (errorCount > MAX_RETRIES) {\n          throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n                  \"Fetch failed for file:\" + fileName, e);\n        }\n        return ERR;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"55980207f1977bd1463465de1659b821347e2fa8":["d9405f486872f1e416304dfe389741f4ee2f8a4d","cfd28703065c4b03936cfebdd7192440dc10acf3"],"cfd28703065c4b03936cfebdd7192440dc10acf3":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cfd28703065c4b03936cfebdd7192440dc10acf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f2126b84bd093fa3d921582a109a0ee578c28126":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["dea8e36e8c36d610840396c282a5affe3f722f4e"]},"commit2Childs":{"55980207f1977bd1463465de1659b821347e2fa8":[],"cfd28703065c4b03936cfebdd7192440dc10acf3":["55980207f1977bd1463465de1659b821347e2fa8","dea8e36e8c36d610840396c282a5affe3f722f4e"],"dea8e36e8c36d610840396c282a5affe3f722f4e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["55980207f1977bd1463465de1659b821347e2fa8","cfd28703065c4b03936cfebdd7192440dc10acf3","f2126b84bd093fa3d921582a109a0ee578c28126"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}