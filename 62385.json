{"path":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"lucene/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac34f0c5bb9274821fb0cb18075234e02002e9bf","date":1402508126,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(LightAutomaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(LightAutomaton a) {\n    a = BasicOperations.determinize(a);\n\n    // complement(complement(a)) = a\n    LightAutomaton equivalent = BasicOperations.complementLight(BasicOperations.complementLight(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.determinize(BasicOperations.unionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.determinize(BasicOperations.intersectionLight(a, a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    LightAutomaton empty = BasicOperations.minusLight(a, a);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      LightAutomaton optional = BasicOperations.optionalLight(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minusLight(optional, BasicAutomata.makeEmptyStringLight());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    a = Operations.determinize(Operations.removeDeadStates(a));\n\n    // complement(complement(a)) = a\n    Automaton equivalent = Operations.complement(Operations.complement(a));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.union(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.intersection(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = Operations.minus(a, a);\n    assertTrue(Operations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!Operations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = Operations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = Operations.minus(optional, Automata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(Operations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    a = Operations.determinize(Operations.removeDeadStates(a));\n\n    // complement(complement(a)) = a\n    Automaton equivalent = Operations.complement(Operations.complement(a));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.union(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.intersection(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = Operations.minus(a, a);\n    assertTrue(Operations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!Operations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = Operations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = Operations.minus(optional, Automata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(Operations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    Automaton clone = a.clone();\n    // complement(complement(a)) = a\n    Automaton equivalent = BasicOperations.complement(BasicOperations.complement(a));\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = BasicOperations.union(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = BasicOperations.intersection(a, clone);\n    assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = BasicOperations.minus(a, clone);\n    assertTrue(BasicOperations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!BasicOperations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = BasicOperations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = BasicOperations.minus(optional, BasicAutomata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(BasicOperations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b316f82baae88f5e279893a9cb7eee51fd8902f","date":1415131390,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/automaton/TestDeterminism#assertAutomaton(Automaton).mjava","sourceNew":"  private static void assertAutomaton(Automaton a) {\n    a = Operations.determinize(Operations.removeDeadStates(a), DEFAULT_MAX_DETERMINIZED_STATES);\n\n    // complement(complement(a)) = a\n    Automaton equivalent = Operations.complement(Operations.complement(a,\n      DEFAULT_MAX_DETERMINIZED_STATES), DEFAULT_MAX_DETERMINIZED_STATES);\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.union(a, a)),\n      DEFAULT_MAX_DETERMINIZED_STATES);\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.intersection(a, a)),\n      DEFAULT_MAX_DETERMINIZED_STATES);\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = Operations.minus(a, a, DEFAULT_MAX_DETERMINIZED_STATES);\n    assertTrue(Operations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!Operations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = Operations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = Operations.minus(optional, Automata.makeEmptyString(),\n        DEFAULT_MAX_DETERMINIZED_STATES);\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(Operations.sameLanguage(a, equivalent));\n    }\n  } \n\n","sourceOld":"  private static void assertAutomaton(Automaton a) {\n    a = Operations.determinize(Operations.removeDeadStates(a));\n\n    // complement(complement(a)) = a\n    Automaton equivalent = Operations.complement(Operations.complement(a));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a union a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.union(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a intersect a = a\n    equivalent = Operations.determinize(Operations.removeDeadStates(Operations.intersection(a, a)));\n    assertTrue(Operations.sameLanguage(a, equivalent));\n    \n    // a minus a = empty\n    Automaton empty = Operations.minus(a, a);\n    assertTrue(Operations.isEmpty(empty));\n    \n    // as long as don't accept the empty string\n    // then optional(a) - empty = a\n    if (!Operations.run(a, \"\")) {\n      //System.out.println(\"test \" + a);\n      Automaton optional = Operations.optional(a);\n      //System.out.println(\"optional \" + optional);\n      equivalent = Operations.minus(optional, Automata.makeEmptyString());\n      //System.out.println(\"equiv \" + equivalent);\n      assertTrue(Operations.sameLanguage(a, equivalent));\n    }\n  } \n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["5c84485629d80d203608e8975a1139de9933cc38"],"5c84485629d80d203608e8975a1139de9933cc38":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8b316f82baae88f5e279893a9cb7eee51fd8902f"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5c84485629d80d203608e8975a1139de9933cc38","ac34f0c5bb9274821fb0cb18075234e02002e9bf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"8b316f82baae88f5e279893a9cb7eee51fd8902f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5c84485629d80d203608e8975a1139de9933cc38":["8b316f82baae88f5e279893a9cb7eee51fd8902f"],"ac34f0c5bb9274821fb0cb18075234e02002e9bf":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}