{"path":"src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#simple().mjava","commits":[{"id":"8d0c1d69778439d99fc635727129e99480e64f06","date":1232050859,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#simple().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n//    updateRequest.setWaitFlush(true);\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n//        Assert.assertEquals(Boolean.TRUE, req.getParams().getBool(UpdateParams.WAIT_FLUSH));\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , updateRequest.getDeleteQuery().get(0));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["75ed70ebff903842ce0bf09b37df09f11f89ad4f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#simple().mjava","pathOld":"src/test/org/apache/solr/client/solrj/request/TestUpdateRequestCodec#simple().mjava","sourceNew":"  @Test\n  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n//    updateRequest.setWaitFlush(true);\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n//        Assert.assertEquals(Boolean.TRUE, req.getParams().getBool(UpdateParams.WAIT_FLUSH));\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , updateRequest.getDeleteQuery().get(0));\n\n  }\n\n","sourceOld":"  @Test\n  public void simple() throws IOException {\n    UpdateRequest updateRequest = new UpdateRequest();\n    updateRequest.deleteById(\"*:*\");\n    updateRequest.deleteById(\"id:5\");\n    updateRequest.deleteByQuery(\"2*\");\n    updateRequest.deleteByQuery(\"1*\");\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", 1);\n    doc.addField(\"desc\", \"one\", 2.0f);\n    doc.addField(\"desc\", \"1\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 2);\n    doc.setDocumentBoost(10.0f);\n    doc.addField(\"desc\", \"two\", 3.0f);\n    doc.addField(\"desc\", \"2\");\n    updateRequest.add(doc);\n    doc = new SolrInputDocument();\n    doc.addField(\"id\", 3);\n    doc.addField(\"desc\", \"three\", 3.0f);\n    doc.addField(\"desc\", \"3\");\n    updateRequest.add(doc);\n//    updateRequest.setWaitFlush(true);\n    updateRequest.deleteById(\"2\");\n    updateRequest.deleteByQuery(\"id:3\");\n    JavaBinUpdateRequestCodec codec = new JavaBinUpdateRequestCodec();\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    codec.marshal(updateRequest, baos);\n    final List<SolrInputDocument> docs = new ArrayList<SolrInputDocument>();\n    JavaBinUpdateRequestCodec.StreamingDocumentHandler handler = new JavaBinUpdateRequestCodec.StreamingDocumentHandler() {\n      public void document(SolrInputDocument document, UpdateRequest req) {\n        Assert.assertNotNull(req.getParams());\n//        Assert.assertEquals(Boolean.TRUE, req.getParams().getBool(UpdateParams.WAIT_FLUSH));\n        docs.add(document);\n      }\n    };\n\n    UpdateRequest updateUnmarshalled = codec.unmarshal(new ByteArrayInputStream(baos.toByteArray()) ,handler);\n    Assert.assertNull(updateUnmarshalled.getDocuments());\n    for (SolrInputDocument document : docs) {\n      updateUnmarshalled.add(document);\n    }\n    for (int i = 0; i < updateRequest.getDocuments().size(); i++) {\n      SolrInputDocument inDoc = updateRequest.getDocuments().get(i);\n      SolrInputDocument outDoc = updateUnmarshalled.getDocuments().get(i);\n      compareDocs(inDoc, outDoc);\n    }\n    Assert.assertEquals(updateUnmarshalled.getDeleteById().get(0) , updateRequest.getDeleteById().get(0));\n    Assert.assertEquals(updateUnmarshalled.getDeleteQuery().get(0) , updateRequest.getDeleteQuery().get(0));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"8d0c1d69778439d99fc635727129e99480e64f06":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["8d0c1d69778439d99fc635727129e99480e64f06"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"8d0c1d69778439d99fc635727129e99480e64f06":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["8d0c1d69778439d99fc635727129e99480e64f06"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}