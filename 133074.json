{"path":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","commits":[{"id":"20eb14adcb76cac6b8ae297eb37caec72e3a2140","date":1447952616,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    try {\n      Similarity bogus = broken.getSimilarity();\n      fail(\"SchemaSimilarityFactory should have thrown IllegalStateException b/c inform not used\");\n    } catch (IllegalStateException expected) {\n      assertTrue(\"GOT: \" + expected.getMessage(),\n                 expected.getMessage().contains(\"SolrCoreAware.inform\"));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1a307447328c95a00248512b40d7a5ff12ecd6a","date":1564817449,"type":3,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","sourceNew":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    IllegalStateException e = expectThrows(IllegalStateException.class, broken::getSimilarity);\n    assertTrue(\"GOT: \" + e.getMessage(),\n        e.getMessage().contains(\"SolrCoreAware.inform\"));\n  }\n\n","sourceOld":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    try {\n      Similarity bogus = broken.getSimilarity();\n      fail(\"SchemaSimilarityFactory should have thrown IllegalStateException b/c inform not used\");\n    } catch (IllegalStateException expected) {\n      assertTrue(\"GOT: \" + expected.getMessage(),\n                 expected.getMessage().contains(\"SolrCoreAware.inform\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","sourceNew":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    IllegalStateException e = expectThrows(IllegalStateException.class, broken::getSimilarity);\n    assertTrue(\"GOT: \" + e.getMessage(),\n        e.getMessage().contains(\"SolrCoreAware.inform\"));\n  }\n\n","sourceOld":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    try {\n      Similarity bogus = broken.getSimilarity();\n      fail(\"SchemaSimilarityFactory should have thrown IllegalStateException b/c inform not used\");\n    } catch (IllegalStateException expected) {\n      assertTrue(\"GOT: \" + expected.getMessage(),\n                 expected.getMessage().contains(\"SolrCoreAware.inform\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","pathOld":"solr/core/src/test/org/apache/solr/schema/ChangedSchemaMergeTest#testSanityOfSchemaSimilarityFactoryInform().mjava","sourceNew":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    IllegalStateException e = expectThrows(IllegalStateException.class, broken::getSimilarity);\n    assertTrue(\"GOT: \" + e.getMessage(),\n        e.getMessage().contains(\"SolrCoreAware.inform\"));\n  }\n\n","sourceOld":"  public void testSanityOfSchemaSimilarityFactoryInform() {\n    // sanity check that SchemaSimilarityFactory will throw an Exception if you\n    // try to use it w/o inform(SolrCoreAware) otherwise assertSimilarity is useless\n    SchemaSimilarityFactory broken = new SchemaSimilarityFactory();\n    broken.init(new ModifiableSolrParams());\n    // NO INFORM\n    try {\n      Similarity bogus = broken.getSimilarity();\n      fail(\"SchemaSimilarityFactory should have thrown IllegalStateException b/c inform not used\");\n    } catch (IllegalStateException expected) {\n      assertTrue(\"GOT: \" + expected.getMessage(),\n                 expected.getMessage().contains(\"SolrCoreAware.inform\"));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["20eb14adcb76cac6b8ae297eb37caec72e3a2140","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"f8061ddd97f3352007d927dae445884a6f3d857b":["20eb14adcb76cac6b8ae297eb37caec72e3a2140","d1a307447328c95a00248512b40d7a5ff12ecd6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d1a307447328c95a00248512b40d7a5ff12ecd6a"]},"commit2Childs":{"20eb14adcb76cac6b8ae297eb37caec72e3a2140":["d1a307447328c95a00248512b40d7a5ff12ecd6a","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["20eb14adcb76cac6b8ae297eb37caec72e3a2140"],"d1a307447328c95a00248512b40d7a5ff12ecd6a":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}