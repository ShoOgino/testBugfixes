{"path":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","commits":[{"id":"627e70d5711ab39d080a080f089685268525f54d","date":1560754171,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    sha256 = \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    sha256 = \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    url = null;\n    filecontent = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    sha256 = \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"79298d7d5c3e60d91154efe7d72f4536eac46698edfa22ab894b85492d562ed4\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    url = null;\n    filecontent = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    @SuppressWarnings({\"rawtypes\"})\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d16198391f70a4ee52a8c8792c91eb87a30f1d6","date":1596695552,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/BlobRepositoryMockingTest#testGetBlobIncrRefByUrl().mjava","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestSolrConfigHandler.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    @SuppressWarnings({\"rawtypes\"})\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  @Test\n  public void testGetBlobIncrRefByUrl() throws Exception{\n    when(mockContainer.isZooKeeperAware()).thenReturn(true);\n    filecontent = TestDynamicLoading.getFileContent(\"runtimecode/runtimelibs_v2.jar.bin\");\n    url = \"http://localhost:8080/myjar/location.jar\";\n    @SuppressWarnings({\"rawtypes\"})\n    BlobRepository.BlobContentRef ref = repository.getBlobIncRef( \"filefoo\",null,url,\n        \"bc5ce45ad281b6a08fb7e529b1eb475040076834816570902acb6ebdd809410e31006efdeaa7f78a6c35574f3504963f5f7e4d92247d0eb4db3fc9abdda5d417\");\n    assertTrue(\"filefoo\".equals(blobKey));\n    assertTrue(blobFetched);\n    assertNotNull(ref.blob);\n    assertEquals(filecontent, ref.blob.get());\n    verify(mockContainer).isZooKeeperAware();\n    try {\n      repository.getBlobIncRef( \"filefoo\",null,url,\n          \"WRONG-SHA512-KEY\");\n      fail(\"expected exception\");\n    } catch (Exception e) {\n      assertTrue(e.getMessage().contains(\" expected sha512 hash : WRONG-SHA512-KEY , actual :\"));\n    }\n\n    url = null;\n    filecontent = null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"627e70d5711ab39d080a080f089685268525f54d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["627e70d5711ab39d080a080f089685268525f54d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["e98520789adb1d5ad05afb4956eca0944a929688"],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"e98520789adb1d5ad05afb4956eca0944a929688":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"627e70d5711ab39d080a080f089685268525f54d":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["627e70d5711ab39d080a080f089685268525f54d"],"0d16198391f70a4ee52a8c8792c91eb87a30f1d6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c44cc06c26e456fe9c215072b79fce30babe3975":["e98520789adb1d5ad05afb4956eca0944a929688","b0b597c65628ca9e73913a07e81691f8229bae35"],"e98520789adb1d5ad05afb4956eca0944a929688":["0d16198391f70a4ee52a8c8792c91eb87a30f1d6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}