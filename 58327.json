{"path":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","commits":[{"id":"0ad7bdba3e91cf3373cda2e52239cb761fc0b452","date":1408019547,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"/dev/null","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n      ClusterState clusterState = getZkStateReader().getClusterState();\n      if (clusterState != null) {\n        DocCollection collection = clusterState.getCollectionOrNull(desc\n            .getCloudDescriptor().getCollectionName());\n        if (collection != null) {\n          boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas( getZkStateReader(), collection.getName());   \n          if (autoAddReplicas) {\n            CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n          }\n        }\n      }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbcfc050b9f253136eaa5950b57248b2109eac11","date":1427308993,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection.getName());\n        if (autoAddReplicas) {\n          CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n      ClusterState clusterState = getZkStateReader().getClusterState();\n      if (clusterState != null) {\n        DocCollection collection = clusterState.getCollectionOrNull(desc\n            .getCloudDescriptor().getCollectionName());\n        if (collection != null) {\n          boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas( getZkStateReader(), collection.getName());   \n          if (autoAddReplicas) {\n            CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection.getName());\n        if (autoAddReplicas) {\n          CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n      ClusterState clusterState = getZkStateReader().getClusterState();\n      if (clusterState != null) {\n        DocCollection collection = clusterState.getCollectionOrNull(desc\n            .getCloudDescriptor().getCollectionName());\n        if (collection != null) {\n          boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas( getZkStateReader(), collection.getName());   \n          if (autoAddReplicas) {\n            CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n          }\n        }\n      }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8c4677ab540889fa013693312bae3e5c4283df4","date":1499928201,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n      }\n    }\n  }\n\n","sourceOld":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection.getName());\n        if (autoAddReplicas) {\n          CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9a989a32a073c55e3aef6f807a3474184bbcf49","date":1499930209,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n      }\n    }\n  }\n\n","sourceOld":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection.getName());\n        if (autoAddReplicas) {\n          CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb569fd721c41eafc2a2d788499a7df490c7f1a5","date":1499930871,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/ZkController#throwErrorIfReplicaReplaced(CoreDescriptor).mjava","sourceNew":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n      }\n    }\n  }\n\n","sourceOld":"  public void throwErrorIfReplicaReplaced(CoreDescriptor desc) {\n    ClusterState clusterState = getZkStateReader().getClusterState();\n    if (clusterState != null) {\n      DocCollection collection = clusterState.getCollectionOrNull(desc\n          .getCloudDescriptor().getCollectionName());\n      if (collection != null) {\n        boolean autoAddReplicas = ClusterStateUtil.isAutoAddReplicas(getZkStateReader(), collection.getName());\n        if (autoAddReplicas) {\n          CloudUtil.checkSharedFSFailoverReplaced(cc, desc);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452","fbcfc050b9f253136eaa5950b57248b2109eac11"],"c8c4677ab540889fa013693312bae3e5c4283df4":["fbcfc050b9f253136eaa5950b57248b2109eac11"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":["fbcfc050b9f253136eaa5950b57248b2109eac11","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fbcfc050b9f253136eaa5950b57248b2109eac11","c8c4677ab540889fa013693312bae3e5c4283df4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8c4677ab540889fa013693312bae3e5c4283df4"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"c8c4677ab540889fa013693312bae3e5c4283df4":["f9a989a32a073c55e3aef6f807a3474184bbcf49","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0ad7bdba3e91cf3373cda2e52239cb761fc0b452":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fbcfc050b9f253136eaa5950b57248b2109eac11"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad7bdba3e91cf3373cda2e52239cb761fc0b452"],"fb569fd721c41eafc2a2d788499a7df490c7f1a5":[],"f9a989a32a073c55e3aef6f807a3474184bbcf49":["fb569fd721c41eafc2a2d788499a7df490c7f1a5"],"fbcfc050b9f253136eaa5950b57248b2109eac11":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","c8c4677ab540889fa013693312bae3e5c4283df4","fb569fd721c41eafc2a2d788499a7df490c7f1a5","f9a989a32a073c55e3aef6f807a3474184bbcf49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fb569fd721c41eafc2a2d788499a7df490c7f1a5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}