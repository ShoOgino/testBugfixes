{"path":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","commits":[{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Filter,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Filter luceneFilter,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, luceneFilter, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72","date":1429332199,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n    \n    try {\n      super.search(query, collector);\n      if(collector instanceof DelegatingCollector) {\n        ((DelegatingCollector)collector).finish();\n      }\n    }\n    catch( TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x ) {\n      log.warn( \"Query: \" + query + \"; \" + x.getMessage() );\n      qr.setPartialResults(true);\n    }\n  }\n\n","bugFix":["3219e7215437030592c42ca55b29e3f77e0d6808","c6e1dc1bb4254226c8d7151b596cc1be40671751"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217c549d38b8c3fe175afa0101420f71d4bfa35b","date":1452091648,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.len);\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53b8f53f50bada3329151b5a1d638c9f58d636d5","date":1452096786,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = (cmd.getFlags() & TERMINATE_EARLY) == TERMINATE_EARLY;\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac9de183adbc9483681f275ac1e2d92ed19f52e1","date":1452414626,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query \n   * against it.  This method takes into consideration both the explicitly provided collector \n   * and postFilter as well as any needed collector wrappers for dealing with options \n   * specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query,\n      Collector collector, QueryCommand cmd, DelegatingCollector postFilter) throws IOException {\n    \n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if( timeAllowed > 0 ) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n    \n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: \" + query + \"; \" + x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b","date":1455308162,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c23672acbb5104509c1c2d6e3dda7a08eaf091f","date":1463128188,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCOmmand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen(), mergeSort);\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54faedfb0e03479a38f5ee82f2dfaeea536e9404","date":1587251295,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      }\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      if (log.isWarnEnabled()) {\n        log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      }\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3e6e3d7e1e6a8eeca8c0d3e14e2ce425bae839b","date":1590101317,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   * @return The collector used for search\n   */\n  private Collector buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n    return collector;\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"72afa881b0b5c361ebd0b6d37927fe072151fbe0","date":1590107364,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   * @return The collector used for search\n   */\n  private Collector buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n    return collector;\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   */\n  private void buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57c238f5fb83803b49b37b3a1a12224a64d47542","date":1593655679,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/SolrIndexSearcher#buildAndRunCollectorChain(QueryResult,Query,Collector,QueryCommand,DelegatingCollector).mjava","sourceNew":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   * @return The collector used for search\n   */\n  private Collector buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; \", query, x);\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n    return collector;\n  }\n\n","sourceOld":"  /**\n   * Builds the necessary collector chain (via delegate wrapping) and executes the query against it. This method takes\n   * into consideration both the explicitly provided collector and postFilter as well as any needed collector wrappers\n   * for dealing with options specified in the QueryCommand.\n   * @return The collector used for search\n   */\n  private Collector buildAndRunCollectorChain(QueryResult qr, Query query, Collector collector, QueryCommand cmd,\n      DelegatingCollector postFilter) throws IOException {\n\n    EarlyTerminatingSortingCollector earlyTerminatingSortingCollector = null;\n    if (cmd.getSegmentTerminateEarly()) {\n      final Sort cmdSort = cmd.getSort();\n      final int cmdLen = cmd.getLen();\n      final Sort mergeSort = core.getSolrCoreState().getMergePolicySort();\n\n      if (cmdSort == null || cmdLen <= 0 || mergeSort == null ||\n          !EarlyTerminatingSortingCollector.canEarlyTerminate(cmdSort, mergeSort)) {\n        log.warn(\"unsupported combination: segmentTerminateEarly=true cmdSort={} cmdLen={} mergeSort={}\", cmdSort, cmdLen, mergeSort);\n      } else {\n        collector = earlyTerminatingSortingCollector = new EarlyTerminatingSortingCollector(collector, cmdSort, cmd.getLen());\n      }\n    }\n\n    final boolean terminateEarly = cmd.getTerminateEarly();\n    if (terminateEarly) {\n      collector = new EarlyTerminatingCollector(collector, cmd.getLen());\n    }\n\n    final long timeAllowed = cmd.getTimeAllowed();\n    if (timeAllowed > 0) {\n      collector = new TimeLimitingCollector(collector, TimeLimitingCollector.getGlobalCounter(), timeAllowed);\n    }\n\n    if (postFilter != null) {\n      postFilter.setLastDelegate(collector);\n      collector = postFilter;\n    }\n\n    try {\n      super.search(query, collector);\n    } catch (TimeLimitingCollector.TimeExceededException | ExitableDirectoryReader.ExitingReaderException x) {\n      log.warn(\"Query: [{}]; {}\", query, x.getMessage());\n      qr.setPartialResults(true);\n    } catch (EarlyTerminatingCollectorException etce) {\n      if (collector instanceof DelegatingCollector) {\n        ((DelegatingCollector) collector).finish();\n      }\n      throw etce;\n    } finally {\n      if (earlyTerminatingSortingCollector != null) {\n        qr.setSegmentTerminatedEarly(earlyTerminatingSortingCollector.terminatedEarly());\n      }\n    }\n    if (collector instanceof DelegatingCollector) {\n      ((DelegatingCollector) collector).finish();\n    }\n    return collector;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"217c549d38b8c3fe175afa0101420f71d4bfa35b":["93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"575e66bd4b2349209027f6801184da7fc3cba13f":["54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"0ad30c6a479e764150a3316e57263319775f1df2":["0158ced21948b6626f733c1c42c1e18d94449789","3d33e731a93d4b57e662ff094f64f94a745422d4"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["575e66bd4b2349209027f6801184da7fc3cba13f","b3e6e3d7e1e6a8eeca8c0d3e14e2ce425bae839b"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["53b8f53f50bada3329151b5a1d638c9f58d636d5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b","0ad30c6a479e764150a3316e57263319775f1df2"],"93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"b3e6e3d7e1e6a8eeca8c0d3e14e2ce425bae839b":["575e66bd4b2349209027f6801184da7fc3cba13f"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53b8f53f50bada3329151b5a1d638c9f58d636d5":["217c549d38b8c3fe175afa0101420f71d4bfa35b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0158ced21948b6626f733c1c42c1e18d94449789","9c23672acbb5104509c1c2d6e3dda7a08eaf091f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"0158ced21948b6626f733c1c42c1e18d94449789":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"]},"commit2Childs":{"1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","9c23672acbb5104509c1c2d6e3dda7a08eaf091f","0158ced21948b6626f733c1c42c1e18d94449789"],"217c549d38b8c3fe175afa0101420f71d4bfa35b":["53b8f53f50bada3329151b5a1d638c9f58d636d5"],"57c238f5fb83803b49b37b3a1a12224a64d47542":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"575e66bd4b2349209027f6801184da7fc3cba13f":["72afa881b0b5c361ebd0b6d37927fe072151fbe0","b3e6e3d7e1e6a8eeca8c0d3e14e2ce425bae839b"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"72afa881b0b5c361ebd0b6d37927fe072151fbe0":["57c238f5fb83803b49b37b3a1a12224a64d47542"],"ac9de183adbc9483681f275ac1e2d92ed19f52e1":["1a9c2b42591c0db6f85041d5cfc9cba17fe45e0b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","54faedfb0e03479a38f5ee82f2dfaeea536e9404"],"93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72":["217c549d38b8c3fe175afa0101420f71d4bfa35b"],"54faedfb0e03479a38f5ee82f2dfaeea536e9404":["575e66bd4b2349209027f6801184da7fc3cba13f"],"b3e6e3d7e1e6a8eeca8c0d3e14e2ce425bae839b":["72afa881b0b5c361ebd0b6d37927fe072151fbe0"],"9c23672acbb5104509c1c2d6e3dda7a08eaf091f":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["93a1227030f8fcbaca95b0bb1bb2437b5c8a6e72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"53b8f53f50bada3329151b5a1d638c9f58d636d5":["ac9de183adbc9483681f275ac1e2d92ed19f52e1"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"0158ced21948b6626f733c1c42c1e18d94449789":["0ad30c6a479e764150a3316e57263319775f1df2","3d33e731a93d4b57e662ff094f64f94a745422d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}