{"path":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","pathOld":"backwards/src/test/org/apache/lucene/search/TestPhraseQuery#testPalyndrome2().mjava","sourceNew":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","sourceOld":"  /**\n   * Working on a 2 fields like this:\n   *    Field(\"field\", \"one two three four five\")\n   *    Field(\"palindrome\", \"one two three two one\")\n   * Phrase of size 2 occuriong twice, once in order and once in reverse, \n   * because doc is a palyndrome, is counted twice. \n   * Also, in this case order in query does not matter. \n   * Also, when an exact match is found, both sloppy scorer and exact scorer scores the same.   \n   */\n  public void testPalyndrome2() throws Exception {\n    \n    // search on non palyndrome, find phrase with no slop, using exact phrase scorer\n    query.setSlop(0); // to use exact phrase scorer\n    query.add(new Term(\"field\", \"two\"));\n    query.add(new Term(\"field\", \"three\"));\n    ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"phrase found with exact phrase scorer\", 1, hits.length);\n    float score0 = hits[0].score;\n    //System.out.println(\"(exact) field: two three: \"+score0);\n    QueryUtils.check(query,searcher);\n\n    // search on non palyndrome, find phrase with slop 2, though no slop required here.\n    query.setSlop(2); // to use sloppy scorer \n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score1 = hits[0].score;\n    //System.out.println(\"(sloppy) field: two three: \"+score1);\n    assertEquals(\"exact scorer and sloppy scorer score the same when slop does not matter\",score0, score1, SCORE_COMP_THRESH);\n    QueryUtils.check(query,searcher);\n\n    // search ordered in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"two\"));\n    query.add(new Term(\"palindrome\", \"three\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score2 = hits[0].score;\n    //System.out.println(\"palindrome: two three: \"+score2);\n    QueryUtils.check(query,searcher);\n    \n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"ordered scores higher in palindrome\",score1+SCORE_COMP_THRESH<score2);\n\n    // search reveresed in palyndrome, find it twice\n    query = new PhraseQuery();\n    query.setSlop(2); // must be at least two for both ordered and reversed to match\n    query.add(new Term(\"palindrome\", \"three\"));\n    query.add(new Term(\"palindrome\", \"two\"));\n    hits = searcher.search(query, null, 1000).scoreDocs;\n    assertEquals(\"just sloppy enough\", 1, hits.length);\n    float score3 = hits[0].score;\n    //System.out.println(\"palindrome: three two: \"+score3);\n    QueryUtils.check(query,searcher);\n\n    //commented out for sloppy-phrase efficiency (issue 736) - see SloppyPhraseScorer.phraseFreq(). \n    //assertTrue(\"reversed scores higher in palindrome\",score1+SCORE_COMP_THRESH<score3);\n    //assertEquals(\"ordered or reversed does not matter\",score2, score3, SCORE_COMP_THRESH);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}