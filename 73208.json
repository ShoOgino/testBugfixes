{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","date":1341575807,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"04e7f30683f53928b2fce016e6430c9795caff22","date":1341839598,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 10000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c83d6c4335f31cae14f625a222bc842f20073dcd","date":1373306148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":["0c17d12803da6cadc96b3cdf15b0b940eddb28de"],"bugIntro":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", new StringReader(s));\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"782ed6a4b4ba50ec19734fc8db4e570ee193d627","date":1381127065,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      TokenStream ts = analyzer.tokenStream(\"foo\", s);\n      ts.reset();\n      OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n      while (ts.incrementToken()) {\n        String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n        for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n          cp = highlightedText.codePointAt(j);\n          assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n        }\n      }\n      ts.end();\n      ts.close();\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":["0c17d12803da6cadc96b3cdf15b0b940eddb28de","c83d6c4335f31cae14f625a222bc842f20073dcd"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, reader) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = _TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(TEST_VERSION_CURRENT, newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a56958d7f71a28824f20031ffbb2e13502a0274e","date":1425573902,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n    analyzer.close();\n  }\n\n","sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","date":1537441025,"type":4,"author":"Alan Woodward","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testCrossPlaneNormalization().mjava","sourceNew":null,"sourceOld":"  // LUCENE-3642: normalize SMP->BMP and check that offsets are correct\n  public void testCrossPlaneNormalization() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer tokenizer = new LetterTokenizer(newAttributeFactory()) {\n          @Override\n          protected int normalize(int c) {\n            if (c > 0xffff) {\n              return 'δ';\n            } else {\n              return c;\n            }\n          }\n        };\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n    };\n    int num = 1000 * RANDOM_MULTIPLIER;\n    for (int i = 0; i < num; i++) {\n      String s = TestUtil.randomUnicodeString(random());\n      try (TokenStream ts = analyzer.tokenStream(\"foo\", s)) {\n        ts.reset();\n        OffsetAttribute offsetAtt = ts.addAttribute(OffsetAttribute.class);\n        while (ts.incrementToken()) {\n          String highlightedText = s.substring(offsetAtt.startOffset(), offsetAtt.endOffset());\n          for (int j = 0, cp = 0; j < highlightedText.length(); j += Character.charCount(cp)) {\n            cp = highlightedText.codePointAt(j);\n            assertTrue(\"non-letter:\" + Integer.toHexString(cp), Character.isLetter(cp));\n          }\n        }\n        ts.end();\n      }\n    }\n    // just for fun\n    checkRandomData(random(), analyzer, num);\n    analyzer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"04e7f30683f53928b2fce016e6430c9795caff22":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","c83d6c4335f31cae14f625a222bc842f20073dcd"],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"6613659748fe4411a7dcf85266e55db1f95f7315":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["6613659748fe4411a7dcf85266e55db1f95f7315"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["c83d6c4335f31cae14f625a222bc842f20073dcd"],"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["379db3ad24c4f0214f30a122265a6d6be003a99d","a56958d7f71a28824f20031ffbb2e13502a0274e"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["b89678825b68eccaf09e6ab71675fc0b0af1e099","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a56958d7f71a28824f20031ffbb2e13502a0274e":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"04e7f30683f53928b2fce016e6430c9795caff22":[],"16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","c83d6c4335f31cae14f625a222bc842f20073dcd","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["6613659748fe4411a7dcf85266e55db1f95f7315"],"6613659748fe4411a7dcf85266e55db1f95f7315":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"782ed6a4b4ba50ec19734fc8db4e570ee193d627":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["04e7f30683f53928b2fce016e6430c9795caff22","16f1a3d2871e09ea6774ec5e5d5c21f853a7d5d6","fe33227f6805edab2036cbb80645cc4e2d1fa424"],"c83d6c4335f31cae14f625a222bc842f20073dcd":["37a0f60745e53927c4c876cfe5b5a58170f0646c","782ed6a4b4ba50ec19734fc8db4e570ee193d627"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"379db3ad24c4f0214f30a122265a6d6be003a99d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a56958d7f71a28824f20031ffbb2e13502a0274e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a56958d7f71a28824f20031ffbb2e13502a0274e":["3780f02dd8e07e1feb00e1a4f522c4dedb85d9c0","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["04e7f30683f53928b2fce016e6430c9795caff22","37a0f60745e53927c4c876cfe5b5a58170f0646c","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}