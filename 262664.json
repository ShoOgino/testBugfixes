{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","commits":[{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,FieldInfos,IOContext).mjava","sourceNew":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, FieldInfos fis, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoFormat#write(Directory,SegmentInfo,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50SegmentInfoWriter#write(Directory,SegmentInfo,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","sourceOld":"  /** Save a single segment's info. */\n  @Override\n  public void write(Directory dir, SegmentInfo si, IOContext ioContext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(si.name, \"\", Lucene50SegmentInfoFormat.SI_EXTENSION);\n    si.addFile(fileName);\n\n    boolean success = false;\n    try (IndexOutput output = dir.createOutput(fileName, ioContext)) {\n      CodecUtil.writeHeader(output, Lucene50SegmentInfoFormat.CODEC_NAME, Lucene50SegmentInfoFormat.VERSION_CURRENT);\n      Version version = si.getVersion();\n      if (version.major < 5) {\n        throw new IllegalArgumentException(\"invalid major version: should be >= 5 but got: \" + version.major + \" segment=\" + si);\n      }\n      // Write the Lucene version that created this segment, since 3.1\n      output.writeInt(version.major);\n      output.writeInt(version.minor);\n      output.writeInt(version.bugfix);\n      assert version.prerelease == 0;\n      output.writeInt(si.getDocCount());\n\n      output.writeByte((byte) (si.getUseCompoundFile() ? SegmentInfo.YES : SegmentInfo.NO));\n      output.writeStringStringMap(si.getDiagnostics());\n      Set<String> files = si.files();\n      for (String file : files) {\n        if (!IndexFileNames.parseSegmentName(file).equals(si.name)) {\n          throw new IllegalArgumentException(\"invalid files: expected segment=\" + si.name + \", got=\" + files);\n        }\n      }\n      output.writeStringSet(files);\n      byte[] id = si.getId();\n      if (id.length != StringHelper.ID_LENGTH) {\n        throw new IllegalArgumentException(\"invalid id, got=\" + StringHelper.idToString(id));\n      }\n      output.writeBytes(id, 0, id.length);\n      CodecUtil.writeFooter(output);\n      success = true;\n    } finally {\n      if (!success) {\n        // TODO: are we doing this outside of the tracking wrapper? why must SIWriter cleanup like this?\n        IOUtils.deleteFilesIgnoringExceptions(si.dir, fileName);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}