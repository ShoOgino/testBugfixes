{"path":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    writer.optimize();\n    writer.close();\n    searcher=new IndexSearcher(directory, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new MockRAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    random = newStaticRandom(TestNumericRangeQuery64.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new MockRAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"150488c1317972164a9a824be05b1ba2ba0fc68c","date":1284316090,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    random = newStaticRandom(TestNumericRangeQuery64.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    random = newStaticRandom(TestNumericRangeQuery64.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f9dba8ffba48fba97d7a90fd45f6da87ba55736","date":1285244347,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    random = newStaticRandom(TestNumericRangeQuery64.class);\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(random, TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"825bcb488bc228d1fb6a19c1f441a2181f7d766d","date":1285691504,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = new RAMDirectory();\n    Random random = newStaticRandom(TestNumericRangeQuery64.class);\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory);\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n  \n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000)));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=new IndexSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer())\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newInOrderLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71","date":1309295333,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, Field.Store.YES, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5cdad9e745f40d1e174b382bb7d664ca53d9138","date":1310498637,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"459280d4c73660ea582f38afce7968563068fe49","date":1311128716,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 50, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, NumericField.TYPE_STORED),\n      field6 = new NumericField(\"field6\", 6, NumericField.TYPE_STORED),\n      field4 = new NumericField(\"field4\", 4, NumericField.TYPE_STORED),\n      field2 = new NumericField(\"field2\", 2, NumericField.TYPE_STORED),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? NumericField.TYPE_STORED : NumericField.TYPE_UNSTORED),\n      ascfield8 = new NumericField(\"ascfield8\", 8, NumericField.TYPE_UNSTORED),\n      ascfield6 = new NumericField(\"ascfield6\", 6, NumericField.TYPE_UNSTORED),\n      ascfield4 = new NumericField(\"ascfield4\", 4, NumericField.TYPE_UNSTORED),\n      ascfield2 = new NumericField(\"ascfield2\", 2, NumericField.TYPE_UNSTORED);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, Field.Store.YES, true),\n      field6 = new NumericField(\"field6\", 6, Field.Store.YES, true),\n      field4 = new NumericField(\"field4\", 4, Field.Store.YES, true),\n      field2 = new NumericField(\"field2\", 2, Field.Store.YES, true),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? Field.Store.YES : Field.Store.NO, true),\n      ascfield8 = new NumericField(\"ascfield8\", 8, Field.Store.NO, true),\n      ascfield6 = new NumericField(\"ascfield6\", 6, Field.Store.NO, true),\n      ascfield4 = new NumericField(\"ascfield4\", 4, Field.Store.NO, true),\n      ascfield2 = new NumericField(\"ascfield2\", 2, Field.Store.NO, true);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":["fa0f44f887719e97183771e977cfc4bfb485b766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"00b6a487c9be41aff201a3530e6fb1f3f02a76b3","date":1321144129,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1L << 60) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, NumericField.TYPE_STORED),\n      field6 = new NumericField(\"field6\", 6, NumericField.TYPE_STORED),\n      field4 = new NumericField(\"field4\", 4, NumericField.TYPE_STORED),\n      field2 = new NumericField(\"field2\", 2, NumericField.TYPE_STORED),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? NumericField.TYPE_STORED : NumericField.TYPE_UNSTORED),\n      ascfield8 = new NumericField(\"ascfield8\", 8, NumericField.TYPE_UNSTORED),\n      ascfield6 = new NumericField(\"ascfield6\", 6, NumericField.TYPE_UNSTORED),\n      ascfield4 = new NumericField(\"ascfield4\", 4, NumericField.TYPE_UNSTORED),\n      ascfield2 = new NumericField(\"ascfield2\", 2, NumericField.TYPE_UNSTORED);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, NumericField.TYPE_STORED),\n      field6 = new NumericField(\"field6\", 6, NumericField.TYPE_STORED),\n      field4 = new NumericField(\"field4\", 4, NumericField.TYPE_STORED),\n      field2 = new NumericField(\"field2\", 2, NumericField.TYPE_STORED),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? NumericField.TYPE_STORED : NumericField.TYPE_UNSTORED),\n      ascfield8 = new NumericField(\"ascfield8\", 8, NumericField.TYPE_UNSTORED),\n      ascfield6 = new NumericField(\"ascfield6\", 6, NumericField.TYPE_UNSTORED),\n      ascfield4 = new NumericField(\"ascfield4\", 4, NumericField.TYPE_UNSTORED),\n      ascfield2 = new NumericField(\"ascfield2\", 2, NumericField.TYPE_UNSTORED);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"fa0f44f887719e97183771e977cfc4bfb485b766","date":1326668713,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1L << 60) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n\n    final FieldType storedLong = NumericField.getFieldType(NumericField.DataType.LONG, true);\n\n    final FieldType storedLong8 = new FieldType(storedLong);\n    storedLong8.setNumericPrecisionStep(8);\n\n    final FieldType storedLong4 = new FieldType(storedLong);\n    storedLong4.setNumericPrecisionStep(4);\n\n    final FieldType storedLong6 = new FieldType(storedLong);\n    storedLong6.setNumericPrecisionStep(6);\n\n    final FieldType storedLong2 = new FieldType(storedLong);\n    storedLong2.setNumericPrecisionStep(2);\n\n    final FieldType storedLongNone = new FieldType(storedLong);\n    storedLongNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredLong = NumericField.getFieldType(NumericField.DataType.LONG, false);\n\n    final FieldType unstoredLong8 = new FieldType(unstoredLong);\n    unstoredLong8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredLong6 = new FieldType(unstoredLong);\n    unstoredLong6.setNumericPrecisionStep(6);\n\n    final FieldType unstoredLong4 = new FieldType(unstoredLong);\n    unstoredLong4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredLong2 = new FieldType(unstoredLong);\n    unstoredLong2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0L, storedLong8),\n      field6 = new NumericField(\"field6\", 0L, storedLong6),\n      field4 = new NumericField(\"field4\", 0L, storedLong4),\n      field2 = new NumericField(\"field2\", 0L, storedLong2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0L, storedLongNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0L, unstoredLong8),\n      ascfield6 = new NumericField(\"ascfield6\", 0L, unstoredLong6),\n      ascfield4 = new NumericField(\"ascfield4\", 0L, unstoredLong4),\n      ascfield2 = new NumericField(\"ascfield2\", 0L, unstoredLong2);\n\n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setValue(val);\n      field6.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield6.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1L << 60) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n    \n    NumericField\n      field8 = new NumericField(\"field8\", 8, NumericField.TYPE_STORED),\n      field6 = new NumericField(\"field6\", 6, NumericField.TYPE_STORED),\n      field4 = new NumericField(\"field4\", 4, NumericField.TYPE_STORED),\n      field2 = new NumericField(\"field2\", 2, NumericField.TYPE_STORED),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, Integer.MAX_VALUE, rarely() ? NumericField.TYPE_STORED : NumericField.TYPE_UNSTORED),\n      ascfield8 = new NumericField(\"ascfield8\", 8, NumericField.TYPE_UNSTORED),\n      ascfield6 = new NumericField(\"ascfield6\", 6, NumericField.TYPE_UNSTORED),\n      ascfield4 = new NumericField(\"ascfield4\", 4, NumericField.TYPE_UNSTORED),\n      ascfield2 = new NumericField(\"ascfield2\", 2, NumericField.TYPE_UNSTORED);\n    \n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setLongValue(val);\n      field6.setLongValue(val);\n      field4.setLongValue(val);\n      field2.setLongValue(val);\n      fieldNoTrie.setLongValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setLongValue(val);\n      ascfield6.setLongValue(val);\n      ascfield4.setLongValue(val);\n      ascfield2.setLongValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":["6462d89a9840dd623bfbd36483d84abce975e31a","1509f151d7692d84fae414b2b799ac06ba60fcb4"],"bugIntro":["a78a90fc9701e511308346ea29f4f5e548bb39fe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestNumericRangeQuery64#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1L << 60) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n\n    final FieldType storedLong = NumericField.getFieldType(NumericField.DataType.LONG, true);\n\n    final FieldType storedLong8 = new FieldType(storedLong);\n    storedLong8.setNumericPrecisionStep(8);\n\n    final FieldType storedLong4 = new FieldType(storedLong);\n    storedLong4.setNumericPrecisionStep(4);\n\n    final FieldType storedLong6 = new FieldType(storedLong);\n    storedLong6.setNumericPrecisionStep(6);\n\n    final FieldType storedLong2 = new FieldType(storedLong);\n    storedLong2.setNumericPrecisionStep(2);\n\n    final FieldType storedLongNone = new FieldType(storedLong);\n    storedLongNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredLong = NumericField.getFieldType(NumericField.DataType.LONG, false);\n\n    final FieldType unstoredLong8 = new FieldType(unstoredLong);\n    unstoredLong8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredLong6 = new FieldType(unstoredLong);\n    unstoredLong6.setNumericPrecisionStep(6);\n\n    final FieldType unstoredLong4 = new FieldType(unstoredLong);\n    unstoredLong4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredLong2 = new FieldType(unstoredLong);\n    unstoredLong2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0L, storedLong8),\n      field6 = new NumericField(\"field6\", 0L, storedLong6),\n      field4 = new NumericField(\"field4\", 0L, storedLong4),\n      field2 = new NumericField(\"field2\", 0L, storedLong2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0L, storedLongNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0L, unstoredLong8),\n      ascfield6 = new NumericField(\"ascfield6\", 0L, unstoredLong6),\n      ascfield4 = new NumericField(\"ascfield4\", 0L, unstoredLong4),\n      ascfield2 = new NumericField(\"ascfield2\", 0L, unstoredLong2);\n\n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setValue(val);\n      field6.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield6.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    noDocs = atLeast(4096);\n    distance = (1L << 60) / noDocs;\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random, directory,\n        newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random))\n        .setMaxBufferedDocs(_TestUtil.nextInt(random, 100, 1000))\n        .setMergePolicy(newLogMergePolicy()));\n\n    final FieldType storedLong = NumericField.getFieldType(NumericField.DataType.LONG, true);\n\n    final FieldType storedLong8 = new FieldType(storedLong);\n    storedLong8.setNumericPrecisionStep(8);\n\n    final FieldType storedLong4 = new FieldType(storedLong);\n    storedLong4.setNumericPrecisionStep(4);\n\n    final FieldType storedLong6 = new FieldType(storedLong);\n    storedLong6.setNumericPrecisionStep(6);\n\n    final FieldType storedLong2 = new FieldType(storedLong);\n    storedLong2.setNumericPrecisionStep(2);\n\n    final FieldType storedLongNone = new FieldType(storedLong);\n    storedLongNone.setNumericPrecisionStep(Integer.MAX_VALUE);\n\n    final FieldType unstoredLong = NumericField.getFieldType(NumericField.DataType.LONG, false);\n\n    final FieldType unstoredLong8 = new FieldType(unstoredLong);\n    unstoredLong8.setNumericPrecisionStep(8);\n\n    final FieldType unstoredLong6 = new FieldType(unstoredLong);\n    unstoredLong6.setNumericPrecisionStep(6);\n\n    final FieldType unstoredLong4 = new FieldType(unstoredLong);\n    unstoredLong4.setNumericPrecisionStep(4);\n\n    final FieldType unstoredLong2 = new FieldType(unstoredLong);\n    unstoredLong2.setNumericPrecisionStep(2);\n\n    NumericField\n      field8 = new NumericField(\"field8\", 0L, storedLong8),\n      field6 = new NumericField(\"field6\", 0L, storedLong6),\n      field4 = new NumericField(\"field4\", 0L, storedLong4),\n      field2 = new NumericField(\"field2\", 0L, storedLong2),\n      fieldNoTrie = new NumericField(\"field\"+Integer.MAX_VALUE, 0L, storedLongNone),\n      ascfield8 = new NumericField(\"ascfield8\", 0L, unstoredLong8),\n      ascfield6 = new NumericField(\"ascfield6\", 0L, unstoredLong6),\n      ascfield4 = new NumericField(\"ascfield4\", 0L, unstoredLong4),\n      ascfield2 = new NumericField(\"ascfield2\", 0L, unstoredLong2);\n\n    Document doc = new Document();\n    // add fields, that have a distance to test general functionality\n    doc.add(field8); doc.add(field6); doc.add(field4); doc.add(field2); doc.add(fieldNoTrie);\n    // add ascending fields with a distance of 1, beginning at -noDocs/2 to test the correct splitting of range and inclusive/exclusive\n    doc.add(ascfield8); doc.add(ascfield6); doc.add(ascfield4); doc.add(ascfield2);\n    \n    // Add a series of noDocs docs with increasing long values, by updating the fields\n    for (int l=0; l<noDocs; l++) {\n      long val=distance*l+startOffset;\n      field8.setValue(val);\n      field6.setValue(val);\n      field4.setValue(val);\n      field2.setValue(val);\n      fieldNoTrie.setValue(val);\n\n      val=l-(noDocs/2);\n      ascfield8.setValue(val);\n      ascfield6.setValue(val);\n      ascfield4.setValue(val);\n      ascfield2.setValue(val);\n      writer.addDocument(doc);\n    }\n    reader = writer.getReader();\n    searcher=newSearcher(reader);\n    writer.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"459280d4c73660ea582f38afce7968563068fe49":["a5cdad9e745f40d1e174b382bb7d664ca53d9138"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fa0f44f887719e97183771e977cfc4bfb485b766"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"00b6a487c9be41aff201a3530e6fb1f3f02a76b3":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["825bcb488bc228d1fb6a19c1f441a2181f7d766d","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fa0f44f887719e97183771e977cfc4bfb485b766":["00b6a487c9be41aff201a3530e6fb1f3f02a76b3"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["459280d4c73660ea582f38afce7968563068fe49"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","15bbd254c1506df5299c4df8c148262c7bd6301e"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["f2c5f0cb44df114db4228c8f77861714b5cabaea","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a3776dccca01c11e7046323cfad46a3b4a471233","6e93e8251fcc355b1ed7d79aaff249c2ae40ba71"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"459280d4c73660ea582f38afce7968563068fe49":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"825bcb488bc228d1fb6a19c1f441a2181f7d766d":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"5f9dba8ffba48fba97d7a90fd45f6da87ba55736":["825bcb488bc228d1fb6a19c1f441a2181f7d766d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"00b6a487c9be41aff201a3530e6fb1f3f02a76b3":["fa0f44f887719e97183771e977cfc4bfb485b766"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["6e93e8251fcc355b1ed7d79aaff249c2ae40ba71","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","a3776dccca01c11e7046323cfad46a3b4a471233"],"6e93e8251fcc355b1ed7d79aaff249c2ae40ba71":["a5cdad9e745f40d1e174b382bb7d664ca53d9138","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"fa0f44f887719e97183771e977cfc4bfb485b766":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["00b6a487c9be41aff201a3530e6fb1f3f02a76b3"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"a5cdad9e745f40d1e174b382bb7d664ca53d9138":["459280d4c73660ea582f38afce7968563068fe49"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["150488c1317972164a9a824be05b1ba2ba0fc68c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":["817d8435e9135b756f08ce6710ab0baac51bdf88"],"150488c1317972164a9a824be05b1ba2ba0fc68c":["5f9dba8ffba48fba97d7a90fd45f6da87ba55736"],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}