{"path":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d3e8520fd031bab31fd0e4d480e55958bc45efe","date":1340901565,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":["ee1513e4ee2237693ff50a460d78dff5246c3d34"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe33227f6805edab2036cbb80645cc4e2d1fa424","date":1342713534,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) throws IOException {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a","date":1363294103,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/ConjunctionScorer#ConjunctionScorer(Weight,Scorer[],float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/ConjunctionTermScorer#ConjunctionTermScorer(Weight,float,DocsAndFreqs[]).mjava","sourceNew":"  ConjunctionScorer(Weight weight, Scorer[] scorers, float coord) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = new DocsAndFreqs[scorers.length];\n    for (int i = 0; i < scorers.length; i++) {\n      docsAndFreqs[i] = new DocsAndFreqs(scorers[i]);\n    }\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return Long.signum(o1.cost - o2.cost);\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","sourceOld":"  ConjunctionTermScorer(Weight weight, float coord,\n      DocsAndFreqs[] docsAndFreqs) {\n    super(weight);\n    this.coord = coord;\n    this.docsAndFreqs = docsAndFreqs;\n    // Sort the array the first time to allow the least frequent DocsEnum to\n    // lead the matching.\n    ArrayUtil.mergeSort(docsAndFreqs, new Comparator<DocsAndFreqs>() {\n      @Override\n      public int compare(DocsAndFreqs o1, DocsAndFreqs o2) {\n        return o1.docFreq - o2.docFreq;\n      }\n    });\n\n    lead = docsAndFreqs[0]; // least frequent DocsEnum leads the intersection\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["4d3e8520fd031bab31fd0e4d480e55958bc45efe","7530de27b87b961b51f01bd1299b7004d46e8823"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["7530de27b87b961b51f01bd1299b7004d46e8823"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7530de27b87b961b51f01bd1299b7004d46e8823":["4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["fe33227f6805edab2036cbb80645cc4e2d1fa424","4d3e8520fd031bab31fd0e4d480e55958bc45efe"],"fe33227f6805edab2036cbb80645cc4e2d1fa424":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d3e8520fd031bab31fd0e4d480e55958bc45efe":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7b9f056598bc578796f7c2eaa4b2bb8eaab5c23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","fe33227f6805edab2036cbb80645cc4e2d1fa424","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}