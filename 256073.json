{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","commits":[{"id":"0521546db127e358ced1772a9d696dbdd255b203","date":1403202289,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/SpatialOpRecursivePrefixTreeTest#setupGrid(int).mjava","sourceNew":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels);\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n\n    System.out.println(\"Strategy: \" + strategy.toString());\n  }\n\n","sourceOld":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels);\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n\n    System.out.println(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4","date":1422887461,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","sourceNew":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels);\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","sourceOld":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels);\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n\n    System.out.println(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","sourceNew":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels, randomBoolean());\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    // set prune independently on strategy & grid randomly; should work\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (this.grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) this.grid).setPruneLeafyBranches(randomBoolean());\n    }\n\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","sourceOld":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels);\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    //((PrefixTreeStrategy) strategy).setDistErrPct(0);//fully precise to grid\n\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","sourceNew":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels, randomBoolean());\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    // set prune independently on strategy & grid randomly; should work\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (this.grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) this.grid).setPruneLeafyBranches(randomBoolean());\n    }\n\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","sourceOld":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels, randomBoolean());\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    // set prune independently on strategy & grid randomly; should work\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (this.grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) this.grid).setPruneLeafyBranches(randomBoolean());\n    }\n\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupGrid(int).mjava","sourceNew":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels, randomBoolean());\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    // set prune independently on strategy & grid randomly; should work\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (this.grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) this.grid).setPruneLeafyBranches(randomBoolean());\n    }\n\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","sourceOld":"  public void setupGrid(int maxLevels) throws IOException {\n    if (randomBoolean())\n      setupQuadGrid(maxLevels, randomBoolean());\n    else\n      setupGeohashGrid(maxLevels);\n    setupCtx2D(ctx);\n\n    // set prune independently on strategy & grid randomly; should work\n    ((RecursivePrefixTreeStrategy)strategy).setPruneLeafyBranches(randomBoolean());\n    if (this.grid instanceof PackedQuadPrefixTree) {\n      ((PackedQuadPrefixTree) this.grid).setPruneLeafyBranches(randomBoolean());\n    }\n\n    if (maxLevels == -1 && rarely()) {\n      ((PrefixTreeStrategy) strategy).setPointsOnly(true);\n    }\n\n    log.info(\"Strategy: \" + strategy.toString());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9d3854546d75fdc5a4c3b13d0c67b6b331185945","112d77ac8d3e10a362516ad834c9a11d35c94234"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["0521546db127e358ced1772a9d696dbdd255b203"],"0521546db127e358ced1772a9d696dbdd255b203":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0521546db127e358ced1772a9d696dbdd255b203"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"0521546db127e358ced1772a9d696dbdd255b203":["c77e2fbb736fd950ca537ce7c8e1c895eda4cdc4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}