{"path":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","commits":[{"id":"f5c96ee46366b5feece8b0b328368c6237fc087a","date":1400184255,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"/dev/null","sourceNew":"  // Decodes next entry; returns true if it's a sub-block\n  public boolean nextLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d637064d608752565d4f9f41b2497dfdfdde50e","date":1400798123,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"/dev/null","sourceNew":"  // Decodes next entry; returns true if it's a sub-block\n  public boolean nextLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","sourceNew":"  public void nextLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    //}\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","sourceOld":"  // Decodes next entry; returns true if it's a sub-block\n  public boolean nextLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","sourceNew":"  public void nextLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    //}\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","sourceOld":"  // Decodes next entry; returns true if it's a sub-block\n  public boolean nextLeaf() {\n    //if (DEBUG) System.out.println(\"  frame.next ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59db5e5f780185e0155d296a323e440a6ecfd3b6","date":1435089559,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","sourceNew":"  public void nextLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","sourceOld":"  public void nextLeaf() {\n    //if (DEBUG) {\n    //  System.out.println(\"  frame.nextLeaf ord=\" + ord + \" nextEnt=\" + nextEnt + \" entCount=\" + entCount);\n    //}\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9407318969e8504257b4c5764c65755a043e5404","date":1579873617,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blocktree/IntersectTermsEnumFrame#nextLeaf().mjava","sourceNew":"  public void nextLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixLengthsReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","sourceOld":"  public void nextLeaf() {\n    assert nextEnt != -1 && nextEnt < entCount: \"nextEnt=\" + nextEnt + \" entCount=\" + entCount + \" fp=\" + fp;\n    nextEnt++;\n    suffix = suffixesReader.readVInt();\n    startBytePos = suffixesReader.getPosition();\n    suffixesReader.skipBytes(suffix);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f5c96ee46366b5feece8b0b328368c6237fc087a"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["3e8715d826e588419327562287d5d6a8040d63d6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["4d637064d608752565d4f9f41b2497dfdfdde50e","3e8715d826e588419327562287d5d6a8040d63d6"],"9407318969e8504257b4c5764c65755a043e5404":["59db5e5f780185e0155d296a323e440a6ecfd3b6"],"3e8715d826e588419327562287d5d6a8040d63d6":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9407318969e8504257b4c5764c65755a043e5404"]},"commit2Childs":{"4d637064d608752565d4f9f41b2497dfdfdde50e":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"59db5e5f780185e0155d296a323e440a6ecfd3b6":["9407318969e8504257b4c5764c65755a043e5404"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d637064d608752565d4f9f41b2497dfdfdde50e","f5c96ee46366b5feece8b0b328368c6237fc087a"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"9407318969e8504257b4c5764c65755a043e5404":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f5c96ee46366b5feece8b0b328368c6237fc087a":["4d637064d608752565d4f9f41b2497dfdfdde50e"],"3e8715d826e588419327562287d5d6a8040d63d6":["59db5e5f780185e0155d296a323e440a6ecfd3b6","d2638f781be724518ff6c2263d14a48cf6e68017"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}