{"path":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#assertNext(TokenStream,Token,String,int,int).mjava","commits":[{"id":"dd745d580729e528151b58aeda87ef82f1b95c9b","date":1248369082,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#assertNext(TokenStream,Token,String,int,int).mjava","pathOld":"contrib/analyzers/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#assertNext(TokenStream,Token,String,int,int).mjava","sourceNew":"  private Token assertNext(TokenStream ts, final Token reusableToken, String text, int startOffset, int endOffset) throws IOException {\n    Token nextToken = ts.next(reusableToken);\n    assertNotNull(nextToken);\n    assertEquals(text, nextToken.term());\n    assertEquals(startOffset, nextToken.startOffset());\n    assertEquals(endOffset, nextToken.endOffset());\n    return nextToken;\n  }\n\n","sourceOld":"  private Token assertNext(TokenStream ts, final Token reusableToken, String text, int startOffset, int endOffset) throws IOException {\n    Token nextToken = ts.next(reusableToken);\n    assertNotNull(nextToken);\n    assertEquals(text, nextToken.term());\n    assertEquals(startOffset, nextToken.startOffset());\n    assertEquals(endOffset, nextToken.endOffset());\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0dda87e5ad7246b25d0da56a16ead95360499d86","date":1249273990,"type":4,"author":"Michael Busch","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/analyzers/common/src/test/org/apache/lucene/analysis/miscellaneous/TestPrefixAwareTokenFilter#assertNext(TokenStream,Token,String,int,int).mjava","sourceNew":null,"sourceOld":"  private Token assertNext(TokenStream ts, final Token reusableToken, String text, int startOffset, int endOffset) throws IOException {\n    Token nextToken = ts.next(reusableToken);\n    assertNotNull(nextToken);\n    assertEquals(text, nextToken.term());\n    assertEquals(startOffset, nextToken.startOffset());\n    assertEquals(endOffset, nextToken.endOffset());\n    return nextToken;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0dda87e5ad7246b25d0da56a16ead95360499d86":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0dda87e5ad7246b25d0da56a16ead95360499d86"]},"commit2Childs":{"dd745d580729e528151b58aeda87ef82f1b95c9b":["0dda87e5ad7246b25d0da56a16ead95360499d86"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dd745d580729e528151b58aeda87ef82f1b95c9b"],"0dda87e5ad7246b25d0da56a16ead95360499d86":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}