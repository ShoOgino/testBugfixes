{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader#HeapPointReader(byte[],int,int,int).mjava","commits":[{"id":"c7f06758793500ca773d0df1037290e6e404fb33","date":1562230223,"type":1,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader#HeapPointReader(byte[],int,int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader#HeapPointReader(byte[],int,int[],int,int).mjava","sourceNew":"  public HeapPointReader(byte[] block, int packedBytesLength, int start, int end) {\n    this.block = block;\n    curRead = start-1;\n    this.end = end;\n    this.packedBytesLength = packedBytesLength;\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    if (start < end) {\n      this.pointValue = new HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      this.pointValue = null;\n    }\n  }\n\n","sourceOld":"  public HeapPointReader(byte[] block, int packedBytesLength, int[] docIDs, int start, int end) {\n    this.block = block;\n    this.docIDs = docIDs;\n    curRead = start-1;\n    this.end = end;\n    this.packedBytesLength = packedBytesLength;\n    if (start < end) {\n      this.pointValue = new HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      this.pointValue = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb94bf667d51f9c390c99d97afb36b7caab6b6e9","date":1599548621,"type":5,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader#HeapPointReader(BKDConfig,byte[],int,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/HeapPointReader#HeapPointReader(byte[],int,int,int).mjava","sourceNew":"  public HeapPointReader(BKDConfig config, byte[] block, int start, int end) {\n    this.block = block;\n    curRead = start-1;\n    this.end = end;\n    this.config = config;\n    if (start < end) {\n      this.pointValue = new HeapPointValue(config, block);\n    } else {\n      //no values\n      this.pointValue = null;\n    }\n  }\n\n","sourceOld":"  public HeapPointReader(byte[] block, int packedBytesLength, int start, int end) {\n    this.block = block;\n    curRead = start-1;\n    this.end = end;\n    this.packedBytesLength = packedBytesLength;\n    this.packedBytesDocIDLength = packedBytesLength + Integer.BYTES;\n    if (start < end) {\n      this.pointValue = new HeapPointValue(block, packedBytesLength);\n    } else {\n      //no values\n      this.pointValue = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7f06758793500ca773d0df1037290e6e404fb33":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["c7f06758793500ca773d0df1037290e6e404fb33"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"]},"commit2Childs":{"c7f06758793500ca773d0df1037290e6e404fb33":["bb94bf667d51f9c390c99d97afb36b7caab6b6e9"],"bb94bf667d51f9c390c99d97afb36b7caab6b6e9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c7f06758793500ca773d0df1037290e6e404fb33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}