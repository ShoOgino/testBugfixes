{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","commits":[{"id":"653128722fb3b4713ac331c621491a93f34a4a22","date":1479841816,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["9adc5a58a04a7b94df8ff4cc12d3e06916c47a22"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9adc5a58a04a7b94df8ff4cc12d3e06916c47a22","date":1480087440,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","sourceNew":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              // For single segment merge we cannot infer if the segment is already sorted or not.\n              if (mergeState.docMaps.length > 1) {\n                assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              }\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","bugFix":["653128722fb3b4713ac331c621491a93f34a4a22"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b","date":1480143306,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","sourceNew":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              // For single segment merge we cannot infer if the segment is already sorted or not.\n              if (mergeState.docMaps.length > 1) {\n                assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              }\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","sourceOld":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexSorting.AssertingNeedsIndexSortCodec#pointsFormat().mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public PointsFormat pointsFormat() {\n      final PointsFormat pf = delegate.pointsFormat();\n      return new PointsFormat() {\n        @Override\n        public PointsWriter fieldsWriter(SegmentWriteState state) throws IOException {\n          final PointsWriter writer = pf.fieldsWriter(state);\n          return new PointsWriter() {\n            @Override\n            public void merge(MergeState mergeState) throws IOException {\n              // For single segment merge we cannot infer if the segment is already sorted or not.\n              if (mergeState.docMaps.length > 1) {\n                assertEquals(needsIndexSort, mergeState.needsIndexSort);\n              }\n              ++ numCalls;\n              writer.merge(mergeState);\n            }\n\n            @Override\n            public void writeField(FieldInfo fieldInfo, PointsReader values) throws IOException {\n              writer.writeField(fieldInfo, values);\n            }\n\n            @Override\n            public void finish() throws IOException {\n              writer.finish();\n            }\n\n            @Override\n            public void close() throws IOException {\n              writer.close();\n            }\n          };\n        }\n\n        @Override\n        public PointsReader fieldsReader(SegmentReadState state) throws IOException {\n          return pf.fieldsReader(state);\n        }\n      };\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9adc5a58a04a7b94df8ff4cc12d3e06916c47a22":["653128722fb3b4713ac331c621491a93f34a4a22"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b":["653128722fb3b4713ac331c621491a93f34a4a22","9adc5a58a04a7b94df8ff4cc12d3e06916c47a22"],"653128722fb3b4713ac331c621491a93f34a4a22":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"]},"commit2Childs":{"9adc5a58a04a7b94df8ff4cc12d3e06916c47a22":["55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["727bb765ff2542275f6d31f67be18d7104bae148","653128722fb3b4713ac331c621491a93f34a4a22"],"55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"653128722fb3b4713ac331c621491a93f34a4a22":["9adc5a58a04a7b94df8ff4cc12d3e06916c47a22","55b1fe7b6e19ce99f7f02662b4126e0b810ebb1b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}