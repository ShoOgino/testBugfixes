{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","commits":[{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction(UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher).process( this );\n  }\n\n","sourceOld":"  /** \n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher ).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df","date":1425554964,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   *\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the\n   *                      main query searcher, making the changes visible\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return commit(null, waitFlush, waitSearcher);\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction(UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   *\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the\n   *                      main query searcher, making the changes visible\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return commit(null, waitFlush, waitSearcher);\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible \n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction(UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f11db56c6ede29e31c6a46ef65cc63dfa76193a","date":1539817856,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   *\n   * Be very careful when triggering commits from the client side.  Commits are heavy operations and WILL impact Solr\n   * performance when executed too often or too close together.  Instead, consider using 'commitWithin' when adding documents\n   * or rely on your core's/collection's 'autoCommit' settings.\n   *\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the\n   *                      main query searcher, making the changes visible\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return commit(null, waitFlush, waitSearcher);\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   *\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the\n   *                      main query searcher, making the changes visible\n   *\n   * @return an {@link org.apache.solr.client.solrj.response.UpdateResponse} containing the response\n   *         from the server\n   *\n   * @throws IOException If there is a low-level I/O error.\n   * @throws SolrServerException if there is an error on the server\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher) throws SolrServerException, IOException {\n    return commit(null, waitFlush, waitSearcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["bafca15d8e408346a67f4282ad1143b88023893b","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4f11db56c6ede29e31c6a46ef65cc63dfa76193a":["7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4f11db56c6ede29e31c6a46ef65cc63dfa76193a"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bafca15d8e408346a67f4282ad1143b88023893b"],"4f11db56c6ede29e31c6a46ef65cc63dfa76193a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bafca15d8e408346a67f4282ad1143b88023893b":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7ca08c071cb75a8796c36ae6a1c90d7473c2a6df"],"7ca08c071cb75a8796c36ae6a1c90d7473c2a6df":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4f11db56c6ede29e31c6a46ef65cc63dfa76193a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}