{"path":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","commits":[{"id":"d14ffaac9c4a4a2c750bf0cd956506802561e062","date":1402602036,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c6f080a2ab37c464dd98db173f6cbf10dc74f211","date":1402946779,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":["a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb","date":1457059932,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":["770342641f7b505eaa8dccdc666158bff2419109"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return LegacyNumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableFloatBits((int) in.longValue());\n          }\n        };\n      case DOUBLE:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableDoubleBits(in.longValue());\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableFloatBits((int) in.longValue());\n          }\n        };\n      case DOUBLE:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableDoubleBits(in.longValue());\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d217880fb207e1a26143863d06cf461c7cabeec","date":1475691535,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() throws IOException {\n            return NumericUtils.sortableFloatBits((int) in.longValue());\n          }\n        };\n      case DOUBLE:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() throws IOException {\n            return NumericUtils.sortableDoubleBits(in.longValue());\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableFloatBits((int) in.longValue());\n          }\n        };\n      case DOUBLE:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() {\n            return NumericUtils.sortableDoubleBits(in.longValue());\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/SortedNumericSelector#wrap(SortedNumericDocValues,Type,SortField.Type).mjava","sourceNew":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() throws IOException {\n            return NumericUtils.sortableFloatBits((int) in.longValue());\n          }\n        };\n      case DOUBLE:\n        return new FilterNumericDocValues(view) {\n          @Override\n          public long longValue() throws IOException {\n            return NumericUtils.sortableDoubleBits(in.longValue());\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","sourceOld":"  /** \n   * Wraps a multi-valued SortedNumericDocValues as a single-valued view, using the specified selector \n   * and numericType.\n   */\n  public static NumericDocValues wrap(SortedNumericDocValues sortedNumeric, Type selector, SortField.Type numericType) {\n    if (numericType != SortField.Type.INT &&\n        numericType != SortField.Type.LONG && \n        numericType != SortField.Type.FLOAT &&\n        numericType != SortField.Type.DOUBLE) {\n      throw new IllegalArgumentException(\"numericType must be a numeric type\");\n    }\n    final NumericDocValues view;\n    NumericDocValues singleton = DocValues.unwrapSingleton(sortedNumeric);\n    if (singleton != null) {\n      // it's actually single-valued in practice, but indexed as multi-valued,\n      // so just sort on the underlying single-valued dv directly.\n      // regardless of selector type, this optimization is safe!\n      view = singleton;\n    } else { \n      switch(selector) {\n        case MIN: \n          view = new MinValue(sortedNumeric);\n          break;\n        case MAX:\n          view = new MaxValue(sortedNumeric);\n          break;\n        default: \n          throw new AssertionError();\n      }\n    }\n    // undo the numericutils sortability\n    switch(numericType) {\n      case FLOAT:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableFloatBits((int) view.get(docID));\n          }\n        };\n      case DOUBLE:\n        return new NumericDocValues() {\n          @Override\n          public long get(int docID) {\n            return NumericUtils.sortableDoubleBits(view.get(docID));\n          }\n        };\n      default:\n        return view;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"5d217880fb207e1a26143863d06cf461c7cabeec":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["770342641f7b505eaa8dccdc666158bff2419109","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"770342641f7b505eaa8dccdc666158bff2419109":["d14ffaac9c4a4a2c750bf0cd956506802561e062"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","5d217880fb207e1a26143863d06cf461c7cabeec"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5d217880fb207e1a26143863d06cf461c7cabeec"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","d14ffaac9c4a4a2c750bf0cd956506802561e062"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["5d217880fb207e1a26143863d06cf461c7cabeec"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"5d217880fb207e1a26143863d06cf461c7cabeec":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c6f080a2ab37c464dd98db173f6cbf10dc74f211":[],"770342641f7b505eaa8dccdc666158bff2419109":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","a0e7cdd0facd912df00ec53365f98e7c54d6c9bb"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7cdd0facd912df00ec53365f98e7c54d6c9bb":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"d14ffaac9c4a4a2c750bf0cd956506802561e062":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","770342641f7b505eaa8dccdc666158bff2419109"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c6f080a2ab37c464dd98db173f6cbf10dc74f211","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}