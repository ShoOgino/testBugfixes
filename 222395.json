{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","commits":[{"id":"04a4a94db1eb59c8583adb166acfe686a031bedc","date":1230622637,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segement to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","sourceNew":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","sourceOld":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segement to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/geometry/shape/LineSegment#distance(Point2D,Point2D).mjava","sourceNew":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","sourceOld":"  /**\n   * Finds the distance of a specified point from the line segment and the\n   * closest point on the segment to the specified point.\n   * \n   * @param P\n   *            Test point.\n   * @param closestPt\n   *            (Return) Closest point on the segment to c.\n   * \n   * @return Returns the distance from P to the closest point on the segment.\n   */\n  public double distance(Point2D P, Point2D /* out */closestPt) {\n    if (closestPt == null)\n      closestPt = new Point2D();\n\n    // Construct vector v (AB) and w (AP)\n    Vector2D v = new Vector2D(A, B);\n    Vector2D w = new Vector2D(A, P);\n\n    // Numerator of the component of w onto v. If <= 0 then A\n    // is the closest point. By separating into the numerator\n    // and denominator of the component we avoid a division unless\n    // it is necessary.\n    double n = w.dot(v);\n    if (n <= 0.0f) {\n      closestPt.set(A);\n      return w.norm();\n    }\n\n    // Get the denominator of the component. If the component >= 1\n    // (d <= n) then point B is the closest point\n    double d = v.dot(v);\n    if (d <= n) {\n      closestPt.set(B);\n      return new Vector2D(B, P).norm();\n    }\n\n    // Closest point is along the segment. The point is the projection of\n    // w onto v.\n    closestPt.set(v.mult(n / d));\n    closestPt.add(A);\n    return new Vector2D(closestPt, P).norm();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"04a4a94db1eb59c8583adb166acfe686a031bedc":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["04a4a94db1eb59c8583adb166acfe686a031bedc"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}