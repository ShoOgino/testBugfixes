{"path":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","commits":[{"id":"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78","date":1360669163,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length == 0) {\n        continue; // no associations for this document\n      }\n\n      // aggreate float association values for ordinals\n      int bytesUpto = bytes.offset + bytes.length;\n      int pos = bytes.offset;\n      while (pos < bytesUpto) {\n        int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n        \n        int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n\n        values[ordinal] += Float.intBitsToFloat(value);\n      }\n      \n      ++doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["84be3657a3c5fda07efa8c78a5c01950e0a17cfb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","date":1360780178,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length == 0) {\n        continue; // no associations for this document\n      }\n\n      // aggreate float association values for ordinals\n      int bytesUpto = bytes.offset + bytes.length;\n      int pos = bytes.offset;\n      while (pos < bytesUpto) {\n        int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n        \n        int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n\n        values[ordinal] += Float.intBitsToFloat(value);\n      }\n      \n      ++doc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84be3657a3c5fda07efa8c78a5c01950e0a17cfb","date":1375192418,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length > 0) {\n        // aggreate float association values for ordinals\n        int bytesUpto = bytes.offset + bytes.length;\n        int pos = bytes.offset;\n        while (pos < bytesUpto) {\n          int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          values[ordinal] += Float.intBitsToFloat(value);\n        }\n      }\n      ++doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length == 0) {\n        continue; // no associations for this document\n      }\n\n      // aggreate float association values for ordinals\n      int bytesUpto = bytes.offset + bytes.length;\n      int pos = bytes.offset;\n      while (pos < bytesUpto) {\n        int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n        \n        int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n\n        values[ordinal] += Float.intBitsToFloat(value);\n      }\n      \n      ++doc;\n    }\n  }\n\n","bugFix":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length > 0) {\n        // aggreate float association values for ordinals\n        int bytesUpto = bytes.offset + bytes.length;\n        int pos = bytes.offset;\n        while (pos < bytesUpto) {\n          int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          values[ordinal] += Float.intBitsToFloat(value);\n        }\n      }\n      ++doc;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length == 0) {\n        continue; // no associations for this document\n      }\n\n      // aggreate float association values for ordinals\n      int bytesUpto = bytes.offset + bytes.length;\n      int pos = bytes.offset;\n      while (pos < bytesUpto) {\n        int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n        \n        int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n            | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n\n        values[ordinal] += Float.intBitsToFloat(value);\n      }\n      \n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d33e19a97046248623a7591aeaa6547233fd15e2","date":1385424777,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length > 0) {\n        // aggreate float association values for ordinals\n        int bytesUpto = bytes.offset + bytes.length;\n        int pos = bytes.offset;\n        while (pos < bytesUpto) {\n          int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          values[ordinal] += Float.intBitsToFloat(value);\n        }\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/associations/SumFloatAssociationFacetsAggregator#aggregate(MatchingDocs,CategoryListParams,FacetArrays).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void aggregate(MatchingDocs matchingDocs, CategoryListParams clp, FacetArrays facetArrays) throws IOException {\n    BinaryDocValues dv = matchingDocs.context.reader().getBinaryDocValues(clp.field + CategoryFloatAssociation.ASSOCIATION_LIST_ID);\n    if (dv == null) {\n      return; // no float associations in this reader\n    }\n    \n    final int length = matchingDocs.bits.length();\n    final float[] values = facetArrays.getFloatArray();\n    int doc = 0;\n    while (doc < length && (doc = matchingDocs.bits.nextSetBit(doc)) != -1) {\n      dv.get(doc, bytes);\n      if (bytes.length > 0) {\n        // aggreate float association values for ordinals\n        int bytesUpto = bytes.offset + bytes.length;\n        int pos = bytes.offset;\n        while (pos < bytesUpto) {\n          int ordinal = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          int value = ((bytes.bytes[pos++] & 0xFF) << 24) | ((bytes.bytes[pos++] & 0xFF) << 16)\n              | ((bytes.bytes[pos++] & 0xFF) <<  8) | (bytes.bytes[pos++] & 0xFF);\n          \n          values[ordinal] += Float.intBitsToFloat(value);\n        }\n      }\n      ++doc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d33e19a97046248623a7591aeaa6547233fd15e2":["84be3657a3c5fda07efa8c78a5c01950e0a17cfb"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"84be3657a3c5fda07efa8c78a5c01950e0a17cfb":["2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["84be3657a3c5fda07efa8c78a5c01950e0a17cfb","d33e19a97046248623a7591aeaa6547233fd15e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"d33e19a97046248623a7591aeaa6547233fd15e2":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","2d37ef5db468b4f3ae89b17062b0b56b20dd2e78"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"84be3657a3c5fda07efa8c78a5c01950e0a17cfb":["d33e19a97046248623a7591aeaa6547233fd15e2","3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2d37ef5db468b4f3ae89b17062b0b56b20dd2e78":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","84be3657a3c5fda07efa8c78a5c01950e0a17cfb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["6b381f8de0e13c64eb8faa2a93732f6b95e3d6cb","8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}