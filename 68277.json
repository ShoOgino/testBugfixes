{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"/dev/null","sourceNew":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    this.eventType = eventType;\n    this.name = name;\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    this.eventType = eventType;\n    this.name = name;\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","sourceOld":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrCloudManager dataProvider) {\n    this.eventType = eventType;\n    this.name = name;\n    this.dataProvider = dataProvider;\n    this.stateManager = dataProvider.getDistribStateManager();\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d","date":1522763990,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#configure(SolrResourceLoader,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/TriggerBase#TriggerBase(TriggerEventType,String,Map[String,Object],SolrResourceLoader,SolrCloudManager).mjava","sourceNew":"  @Override\n  public void configure(SolrResourceLoader loader, SolrCloudManager cloudManager, Map<String, Object> properties) throws TriggerValidationException {\n    this.cloudManager = cloudManager;\n    this.loader = loader;\n    this.stateManager = cloudManager.getDistribStateManager();\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, Object>> o = (List<Map<String, Object>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, Object> map : o) {\n        TriggerAction action = null;\n        try {\n          action = loader.newInstance((String)map.get(\"class\"), TriggerAction.class);\n        } catch (Exception e) {\n          throw new TriggerValidationException(\"action\", \"exception creating action \" + map + \": \" + e.toString());\n        }\n        action.configure(loader, cloudManager, map);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n\n\n    Map<String, String> results = new HashMap<>();\n    TriggerUtils.checkProperties(this.properties, results, requiredProperties, validProperties);\n    if (!results.isEmpty()) {\n      throw new TriggerValidationException(name, results);\n    }\n  }\n\n","sourceOld":"  protected TriggerBase(TriggerEventType eventType, String name, Map<String, Object> properties, SolrResourceLoader loader, SolrCloudManager cloudManager) {\n    this.eventType = eventType;\n    this.name = name;\n    this.cloudManager = cloudManager;\n    this.stateManager = cloudManager.getDistribStateManager();\n    if (properties != null) {\n      this.properties.putAll(properties);\n    }\n    this.enabled = Boolean.parseBoolean(String.valueOf(this.properties.getOrDefault(\"enabled\", \"true\")));\n    this.waitForSecond = ((Number) this.properties.getOrDefault(\"waitFor\", -1L)).intValue();\n    List<Map<String, String>> o = (List<Map<String, String>>) properties.get(\"actions\");\n    if (o != null && !o.isEmpty()) {\n      actions = new ArrayList<>(3);\n      for (Map<String, String> map : o) {\n        TriggerAction action = loader.newInstance(map.get(\"class\"), TriggerAction.class);\n        actions.add(action);\n      }\n    } else {\n      actions = Collections.emptyList();\n    }\n\n    try {\n      if (!stateManager.hasData(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH)) {\n        stateManager.makePath(ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH);\n      }\n    } catch (AlreadyExistsException e) {\n      // ignore\n    } catch (InterruptedException | KeeperException | IOException e) {\n      LOG.warn(\"Exception checking ZK path \" + ZkStateReader.SOLR_AUTOSCALING_TRIGGER_STATE_PATH, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"]},"commit2Childs":{"c3f354f2175f861ee625bb3c9572d53b77cd8545":["cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"cd44b11f5d211a0b76c6bc536f38d1eb1fe00c8d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}