{"path":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","commits":[{"id":"48bedd31c61edafb8baaff4bcbcac19449fb7c3a","date":1251468037,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","pathOld":"contrib/miscellaneous/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","sourceNew":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convincience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","sourceOld":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convincience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"add7d922e63099fbce8f0a1b31216df7ef5067f1","date":1252002701,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","sourceNew":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convenience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","sourceOld":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convincience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","pathOld":"contrib/misc/src/java/org/apache/lucene/misc/SweetSpotSimilarity#hyperbolicTf(float).mjava","sourceNew":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convenience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","sourceOld":"  /**\n   * Uses a hyperbolic tangent function that allows for a hard max...\n   *\n   * <code>\n   * tf(x)=min+(max-min)/2*(((base**(x-xoffset)-base**-(x-xoffset))/(base**(x-xoffset)+base**-(x-xoffset)))+1)\n   * </code>\n   *\n   * <p>\n   * This code is provided as a convenience for subclasses that want\n   * to use a hyperbolic tf function.\n   * </p>\n   *\n   * @see #setHyperbolicTfFactors\n   */\n  public float hyperbolicTf(float freq) {\n    if (0.0f == freq) return 0.0f;\n\n    final float min = tf_hyper_min;\n    final float max = tf_hyper_max;\n    final double base = tf_hyper_base;\n    final float xoffset = tf_hyper_xoffset;\n    final double x = (double)(freq - xoffset);\n  \n    final float result = min +\n      (float)(\n              (max-min) / 2.0f\n              *\n              (\n               ( ( Math.pow(base,x) - Math.pow(base,-x) )\n                 / ( Math.pow(base,x) + Math.pow(base,-x) )\n                 )\n               + 1.0d\n               )\n              );\n\n    return Float.isNaN(result) ? max : result;\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["add7d922e63099fbce8f0a1b31216df7ef5067f1"]},"commit2Childs":{"48bedd31c61edafb8baaff4bcbcac19449fb7c3a":["add7d922e63099fbce8f0a1b31216df7ef5067f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48bedd31c61edafb8baaff4bcbcac19449fb7c3a"],"add7d922e63099fbce8f0a1b31216df7ef5067f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}