{"path":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ffe681f212e5073c69955b4ad22946794c84940","date":1560182863,"type":3,"author":"Koen De Groote","isMerge":false,"pathNew":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","pathOld":"lucene/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecTopicsReader#read(BufferedReader,String,StringBuilder,boolean,boolean).mjava","sourceNew":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep).append(line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep).append(line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","sourceOld":"  // read until finding a line that starts with the specified prefix\n  private StringBuilder read (BufferedReader reader, String prefix, StringBuilder sb, boolean collectMatchLine, boolean collectAll) throws IOException {\n    sb = (sb==null ? new StringBuilder() : sb);\n    String sep = \"\";\n    while (true) {\n      String line = reader.readLine();\n      if (line==null) {\n        return null;\n      }\n      if (line.startsWith(prefix)) {\n        if (collectMatchLine) {\n          sb.append(sep+line);\n          sep = newline;\n        }\n        break;\n      }\n      if (collectAll) {\n        sb.append(sep+line);\n        sep = newline;\n      }\n    }\n    //System.out.println(\"read: \"+sb);\n    return sb;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2ffe681f212e5073c69955b4ad22946794c84940":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2ffe681f212e5073c69955b4ad22946794c84940"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["2ffe681f212e5073c69955b4ad22946794c84940"],"2ffe681f212e5073c69955b4ad22946794c84940":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}