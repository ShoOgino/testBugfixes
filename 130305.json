{"path":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59a0020b413d44dd79d85d7a66ed5004265fb453","date":1371758877,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"37a0f60745e53927c4c876cfe5b5a58170f0646c","date":1373994005,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.DEFAULT_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n    cache.getBytes(readerX, \"theByte\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87d6f9603307ae2ad642fb01deedf031320fd0c3","date":1377877563,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\");\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":["abf0f6e62f1b52e3c166ff00d766463e0da8ef96"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","date":1399816179,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":["8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02","8c146731a64debc22c115bbf11ee1a060aa7ea02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":5,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker#testInsanity1().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestFieldCacheSanityChecker#testInsanity1().mjava","sourceNew":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getNumerics(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","sourceOld":"  public void testInsanity1() throws IOException {\n    FieldCache cache = FieldCache.DEFAULT;\n    cache.purgeAllCaches();\n\n    cache.getInts(readerX, \"theInt\", FieldCache.NUMERIC_UTILS_INT_PARSER, false);\n    cache.getTerms(readerX, \"theInt\", false);\n\n    // // // \n\n    Insanity[] insanity = \n      FieldCacheSanityChecker.checkSanity(cache.getCacheEntries());\n\n    assertEquals(\"wrong number of cache errors\", 1, insanity.length);\n    assertEquals(\"wrong type of cache error\", \n                 InsanityType.VALUEMISMATCH,\n                 insanity[0].getType());\n    assertEquals(\"wrong number of entries in cache error\", 2,\n                 insanity[0].getCacheEntries().length);\n\n    // we expect bad things, don't let tearDown complain about them\n    cache.purgeAllCaches();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","59a0020b413d44dd79d85d7a66ed5004265fb453"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["87d6f9603307ae2ad642fb01deedf031320fd0c3","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"59a0020b413d44dd79d85d7a66ed5004265fb453":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["87d6f9603307ae2ad642fb01deedf031320fd0c3"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["59a0020b413d44dd79d85d7a66ed5004265fb453"],"56572ec06f1407c066d6b7399413178b33176cd8":["87d6f9603307ae2ad642fb01deedf031320fd0c3","93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["93dd449115a9247533e44bab47e8429e5dccbc6d"]},"commit2Childs":{"37a0f60745e53927c4c876cfe5b5a58170f0646c":[],"93dd449115a9247533e44bab47e8429e5dccbc6d":["56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["37a0f60745e53927c4c876cfe5b5a58170f0646c","59a0020b413d44dd79d85d7a66ed5004265fb453"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"59a0020b413d44dd79d85d7a66ed5004265fb453":["37a0f60745e53927c4c876cfe5b5a58170f0646c","87d6f9603307ae2ad642fb01deedf031320fd0c3"],"b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"87d6f9603307ae2ad642fb01deedf031320fd0c3":["93dd449115a9247533e44bab47e8429e5dccbc6d","b70a13d2b73512ad6b204e9ad8fe09ffeeda3c2c","56572ec06f1407c066d6b7399413178b33176cd8"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["37a0f60745e53927c4c876cfe5b5a58170f0646c","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}