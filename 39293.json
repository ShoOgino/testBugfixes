{"path":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","commits":[{"id":"689567084b83b33da797329124fdc88e35fd5740","date":1475014615,"type":0,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"/dev/null","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ac1e7fa558287a811ea07634d815ee7b1c541284","date":1500910922,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"936cdd5882761db3b844afd6f84ab81cbb011a75","date":1500973524,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a52341299179de5479672f7cf518bf4b173f34b3","date":1501079746,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema?wt=json\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema?wt=json\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"03d29de0abdd3a2150c0dabfe1bf98024bbfa367","date":1515464714,"type":3,"author":"Steve Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"errors\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3714bcf66a68a1600e9dd11442fc1b33b62ef088","date":1556832005,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map)ObjectBuilder.getVal(new JSONParser(new StringReader(response)));\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/rest/schema/TestBulkSchemaAPI#testAddIllegalFields().mjava","sourceNew":"  @SuppressWarnings({\"rawtypes\"})\n  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","sourceOld":"  public void testAddIllegalFields() throws Exception {\n    RestTestHarness harness = restTestHarness;\n\n    // 1. Make sure you can't create a new field with an asterisk in its name\n    String newFieldName = \"asterisk*\";\n\n    String payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    String response = harness.post(\"/schema\", json(payload));\n    Map map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n\n    map = getObj(harness, newFieldName, \"fields\");\n    assertNull(newFieldName + \" illegal dynamic field should not have been added to schema\", map);\n\n    // 2. Make sure you get an error when you try to create a field that already exists\n    // Make sure 'wdf_nocase' field exists\n    newFieldName = \"wdf_nocase\";\n    Map m = getObj(harness, newFieldName, \"fields\");\n    assertNotNull(\"'\" + newFieldName + \"' field does not exist in the schema\", m);\n\n    payload = \"{\\n\" +\n        \"    'add-field' : {\\n\" +\n        \"         'name':'\" + newFieldName + \"',\\n\" +\n        \"         'type':'string',\\n\" +\n        \"         'stored':true,\\n\" +\n        \"         'indexed':true\\n\" +\n        \"     }\\n\" +\n        \"}\";\n\n    response = harness.post(\"/schema\", json(payload));\n    map = (Map) fromJSONString(response);\n    assertNotNull(response, map.get(\"error\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["a52341299179de5479672f7cf518bf4b173f34b3","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["a52341299179de5479672f7cf518bf4b173f34b3"],"a52341299179de5479672f7cf518bf4b173f34b3":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","689567084b83b33da797329124fdc88e35fd5740"],"936cdd5882761db3b844afd6f84ab81cbb011a75":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","ac1e7fa558287a811ea07634d815ee7b1c541284"],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["b94236357aaa22b76c10629851fe4e376e0cea82"],"689567084b83b33da797329124fdc88e35fd5740":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"ac1e7fa558287a811ea07634d815ee7b1c541284":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["3714bcf66a68a1600e9dd11442fc1b33b62ef088"],"03d29de0abdd3a2150c0dabfe1bf98024bbfa367":["b94236357aaa22b76c10629851fe4e376e0cea82"],"a52341299179de5479672f7cf518bf4b173f34b3":["b94236357aaa22b76c10629851fe4e376e0cea82","03d29de0abdd3a2150c0dabfe1bf98024bbfa367"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ac1e7fa558287a811ea07634d815ee7b1c541284"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","689567084b83b33da797329124fdc88e35fd5740","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"936cdd5882761db3b844afd6f84ab81cbb011a75":[],"3714bcf66a68a1600e9dd11442fc1b33b62ef088":["e98520789adb1d5ad05afb4956eca0944a929688"],"689567084b83b33da797329124fdc88e35fd5740":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ac1e7fa558287a811ea07634d815ee7b1c541284":["a52341299179de5479672f7cf518bf4b173f34b3","936cdd5882761db3b844afd6f84ab81cbb011a75"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["936cdd5882761db3b844afd6f84ab81cbb011a75","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}