{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","commits":[{"id":"1e5f642aea415d0cbee35d1b3208b193a62d7f15","date":1439490669,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"/dev/null","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.updateClusterState();\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.updateClusterState();\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        state = writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","date":1457343183,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.updateClusterState();\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.updateClusterState();\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        state = writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0158ced21948b6626f733c1c42c1e18d94449789","date":1462994341,"type":3,"author":"Bartosz Krasiński","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4eb4db7cdfde55d664b5b0c87041ec80de8178cf","date":1467712003,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      log.info(\"Cluster state: {}\", state);\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ac6407286ebd80d6754a6586316e11c06f37b3","date":1469634359,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        // enqueue an update to stateFormat2 collection such that update is pending\n        state = writer.enqueueUpdate(state, c2, null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // enqueue a stateFormat=1 collection which should cause a flush\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, c1, null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), c2, null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      log.info(\"Cluster state: {}\", state);\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf","0158ced21948b6626f733c1c42c1e18d94449789","1e5f642aea415d0cbee35d1b3208b193a62d7f15","7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"bugIntro":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        // enqueue an update to stateFormat2 collection such that update is pending\n        state = writer.enqueueUpdate(state, c2, null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // enqueue a stateFormat=1 collection which should cause a flush\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, c1, null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), c2, null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      log.info(\"Cluster state: {}\", state);\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        // enqueue an update to stateFormat2 collection such that update is pending\n        state = writer.enqueueUpdate(state, c2, null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // enqueue a stateFormat=1 collection which should cause a flush\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, c1, null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), c2, null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n      ClusterState state = reader.getClusterState();\n\n      // create collection 2 with stateFormat = 2\n      ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n          new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n      state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n      assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n      int sharedClusterStateVersion = state.getZkClusterStateVersion();\n      int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n      // Simulate an external modification to /collections/c2/state.json\n      byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n      zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n      assertTrue(state.hasCollection(\"c2\"));\n      assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n      assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n      // enqueue an update to stateFormat2 collection such that update is pending\n      state = writer.enqueueUpdate(state, c2, null);\n      assertTrue(writer.hasPendingUpdates());\n\n      // get the most up-to-date state\n      reader.forceUpdateCollection(\"c2\");\n      state = reader.getClusterState();\n\n      // enqueue a stateFormat=1 collection which should cause a flush\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n      try {\n        writer.enqueueUpdate(state, c1, null);\n        fail(\"Enqueue should not have succeeded\");\n      } catch (KeeperException.BadVersionException bve) {\n        // expected\n      }\n\n      try {\n        writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        fail(\"enqueueUpdate after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n\n      try {\n        writer.writePendingUpdates();\n        fail(\"writePendingUpdates after BadVersionException should not have suceeded\");\n      } catch (IllegalStateException e) {\n        // expected\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(reader.getClusterState(), c2, null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        // enqueue an update to stateFormat2 collection such that update is pending\n        state = writer.enqueueUpdate(state, c2, null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // enqueue a stateFormat=1 collection which should cause a flush\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, c1, null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), c2, null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModificationToStateFormat2() throws Exception {\n    Path zkDir = createTempDir(\"testExternalModificationToStateFormat2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    String zkDir = createTempDir(\"testExternalModificationToStateFormat2\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":5,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModification().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testExternalModificationToStateFormat2().mjava","sourceNew":"  public void testExternalModification() throws Exception {\n    Path zkDir = createTempDir(\"testExternalModification\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int c2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(c2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testExternalModificationToStateFormat2() throws Exception {\n    Path zkDir = createTempDir(\"testExternalModificationToStateFormat2\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c2\", true);\n\n        ClusterState state = reader.getClusterState();\n\n        // create collection 2 with stateFormat = 2\n        ZkWriteCommand c2 = new ZkWriteCommand(\"c2\",\n            new DocCollection(\"c2\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.getCollectionPath(\"c2\")));\n        state = writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertFalse(writer.hasPendingUpdates()); // first write is flushed immediately\n\n        int sharedClusterStateVersion = state.getZkClusterStateVersion();\n        int stateFormat2Version = state.getCollection(\"c2\").getZNodeVersion();\n\n        // Simulate an external modification to /collections/c2/state.json\n        byte[] data = zkClient.getData(ZkStateReader.getCollectionPath(\"c2\"), null, null, true);\n        zkClient.setData(ZkStateReader.getCollectionPath(\"c2\"), data, true);\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n        log.info(\"Cluster state: {}\", state);\n        assertTrue(state.hasCollection(\"c2\"));\n        assertEquals(sharedClusterStateVersion, (int) state.getZkClusterStateVersion());\n        assertEquals(stateFormat2Version + 1, state.getCollection(\"c2\").getZNodeVersion());\n\n        writer.enqueueUpdate(state, Collections.singletonList(c2), null);\n        assertTrue(writer.hasPendingUpdates());\n\n        // get the most up-to-date state\n        reader.forceUpdateCollection(\"c2\");\n        state = reader.getClusterState();\n\n        // Will trigger flush\n        Thread.sleep(Overseer.STATE_UPDATE_DELAY+100);\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.CLUSTER_STATE));\n\n        try {\n          writer.enqueueUpdate(state, Collections.singletonList(c1), null);\n          fail(\"Enqueue should not have succeeded\");\n        } catch (KeeperException.BadVersionException bve) {\n          // expected\n        }\n\n        try {\n          writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c2), null);\n          fail(\"enqueueUpdate after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n\n        try {\n          writer.writePendingUpdates();\n          fail(\"writePendingUpdates after BadVersionException should not have succeeded\");\n        } catch (IllegalStateException e) {\n          // expected\n        }\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f","0158ced21948b6626f733c1c42c1e18d94449789"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf"],"4eb4db7cdfde55d664b5b0c87041ec80de8178cf":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"0158ced21948b6626f733c1c42c1e18d94449789":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"1e5f642aea415d0cbee35d1b3208b193a62d7f15":["7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f"],"7c3f4fed97dabfe4bcddc3566fd190a7c909bc4f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","0158ced21948b6626f733c1c42c1e18d94449789"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4eb4db7cdfde55d664b5b0c87041ec80de8178cf"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1e5f642aea415d0cbee35d1b3208b193a62d7f15"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4eb4db7cdfde55d664b5b0c87041ec80de8178cf":["a7ac6407286ebd80d6754a6586316e11c06f37b3","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"0158ced21948b6626f733c1c42c1e18d94449789":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}