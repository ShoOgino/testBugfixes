{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","commits":[{"id":"1eee4175312c41f89aa23427f9e4edfc00deeaac","date":1446373190,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int dimensionCount = fi.getDimensionCount();\n        output.writeVInt(dimensionCount);\n        if (dimensionCount != 0) {\n          output.writeVInt(fi.getDimensionNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int dimensionCount = fi.getDimensionCount();\n        output.writeVInt(dimensionCount);\n        if (dimensionCount != 0) {\n          output.writeVInt(fi.getDimensionNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eeba0a4d0845889a402dd225793d62f009d029c9","date":1527938093,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab548c8f96022b4780f7500a30b19b4f4a5feeb6","date":1527940044,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7e4ca6dc9612ff741d8713743e2bccfae5eadac","date":1528093718,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f592209545c71895260367152601e9200399776d","date":1528238935,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        output.writeVInt(fi.getPointDataDimensionCount());\n        if (fi.getPointDataDimensionCount() != 0) {\n          output.writeVInt(fi.getPointIndexDimensionCount());\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        int pointDimensionCount = fi.getPointDimensionCount();\n        output.writeVInt(pointDimensionCount);\n        if (pointDimensionCount != 0) {\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60FieldInfosFormat#write(Directory,SegmentInfo,String,FieldInfos,IOContext).mjava","sourceNew":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        output.writeVInt(fi.getPointDimensionCount());\n        if (fi.getPointDimensionCount() != 0) {\n          output.writeVInt(fi.getPointIndexDimensionCount());\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","sourceOld":"  @Override\n  public void write(Directory directory, SegmentInfo segmentInfo, String segmentSuffix, FieldInfos infos, IOContext context) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentInfo.name, segmentSuffix, EXTENSION);\n    try (IndexOutput output = directory.createOutput(fileName, context)) {\n      CodecUtil.writeIndexHeader(output, Lucene60FieldInfosFormat.CODEC_NAME, Lucene60FieldInfosFormat.FORMAT_CURRENT, segmentInfo.getId(), segmentSuffix);\n      output.writeVInt(infos.size());\n      for (FieldInfo fi : infos) {\n        fi.checkConsistency();\n\n        output.writeString(fi.name);\n        output.writeVInt(fi.number);\n\n        byte bits = 0x0;\n        if (fi.hasVectors()) bits |= STORE_TERMVECTOR;\n        if (fi.omitsNorms()) bits |= OMIT_NORMS;\n        if (fi.hasPayloads()) bits |= STORE_PAYLOADS;\n        if (fi.isSoftDeletesField()) bits |= SOFT_DELETES_FIELD;\n        output.writeByte(bits);\n\n        output.writeByte(indexOptionsByte(fi.getIndexOptions()));\n\n        // pack the DV type and hasNorms in one byte\n        output.writeByte(docValuesByte(fi.getDocValuesType()));\n        output.writeLong(fi.getDocValuesGen());\n        output.writeMapOfStrings(fi.attributes());\n        output.writeVInt(fi.getPointDataDimensionCount());\n        if (fi.getPointDataDimensionCount() != 0) {\n          output.writeVInt(fi.getPointIndexDimensionCount());\n          output.writeVInt(fi.getPointNumBytes());\n        }\n      }\n      CodecUtil.writeFooter(output);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["eeba0a4d0845889a402dd225793d62f009d029c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"eeba0a4d0845889a402dd225793d62f009d029c9":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f592209545c71895260367152601e9200399776d":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6","b7e4ca6dc9612ff741d8713743e2bccfae5eadac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["b70042a8a492f7054d480ccdd2be9796510d4327","eeba0a4d0845889a402dd225793d62f009d029c9"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"ab548c8f96022b4780f7500a30b19b4f4a5feeb6":["b7e4ca6dc9612ff741d8713743e2bccfae5eadac","f592209545c71895260367152601e9200399776d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1eee4175312c41f89aa23427f9e4edfc00deeaac"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"1eee4175312c41f89aa23427f9e4edfc00deeaac":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"b7e4ca6dc9612ff741d8713743e2bccfae5eadac":["f6652c943595e92c187ee904c382863013eae28f","b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d"],"eeba0a4d0845889a402dd225793d62f009d029c9":["ab548c8f96022b4780f7500a30b19b4f4a5feeb6"],"f592209545c71895260367152601e9200399776d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b70042a8a492f7054d480ccdd2be9796510d4327","f592209545c71895260367152601e9200399776d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}