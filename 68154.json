{"path":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(StoredDocument,String,int,int,SolrQueryRequest).mjava","commits":[{"id":"1ba83a7997a13459d756c436cc76ee2570d2128f","date":1432215022,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(StoredDocument,String,int,int,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(SolrQueryRequest,StoredDocument,String,int,int).mjava","sourceNew":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(StoredDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    List<String> result = new ArrayList<>();\n    for (StorableField thisField : doc.getFields()) {\n      if (! thisField.name().equals(fieldName)) {\n        continue;\n      }\n      String value = thisField.stringValue();\n      result.add(value);\n\n      maxCharsToAnalyze -= value.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(SolrQueryRequest req, StoredDocument doc, String fieldName,\n                                        int maxValues, int maxCharsToAnalyze) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    List<String> result = new ArrayList<>();\n    for (StorableField thisField : doc.getFields()) {\n      if (! thisField.name().equals(fieldName)) {\n        continue;\n      }\n      String value = thisField.stringValue();\n      result.add(value);\n\n      maxCharsToAnalyze -= value.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c","date":1453060490,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(Document,String,int,int,SolrQueryRequest).mjava","pathOld":"solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter#getFieldValues(StoredDocument,String,int,int,SolrQueryRequest).mjava","sourceNew":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(Document doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    List<String> result = new ArrayList<>();\n    for (IndexableField thisField : doc.getFields()) {\n      if (! thisField.name().equals(fieldName)) {\n        continue;\n      }\n      String value = thisField.stringValue();\n      result.add(value);\n\n      maxCharsToAnalyze -= value.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","sourceOld":"  /** Fetches field values to highlight. If the field value should come from an atypical place (or another aliased\n   * field name, then a subclass could override to implement that.\n   */\n  protected List<String> getFieldValues(StoredDocument doc, String fieldName, int maxValues, int maxCharsToAnalyze,\n                                        SolrQueryRequest req) {\n    // Collect the Fields we will examine (could be more than one if multi-valued)\n    List<String> result = new ArrayList<>();\n    for (StorableField thisField : doc.getFields()) {\n      if (! thisField.name().equals(fieldName)) {\n        continue;\n      }\n      String value = thisField.stringValue();\n      result.add(value);\n\n      maxCharsToAnalyze -= value.length();//we exit early if we'll never get to analyze the value\n      maxValues--;\n      if (maxValues <= 0 || maxCharsToAnalyze <= 0) {\n        break;\n      }\n    }\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1ba83a7997a13459d756c436cc76ee2570d2128f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["1ba83a7997a13459d756c436cc76ee2570d2128f"]},"commit2Childs":{"1ba83a7997a13459d756c436cc76ee2570d2128f":["6654c5f3ec2e4a84ef867c82d4eec872c2372c8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1ba83a7997a13459d756c436cc76ee2570d2128f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6654c5f3ec2e4a84ef867c82d4eec872c2372c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}