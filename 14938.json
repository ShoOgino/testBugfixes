{"path":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","commits":[{"id":"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2","date":1311898374,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["7e4c214a1f904dde76f5611b56d4081533055b3b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPrefixCodedTerms#testRandom().mjava","sourceNew":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","sourceOld":"  public void testRandom() {\n    Set<Term> terms = new TreeSet<Term>();\n    int nterms = atLeast(10000);\n    for (int i = 0; i < nterms; i++) {\n      Term term = new Term(_TestUtil.randomUnicodeString(random, 2), _TestUtil.randomUnicodeString(random));\n      terms.add(term);\n    }    \n    \n    PrefixCodedTerms.Builder b = new PrefixCodedTerms.Builder();\n    for (Term ref: terms) {\n      b.add(ref);\n    }\n    PrefixCodedTerms pb = b.finish();\n    \n    Iterator<Term> expected = terms.iterator();\n    for (Term t : pb) {\n      assertTrue(expected.hasNext());\n      assertEquals(expected.next(), t);\n    }\n    assertFalse(expected.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9fa5ed548a2e7179ad03d6dfef30e19b8c06a8e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}