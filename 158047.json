{"path":"src/test/org/apache/solr/common/util/TestFastInputStream#readChars(InputStream,char[],int,int).mjava","commits":[{"id":"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a","date":1230536366,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/test/org/apache/solr/common/util/TestFastInputStream#readChars(InputStream,char[],int,int).mjava","pathOld":"/dev/null","sourceNew":"  //code copied from NamedListCodec#readChars\n  public static void readChars(InputStream in, char[] buffer, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      int b = in.read();\n      if ((b & 0x80) == 0)\n        buffer[i] = (char) b;\n      else if ((b & 0xE0) != 0xE0) {\n        buffer[i] = (char) (((b & 0x1F) << 6)\n                | (in.read() & 0x3F));\n      } else\n        buffer[i] = (char) (((b & 0x0F) << 12)\n                | ((in.read() & 0x3F) << 6)\n                | (in.read() & 0x3F));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/common/util/TestFastInputStream#readChars(InputStream,char[],int,int).mjava","pathOld":"src/test/org/apache/solr/common/util/TestFastInputStream#readChars(InputStream,char[],int,int).mjava","sourceNew":"  //code copied from NamedListCodec#readChars\n  public static void readChars(InputStream in, char[] buffer, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      int b = in.read();\n      if ((b & 0x80) == 0)\n        buffer[i] = (char) b;\n      else if ((b & 0xE0) != 0xE0) {\n        buffer[i] = (char) (((b & 0x1F) << 6)\n                | (in.read() & 0x3F));\n      } else\n        buffer[i] = (char) (((b & 0x0F) << 12)\n                | ((in.read() & 0x3F) << 6)\n                | (in.read() & 0x3F));\n    }\n  }\n\n","sourceOld":"  //code copied from NamedListCodec#readChars\n  public static void readChars(InputStream in, char[] buffer, int start, int length)\n          throws IOException {\n    final int end = start + length;\n    for (int i = start; i < end; i++) {\n      int b = in.read();\n      if ((b & 0x80) == 0)\n        buffer[i] = (char) b;\n      else if ((b & 0xE0) != 0xE0) {\n        buffer[i] = (char) (((b & 0x1F) << 6)\n                | (in.read() & 0x3F));\n      } else\n        buffer[i] = (char) (((b & 0x0F) << 12)\n                | ((in.read() & 0x3F) << 6)\n                | (in.read() & 0x3F));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["a747fac3a4ebe15c4ae0fdef34be3dea8971c42a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a747fac3a4ebe15c4ae0fdef34be3dea8971c42a":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a747fac3a4ebe15c4ae0fdef34be3dea8971c42a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}