{"path":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","commits":[{"id":"103e2ec175f1aa5629df5bcd34eb1c53055caeb1","date":1268243753,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    \n    // Test Analyzer\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    conf.setAnalyzer(new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(SimpleAnalyzer.class, conf.getAnalyzer().getClass());\n    conf.setAnalyzer(null);\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    \n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    \n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":null,"sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT);\n    \n    // Test Analyzer\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    conf.setAnalyzer(new SimpleAnalyzer(TEST_VERSION_CURRENT));\n    assertEquals(SimpleAnalyzer.class, conf.getAnalyzer().getClass());\n    conf.setAnalyzer(null);\n    assertEquals(WhitespaceAnalyzer.class, conf.getAnalyzer().getClass());\n    \n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    \n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    \n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    \n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0","3971a049eab9d119ba1497d7ee89abc1a9a96278"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterConfig#testInvalidValues().mjava","sourceNew":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    \n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    \n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n  }\n\n","sourceOld":"  @Test\n  public void testInvalidValues() throws Exception {\n    IndexWriterConfig conf = new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT));\n    \n    // Test IndexDeletionPolicy\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(new SnapshotDeletionPolicy(null));\n    assertEquals(SnapshotDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    conf.setIndexDeletionPolicy(null);\n    assertEquals(KeepOnlyLastCommitDeletionPolicy.class, conf.getIndexDeletionPolicy().getClass());\n    \n    // Test MergeScheduler\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(new SerialMergeScheduler());\n    assertEquals(SerialMergeScheduler.class, conf.getMergeScheduler().getClass());\n    conf.setMergeScheduler(null);\n    assertEquals(ConcurrentMergeScheduler.class, conf.getMergeScheduler().getClass());\n\n    // Test Similarity\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n    conf.setSimilarity(new MySimilarity());\n    assertEquals(MySimilarity.class, conf.getSimilarity().getClass());\n    conf.setSimilarity(null);\n    assertTrue(Similarity.getDefault() == conf.getSimilarity());\n\n    // Test IndexingChain\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    conf.setIndexingChain(new MyIndexingChain());\n    assertEquals(MyIndexingChain.class, conf.getIndexingChain().getClass());\n    conf.setIndexingChain(null);\n    assertTrue(DocumentsWriter.defaultIndexingChain == conf.getIndexingChain());\n    \n    try {\n      conf.setMaxBufferedDeleteTerms(0);\n      fail(\"should not have succeeded to set maxBufferedDeleteTerms to 0\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      conf.setMaxBufferedDocs(1);\n      fail(\"should not have succeeded to set maxBufferedDocs to 1\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    try {\n      // Disable both MAX_BUF_DOCS and RAM_SIZE_MB\n      conf.setMaxBufferedDocs(4);\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      conf.setMaxBufferedDocs(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable maxBufferedDocs when ramBufferSizeMB is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n\n    conf.setRAMBufferSizeMB(IndexWriterConfig.DEFAULT_RAM_BUFFER_SIZE_MB);\n    conf.setMaxBufferedDocs(IndexWriterConfig.DEFAULT_MAX_BUFFERED_DOCS);\n    try {\n      conf.setRAMBufferSizeMB(IndexWriterConfig.DISABLE_AUTO_FLUSH);\n      fail(\"should not have succeeded to disable ramBufferSizeMB when maxBufferedDocs is disabled as well\");\n    } catch (IllegalArgumentException e) {\n      // this is expected\n    }\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e52fea2c4081a1e552b98506691990be59503168":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"103e2ec175f1aa5629df5bcd34eb1c53055caeb1":["e52fea2c4081a1e552b98506691990be59503168"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["103e2ec175f1aa5629df5bcd34eb1c53055caeb1"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}