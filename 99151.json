{"path":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","commits":[{"id":"60ba444201d2570214b6fcf1d15600dc1a01f548","date":1313868045,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","pathOld":"/dev/null","sourceNew":"      public SegmentTermsEnum() throws IOException {\n        //if (DEBUG) System.out.println(\"BTTR.init seg=\" + segment);\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int stackOrd=0;stackOrd<stack.length;stackOrd++) {\n          stack[stackOrd] = new Frame(stackOrd);\n        }\n        // Used to hold seek by TermState, or cached seek\n        staticFrame = new Frame(-1);\n\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // Init w/ root block; don't use index since it may\n        // not (and need not) have been loaded\n        //final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n\n        // Empty string prefix must have an output in the index!\n        //assert arc.isFinal();\n\n        currentFrame = staticFrame;\n        final FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        // if (DEBUG) {\n        //   System.out.println(\"init frame state \" + currentFrame.ord);\n        //   printSeekState();\n        // }\n\n        //System.out.println();\n        // computeBlockStats().print(System.out);\n      }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e2297162a22c55456e200caef2cbcb00fe381120","date":1321551342,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","sourceNew":"      public SegmentTermsEnum() throws IOException {\n        //if (DEBUG) System.out.println(\"BTTR.init seg=\" + segment);\n        stack = new Frame[0];\n        \n        // Used to hold seek by TermState, or cached seek\n        staticFrame = new Frame(-1);\n\n        // Init w/ root block; don't use index since it may\n        // not (and need not) have been loaded\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        currentFrame = staticFrame;\n        final FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = staticFrame;\n        //currentFrame = pushFrame(arc, rootCode, 0);\n        //currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        // if (DEBUG) {\n        //   System.out.println(\"init frame state \" + currentFrame.ord);\n        //   printSeekState();\n        // }\n\n        //System.out.println();\n        // computeBlockStats().print(System.out);\n      }\n\n","sourceOld":"      public SegmentTermsEnum() throws IOException {\n        //if (DEBUG) System.out.println(\"BTTR.init seg=\" + segment);\n        in = (IndexInput) BlockTreeTermsReader.this.in.clone();\n        stack = new Frame[5];\n        for(int stackOrd=0;stackOrd<stack.length;stackOrd++) {\n          stack[stackOrd] = new Frame(stackOrd);\n        }\n        // Used to hold seek by TermState, or cached seek\n        staticFrame = new Frame(-1);\n\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        // Init w/ root block; don't use index since it may\n        // not (and need not) have been loaded\n        //final FST.Arc<BytesRef> arc = index.getFirstArc(arcs[0]);\n\n        // Empty string prefix must have an output in the index!\n        //assert arc.isFinal();\n\n        currentFrame = staticFrame;\n        final FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = pushFrame(arc, rootCode, 0);\n        currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        // if (DEBUG) {\n        //   System.out.println(\"init frame state \" + currentFrame.ord);\n        //   printSeekState();\n        // }\n\n        //System.out.println();\n        // computeBlockStats().print(System.out);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader.SegmentTermsEnum#SegmentTermsEnum().mjava","sourceNew":"      public SegmentTermsEnum() throws IOException {\n        //if (DEBUG) System.out.println(\"BTTR.init seg=\" + segment);\n        stack = new Frame[0];\n        \n        // Used to hold seek by TermState, or cached seek\n        staticFrame = new Frame(-1);\n\n        // Init w/ root block; don't use index since it may\n        // not (and need not) have been loaded\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        currentFrame = staticFrame;\n        final FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = staticFrame;\n        //currentFrame = pushFrame(arc, rootCode, 0);\n        //currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        // if (DEBUG) {\n        //   System.out.println(\"init frame state \" + currentFrame.ord);\n        //   printSeekState();\n        // }\n\n        //System.out.println();\n        // computeBlockStats().print(System.out);\n      }\n\n","sourceOld":"      public SegmentTermsEnum() throws IOException {\n        //if (DEBUG) System.out.println(\"BTTR.init seg=\" + segment);\n        stack = new Frame[0];\n        \n        // Used to hold seek by TermState, or cached seek\n        staticFrame = new Frame(-1);\n\n        // Init w/ root block; don't use index since it may\n        // not (and need not) have been loaded\n        for(int arcIdx=0;arcIdx<arcs.length;arcIdx++) {\n          arcs[arcIdx] = new FST.Arc<BytesRef>();\n        }\n\n        currentFrame = staticFrame;\n        final FST.Arc<BytesRef> arc;\n        if (index != null) {\n          arc = index.getFirstArc(arcs[0]);\n          // Empty string prefix must have an output in the index!\n          assert arc.isFinal();\n        } else {\n          arc = null;\n        }\n        currentFrame = staticFrame;\n        //currentFrame = pushFrame(arc, rootCode, 0);\n        //currentFrame.loadBlock();\n        validIndexPrefix = 0;\n        // if (DEBUG) {\n        //   System.out.println(\"init frame state \" + currentFrame.ord);\n        //   printSeekState();\n        // }\n\n        //System.out.println();\n        // computeBlockStats().print(System.out);\n      }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e2297162a22c55456e200caef2cbcb00fe381120":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["e2297162a22c55456e200caef2cbcb00fe381120"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"60ba444201d2570214b6fcf1d15600dc1a01f548":["e2297162a22c55456e200caef2cbcb00fe381120"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["60ba444201d2570214b6fcf1d15600dc1a01f548"],"e2297162a22c55456e200caef2cbcb00fe381120":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}