{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"modules/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","sourceOld":"    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f438915b81b54f1fdff40443da8c4fb15c61c777","date":1360597404,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      // nocommit: cut over\n      DocTermOrds.Iterator iterator = (DocTermOrds.Iterator) FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermOrds = iterator.getParent();\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fd4ab7bd7d2aaec92004b06b082790604ec99597","date":1360597936,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      // nocommit: cut over\n      DocTermOrds.Iterator iterator = (DocTermOrds.Iterator) FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermOrds = iterator.getParent();\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n      docTermsEnum = docTermOrds.getOrdTermsEnum(context.reader());\n      reuse = null; // LUCENE-3377 needs to be fixed first then this statement can be removed...\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":5,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#doSetNextReader(AtomicReaderContext).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsCollector.MV#setNextReader(AtomicReaderContext).mjava","sourceNew":"    @Override\n    protected void doSetNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","sourceOld":"    @Override\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      docTermOrds = FieldCache.DEFAULT.getDocTermOrds(context.reader(), field);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["b89678825b68eccaf09e6ab71675fc0b0af1e099","7530de27b87b961b51f01bd1299b7004d46e8823"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["ddbb72a33557d2b5bc22ee95daf3281c43560502","ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"f438915b81b54f1fdff40443da8c4fb15c61c777":["7530de27b87b961b51f01bd1299b7004d46e8823"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7530de27b87b961b51f01bd1299b7004d46e8823","fd4ab7bd7d2aaec92004b06b082790604ec99597"],"7530de27b87b961b51f01bd1299b7004d46e8823":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ae73da626f97850c922c42736f808d0378e165f0"],"fd4ab7bd7d2aaec92004b06b082790604ec99597":["f438915b81b54f1fdff40443da8c4fb15c61c777"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f438915b81b54f1fdff40443da8c4fb15c61c777":["fd4ab7bd7d2aaec92004b06b082790604ec99597"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","f438915b81b54f1fdff40443da8c4fb15c61c777","ddbb72a33557d2b5bc22ee95daf3281c43560502"],"fd4ab7bd7d2aaec92004b06b082790604ec99597":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}