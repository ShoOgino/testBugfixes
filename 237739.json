{"path":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"382fe3a6ca9745891afebda9b9a57cc158305545","date":1320952430,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER );\n      case FLOAT:\n        return new FloatFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER );\n      case DATE:\n        return new TrieDateFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );        \n      case LONG:\n        return new LongFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( new IntValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER, flags ) );\n      case FLOAT:\n        return new FloatFieldSource( new FloatValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ));\n      case DATE:\n        return new TrieDateFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ));        \n      case LONG:\n        return new LongFieldSource( new LongValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ) );\n      case DOUBLE:\n        return new DoubleFieldSource( new DoubleValuesCreator( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ));\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e28b14e7783d24ca69089f13ddadadbd2afdcb29","date":1399840701,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName());\n      case FLOAT:\n        return new FloatFieldSource( field.getName());\n      case DATE:\n        return new TrieDateFieldSource( field.getName());        \n      case LONG:\n        return new LongFieldSource( field.getName());\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER );\n      case FLOAT:\n        return new FloatFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER );\n      case DATE:\n        return new TrieDateFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );        \n      case LONG:\n        return new LongFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"93dd449115a9247533e44bab47e8429e5dccbc6d","date":1400258396,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName());\n      case FLOAT:\n        return new FloatFieldSource( field.getName());\n      case DATE:\n        return new TrieDateFieldSource( field.getName());        \n      case LONG:\n        return new LongFieldSource( field.getName());\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER );\n      case FLOAT:\n        return new FloatFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER );\n      case DATE:\n        return new TrieDateFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );        \n      case LONG:\n        return new LongFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName());\n      case FLOAT:\n        return new FloatFieldSource( field.getName());\n      case DATE:\n        return new TrieDateFieldSource( field.getName());        \n      case LONG:\n        return new LongFieldSource( field.getName());\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_INT_PARSER );\n      case FLOAT:\n        return new FloatFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_FLOAT_PARSER );\n      case DATE:\n        return new TrieDateFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );        \n      case LONG:\n        return new LongFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_LONG_PARSER );\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName(), FieldCache.NUMERIC_UTILS_DOUBLE_PARSER );\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"897d47a3d78c0956b96658436566279d040b95b9","date":1447761616,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/TrieField#getValueSource(SchemaField,QParser).mjava","sourceNew":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource();\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName());\n      case FLOAT:\n        return new FloatFieldSource( field.getName());\n      case DATE:\n        return new TrieDateFieldSource( field.getName());        \n      case LONG:\n        return new LongFieldSource( field.getName());\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","sourceOld":"  @Override\n  public ValueSource getValueSource(SchemaField field, QParser qparser) {\n    field.checkFieldCacheSource(qparser);\n    switch (type) {\n      case INTEGER:\n        return new IntFieldSource( field.getName());\n      case FLOAT:\n        return new FloatFieldSource( field.getName());\n      case DATE:\n        return new TrieDateFieldSource( field.getName());        \n      case LONG:\n        return new LongFieldSource( field.getName());\n      case DOUBLE:\n        return new DoubleFieldSource( field.getName());\n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["382fe3a6ca9745891afebda9b9a57cc158305545","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"897d47a3d78c0956b96658436566279d040b95b9":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"382fe3a6ca9745891afebda9b9a57cc158305545":["c26f00b574427b55127e869b935845554afde1fa"],"56572ec06f1407c066d6b7399413178b33176cd8":["382fe3a6ca9745891afebda9b9a57cc158305545","93dd449115a9247533e44bab47e8429e5dccbc6d"],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["382fe3a6ca9745891afebda9b9a57cc158305545"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["897d47a3d78c0956b96658436566279d040b95b9"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"93dd449115a9247533e44bab47e8429e5dccbc6d":["897d47a3d78c0956b96658436566279d040b95b9","56572ec06f1407c066d6b7399413178b33176cd8"],"c26f00b574427b55127e869b935845554afde1fa":["382fe3a6ca9745891afebda9b9a57cc158305545"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"897d47a3d78c0956b96658436566279d040b95b9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"382fe3a6ca9745891afebda9b9a57cc158305545":["93dd449115a9247533e44bab47e8429e5dccbc6d","56572ec06f1407c066d6b7399413178b33176cd8","e28b14e7783d24ca69089f13ddadadbd2afdcb29"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"e28b14e7783d24ca69089f13ddadadbd2afdcb29":["93dd449115a9247533e44bab47e8429e5dccbc6d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}