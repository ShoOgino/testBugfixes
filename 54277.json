{"path":"lucene/src/java/org/apache/lucene/index/values/TypePromoter#promote(TypePromoter).mjava","commits":[{"id":"ff266254aa2c0b84006f8f3088ee25337661554d","date":1318269918,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/values/TypePromoter#promote(TypePromoter).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["cd659803551ebd8ca09b9e4ad7abd18d3d558f9d","cd659803551ebd8ca09b9e4ad7abd18d3d558f9d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","date":1323449025,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/TypePromoter#promote(TypePromoter).mjava","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/TypePromoter#promote(TypePromoter).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/TypePromoter#promote(TypePromoter).mjava","sourceNew":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","sourceOld":"  /**\n   * Creates a new promoted {@link TypePromoter} based on this and the given\n   * {@link TypePromoter} or <code>null</code> iff the {@link TypePromoter} \n   * aren't compatible.\n   * \n   * @param promoter\n   *          the incoming promoter\n   * @return a new promoted {@link TypePromoter} based on this and the given\n   *         {@link TypePromoter} or <code>null</code> iff the\n   *         {@link TypePromoter} aren't compatible.\n   */\n  public TypePromoter promote(TypePromoter promoter) {\n\n    int promotedFlags = promoter.flags & this.flags;\n    TypePromoter promoted = create(FLAGS_MAP.get(promotedFlags), valueSize);\n    if (promoted == null) {\n      return promoted;\n    }\n    if ((promoted.flags & IS_BYTE) != 0 && (promoted.flags & IS_FIXED) == IS_FIXED) {\n      if (this.valueSize == promoter.valueSize) {\n        return promoted;\n      }\n      return create(FLAGS_MAP.get(promoted.flags & PROMOTE_TO_VAR_SIZE_MASK),\n          VAR_TYPE_VALUE_SIZE);\n    }\n    return promoted;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"ff266254aa2c0b84006f8f3088ee25337661554d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["ff266254aa2c0b84006f8f3088ee25337661554d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["ff266254aa2c0b84006f8f3088ee25337661554d","1e59c344a45b9502f40ec44f5fe4e20ed2291dbe"]},"commit2Childs":{"ff266254aa2c0b84006f8f3088ee25337661554d":["1e59c344a45b9502f40ec44f5fe4e20ed2291dbe","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ff266254aa2c0b84006f8f3088ee25337661554d"],"1e59c344a45b9502f40ec44f5fe4e20ed2291dbe":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}