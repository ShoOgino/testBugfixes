{"path":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","commits":[{"id":"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","date":1366137262,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","date":1393290187,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(6, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(6, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n  }\n\n","bugFix":null,"bugIntro":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","date":1393532551,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(6, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(6, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba8f9f8067c19ebc33a32bf20a73711e36f21695","date":1543134399,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(7, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(7, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(6, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(6, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n  }\n\n","bugFix":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"080177034f0f8c5fc458255dbe1e84334b531ade","date":1553677716,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestCSVResponseWriter#testPseudoFields().mjava","sourceNew":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(7, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(7, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n\n    // pseudo-fields with * in fl\n    txt = h.query(req(\"q\",\"id:4\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"*,YYY:[docid],FOO:amount_c\"));\n    lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(sortHeader(\"foo_i,foo_l,FOO,foo_s,store,store_iis,\" +\n        \"v2_ss,pubyear_ii,foo_dt,foo_b,YYY,foo_d,id,amount_c,foo_f,v_ss\"), sortHeader(lines[0]));\n  }\n\n","sourceOld":"  @Test\n  public void testPseudoFields() throws Exception {\n    // Use Pseudo Field\n    assertEquals(\"1,hi\",\n        h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"false\", \"fl\",\"XXX:id,foo_s\")).trim());\n    \n    String txt = h.query(req(\"q\",\"id:1\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:[docid],FOO:foo_s\"));\n    String[] lines = txt.split(\"\\n\");\n    assertEquals(2, lines.length);\n    assertEquals(\"XXX,YYY,FOO\", lines[0] );\n    assertEquals(\"1,0,hi\", lines[1] );\n\n    //assertions specific to multiple pseudofields functions like abs, div, exists, etc.. (SOLR-5423)\n    String funcText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"XXX:id,YYY:exists(foo_i),exists(shouldbeunstored)\"));\n    String[] funcLines = funcText.split(\"\\n\");\n    assertEquals(7, funcLines.length);\n    assertEquals(\"XXX,YYY,exists(shouldbeunstored)\", funcLines[0] );\n    assertEquals(\"1,true,false\", funcLines[1] );\n    assertEquals(\"3,false,true\", funcLines[3] );\n    \n    \n    //assertions specific to single function without alias (SOLR-5423)\n    String singleFuncText = h.query(req(\"q\",\"*\", \"wt\",\"csv\", \"csv.header\",\"true\", \"fl\",\"exists(shouldbeunstored),XXX:id\"));\n    String[] singleFuncLines = singleFuncText.split(\"\\n\");\n    assertEquals(7, singleFuncLines.length);\n    assertEquals(\"exists(shouldbeunstored),XXX\", singleFuncLines[0] );\n    assertEquals(\"false,1\", singleFuncLines[1] );\n    assertEquals(\"true,3\", singleFuncLines[3] );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"080177034f0f8c5fc458255dbe1e84334b531ade":["ba8f9f8067c19ebc33a32bf20a73711e36f21695"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4","bbe4071a9e5fdbe880c93e2adac10a688e43f4ba"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["080177034f0f8c5fc458255dbe1e84334b531ade"]},"commit2Childs":{"bbe4071a9e5fdbe880c93e2adac10a688e43f4ba":["ba8f9f8067c19ebc33a32bf20a73711e36f21695","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"7cc4a7e1c7c8349744a449a0def295f2fd99d6a4":["bbe4071a9e5fdbe880c93e2adac10a688e43f4ba","13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8"],"080177034f0f8c5fc458255dbe1e84334b531ade":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7cc4a7e1c7c8349744a449a0def295f2fd99d6a4"],"ba8f9f8067c19ebc33a32bf20a73711e36f21695":["080177034f0f8c5fc458255dbe1e84334b531ade"],"13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["13f445c5bd6f19fd57d5a3ca0a35244c96f45aa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}