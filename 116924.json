{"path":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","commits":[{"id":"86cab68ee900a31d093b114182b488ea8e85c59d","date":1456171815,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = encodeDimension(value[i]);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f226a8b088dd9c8f6ab287a77237c4aa00a238e5","date":1456187572,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = encodeDimension(value[i]);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"419a8f52c6635419beb951255cacbbb281044c57","date":1456189353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3104a6ba367dfb690806b227c5ef17c42c6107b","date":1456265035,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","date":1456265720,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a5296efc4b319f5647b606629c093a94b23692c6","date":1456267155,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","date":1456306182,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  public static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1800b996d8677670482a071dcb7a48b08c423ace","date":1456955558,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      encoded[i] = new byte[Double.BYTES];\n      encodeDimension(value[i], encoded[i], 0);\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c422e924212367b334b4938f1fd3e44438e88c40","date":1456962933,"type":5,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      encoded[i] = new byte[Double.BYTES];\n      encodeDimension(value[i], encoded[i], 0);\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf1a614098b46c9c22afebd7b898ae4d1d2fc273","date":1457088850,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(double[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/DoublePoint#encode(Double[]).mjava","sourceNew":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      encoded[i] = new byte[Double.BYTES];\n      encodeDimension(value[i], encoded[i], 0);\n    }\n    return encoded;\n  }\n\n","sourceOld":"  /** Encode n-dimensional double point into binary encoding */\n  private static byte[][] encode(Double value[]) {\n    byte[][] encoded = new byte[value.length][];\n    for (int i = 0; i < value.length; i++) {\n      if (value[i] != null) {\n        encoded[i] = new byte[Double.BYTES];\n        encodeDimension(value[i], encoded[i], 0);\n      }\n    }\n    return encoded;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["419a8f52c6635419beb951255cacbbb281044c57"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"419a8f52c6635419beb951255cacbbb281044c57":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["86cab68ee900a31d093b114182b488ea8e85c59d"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["419a8f52c6635419beb951255cacbbb281044c57","a5296efc4b319f5647b606629c093a94b23692c6"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"a5296efc4b319f5647b606629c093a94b23692c6":["419a8f52c6635419beb951255cacbbb281044c57","d3104a6ba367dfb690806b227c5ef17c42c6107b"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","c422e924212367b334b4938f1fd3e44438e88c40"],"86cab68ee900a31d093b114182b488ea8e85c59d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c422e924212367b334b4938f1fd3e44438e88c40":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","1800b996d8677670482a071dcb7a48b08c423ace"],"1800b996d8677670482a071dcb7a48b08c423ace":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"]},"commit2Childs":{"d3104a6ba367dfb690806b227c5ef17c42c6107b":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["419a8f52c6635419beb951255cacbbb281044c57","86cab68ee900a31d093b114182b488ea8e85c59d"],"419a8f52c6635419beb951255cacbbb281044c57":["d3104a6ba367dfb690806b227c5ef17c42c6107b","1ff4a3d0540c1b0f828f19adccd01d1b33c996a6","7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","a5296efc4b319f5647b606629c093a94b23692c6"],"f226a8b088dd9c8f6ab287a77237c4aa00a238e5":["419a8f52c6635419beb951255cacbbb281044c57"],"1ff4a3d0540c1b0f828f19adccd01d1b33c996a6":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273","c422e924212367b334b4938f1fd3e44438e88c40","1800b996d8677670482a071dcb7a48b08c423ace"],"7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5":[],"a5296efc4b319f5647b606629c093a94b23692c6":["1ff4a3d0540c1b0f828f19adccd01d1b33c996a6"],"cf1a614098b46c9c22afebd7b898ae4d1d2fc273":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"86cab68ee900a31d093b114182b488ea8e85c59d":["f226a8b088dd9c8f6ab287a77237c4aa00a238e5"],"c422e924212367b334b4938f1fd3e44438e88c40":["cf1a614098b46c9c22afebd7b898ae4d1d2fc273"],"1800b996d8677670482a071dcb7a48b08c423ace":["c422e924212367b334b4938f1fd3e44438e88c40"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7f36bbdca4e65638f33c3e8f2fbe46a64dd06cd5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}