{"path":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"tokenized\");\n      }\n      if (storeTermVectors()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorPosition\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      result.append(\",docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"tokenized\");\n      }\n      if (storeTermVectors()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorPosition\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      result.append(\",docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0935c850ea562932997b72c69d93e345f21d7f45","date":1344711506,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"tokenized\");\n      }\n      if (storeTermVectors()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorPosition\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      result.append(\",docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"tokenized\");\n      }\n      if (storeTermVectors()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorPosition\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      result.append(\",docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"tokenized\");\n      }\n      if (storeTermVectors()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        if (result.length() > 0)\n          result.append(\",\");\n        result.append(\"termVectorPosition\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      result.append(\",docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n        if (storeTermVectorPayloads()) {\n          result.append(\",termVectorPayloads\");\n        }\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3184874f7f3aca850248483485b4995343066875","date":1413876758,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a22eafe3f72a4c2945eaad9547e6c78816978f4","date":1413956657,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexed()) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb2842e561df4e8e9ad89010605fc86ac265465","date":1414768208,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NO) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != DocValuesType.NO) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != null) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f95ce1375367b92d411a06175eab3915fe93c6bc","date":1414788502,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NO) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != DocValuesType.NO) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e","date":1415435053,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValueType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValueType=\");\n      result.append(docValueType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca792c26af46bd6c4a08d81117c60440cf6a7e3d","date":1445938295,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n      if (dimensionCount != 0) {\n        result.append(\",dimensionCount=\");\n        result.append(dimensionCount);\n        result.append(\",dimensionNumBytes=\");\n        result.append(dimensionNumBytes);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cab7a79353f33d1a94cd307bf33aa5148601ebe6","date":1453391888,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n      if (dimensionCount != 0) {\n        result.append(\",pointDimensionCount=\");\n        result.append(dimensionCount);\n        result.append(\",pointNumBytes=\");\n        result.append(dimensionNumBytes);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n      if (dimensionCount != 0) {\n        result.append(\",dimensionCount=\");\n        result.append(dimensionCount);\n        result.append(\",dimensionNumBytes=\");\n        result.append(dimensionNumBytes);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8357a0b6e20da8f78592ec8e53dbd375b1026b","date":1456330381,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n      if (dimensionCount != 0) {\n        result.append(\",pointDimensionCount=\");\n        result.append(dimensionCount);\n        result.append(\",pointNumBytes=\");\n        result.append(dimensionNumBytes);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","date":1456346320,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n      if (dimensionCount != 0) {\n        result.append(\",pointDimensionCount=\");\n        result.append(dimensionCount);\n        result.append(\",pointNumBytes=\");\n        result.append(dimensionNumBytes);\n      }\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5af5ba0166322092193d4c29880b0f7670fc7ca0","date":1471440525,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public final String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n      if (numericType != null) {\n        result.append(\",numericType=\");\n        result.append(numericType);\n        result.append(\",numericPrecisionStep=\");\n        result.append(numericPrecisionStep);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dataDimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDataDimensionCount=\");\n      result.append(dataDimensionCount);\n      result.append(\",pointIndexDimensionCount=\");\n      result.append(indexDimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FieldType#toString().mjava","sourceNew":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDimensionCount=\");\n      result.append(dimensionCount);\n      result.append(\",pointIndexDimensionCount=\");\n      result.append(indexDimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","sourceOld":"  /** Prints a Field for human consumption. */\n  @Override\n  public String toString() {\n    StringBuilder result = new StringBuilder();\n    if (stored()) {\n      result.append(\"stored\");\n    }\n    if (indexOptions != IndexOptions.NONE) {\n      if (result.length() > 0)\n        result.append(\",\");\n      result.append(\"indexed\");\n      if (tokenized()) {\n        result.append(\",tokenized\");\n      }\n      if (storeTermVectors()) {\n        result.append(\",termVector\");\n      }\n      if (storeTermVectorOffsets()) {\n        result.append(\",termVectorOffsets\");\n      }\n      if (storeTermVectorPositions()) {\n        result.append(\",termVectorPosition\");\n      }\n      if (storeTermVectorPayloads()) {\n        result.append(\",termVectorPayloads\");\n      }\n      if (omitNorms()) {\n        result.append(\",omitNorms\");\n      }\n      if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n        result.append(\",indexOptions=\");\n        result.append(indexOptions);\n      }\n    }\n    if (dataDimensionCount != 0) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"pointDataDimensionCount=\");\n      result.append(dataDimensionCount);\n      result.append(\",pointIndexDimensionCount=\");\n      result.append(indexDimensionCount);\n      result.append(\",pointNumBytes=\");\n      result.append(dimensionNumBytes);\n    }\n    if (docValuesType != DocValuesType.NONE) {\n      if (result.length() > 0) {\n        result.append(\",\");\n      }\n      result.append(\"docValuesType=\");\n      result.append(docValuesType);\n    }\n    \n    return result.toString();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["0935c850ea562932997b72c69d93e345f21d7f45","3394716f52b34ab259ad5247e7595d9f9db6e935"],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["3184874f7f3aca850248483485b4995343066875"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","5af5ba0166322092193d4c29880b0f7670fc7ca0"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["2bb2842e561df4e8e9ad89010605fc86ac265465"],"3184874f7f3aca850248483485b4995343066875":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["0935c850ea562932997b72c69d93e345f21d7f45","52c7e49be259508735752fba88085255014a6ecf"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":["cab7a79353f33d1a94cd307bf33aa5148601ebe6","cf8357a0b6e20da8f78592ec8e53dbd375b1026b"],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":["3394716f52b34ab259ad5247e7595d9f9db6e935","3184874f7f3aca850248483485b4995343066875"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"0935c850ea562932997b72c69d93e345f21d7f45":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["0935c850ea562932997b72c69d93e345f21d7f45"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","0935c850ea562932997b72c69d93e345f21d7f45"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f6652c943595e92c187ee904c382863013eae28f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cab7a79353f33d1a94cd307bf33aa5148601ebe6":["cf8357a0b6e20da8f78592ec8e53dbd375b1026b","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","0935c850ea562932997b72c69d93e345f21d7f45","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"5af5ba0166322092193d4c29880b0f7670fc7ca0":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"2bb2842e561df4e8e9ad89010605fc86ac265465":["f95ce1375367b92d411a06175eab3915fe93c6bc"],"3184874f7f3aca850248483485b4995343066875":["2bb2842e561df4e8e9ad89010605fc86ac265465","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"f95ce1375367b92d411a06175eab3915fe93c6bc":["eac6ccb51c439bec7f67cb0e299d3cb77b62b87e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3184874f7f3aca850248483485b4995343066875","0a22eafe3f72a4c2945eaad9547e6c78816978f4"],"cf8357a0b6e20da8f78592ec8e53dbd375b1026b":["403d05f7f8d69b65659157eff1bc1d2717f04c66","5af5ba0166322092193d4c29880b0f7670fc7ca0","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed"],"e79a60784094f4a1d4e4b03b3e8086bf55d3eeed":[],"0a22eafe3f72a4c2945eaad9547e6c78816978f4":[],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"ca792c26af46bd6c4a08d81117c60440cf6a7e3d":["cab7a79353f33d1a94cd307bf33aa5148601ebe6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"eac6ccb51c439bec7f67cb0e299d3cb77b62b87e":["ca792c26af46bd6c4a08d81117c60440cf6a7e3d"],"0935c850ea562932997b72c69d93e345f21d7f45":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","c7869f64c874ebf7f317d22c00baf2b6857797a6","52c7e49be259508735752fba88085255014a6ecf","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e79a60784094f4a1d4e4b03b3e8086bf55d3eeed","0a22eafe3f72a4c2945eaad9547e6c78816978f4","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}