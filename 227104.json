{"path":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","commits":[{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b3be20ca1091c0b7cdb2308b9023606a5e451cec","date":1327877325,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      } else {\n        index = null;\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817882884229bace7dc5d1b75f6b0e4aa1e47122","date":1327879145,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      } else {\n        index = null;\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b6fdfce35d0adb18836cf8711abe487a934df33","date":1327946200,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      } else {\n        index = null;\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/BlockTreeTermsReader.FieldReader#FieldReader(FieldInfo,long,BytesRef,long,long,int,long,IndexInput).mjava","sourceNew":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      } else {\n        index = null;\n      }\n    }\n\n","sourceOld":"    FieldReader(FieldInfo fieldInfo, long numTerms, BytesRef rootCode, long sumTotalTermFreq, long sumDocFreq, int docCount, long indexStartFP, IndexInput indexIn) throws IOException {\n      assert numTerms > 0;\n      this.fieldInfo = fieldInfo;\n      //DEBUG = BlockTreeTermsReader.DEBUG && fieldInfo.name.equals(\"id\");\n      this.numTerms = numTerms;\n      this.sumTotalTermFreq = sumTotalTermFreq; \n      this.sumDocFreq = sumDocFreq; \n      this.docCount = docCount;\n      this.indexStartFP = indexStartFP;\n      this.rootCode = rootCode;\n      // if (DEBUG) {\n      //   System.out.println(\"BTTR: seg=\" + segment + \" field=\" + fieldInfo.name + \" rootBlockCode=\" + rootCode + \" divisor=\" + indexDivisor);\n      // }\n\n      rootBlockFP = (new ByteArrayDataInput(rootCode.bytes, rootCode.offset, rootCode.length)).readVLong() >>> BlockTreeTermsWriter.OUTPUT_FLAGS_NUM_BITS;\n\n      if (indexIn != null) {\n        final IndexInput clone = (IndexInput) indexIn.clone();\n        //System.out.println(\"start=\" + indexStartFP + \" field=\" + fieldInfo.name);\n        clone.seek(indexStartFP);\n        index = new FST<BytesRef>(clone, ByteSequenceOutputs.getSingleton());\n        \n        /*\n        if (false) {\n          final String dotFileName = segment + \"_\" + fieldInfo.name + \".dot\";\n          Writer w = new OutputStreamWriter(new FileOutputStream(dotFileName));\n          Util.toDot(index, w, false, false);\n          System.out.println(\"FST INDEX: SAVED to \" + dotFileName);\n          w.close();\n        }\n        */\n      } else {\n        index = null;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5b6fdfce35d0adb18836cf8711abe487a934df33":["a0ae5e3ed1232483b7b8a014f175a5fe43595982","b3be20ca1091c0b7cdb2308b9023606a5e451cec"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"b3be20ca1091c0b7cdb2308b9023606a5e451cec":["817882884229bace7dc5d1b75f6b0e4aa1e47122","3a119bbc8703c10faa329ec201c654b3a35a1e3e","5b6fdfce35d0adb18836cf8711abe487a934df33"],"817882884229bace7dc5d1b75f6b0e4aa1e47122":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"5b6fdfce35d0adb18836cf8711abe487a934df33":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["b3be20ca1091c0b7cdb2308b9023606a5e451cec","817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["817882884229bace7dc5d1b75f6b0e4aa1e47122","5b6fdfce35d0adb18836cf8711abe487a934df33","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}