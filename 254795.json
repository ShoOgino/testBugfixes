{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","commits":[{"id":"bce1e2aee8b16573bc0d091471e4660d140b5823","date":1400533696,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["2b8f040f61e63785acc59bcba27db5c8e7cf0dae"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b7605579001505896d48b07160075a5c8b8e128e","date":1400758727,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"/dev/null","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"513e10a0d6ab1a30c0febd78d3ef20c9726cc661","date":1564785806,"type":3,"author":"Boris Pasko","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    short replication = fileSystem.getDefaultReplication(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), replication, fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8061ddd97f3352007d927dae445884a6f3d857b","date":1564988276,"type":3,"author":"Atri Sharma","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    short replication = fileSystem.getDefaultReplication(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), replication, fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","date":1565097295,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    short replication = fileSystem.getDefaultReplication(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), replication, fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), fsDefaults.getReplication(), fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2b8f040f61e63785acc59bcba27db5c8e7cf0dae","date":1580841315,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsFileWriter#getOutputStream(FileSystem,Path).mjava","sourceNew":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    short replication = fileSystem.getDefaultReplication(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), replication, fsDefaults\n        .getBlockSize(), null);\n  }\n\n","sourceOld":"  private static final OutputStream getOutputStream(FileSystem fileSystem, Path path) throws IOException {\n    Configuration conf = fileSystem.getConf();\n    FsServerDefaults fsDefaults = fileSystem.getServerDefaults(path);\n    short replication = fileSystem.getDefaultReplication(path);\n    EnumSet<CreateFlag> flags = EnumSet.of(CreateFlag.CREATE,\n        CreateFlag.OVERWRITE);\n    if (Boolean.getBoolean(HDFS_SYNC_BLOCK)) {\n      flags.add(CreateFlag.SYNC_BLOCK);\n    }\n    return fileSystem.create(path, FsPermission.getDefault()\n        .applyUMask(FsPermission.getUMask(conf)), flags, fsDefaults\n        .getFileBufferSize(), replication, fsDefaults\n        .getBlockSize(), null);\n  }\n\n","bugFix":["bce1e2aee8b16573bc0d091471e4660d140b5823"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"2b8f040f61e63785acc59bcba27db5c8e7cf0dae":["513e10a0d6ab1a30c0febd78d3ef20c9726cc661"],"b7605579001505896d48b07160075a5c8b8e128e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bce1e2aee8b16573bc0d091471e4660d140b5823"],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":["bce1e2aee8b16573bc0d091471e4660d140b5823","513e10a0d6ab1a30c0febd78d3ef20c9726cc661"],"513e10a0d6ab1a30c0febd78d3ef20c9726cc661":["bce1e2aee8b16573bc0d091471e4660d140b5823"],"f8061ddd97f3352007d927dae445884a6f3d857b":["bce1e2aee8b16573bc0d091471e4660d140b5823","513e10a0d6ab1a30c0febd78d3ef20c9726cc661"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2b8f040f61e63785acc59bcba27db5c8e7cf0dae"]},"commit2Childs":{"bce1e2aee8b16573bc0d091471e4660d140b5823":["b7605579001505896d48b07160075a5c8b8e128e","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","513e10a0d6ab1a30c0febd78d3ef20c9726cc661","f8061ddd97f3352007d927dae445884a6f3d857b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bce1e2aee8b16573bc0d091471e4660d140b5823","b7605579001505896d48b07160075a5c8b8e128e"],"2b8f040f61e63785acc59bcba27db5c8e7cf0dae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b7605579001505896d48b07160075a5c8b8e128e":[],"d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693":[],"513e10a0d6ab1a30c0febd78d3ef20c9726cc661":["2b8f040f61e63785acc59bcba27db5c8e7cf0dae","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b"],"f8061ddd97f3352007d927dae445884a6f3d857b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7605579001505896d48b07160075a5c8b8e128e","d8daa7a1d5d0c033d73962d5ca3bf3f9c9687693","f8061ddd97f3352007d927dae445884a6f3d857b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}