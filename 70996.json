{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b11b097f011a298f1a54676482032c2b261e26f3","date":1411698138,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f6bd27530a2846413fe2d00030493c0e2d3a072","date":1411811855,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector#isSparse().mjava","sourceNew":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","sourceOld":"  /** Indicates if the bit vector is sparse and should be saved as a d-gaps list, or dense, and should be saved as a bit set. */\n  private boolean isSparse() {\n\n    final int clearedCount = size() - count();\n    if (clearedCount == 0) {\n      return true;\n    }\n\n    final int avgGapLength = bits.length / clearedCount;\n\n    // expected number of bytes for vInt encoding of each gap\n    final int expectedDGapBytes;\n    if (avgGapLength <= (1<< 7)) {\n      expectedDGapBytes = 1;\n    } else if (avgGapLength <= (1<<14)) {\n      expectedDGapBytes = 2;\n    } else if (avgGapLength <= (1<<21)) {\n      expectedDGapBytes = 3;\n    } else if (avgGapLength <= (1<<28)) {\n      expectedDGapBytes = 4;\n    } else {\n      expectedDGapBytes = 5;\n    }\n\n    // +1 because we write the byte itself that contains the\n    // set bit\n    final int bytesPerSetBit = expectedDGapBytes + 1;\n    \n    // note: adding 32 because we start with ((int) -1) to indicate d-gaps format.\n    final long expectedBits = 32 + 8 * bytesPerSetBit * clearedCount;\n\n    // note: factor is for read/write of byte-arrays being faster than vints.  \n    final long factor = 10;  \n    return factor * expectedBits < size();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b11b097f011a298f1a54676482032c2b261e26f3"],"b11b097f011a298f1a54676482032c2b261e26f3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5f6bd27530a2846413fe2d00030493c0e2d3a072"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["5f6bd27530a2846413fe2d00030493c0e2d3a072","b11b097f011a298f1a54676482032c2b261e26f3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"5f6bd27530a2846413fe2d00030493c0e2d3a072":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b11b097f011a298f1a54676482032c2b261e26f3":["5f6bd27530a2846413fe2d00030493c0e2d3a072"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}