{"path":"backwards/src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"/dev/null","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","pathOld":"backwards/src/java/org/apache/lucene/analysis/Token#resizeTermBuffer(int).mjava","sourceNew":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","sourceOld":"  /** Grows the termBuffer to at least size newSize, preserving the\n   *  existing content. Note: If the next operation is to change\n   *  the contents of the term buffer use\n   *  {@link #setTermBuffer(char[], int, int)},\n   *  {@link #setTermBuffer(String)}, or\n   *  {@link #setTermBuffer(String, int, int)}\n   *  to optimally combine the resize with the setting of the termBuffer.\n   *  @param newSize minimum size of the new termBuffer\n   *  @return newly created termBuffer with length >= newSize\n   */\n  public char[] resizeTermBuffer(int newSize) {\n    if (termBuffer == null) {\n      // The buffer is always at least MIN_BUFFER_SIZE\n      termBuffer = new char[ArrayUtil.getNextSize(newSize < MIN_BUFFER_SIZE ? MIN_BUFFER_SIZE : newSize)]; \n    } else {\n      if(termBuffer.length < newSize){\n        // Not big enough; create a new array with slight\n        // over allocation and preserve content\n        final char[] newCharBuffer = new char[ArrayUtil.getNextSize(newSize)];\n        System.arraycopy(termBuffer, 0, newCharBuffer, 0, termBuffer.length);\n        termBuffer = newCharBuffer;\n      }\n    } \n    return termBuffer;   \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}