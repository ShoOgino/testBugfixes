{"path":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","commits":[{"id":"79759974460bc59933cd169acc94f5c6b16368d5","date":1471318443,"type":1,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createAccs(int,int).mjava","sourceNew":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","date":1471496851,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createAccs(int,int).mjava","sourceNew":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor[FacetField]#createAccs(int,int).mjava","sourceNew":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3661d6742eed69ff6cc30ea2538d572624a7cdf8","date":1472676864,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  // This is used to create accs for second phase (or to create accs for all aggs)\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"/dev/null","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7cb985c6555057b5e71cb07eb5862b9a7a65ca1d","date":1520906162,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new SlotAcc.Resizer() {\n          @Override\n          public int getNewSize() {\n            return slotCount;\n          }\n\n          @Override\n          public int getNewSlot(int oldSlot) {\n            return 0;\n          }\n        });\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first\n      for (SlotAcc acc : accs) {\n        acc.reset();\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":["9e13d0d4d8b6dc352cb304974502b9a36c153f78"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ce69d020f939568b84a1dbbfbd11bfd9907b73","date":1543618146,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new SlotAcc.Resizer() {\n          @Override\n          public int getNewSize() {\n            return slotCount;\n          }\n\n          @Override\n          public int getNewSlot(int oldSlot) {\n            return 0;\n          }\n        });\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1c841e27891873cab110ebeb89f124a8ec470176","date":1586527220,"type":5,"author":"Munendra S N","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(long,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/facet/FacetFieldProcessor#createAccs(int,int).mjava","sourceNew":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(long docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","sourceOld":"  /** This is used to create accs for second phase (or to create accs for all aggs) */\n  @Override\n  protected void createAccs(int docCount, int slotCount) throws IOException {\n    if (accMap == null) {\n      accMap = new LinkedHashMap<>();\n    }\n\n    // allow a custom count acc to be used\n    if (countAcc == null) {\n      countAcc = new CountSlotArrAcc(fcontext, slotCount);\n      countAcc.key = \"count\";\n    }\n\n    if (accs != null) {\n      // reuse these accs, but reset them first and resize since size could be different\n      for (SlotAcc acc : accs) {\n        acc.reset();\n        acc.resize(new FlatteningResizer(slotCount));\n      }\n      return;\n    } else {\n      accs = new SlotAcc[ freq.getFacetStats().size() ];\n    }\n\n    int accIdx = 0;\n    for (Map.Entry<String,AggValueSource> entry : freq.getFacetStats().entrySet()) {\n      SlotAcc acc = null;\n      if (slotCount == 1) {\n        acc = accMap.get(entry.getKey());\n        if (acc != null) {\n          acc.reset();\n        }\n      }\n      if (acc == null) {\n        acc = entry.getValue().createSlotAcc(fcontext, docCount, slotCount);\n        acc.key = entry.getKey();\n        accMap.put(acc.key, acc);\n      }\n      accs[accIdx++] = acc;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1c841e27891873cab110ebeb89f124a8ec470176":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7cb985c6555057b5e71cb07eb5862b9a7a65ca1d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","79759974460bc59933cd169acc94f5c6b16368d5"],"79759974460bc59933cd169acc94f5c6b16368d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bc8f206328a706450934717bec7ccc22ad166fc0":["403d05f7f8d69b65659157eff1bc1d2717f04c66","3661d6742eed69ff6cc30ea2538d572624a7cdf8"],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["7cb985c6555057b5e71cb07eb5862b9a7a65ca1d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1c841e27891873cab110ebeb89f124a8ec470176"]},"commit2Childs":{"1c841e27891873cab110ebeb89f124a8ec470176":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","3661d6742eed69ff6cc30ea2538d572624a7cdf8","bc8f206328a706450934717bec7ccc22ad166fc0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","2c8bedceb91e64a3f0e831450058fc4a76d2c0a6","79759974460bc59933cd169acc94f5c6b16368d5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["7cb985c6555057b5e71cb07eb5862b9a7a65ca1d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3661d6742eed69ff6cc30ea2538d572624a7cdf8":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0"],"2c8bedceb91e64a3f0e831450058fc4a76d2c0a6":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"7cb985c6555057b5e71cb07eb5862b9a7a65ca1d":["94ce69d020f939568b84a1dbbfbd11bfd9907b73"],"79759974460bc59933cd169acc94f5c6b16368d5":["2c8bedceb91e64a3f0e831450058fc4a76d2c0a6"],"bc8f206328a706450934717bec7ccc22ad166fc0":[],"94ce69d020f939568b84a1dbbfbd11bfd9907b73":["1c841e27891873cab110ebeb89f124a8ec470176"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["bc8f206328a706450934717bec7ccc22ad166fc0","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}