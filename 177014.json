{"path":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","commits":[{"id":"e0f5e4b06eda9c2996435d90659faa1a8601d196","date":1329255071,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd0f953fbccd59aa346f280fe7e30a698f5ecb04","date":1331511349,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.type());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random().nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random()));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random().nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random().nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random()));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random.nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random.nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random.nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dfbac05ca8694aac59eef8e62e429bf52bce36e","date":1340114344,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random().nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random()));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = _TestUtil.nextLong(random(), -maxV, maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random().nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random()));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random().nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random()));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = random().nextLong() % (1 + maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random().nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random()));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce","date":1358288854,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":null,"sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random().nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random()));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = _TestUtil.nextLong(random(), -maxV, maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random().nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random()));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/codecs/lucene40/values/TestDocValues#testInts(Type,int).mjava","sourceNew":null,"sourceOld":"  private void testInts(Type type, int maxBit) throws IOException {\n    DocValueHolder valueHolder = new DocValueHolder();\n    long maxV = 1;\n    final int NUM_VALUES = 333 + random().nextInt(333);\n    final long[] values = new long[NUM_VALUES];\n    for (int rx = 1; rx < maxBit; rx++, maxV *= 2) {\n      Directory dir = newDirectory();\n      final Counter trackBytes = Counter.newCounter();\n      DocValuesConsumer w = Ints.getWriter(dir, \"test\", trackBytes, type, newIOContext(random()));\n      for (int i = 0; i < NUM_VALUES; i++) {\n        final long v = _TestUtil.nextLong(random(), -maxV, maxV);\n        valueHolder.numberValue = values[i] = v;\n        w.add(i, valueHolder);\n      }\n      final int additionalDocs = 1 + random().nextInt(9);\n      w.finish(NUM_VALUES + additionalDocs);\n      assertEquals(0, trackBytes.get());\n\n      DocValues r = Ints.getValues(dir, \"test\", NUM_VALUES + additionalDocs, type, newIOContext(random()));\n      for (int iter = 0; iter < 2; iter++) {\n        Source s = getSource(r);\n        assertEquals(type, s.getType());\n        for (int i = 0; i < NUM_VALUES; i++) {\n          final long v = s.getInt(i);\n          assertEquals(\"index \" + i, values[i], v);\n        }\n      }\n\n      r.close();\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["e0f5e4b06eda9c2996435d90659faa1a8601d196","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["7dfbac05ca8694aac59eef8e62e429bf52bce36e","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"e0f5e4b06eda9c2996435d90659faa1a8601d196":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd0f953fbccd59aa346f280fe7e30a698f5ecb04"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd0f953fbccd59aa346f280fe7e30a698f5ecb04":["38e3b736c7ca086d61b7dbb841c905ee115490da","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e0f5e4b06eda9c2996435d90659faa1a8601d196"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["7dfbac05ca8694aac59eef8e62e429bf52bce36e"],"7dfbac05ca8694aac59eef8e62e429bf52bce36e":["d4d69c535930b5cce125cff868d40f6373dc27d4","84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce"],"84dc6f07c86dcb7de2ae6e6bb6ec0d0c2e4da6ce":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}