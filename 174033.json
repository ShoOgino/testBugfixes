{"path":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.Position#grow().mjava","commits":[{"id":"8493925b2e70246f0961df584c01a8c2e61ee52f","date":1523611602,"type":0,"author":"Jim Ferenczi","isMerge":false,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.Position#grow().mjava","pathOld":"/dev/null","sourceNew":"    public void grow() {\n      costs = ArrayUtil.grow(costs, 1+count);\n      lastRightID = ArrayUtil.grow(lastRightID, 1+count);\n      backPos = ArrayUtil.grow(backPos, 1+count);\n      backWordPos = ArrayUtil.grow(backWordPos, 1+count);\n      backIndex = ArrayUtil.grow(backIndex, 1+count);\n      backID = ArrayUtil.grow(backID, 1+count);\n\n      // NOTE: sneaky: grow separately because\n      // ArrayUtil.grow will otherwise pick a different\n      // length than the int[]s we just grew:\n      final Type[] newBackType = new Type[backID.length];\n      System.arraycopy(backType, 0, newBackType, 0, backType.length);\n      backType = newBackType;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c6453827f947004a68ad9db7418781e9df2f660","date":1523626811,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/analysis/nori/src/java/org/apache/lucene/analysis/ko/KoreanTokenizer.Position#grow().mjava","pathOld":"/dev/null","sourceNew":"    public void grow() {\n      costs = ArrayUtil.grow(costs, 1+count);\n      lastRightID = ArrayUtil.grow(lastRightID, 1+count);\n      backPos = ArrayUtil.grow(backPos, 1+count);\n      backWordPos = ArrayUtil.grow(backWordPos, 1+count);\n      backIndex = ArrayUtil.grow(backIndex, 1+count);\n      backID = ArrayUtil.grow(backID, 1+count);\n\n      // NOTE: sneaky: grow separately because\n      // ArrayUtil.grow will otherwise pick a different\n      // length than the int[]s we just grew:\n      final Type[] newBackType = new Type[backID.length];\n      System.arraycopy(backType, 0, newBackType, 0, backType.length);\n      backType = newBackType;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8493925b2e70246f0961df584c01a8c2e61ee52f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c6453827f947004a68ad9db7418781e9df2f660"],"5c6453827f947004a68ad9db7418781e9df2f660":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8493925b2e70246f0961df584c01a8c2e61ee52f"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8493925b2e70246f0961df584c01a8c2e61ee52f","5c6453827f947004a68ad9db7418781e9df2f660"],"8493925b2e70246f0961df584c01a8c2e61ee52f":["5c6453827f947004a68ad9db7418781e9df2f660"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c6453827f947004a68ad9db7418781e9df2f660":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}