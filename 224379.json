{"path":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","commits":[{"id":"01f63edf15d2e3dbb3355d974f733b263098cb46","date":1533724999,"type":0,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","pathOld":"/dev/null","sourceNew":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        details.add(stat);\n      }       \n    }\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","sourceNew":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        zkStatus.put(\"errors\", errors);\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        zkStatus.put(\"status\", STATUS_YELLOW);\n        return zkStatus;\n      }       \n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        details.add(stat);\n      }       \n    }\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","bugFix":null,"bugIntro":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc","date":1564743680,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","sourceNew":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        zkStatus.put(\"errors\", errors);\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        zkStatus.put(\"status\", STATUS_YELLOW);\n        return zkStatus;\n      }       \n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e08cb336d64c53393bb8a1b09f3af187b885f626","date":1564751020,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","sourceNew":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n          stat.remove(\"errors\");\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper \" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8f5c7f5182346fe6abaab42f901d3728750aa0bc","date":1565161837,"type":3,"author":"Jan HÃ¸ydahl","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","sourceNew":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n          stat.remove(\"errors\");\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper \" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper\" + zk, se);\n        errors.add(se.getMessage());\n        zkStatus.put(\"errors\", errors);\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        zkStatus.put(\"status\", STATUS_YELLOW);\n        return zkStatus;\n      }       \n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","bugFix":["1778938cb7fb298e6e07a43e2d5acaf552d61518","01f63edf15d2e3dbb3355d974f733b263098cb46"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"861042e9f93a922bfb6b6b2c3d44b61fb3504894","date":1587133827,"type":5,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String,ZkDynamicConfig).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/ZookeeperStatusHandler#getZkStatus(String).mjava","sourceNew":"  /**\n   * For each zk host, resolved either from zk connection string or from zk dynamic reconfiguration config,\n   * fetch all config and status info from ZK API and returns as a map, where key is hostname\n   * @param zkHost zookeeper connection string\n   * @param zkDynamicConfig list of zk dynamic config objects\n   * @return map of zookeeper config and status per zk host\n   */\n  protected Map<String, Object> getZkStatus(String zkHost, ZkDynamicConfig zkDynamicConfig) {\n    final ZkDynamicConfig hostsFromConnectionString = ZkDynamicConfig.fromZkConnectString(zkHost);\n    final ZkDynamicConfig zookeepers;\n    boolean dynamicReconfig;\n    final List<String> errors = new ArrayList<>();\n    String status = STATUS_NA;\n\n    if (zkDynamicConfig.size() == 0) {\n      // Fallback to parsing zkHost for older zk servers without support for dynamic reconfiguration\n      dynamicReconfig = false;\n      zookeepers = hostsFromConnectionString;\n    } else {\n      dynamicReconfig = true;\n      List<String> connStringHosts = hostsFromConnectionString.getServers().stream()\n          .map(h -> h.resolveClientPortAddress() + \":\" + h.clientPort)\n          .sorted().collect(Collectors.toList());\n      List<String> dynamicHosts = zkDynamicConfig.getServers().stream()\n          .map(h -> h.resolveClientPortAddress() + \":\" + h.clientPort)\n          .sorted().collect(Collectors.toList());\n      if (!connStringHosts.containsAll(dynamicHosts)) {\n        errors.add(\"Your ZK connection string (\" + connStringHosts.size() + \" hosts) is different from the \" +\n                \"dynamic ensemble config (\" + dynamicHosts.size() + \" hosts). Solr does not currently support \" +\n                \"dynamic reconfiguration and will only be able to connect to the zk hosts in your connection string.\");\n        status = STATUS_YELLOW;\n      }\n      zookeepers = zkDynamicConfig; // Clone input\n    }\n    final Map<String, Object> zkStatus = new HashMap<>();\n    final List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (ZkDynamicConfig.Server zk : zookeepers.getServers()) {\n      final String zkClientHostPort = zk.resolveClientPortAddress() + \":\" + zk.clientPort;\n      try {\n        Map<String, Object> stat = monitorZookeeper(zkClientHostPort);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n          stat.remove(\"errors\");\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state) || \"observer\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n        if (zk.role != null) {\n          stat.put(\"role\", zk.role);\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper \" + zkClientHostPort, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zkClientHostPort);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    zkStatus.put(\"dynamicReconfig\", dynamicReconfig);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","sourceOld":"  /*\n   Gets all info from ZK API and returns as a map\n   */\n  protected Map<String, Object> getZkStatus(String zkHost) {\n    Map<String, Object> zkStatus = new HashMap<>();\n    List<String> zookeepers = Arrays.asList(zkHost.split(\"/\")[0].split(\",\"));\n    List<Object> details = new ArrayList<>();\n    int numOk = 0;\n    String status = STATUS_NA;\n    int standalone = 0;\n    int followers = 0;\n    int reportedFollowers = 0;\n    int leaders = 0;\n    List<String> errors = new ArrayList<>();\n    zkStatus.put(\"ensembleSize\", zookeepers.size());\n    zkStatus.put(\"zkHost\", zkHost);\n    for (String zk : zookeepers) {\n      try {\n        Map<String, Object> stat = monitorZookeeper(zk);\n        if (stat.containsKey(\"errors\")) {\n          errors.addAll((List<String>)stat.get(\"errors\"));\n          stat.remove(\"errors\");\n        }\n        details.add(stat);\n        if (\"true\".equals(String.valueOf(stat.get(\"ok\")))) {\n          numOk++;\n        }\n        String state = String.valueOf(stat.get(\"zk_server_state\"));\n        if (\"follower\".equals(state)) {\n          followers++;\n        } else if (\"leader\".equals(state)) {\n          leaders++;\n          reportedFollowers = Integer.parseInt(String.valueOf(stat.get(\"zk_followers\")));\n        } else if (\"standalone\".equals(state)) {\n          standalone++;\n        }\n      } catch (SolrException se) {\n        log.warn(\"Failed talking to zookeeper \" + zk, se);\n        errors.add(se.getMessage());\n        Map<String, Object> stat = new HashMap<>();\n        stat.put(\"host\", zk);\n        stat.put(\"ok\", false);\n        status = STATUS_YELLOW;\n        details.add(stat);\n      }\n    }\n    zkStatus.put(\"details\", details);\n    if (followers+leaders > 0 && standalone > 0) {\n      status = STATUS_RED;\n      errors.add(\"The zk nodes do not agree on their mode, check details\");\n    }\n    if (standalone > 1) {\n      status = STATUS_RED;\n      errors.add(\"Only one zk allowed in standalone mode\");\n    }\n    if (leaders > 1) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Only one leader allowed, got \" + leaders);\n    }\n    if (followers > 0 && leaders == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"We do not have a leader\");\n    }\n    if (leaders > 0 && followers != reportedFollowers) {\n      zkStatus.put(\"mode\", \"ensemble\");\n      status = STATUS_RED;\n      errors.add(\"Leader reports \" + reportedFollowers + \" followers, but we only found \" + followers + \n        \". Please check zkHost configuration\");\n    }\n    if (followers+leaders == 0 && standalone == 1) {\n      zkStatus.put(\"mode\", \"standalone\");\n    }\n    if (followers+leaders > 0 && (zookeepers.size())%2 == 0) {\n      if (!STATUS_RED.equals(status)) {\n        status = STATUS_YELLOW;\n      }\n      errors.add(\"We have an even number of zookeepers which is not recommended\");\n    }\n    if (followers+leaders > 0 && standalone == 0) {\n      zkStatus.put(\"mode\", \"ensemble\");\n    }\n    if (status.equals(STATUS_NA)) {\n      if (numOk == zookeepers.size()) {\n        status = STATUS_GREEN;\n      } else if (numOk < zookeepers.size() && numOk > zookeepers.size() / 2) {\n        status = STATUS_YELLOW;\n        errors.add(\"Some zookeepers are down: \" + numOk + \"/\" + zookeepers.size());\n      } else {\n        status = STATUS_RED;\n        errors.add(\"Mismatch in number of zookeeper nodes live. numOK=\" + numOk + \", expected \" + zookeepers.size());\n      }\n    }\n    zkStatus.put(\"status\", status);\n    if (!errors.isEmpty()) {\n      zkStatus.put(\"errors\", errors);\n    }\n    return zkStatus;\n  }\n\n","bugFix":null,"bugIntro":["5e1d86fe37bc067ae054ff809ec807433b2b7387","e593401f7b75b207ee04c2f8381fc5df0251b1d4"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["1778938cb7fb298e6e07a43e2d5acaf552d61518","e08cb336d64c53393bb8a1b09f3af187b885f626"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"]},"commit2Childs":{"e08cb336d64c53393bb8a1b09f3af187b885f626":["8f5c7f5182346fe6abaab42f901d3728750aa0bc"],"8f5c7f5182346fe6abaab42f901d3728750aa0bc":["861042e9f93a922bfb6b6b2c3d44b61fb3504894"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["01f63edf15d2e3dbb3355d974f733b263098cb46"],"1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc":["e08cb336d64c53393bb8a1b09f3af187b885f626"],"861042e9f93a922bfb6b6b2c3d44b61fb3504894":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"01f63edf15d2e3dbb3355d974f733b263098cb46":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["8f5c7f5182346fe6abaab42f901d3728750aa0bc","1a9d28c0d6cbf63ba7920846fc5e87502b8ed9dc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}