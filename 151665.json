{"path":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","commits":[{"id":"af241f05539d0b41cd28a8051ad03e3d7fb051cf","date":1465897793,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashOrder() {\n    assertTrue(!MinHashFilter.isLessThanUnsigned(0L, 0L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(0L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(-2L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, 2L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE, Long.MIN_VALUE));\n\n    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);\n    HashSet<LongPair> unadded = new HashSet<LongPair>();\n    for (int i = 0; i < 100; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(100, minSet.size());\n    assertEquals(0, unadded.size());\n\n    HashSet<LongPair> collisionDetection = new HashSet<LongPair>();\n    unadded = new HashSet<LongPair>();\n    minSet = new FixedSizeTreeSet<LongPair>(500);\n    for (int i = 0; i < 1000000; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      collisionDetection.add(hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(1000000, collisionDetection.size());\n    assertEquals(500, minSet.size());\n    assertEquals(999500, unadded.size());\n\n    LongPair last = null;\n    LongPair current = null;\n    while ((current = minSet.pollLast()) != null) {\n      if (last != null) {\n        assertTrue(isLessThan(current, last));\n      }\n      last = current;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","date":1465913303,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashOrder() {\n    assertTrue(!MinHashFilter.isLessThanUnsigned(0L, 0L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(0L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(-2L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, 2L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE, Long.MIN_VALUE));\n\n    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);\n    HashSet<LongPair> unadded = new HashSet<LongPair>();\n    for (int i = 0; i < 100; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(100, minSet.size());\n    assertEquals(0, unadded.size());\n\n    HashSet<LongPair> collisionDetection = new HashSet<LongPair>();\n    unadded = new HashSet<LongPair>();\n    minSet = new FixedSizeTreeSet<LongPair>(500);\n    for (int i = 0; i < 1000000; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      collisionDetection.add(hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(1000000, collisionDetection.size());\n    assertEquals(500, minSet.size());\n    assertEquals(999500, unadded.size());\n\n    LongPair last = null;\n    LongPair current = null;\n    while ((current = minSet.pollLast()) != null) {\n      if (last != null) {\n        assertTrue(isLessThan(current, last));\n      }\n      last = current;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testHashOrder() {\n    assertTrue(!MinHashFilter.isLessThanUnsigned(0L, 0L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(0L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(-2L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, 2L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE, Long.MIN_VALUE));\n\n    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);\n    HashSet<LongPair> unadded = new HashSet<LongPair>();\n    for (int i = 0; i < 100; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(100, minSet.size());\n    assertEquals(0, unadded.size());\n\n    HashSet<LongPair> collisionDetection = new HashSet<LongPair>();\n    unadded = new HashSet<LongPair>();\n    minSet = new FixedSizeTreeSet<LongPair>(500);\n    for (int i = 0; i < 1000000; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      collisionDetection.add(hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(1000000, collisionDetection.size());\n    assertEquals(500, minSet.size());\n    assertEquals(999500, unadded.size());\n\n    LongPair last = null;\n    LongPair current = null;\n    while ((current = minSet.pollLast()) != null) {\n      if (last != null) {\n        assertTrue(isLessThan(current, last));\n      }\n      last = current;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","pathOld":"lucene/analysis/common/src/test/org/apache/lucene/analysis/minhash/MinHashFilterTest#testHashOrder().mjava","sourceNew":"  @Test\n  public void testHashOrder() {\n    assertTrue(!MinHashFilter.isLessThanUnsigned(0L, 0L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(0L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(-2L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, 2L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE, Long.MIN_VALUE));\n\n    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);\n    HashSet<LongPair> unadded = new HashSet<LongPair>();\n    for (int i = 0; i < 100; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(100, minSet.size());\n    assertEquals(0, unadded.size());\n  }\n\n","sourceOld":"  @Test\n  public void testHashOrder() {\n    assertTrue(!MinHashFilter.isLessThanUnsigned(0L, 0L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(0L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(-2L, -1L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(1L, 2L));\n    assertTrue(MinHashFilter.isLessThanUnsigned(Long.MAX_VALUE, Long.MIN_VALUE));\n\n    FixedSizeTreeSet<LongPair> minSet = new FixedSizeTreeSet<LongPair>(500);\n    HashSet<LongPair> unadded = new HashSet<LongPair>();\n    for (int i = 0; i < 100; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(100, minSet.size());\n    assertEquals(0, unadded.size());\n\n    HashSet<LongPair> collisionDetection = new HashSet<LongPair>();\n    unadded = new HashSet<LongPair>();\n    minSet = new FixedSizeTreeSet<LongPair>(500);\n    for (int i = 0; i < 1000000; i++) {\n      LongPair hash = new LongPair();\n      MinHashFilter.murmurhash3_x64_128(MinHashFilter.getBytes(i), 0, 4, 0, hash);\n      collisionDetection.add(hash);\n      LongPair peek = null;\n      if (minSet.size() > 0) {\n        peek = minSet.last();\n      }\n\n      if (!minSet.add(hash)) {\n        unadded.add(hash);\n      } else {\n        if (peek != null) {\n          if ((minSet.size() == 500) && !peek.equals(minSet.last())) {\n            unadded.add(peek);\n          }\n        }\n      }\n    }\n    assertEquals(1000000, collisionDetection.size());\n    assertEquals(500, minSet.size());\n    assertEquals(999500, unadded.size());\n\n    LongPair last = null;\n    LongPair current = null;\n    while ((current = minSet.pollLast()) != null) {\n      if (last != null) {\n        assertTrue(isLessThan(current, last));\n      }\n      last = current;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","af241f05539d0b41cd28a8051ad03e3d7fb051cf"],"57dc82c7b33cd580e7ab5179019bc78f3d7f8e79":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"af241f05539d0b41cd28a8051ad03e3d7fb051cf":["57dc82c7b33cd580e7ab5179019bc78f3d7f8e79"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}