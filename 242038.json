{"path":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","commits":[{"id":"99eb4a732d1a908f4636ace52928876136bf1896","date":1413829552,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public EverythingEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0;\n      this.needsPayloads = (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public EverythingEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0;\n      this.needsPayloads = (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":"    public EverythingEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0;\n      this.needsPayloads = (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","sourceOld":"    public EverythingEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0;\n      this.needsPayloads = (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsReader.EverythingEnum#reset(Bits,IntBlockTermState,int).mjava","sourceNew":null,"sourceOld":"    public EverythingEnum reset(Bits liveDocs, IntBlockTermState termState, int flags) throws IOException {\n      this.liveDocs = liveDocs;\n      // if (DEBUG) {\n      //   System.out.println(\"  FPR.reset: termState=\" + termState);\n      // }\n      docFreq = termState.docFreq;\n      docTermStartFP = termState.docStartFP;\n      posTermStartFP = termState.posStartFP;\n      payTermStartFP = termState.payStartFP;\n      skipOffset = termState.skipOffset;\n      totalTermFreq = termState.totalTermFreq;\n      singletonDocID = termState.singletonDocID;\n      if (docFreq > 1) {\n        if (docIn == null) {\n          // lazy init\n          docIn = startDocIn.clone();\n        }\n        docIn.seek(docTermStartFP);\n      }\n      posPendingFP = posTermStartFP;\n      payPendingFP = payTermStartFP;\n      posPendingCount = 0;\n      if (termState.totalTermFreq < BLOCK_SIZE) {\n        lastPosBlockFP = posTermStartFP;\n      } else if (termState.totalTermFreq == BLOCK_SIZE) {\n        lastPosBlockFP = -1;\n      } else {\n        lastPosBlockFP = posTermStartFP + termState.lastPosBlockOffset;\n      }\n\n      this.needsOffsets = (flags & DocsAndPositionsEnum.FLAG_OFFSETS) != 0;\n      this.needsPayloads = (flags & DocsAndPositionsEnum.FLAG_PAYLOADS) != 0;\n\n      doc = -1;\n      accum = 0;\n      docUpto = 0;\n      if (docFreq > BLOCK_SIZE) {\n        nextSkipDoc = BLOCK_SIZE - 1; // we won't skip if target is found in first block\n      } else {\n        nextSkipDoc = NO_MORE_DOCS; // not enough docs for skipping\n      }\n      docBufferUpto = BLOCK_SIZE;\n      skipped = false;\n      return this;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"99eb4a732d1a908f4636ace52928876136bf1896":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","99eb4a732d1a908f4636ace52928876136bf1896"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"]},"commit2Childs":{"99eb4a732d1a908f4636ace52928876136bf1896":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["99eb4a732d1a908f4636ace52928876136bf1896","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}