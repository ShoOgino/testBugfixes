{"path":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","commits":[{"id":"7e477c2108982ba9974f73aa8800270c75cb4971","date":1327277332,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["56584ae6fa4912e4dd6e818a7da3799cf807234f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a89676536a5d3e2e875a9eed6b3f22a63cca643","date":1327356915,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"/dev/null","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestMockCharFilter#test().mjava","sourceNew":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","sourceOld":"  public void test() throws IOException {\n    Analyzer analyzer = new Analyzer() {\n\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n        Tokenizer tokenizer = new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n        return new TokenStreamComponents(tokenizer, tokenizer);\n      }\n\n      @Override\n      protected Reader initReader(Reader reader) {\n        return new MockCharFilter(CharReader.get(reader), 7);\n      }\n    };\n    \n    assertAnalyzesTo(analyzer, \"ab\",\n        new String[] { \"aab\" },\n        new int[] { 0 },\n        new int[] { 2 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"aba\",\n        new String[] { \"aabaa\" },\n        new int[] { 0 },\n        new int[] { 3 }\n    );\n    \n    assertAnalyzesTo(analyzer, \"abcdefga\",\n        new String[] { \"aabcdefgaa\" },\n        new int[] { 0 },\n        new int[] { 8 }\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e477c2108982ba9974f73aa8800270c75cb4971"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7e477c2108982ba9974f73aa8800270c75cb4971"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7e477c2108982ba9974f73aa8800270c75cb4971"],"7e477c2108982ba9974f73aa8800270c75cb4971":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"5a89676536a5d3e2e875a9eed6b3f22a63cca643":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","7e477c2108982ba9974f73aa8800270c75cb4971"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"7e477c2108982ba9974f73aa8800270c75cb4971":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","3a119bbc8703c10faa329ec201c654b3a35a1e3e","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5a89676536a5d3e2e875a9eed6b3f22a63cca643","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}