{"path":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","commits":[{"id":"ac3e6437547a34cce2b5405ce0cf9e3af578401e","date":1243373693,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","pathOld":"/dev/null","sourceNew":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        ords[slot] = 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8be74b6364187be2db818003ff6f492fce9a08b0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8be74b6364187be2db818003ff6f492fce9a08b0","date":1266457611,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","pathOld":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","sourceNew":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        // should already be done\n        // ords[slot] = NULL_ORD;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","sourceOld":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        ords[slot] = 0;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","bugFix":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","pathOld":"src/java/org/apache/solr/search/MissingLastOrdComparator[MissingStringLastComparatorSource]#convert(int).mjava","sourceNew":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        // should already be done\n        // ords[slot] = NULL_ORD;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","sourceOld":"    private void convert(int slot) {\n      readerGen[slot] = currentReaderGen;\n      int index = 0;\n      String value = values[slot];\n      if (value == null) {\n        // should already be done\n        // ords[slot] = NULL_ORD;\n        return;\n      }\n\n      if (sortPos == 0 && bottomSlot != -1 && bottomSlot != slot) {\n        // Since we are the primary sort, the entries in the\n        // queue are bounded by bottomOrd:\n        assert bottomOrd < lookup.length;\n        if (reversed) {\n          index = binarySearch(lookup, value, bottomOrd, lookup.length-1);\n        } else {\n          index = binarySearch(lookup, value, 0, bottomOrd);\n        }\n      } else {\n        // Full binary search\n        index = binarySearch(lookup, value);\n      }\n\n      if (index < 0) {\n        index = -index - 2;\n      }\n      ords[slot] = index;\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"8be74b6364187be2db818003ff6f492fce9a08b0":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"ad94625fb8d088209f46650c8097196fec67f00c":["8be74b6364187be2db818003ff6f492fce9a08b0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ac3e6437547a34cce2b5405ce0cf9e3af578401e":["8be74b6364187be2db818003ff6f492fce9a08b0"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ac3e6437547a34cce2b5405ce0cf9e3af578401e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"8be74b6364187be2db818003ff6f492fce9a08b0":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}