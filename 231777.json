{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","sourceNew":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(new MatchAllDocsQuery().toString()));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, qp.parse(query.toString()));\n  }\n\n","sourceOld":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(new MatchAllDocsQuery().toString()));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, qp.parse(query.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","sourceNew":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"key\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), getQuery(new MatchAllDocsQuery().toString(),qp));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, getQuery(query.toString(),qp));\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(new MatchAllDocsQuery().toString()));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, qp.parse(query.toString()));\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","112629f1dfd1451722c6047bcf593e6efc96f5f4"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","sourceNew":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"key\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), getQuery(new MatchAllDocsQuery().toString(),qp));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, getQuery(query.toString(),qp));\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(new MatchAllDocsQuery().toString()));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, qp.parse(query.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","sourceNew":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"key\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), getQuery(new MatchAllDocsQuery().toString(),qp));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, getQuery(query.toString(),qp));\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"key\", new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), qp.parse(new MatchAllDocsQuery().toString()));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, qp.parse(query.toString()));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testMatchAllQueryParsing().mjava","sourceNew":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"key\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), getQuery(new MatchAllDocsQuery().toString(),qp));\n\n    // test parsing with non-default boost\n    Query query = new MatchAllDocsQuery();\n    query = new BoostQuery(query, 2.3f);\n    assertEquals(query, getQuery(query.toString(),qp));\n    setDefaultField(oldDefaultField);\n  }\n\n","sourceOld":"  public void testMatchAllQueryParsing() throws Exception {\n    // test simple parsing of MatchAllDocsQuery\n    String oldDefaultField = getDefaultField();\n    setDefaultField(\"key\");\n    CommonQueryParserConfiguration qp = getParserConfig( new MockAnalyzer(random()));\n    assertEquals(new MatchAllDocsQuery(), getQuery(new MatchAllDocsQuery().toString(),qp));\n\n    // test parsing with non-default boost\n    MatchAllDocsQuery query = new MatchAllDocsQuery();\n    query.setBoost(2.3f);\n    assertEquals(query, getQuery(query.toString(),qp));\n    setDefaultField(oldDefaultField);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2dfdf766e55e943d942055d7de53c7ad6bc45283"]},"commit2Childs":{"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","2dfdf766e55e943d942055d7de53c7ad6bc45283","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"2dfdf766e55e943d942055d7de53c7ad6bc45283":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}