{"path":"lucene/contrib/analyzers/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","commits":[{"id":"67748b41458c73d49a48168362cc7f4c960a2542","date":1272890662,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/analyzers/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f080986da691a3bba7b757f43ab72cdc82b57ce","date":1273069619,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","pathOld":"lucene/contrib/analyzers/stempel/src/test/org/egothor/stemmer/TestCompile#assertTrie(Trie,String,boolean,boolean).mjava","sourceNew":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","sourceOld":"  private static void assertTrie(Trie trie, String file, boolean usefull,\n      boolean storeorig) throws Exception {\n    LineNumberReader in = new LineNumberReader(new BufferedReader(\n        new FileReader(file)));\n    \n    for (String line = in.readLine(); line != null; line = in.readLine()) {\n      try {\n        line = line.toLowerCase();\n        StringTokenizer st = new StringTokenizer(line);\n        String stem = st.nextToken();\n        if (storeorig) {\n          CharSequence cmd = (usefull) ? trie.getFully(stem) : trie\n              .getLastOnPath(stem);\n          StringBuilder stm = new StringBuilder(stem);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n        while (st.hasMoreTokens()) {\n          String token = st.nextToken();\n          if (token.equals(stem)) {\n            continue;\n          }\n          CharSequence cmd = (usefull) ? trie.getFully(token) : trie\n              .getLastOnPath(token);\n          StringBuilder stm = new StringBuilder(token);\n          Diff.apply(stm, cmd);\n          assertEquals(stem.toLowerCase(), stm.toString().toLowerCase());\n        }\n      } catch (java.util.NoSuchElementException x) {\n        // no base token (stem) on a line\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"67748b41458c73d49a48168362cc7f4c960a2542":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["67748b41458c73d49a48168362cc7f4c960a2542"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f080986da691a3bba7b757f43ab72cdc82b57ce"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["67748b41458c73d49a48168362cc7f4c960a2542"],"67748b41458c73d49a48168362cc7f4c960a2542":["0f080986da691a3bba7b757f43ab72cdc82b57ce"],"0f080986da691a3bba7b757f43ab72cdc82b57ce":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}