{"path":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","sourceNew":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<DocFieldConsumerPerField>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","sourceOld":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<DocFieldConsumerPerField>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","sourceNew":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","sourceOld":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<DocFieldConsumerPerField>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52c7e49be259508735752fba88085255014a6ecf","date":1398706273,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","sourceNew":null,"sourceOld":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","sourceNew":null,"sourceOld":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":4,"author":"Dawid Weiss","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocFieldProcessor#fields().mjava","sourceNew":null,"sourceOld":"  public Collection<DocFieldConsumerPerField> fields() {\n    Collection<DocFieldConsumerPerField> fields = new HashSet<>();\n    for(int i=0;i<fieldHash.length;i++) {\n      DocFieldProcessorPerField field = fieldHash[i];\n      while(field != null) {\n        fields.add(field.consumer);\n        field = field.next;\n      }\n    }\n    assert fields.size() == totalFieldCount;\n    return fields;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","52c7e49be259508735752fba88085255014a6ecf"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","3394716f52b34ab259ad5247e7595d9f9db6e935"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52c7e49be259508735752fba88085255014a6ecf":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3394716f52b34ab259ad5247e7595d9f9db6e935"]},"commit2Childs":{"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3394716f52b34ab259ad5247e7595d9f9db6e935","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","52c7e49be259508735752fba88085255014a6ecf"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"52c7e49be259508735752fba88085255014a6ecf":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}