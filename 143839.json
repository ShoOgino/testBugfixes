{"path":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5","date":1344439048,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        Term t1 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        Term t2 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(t1);\n        pq.add(t2);\n        pq.setSlop(10); // increase possibility of matching\n        q = pq;\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        Term t1 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        Term t2 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(t1);\n        pq.add(t2);\n        pq.setSlop(10); // increase possibility of matching\n        q = pq;\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        Term t1 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        Term t2 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(t1);\n        pq.add(t2);\n        pq.setSlop(10); // increase possibility of matching\n        q = pq;\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9e1499c5d26c936238506df90a3c02c76707722","date":1434449920,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        Term t1 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        Term t2 = new Term(field, vals[rnd.nextInt(vals.length)]);\n        PhraseQuery pq = new PhraseQuery();\n        pq.add(t1);\n        pq.add(t2);\n        pq.setSlop(10); // increase possibility of matching\n        q = pq;\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f68d01cf19df971dcdcb05e30247f4ad7ec9747","date":1434611645,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery.Builder randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery.Builder current = new BooleanQuery.Builder();\n    current.setDisableCoord(rnd.nextBoolean());\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb).build();\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery current = new BooleanQuery(rnd.nextInt()<0);\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb);\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8a0e442f7b61f811680273b25da95994a724466","date":1467878549,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery.Builder randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery.Builder current = new BooleanQuery.Builder();\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb).build();\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery.Builder randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery.Builder current = new BooleanQuery.Builder();\n    current.setDisableCoord(rnd.nextBoolean());\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb).build();\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestBoolean2#randBoolQuery(Random,boolean,int,String,String[],Callback).mjava","sourceNew":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery.Builder randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery.Builder current = new BooleanQuery.Builder();\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb).build();\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","sourceOld":"  // Random rnd is passed in so that the exact same random query may be created\n  // more than once.\n  public static BooleanQuery.Builder randBoolQuery(Random rnd, boolean allowMust, int level, String field, String[] vals, Callback cb) {\n    BooleanQuery.Builder current = new BooleanQuery.Builder();\n    current.setDisableCoord(rnd.nextBoolean());\n    for (int i=0; i<rnd.nextInt(vals.length)+1; i++) {\n      int qType=0; // term query\n      if (level>0) {\n        qType = rnd.nextInt(10);\n      }\n      Query q;\n      if (qType < 3) {\n        q = new TermQuery(new Term(field, vals[rnd.nextInt(vals.length)]));\n      } else if (qType < 4) {\n        String t1 = vals[rnd.nextInt(vals.length)];\n        String t2 = vals[rnd.nextInt(vals.length)];\n        q = new PhraseQuery(10, field, t1, t2); // slop increases possibility of matching\n      } else if (qType < 7) {\n        q = new WildcardQuery(new Term(field, \"w*\"));\n      } else {\n        q = randBoolQuery(rnd, allowMust, level-1, field, vals, cb).build();\n      }\n\n      int r = rnd.nextInt(10);\n      BooleanClause.Occur occur;\n      if (r<2) {\n        occur=BooleanClause.Occur.MUST_NOT;\n      }\n      else if (r<5) {\n        if (allowMust) {\n          occur=BooleanClause.Occur.MUST;\n        } else {\n          occur=BooleanClause.Occur.SHOULD;\n        }\n      } else {\n        occur=BooleanClause.Occur.SHOULD;\n      }\n\n      current.add(q, occur);\n    }\n    if (cb!=null) cb.postCreate(current);\n    return current;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["e9e1499c5d26c936238506df90a3c02c76707722"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"e9e1499c5d26c936238506df90a3c02c76707722":["b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"c8a0e442f7b61f811680273b25da95994a724466":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747","c8a0e442f7b61f811680273b25da95994a724466"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8a0e442f7b61f811680273b25da95994a724466"]},"commit2Childs":{"3f68d01cf19df971dcdcb05e30247f4ad7ec9747":["c8a0e442f7b61f811680273b25da95994a724466","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"e9e1499c5d26c936238506df90a3c02c76707722":["3f68d01cf19df971dcdcb05e30247f4ad7ec9747"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"c8a0e442f7b61f811680273b25da95994a724466":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b0c73b4e6b72cca35c7f115ab543ce9dcf50d8b5":["c7869f64c874ebf7f317d22c00baf2b6857797a6","e9e1499c5d26c936238506df90a3c02c76707722","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d6f074e73200c07d54f242d3880a8da5a35ff97b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}