{"path":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUTransformFilterFactory#init(Map[String,String]).mjava","commits":[{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUTransformFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: add support for custom rules\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String id = args.get(\"id\");\n    if (id == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.get(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n  }\n\n","sourceOld":"  // TODO: add support for custom rules\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String id = args.get(\"id\");\n    if (id == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.get(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/analysis-extras/src/java/org/apache/solr/analysis/ICUTransformFilterFactory#init(Map[String,String]).mjava","pathOld":"solr/contrib/analysis-extras/src/main/java/org/apache/solr/analysis/ICUTransformFilterFactory#init(Map[String,String]).mjava","sourceNew":"  // TODO: add support for custom rules\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String id = args.get(\"id\");\n    if (id == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.get(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n  }\n\n","sourceOld":"  // TODO: add support for custom rules\n  @Override\n  public void init(Map<String,String> args) {\n    super.init(args);\n    String id = args.get(\"id\");\n    if (id == null) {\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"id is required.\");\n    }\n    \n    int dir;\n    String direction = args.get(\"direction\");\n    if (direction == null || direction.equalsIgnoreCase(\"forward\"))\n      dir = Transliterator.FORWARD;\n    else if (direction.equalsIgnoreCase(\"reverse\"))\n      dir = Transliterator.REVERSE;\n    else\n      throw new SolrException(ErrorCode.SERVER_ERROR, \"invalid direction: \" + direction);\n    \n    transliterator = Transliterator.getInstance(id, dir);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a3776dccca01c11e7046323cfad46a3b4a471233","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a3776dccca01c11e7046323cfad46a3b4a471233":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":[],"a3776dccca01c11e7046323cfad46a3b4a471233":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}