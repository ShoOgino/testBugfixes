{"path":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","commits":[{"id":"28ac6f4e1415bdb37652b37bbf30c3c571c97688","date":1422364884,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"/dev/null","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","a7ac6407286ebd80d6754a6586316e11c06f37b3","7875fce026a0a335830cfc75abc3eb009eff9a73"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7875fce026a0a335830cfc75abc3eb009eff9a73","date":1425897108,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      zkClient.makePath(ZkStateReader.LIVE_NODES_ZKNODE, true);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b693a83132c9e45afcd564fd65a25b60ed80388b","date":1436882146,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) ZkStateReader.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) ZkStateReader.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a7ac6407286ebd80d6754a6586316e11c06f37b3","date":1469634359,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":["b693a83132c9e45afcd564fd65a25b60ed80388b","28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"bugIntro":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56","4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      ZkStateReader reader = new ZkStateReader(zkClient);\n      reader.createClusterStateWatchersAndUpdate();\n\n      ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n      zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n      // create new collection with stateFormat = 2\n      ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n          new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n      ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n      writer.writePendingUpdates();\n\n      Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n      assertNull(map.get(\"c1\"));\n      map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n      assertNotNull(map.get(\"c1\"));\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","date":1494290035,"type":3,"author":"Scott Blum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception{\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e42079c4c34cc1868518eff79f79ebaeb6d1965","date":1507883024,"type":3,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        ClusterState clusterState = writer.enqueueUpdate(reader.getClusterState(), c1, null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Overseer.Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n      AbstractZkTestCase.tryCleanSolrZkNode(server.getZkHost());\n      AbstractZkTestCase.makeSolrZkNode(server.getZkHost());\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1778938cb7fb298e6e07a43e2d5acaf552d61518","date":1559609435,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleExternalCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    String zkDir = createTempDir(\"testSingleExternalCollection\").toFile().getAbsolutePath();\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5ad9c35f926b4bf8da0336d1300efc709c8d5a56","date":1591729157,"type":3,"author":"murblanc","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleExternalCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleExternalCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection with stateFormat = 2\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0, ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\"));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(\"/clusterstate.json\", null, null, true));\n        assertNull(map.get(\"c1\"));\n        map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n\n    }\n\n\n  }\n\n","bugFix":["28ac6f4e1415bdb37652b37bbf30c3c571c97688","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/overseer/ZkStateWriterTest#testSingleExternalCollection().mjava","sourceNew":"  public void testSingleExternalCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleExternalCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        @SuppressWarnings({\"rawtypes\"})\n        Map map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","sourceOld":"  public void testSingleExternalCollection() throws Exception {\n    Path zkDir = createTempDir(\"testSingleExternalCollection\");\n\n    ZkTestServer server = new ZkTestServer(zkDir);\n\n    SolrZkClient zkClient = null;\n\n    try {\n      server.run();\n\n      zkClient = new SolrZkClient(server.getZkAddress(), OverseerTest.DEFAULT_CONNECTION_TIMEOUT);\n      ZkController.createClusterZkNodes(zkClient);\n\n      try (ZkStateReader reader = new ZkStateReader(zkClient)) {\n        reader.createClusterStateWatchersAndUpdate();\n\n        ZkStateWriter writer = new ZkStateWriter(reader, new Stats());\n\n        zkClient.makePath(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1\", true);\n\n        // create new collection\n        ZkWriteCommand c1 = new ZkWriteCommand(\"c1\",\n            new DocCollection(\"c1\", new HashMap<String, Slice>(), new HashMap<String, Object>(), DocRouter.DEFAULT, 0));\n\n        writer.enqueueUpdate(reader.getClusterState(), Collections.singletonList(c1), null);\n        writer.writePendingUpdates();\n\n        Map map = (Map) Utils.fromJSON(zkClient.getData(ZkStateReader.COLLECTIONS_ZKNODE + \"/c1/state.json\", null, null, true));\n        assertNotNull(map.get(\"c1\"));\n      }\n    } finally {\n      IOUtils.close(zkClient);\n      server.shutdown();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["4e42079c4c34cc1868518eff79f79ebaeb6d1965"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["7875fce026a0a335830cfc75abc3eb009eff9a73"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["b693a83132c9e45afcd564fd65a25b60ed80388b","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["a7ac6407286ebd80d6754a6586316e11c06f37b3","7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["28ac6f4e1415bdb37652b37bbf30c3c571c97688","7875fce026a0a335830cfc75abc3eb009eff9a73"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"28ac6f4e1415bdb37652b37bbf30c3c571c97688":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["a7ac6407286ebd80d6754a6586316e11c06f37b3"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["b693a83132c9e45afcd564fd65a25b60ed80388b"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["b693a83132c9e45afcd564fd65a25b60ed80388b","a7ac6407286ebd80d6754a6586316e11c06f37b3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"5ad9c35f926b4bf8da0336d1300efc709c8d5a56":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"4e42079c4c34cc1868518eff79f79ebaeb6d1965":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["1778938cb7fb298e6e07a43e2d5acaf552d61518"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"b693a83132c9e45afcd564fd65a25b60ed80388b":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a7ac6407286ebd80d6754a6586316e11c06f37b3","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"28ac6f4e1415bdb37652b37bbf30c3c571c97688":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","7875fce026a0a335830cfc75abc3eb009eff9a73"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["28ac6f4e1415bdb37652b37bbf30c3c571c97688"],"7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44":["4e42079c4c34cc1868518eff79f79ebaeb6d1965","e9017cf144952056066919f1ebc7897ff9bd71b1"],"a7ac6407286ebd80d6754a6586316e11c06f37b3":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","7bc3c275fcd06c02bce73db4d2dc4ba1f3c89e44","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"7875fce026a0a335830cfc75abc3eb009eff9a73":["b693a83132c9e45afcd564fd65a25b60ed80388b","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"1778938cb7fb298e6e07a43e2d5acaf552d61518":["5ad9c35f926b4bf8da0336d1300efc709c8d5a56"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e9017cf144952056066919f1ebc7897ff9bd71b1","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}