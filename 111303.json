{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testExclusiveNumericRange().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testExclusiveNumericRange().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testExclusiveNumericRange().mjava","sourceNew":"  @Test\n  public void testExclusiveNumericRange() throws Exception {\n    assertRangeQuery(NumberType.ZERO, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, false, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testExclusiveNumericRange() throws Exception {\n    assertRangeQuery(NumberType.ZERO, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"683242c67a3f6086bae8b1354748fcaa38edfbd5","date":1457575601,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestLegacyNumericQueryParser#testExclusiveNumericRange().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/flexible/standard/TestNumericQueryParser#testExclusiveNumericRange().mjava","sourceNew":"  @Test\n  public void testExclusiveNumericRange() throws Exception {\n    assertRangeQuery(NumberType.ZERO, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, false, 0);\n  }\n\n","sourceOld":"  @Test\n  public void testExclusiveNumericRange() throws Exception {\n    assertRangeQuery(NumberType.ZERO, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.ZERO, NumberType.POSITIVE, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.ZERO, false, false, 0);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.POSITIVE, false, false, 1);\n    assertRangeQuery(NumberType.NEGATIVE, NumberType.NEGATIVE, false, false, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["683242c67a3f6086bae8b1354748fcaa38edfbd5"]},"commit2Childs":{"683242c67a3f6086bae8b1354748fcaa38edfbd5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["683242c67a3f6086bae8b1354748fcaa38edfbd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}