{"path":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","commits":[{"id":"8cb58e36806f6c7418d76f6a864a807e243c9193","date":1282782642,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/IntUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = r.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + r.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = r.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"/dev/null","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","pathOld":"solr/src/test/org/apache/solr/util/PrimUtilsTest#testSort().mjava","sourceNew":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","sourceOld":"  public void testSort() {\n    int maxSize = 100;\n    int maxVal = 100;\n    int[] a = new int[maxSize];\n    int[] b = new int[maxSize];\n\n    PrimUtils.IntComparator comparator = new PrimUtils.IntComparator() {\n      @Override\n      public int compare(int a, int b) {\n        return b - a;     // sort in reverse\n      }\n    };\n\n    for (int iter=0; iter<100; iter++) {\n      int start = random.nextInt(maxSize+1);\n      int end = start==maxSize ? maxSize : start + random.nextInt(maxSize-start);\n      for (int i=start; i<end; i++) {\n        a[i] = b[i] = random.nextInt(maxVal);\n      }\n      PrimUtils.sort(start, end, a, comparator);\n      Arrays.sort(b, start, end);\n      for (int i=start; i<end; i++) {\n        assertEquals(a[i], b[end-(i-start+1)]);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["8cb58e36806f6c7418d76f6a864a807e243c9193"],"c26f00b574427b55127e869b935845554afde1fa":["1f653cfcf159baeaafe5d01682a911e95bba4012","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8cb58e36806f6c7418d76f6a864a807e243c9193":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f653cfcf159baeaafe5d01682a911e95bba4012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8cb58e36806f6c7418d76f6a864a807e243c9193","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"8cb58e36806f6c7418d76f6a864a807e243c9193":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}