{"path":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","pathOld":"lucene/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","sourceNew":"  public void testBasic() {\n    RamUsageEstimator rue = new RamUsageEstimator();\n    rue.estimateRamUsage(\"test str\");\n    \n    rue.estimateRamUsage(\"test strin\");\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    rue.estimateRamUsage(holder);\n    \n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    rue.estimateRamUsage(strings);\n  }\n\n","sourceOld":"  public void testBasic() {\n    RamUsageEstimator rue = new RamUsageEstimator();\n    rue.estimateRamUsage(\"test str\");\n    \n    rue.estimateRamUsage(\"test strin\");\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    rue.estimateRamUsage(holder);\n    \n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    rue.estimateRamUsage(strings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dd6c9e9b1251473f465b0443b56046b2658402da","date":1332082750,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","sourceNew":"  public void testBasic() {\n    assertTrue(sizeOf(new String(\"test strin\")) > shallowSizeOfInstance(String.class));\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertEquals(shallowSizeOfInstance(Holder.class), shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testBasic() {\n    RamUsageEstimator rue = new RamUsageEstimator();\n    rue.estimateRamUsage(\"test str\");\n    \n    rue.estimateRamUsage(\"test strin\");\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    rue.estimateRamUsage(holder);\n    \n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    rue.estimateRamUsage(strings);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"10cd47aac3c4e8c583740a750335f8aab14555b3","date":1332522358,"type":5,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testSanity().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestRamUsageEstimator#testBasic().mjava","sourceNew":"  public void testSanity() {\n    assertTrue(sizeOf(new String(\"test string\")) > shallowSizeOfInstance(String.class));\n\n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(\n        shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertTrue(\n        shallowSizeOfInstance(Holder.class)         == shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[] {\n        new String(\"test string\"),\n        new String(\"hollow\"), \n        new String(\"catchmaster\")\n    };\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","sourceOld":"  public void testBasic() {\n    assertTrue(sizeOf(new String(\"test strin\")) > shallowSizeOfInstance(String.class));\n    \n    Holder holder = new Holder();\n    holder.holder = new Holder(\"string2\", 5000L);\n    assertTrue(sizeOf(holder) > shallowSizeOfInstance(Holder.class));\n    assertTrue(sizeOf(holder) > sizeOf(holder.holder));\n    \n    assertTrue(shallowSizeOfInstance(HolderSubclass.class) >= shallowSizeOfInstance(Holder.class));\n    assertEquals(shallowSizeOfInstance(Holder.class), shallowSizeOfInstance(HolderSubclass2.class));\n\n    String[] strings = new String[]{new String(\"test strin\"), new String(\"hollow\"), new String(\"catchmaster\")};\n    assertTrue(sizeOf(strings) > shallowSizeOf(strings));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"dd6c9e9b1251473f465b0443b56046b2658402da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["dd6c9e9b1251473f465b0443b56046b2658402da"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["10cd47aac3c4e8c583740a750335f8aab14555b3"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["dd6c9e9b1251473f465b0443b56046b2658402da"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"dd6c9e9b1251473f465b0443b56046b2658402da":["10cd47aac3c4e8c583740a750335f8aab14555b3"],"10cd47aac3c4e8c583740a750335f8aab14555b3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}