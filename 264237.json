{"path":"src/java/org/apache/lucene/index/IndexModifier#delete(Term).mjava","commits":[{"id":"0afa0bff72bc189cdf6fc95f80d80365a6417e3b","date":1118096970,"type":0,"author":"Daniel Naber","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#delete(Term).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.  Returns the number of documents deleted.\n   * @return the number of documents deleted\n   * @see IndexReader#delete(Term)\n   * @throws IllegalStateException if the index is closed\n   */\n  public int delete(Term term) throws IOException {\n    synchronized(directory) {\n      assureOpen();\n      createIndexReader();\n      return indexReader.delete(term);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4799e29dc1305c733ee92a39063d29708c603d49","date":1134008065,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexModifier#delete(Term).mjava","pathOld":"src/java/org/apache/lucene/index/IndexModifier#delete(Term).mjava","sourceNew":"  /**\n   * Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.  Returns the number of documents deleted.\n   * @return the number of documents deleted\n   * @see IndexReader#deleteDocuments(Term)\n   * @throws IllegalStateException if the index is closed\n   * @deprecated Use {@link #deleteDocuments(Term)} instead.\n   */\n  public int delete(Term term) throws IOException {\n    return deleteDocuments(term);\n  }\n\n","sourceOld":"  /**\n   * Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.  Returns the number of documents deleted.\n   * @return the number of documents deleted\n   * @see IndexReader#delete(Term)\n   * @throws IllegalStateException if the index is closed\n   */\n  public int delete(Term term) throws IOException {\n    synchronized(directory) {\n      assureOpen();\n      createIndexReader();\n      return indexReader.delete(term);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69e98ffd83f56083b99e5443ca713cd5783a2ae","date":1142955392,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexModifier#delete(Term).mjava","sourceNew":null,"sourceOld":"  /**\n   * Deletes all documents containing <code>term</code>.\n   * This is useful if one uses a document field to hold a unique ID string for\n   * the document.  Then to delete such a document, one merely constructs a\n   * term with the appropriate field and the unique ID string as its text and\n   * passes it to this method.  Returns the number of documents deleted.\n   * @return the number of documents deleted\n   * @see IndexReader#deleteDocuments(Term)\n   * @throws IllegalStateException if the index is closed\n   * @deprecated Use {@link #deleteDocuments(Term)} instead.\n   */\n  public int delete(Term term) throws IOException {\n    return deleteDocuments(term);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["4799e29dc1305c733ee92a39063d29708c603d49"],"4799e29dc1305c733ee92a39063d29708c603d49":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"]},"commit2Childs":{"c69e98ffd83f56083b99e5443ca713cd5783a2ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4799e29dc1305c733ee92a39063d29708c603d49":["c69e98ffd83f56083b99e5443ca713cd5783a2ae"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0afa0bff72bc189cdf6fc95f80d80365a6417e3b"],"0afa0bff72bc189cdf6fc95f80d80365a6417e3b":["4799e29dc1305c733ee92a39063d29708c603d49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}