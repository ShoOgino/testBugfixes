{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","commits":[{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set,int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","pathOld":"/dev/null","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e15bea9339982eec538668b67ae252b28e0003e","date":1319539476,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary, true);\n    }\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<Token>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary.size(), false);\n      addAllLowerCase(this.dictionary, dictionary);\n    }\n  }\n\n","bugFix":["dbb53146e3651ed4ebca43f69ee26f9150c6cb5a","7f6c85ffa816c86be877aa7a5029a5daa1336e7f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e","date":1328817590,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,CharArraySet,int,int,int,boolean).mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/compound/CompoundWordTokenFilterBase#CompoundWordTokenFilterBase(Version,TokenStream,Set[#],int,int,int,boolean).mjava","sourceNew":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, CharArraySet dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    this.dictionary = dictionary;\n  }\n\n","sourceOld":"  protected CompoundWordTokenFilterBase(Version matchVersion, TokenStream input, Set<?> dictionary, int minWordSize, int minSubwordSize, int maxSubwordSize, boolean onlyLongestMatch) {\n    super(input);\n    \n    this.tokens=new LinkedList<CompoundToken>();\n    this.minWordSize=minWordSize;\n    this.minSubwordSize=minSubwordSize;\n    this.maxSubwordSize=maxSubwordSize;\n    this.onlyLongestMatch=onlyLongestMatch;\n    \n    if (dictionary==null || dictionary instanceof CharArraySet) {\n      this.dictionary = (CharArraySet) dictionary;\n    } else {\n      this.dictionary = new CharArraySet(matchVersion, dictionary, true);\n    }\n  }\n\n","bugFix":null,"bugIntro":["1497255a2ce11dc672a80859c79fabe7efa51d2e"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"1e15bea9339982eec538668b67ae252b28e0003e":["4d7a70709df2f3ba961939504c75098e92da8b99"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["1e15bea9339982eec538668b67ae252b28e0003e"],"4d7a70709df2f3ba961939504c75098e92da8b99":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","4d7a70709df2f3ba961939504c75098e92da8b99"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"]},"commit2Childs":{"1e15bea9339982eec538668b67ae252b28e0003e":["c39363fefe2d7f6a6d50ce8e8b758c17a257c58e"],"c39363fefe2d7f6a6d50ce8e8b758c17a257c58e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d7a70709df2f3ba961939504c75098e92da8b99":["1e15bea9339982eec538668b67ae252b28e0003e","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}