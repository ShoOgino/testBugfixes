{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","commits":[{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1b5bf344a83eee6236fef469ee1a169e3b9994e4","date":1360485356,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortBy = DEFAULT_SORT_BY;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d7e774da82c7db7701e3fb9b13910a57e7296d0f","date":1374814904,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Constructor with the given category to aggregate and the number of child\n   * categories to return.\n   * \n   * @param path\n   *          the category to aggregate. Cannot be {@code null}.\n   * @param numResults\n   *          the number of child categories to return. If set to\n   *          {@code Integer.MAX_VALUE}, all immediate child categories will be\n   *          returned. Must be greater than 0.\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Constructor with the given category to aggregate and the number of child\n   * categories to return.\n   * \n   * @param path\n   *          the category to aggregate. Cannot be {@code null}.\n   * @param numResults\n   *          the number of child categories to return. If set to\n   *          {@code Integer.MAX_VALUE}, all immediate child categories will be\n   *          returned. Must be greater than 0.\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Initialize the request with a given path, and a requested number of facets\n   * results. By default, all returned results would be labeled - to alter this\n   * default see {@link #setNumLabel(int)}.\n   * <p>\n   * <b>NOTE:</b> if <code>numResults</code> is given as\n   * <code>Integer.MAX_VALUE</code> than all the facet results would be\n   * returned, without any limit.\n   * <p>\n   * <b>NOTE:</b> it is assumed that the given {@link CategoryPath} is not\n   * modified after construction of this object. Otherwise, some things may not\n   * function properly, e.g. {@link #hashCode()}.\n   * \n   * @throws IllegalArgumentException if numResults is &le; 0\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    depth = DEFAULT_DEPTH;\n    sortOrder = SortOrder.DESCENDING;\n    \n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c190847801a50f4dd20fd639bdc29b54ea3b288b","date":1384461522,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(FacetLabel,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":"  /**\n   * Constructor with the given category to aggregate and the number of child\n   * categories to return.\n   * \n   * @param path\n   *          the category to aggregate. Cannot be {@code null}.\n   * @param numResults\n   *          the number of child categories to return. If set to\n   *          {@code Integer.MAX_VALUE}, all immediate child categories will be\n   *          returned. Must be greater than 0.\n   */\n  public FacetRequest(FacetLabel path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","sourceOld":"  /**\n   * Constructor with the given category to aggregate and the number of child\n   * categories to return.\n   * \n   * @param path\n   *          the category to aggregate. Cannot be {@code null}.\n   * @param numResults\n   *          the number of child categories to return. If set to\n   *          {@code Integer.MAX_VALUE}, all immediate child categories will be\n   *          returned. Must be greater than 0.\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#FacetRequest(CategoryPath,int).mjava","sourceNew":null,"sourceOld":"  /**\n   * Constructor with the given category to aggregate and the number of child\n   * categories to return.\n   * \n   * @param path\n   *          the category to aggregate. Cannot be {@code null}.\n   * @param numResults\n   *          the number of child categories to return. If set to\n   *          {@code Integer.MAX_VALUE}, all immediate child categories will be\n   *          returned. Must be greater than 0.\n   */\n  public FacetRequest(CategoryPath path, int numResults) {\n    if (numResults <= 0) {\n      throw new IllegalArgumentException(\"num results must be a positive (>0) number: \" + numResults);\n    }\n    if (path == null) {\n      throw new IllegalArgumentException(\"category path cannot be null!\");\n    }\n    categoryPath = path;\n    this.numResults = numResults;\n    numLabel = numResults;\n    hashCode = categoryPath.hashCode() ^ this.numResults;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["1b5bf344a83eee6236fef469ee1a169e3b9994e4"],"1b5bf344a83eee6236fef469ee1a169e3b9994e4":["607428da722dcb3e86bbd11c63de8986e6275c36"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["d7e774da82c7db7701e3fb9b13910a57e7296d0f","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["1b5bf344a83eee6236fef469ee1a169e3b9994e4"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["d7e774da82c7db7701e3fb9b13910a57e7296d0f"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["1b5bf344a83eee6236fef469ee1a169e3b9994e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["607428da722dcb3e86bbd11c63de8986e6275c36"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"1b5bf344a83eee6236fef469ee1a169e3b9994e4":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","d7e774da82c7db7701e3fb9b13910a57e7296d0f"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d7e774da82c7db7701e3fb9b13910a57e7296d0f":["3cc728b07df73b197e6d940d27f9b08b63918f13","c190847801a50f4dd20fd639bdc29b54ea3b288b"],"c190847801a50f4dd20fd639bdc29b54ea3b288b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}