{"path":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","commits":[{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/src/demo/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81ea17596392ebd5d12741eb9e3b2516258b9413","date":1298090976,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f1bdbf92da222965b46c0a942c3857ba56e5c638","date":1298297608,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/demohtml/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","pathOld":"lucene/contrib/demo/src/java/org/apache/lucene/demo/html/SimpleCharStream#adjustBeginLineColumn(int,int).mjava","sourceNew":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","sourceOld":"  /**\n   * Method to adjust line and column numbers for the start of a token.\n   */\n  public void adjustBeginLineColumn(int newLine, int newCol)\n  {\n     int start = tokenBegin;\n     int len;\n\n     if (bufpos >= tokenBegin)\n     {\n        len = bufpos - tokenBegin + inBuf + 1;\n     }\n     else\n     {\n        len = bufsize - tokenBegin + bufpos + 1 + inBuf;\n     }\n\n     int i = 0, j = 0, k = 0;\n     int nextColDiff = 0, columnDiff = 0;\n\n     while (i < len &&\n            bufline[j = start % bufsize] == bufline[k = ++start % bufsize])\n     {\n        bufline[j] = newLine;\n        nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];\n        bufcolumn[j] = newCol + columnDiff;\n        columnDiff = nextColDiff;\n        i++;\n     }\n\n     if (i < len)\n     {\n        bufline[j] = newLine++;\n        bufcolumn[j] = newCol + columnDiff;\n\n        while (i++ < len)\n        {\n           if (bufline[j = start % bufsize] != bufline[++start % bufsize])\n              bufline[j] = newLine++;\n           else\n              bufline[j] = newLine;\n        }\n     }\n\n     line = bufline[j];\n     column = bufcolumn[j];\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","81ea17596392ebd5d12741eb9e3b2516258b9413"],"81ea17596392ebd5d12741eb9e3b2516258b9413":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","81ea17596392ebd5d12741eb9e3b2516258b9413"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81ea17596392ebd5d12741eb9e3b2516258b9413"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"f1bdbf92da222965b46c0a942c3857ba56e5c638":[],"81ea17596392ebd5d12741eb9e3b2516258b9413":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["f1bdbf92da222965b46c0a942c3857ba56e5c638","81ea17596392ebd5d12741eb9e3b2516258b9413","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["f1bdbf92da222965b46c0a942c3857ba56e5c638","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}