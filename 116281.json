{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","commits":[{"id":"3bbb741690cdafda7f1f7549c26351c912917a69","date":1453203134,"type":1,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#collectShardResponses(NamedList,boolean,String,ShardHandler).mjava","sourceNew":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    //Processes all shard responses\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n\n    //If request is async wait for the core admin to complete before returning\n    if (asyncId != null) {\n      waitForAsyncCallsToComplete(requestMap, results);\n      requestMap.clear();\n    }\n  }\n\n","sourceOld":"  private void collectShardResponses(NamedList results, boolean abortOnError,\n                                     String msgOnError,\n                                     ShardHandler shardHandler) {\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f9362075f92dff89425ca488b480f70d565d66e7","date":1454985541,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    //Processes all shard responses\n    ShardResponse srsp;\n    do {\n      srsp = shardHandler.takeCompletedOrError();\n      if (srsp != null) {\n        processResponse(results, srsp);\n        Throwable exception = srsp.getException();\n        if (abortOnError && exception != null)  {\n          // drain pending requests\n          while (srsp != null)  {\n            srsp = shardHandler.takeCompletedOrError();\n          }\n          throw new SolrException(ErrorCode.SERVER_ERROR, msgOnError, exception);\n        }\n      }\n    } while (srsp != null);\n\n    //If request is async wait for the core admin to complete before returning\n    if (asyncId != null) {\n      waitForAsyncCallsToComplete(requestMap, results);\n      requestMap.clear();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  private void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                                String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#processResponses(NamedList,ShardHandler,boolean,String,String,Map[String,String]).mjava","sourceNew":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","sourceOld":"  void processResponses(NamedList results, ShardHandler shardHandler, boolean abortOnError, String msgOnError,\n                        String asyncId, Map<String, String> requestMap) {\n    processResponses(results, shardHandler, abortOnError, msgOnError, asyncId, requestMap, Collections.emptySet());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["403d05f7f8d69b65659157eff1bc1d2717f04c66","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"3bbb741690cdafda7f1f7549c26351c912917a69":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["f9362075f92dff89425ca488b480f70d565d66e7","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["f9362075f92dff89425ca488b480f70d565d66e7"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"f9362075f92dff89425ca488b480f70d565d66e7":["3bbb741690cdafda7f1f7549c26351c912917a69"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["f9362075f92dff89425ca488b480f70d565d66e7","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"3bbb741690cdafda7f1f7549c26351c912917a69":["f9362075f92dff89425ca488b480f70d565d66e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3bbb741690cdafda7f1f7549c26351c912917a69"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"f9362075f92dff89425ca488b480f70d565d66e7":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}