{"path":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","commits":[{"id":"2e5d36d3b999ce76a1e80788e5d243f513c69d50","date":1359044508,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BytesDVWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      // nocommit improve message\n      throw new IllegalArgumentException(\"null binaryValue not allowed (field=\" + fieldInfo.name + \")\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"217deea97c6f9889ae5841798ceb2d62a98bee16","date":1359314941,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"539fb66d87cbb31b514367a0159d1e56b951ae3a","date":1359318142,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"847d1294c8ff2f0172af20892ef98a1c6a952e09","date":1359503775,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesWriter.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    \n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      bytesRefArray.append(emptyBytesRef);\n    }\n    addedValues++;\n    bytesRefArray.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c447e0427ce53ca53d708ce8b64eaf8cfd372591","date":1359552077,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesWriter.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n    \n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":["c024a3e8fec0a081cbf9539845db12f0dc84d029"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9faa42f41b6adb98daf009cf99a4ee239189e469","date":1376648738,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c024a3e8fec0a081cbf9539845db12f0dc84d029","date":1376654698,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n  }\n\n","bugFix":["c447e0427ce53ca53d708ce8b64eaf8cfd372591","423d89a2b3cc419b647c07c2b3fdbc54311d07f9","ce73f585d17f53055185a19beb46db23d76e0ad9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2ceca04c06658aeb20e0a319ade784ad9a0576dd","date":1376662287,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","date":1377034255,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3dffec77fb8f7d0e9ca4869dddd6af94528b4576","date":1377875202,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > (BYTE_BLOCK_SIZE - 2)) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + (BYTE_BLOCK_SIZE - 2));\n    }\n    \n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    pool.append(value);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3995f83351082af8ae83bb017e63c56818fc1568","date":1392047063,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5844844466689b1121b12ccb467623f894eb269d","date":1475600453,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID < addedValues) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    // Fill in any holes:\n    while(addedValues < docID) {\n      addedValues++;\n      lengths.add(0);\n    }\n    addedValues++;\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ceec64003e8cc400e862d44c8589a41570432ab9","date":1478783055,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.add(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"199dfa410f1fdbfd3294106b04096cce5ed34b21","date":1478812506,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/BinaryDocValuesWriter#addValue(int,BytesRef).mjava","sourceNew":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField.add(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","sourceOld":"  public void addValue(int docID, BytesRef value) {\n    if (docID <= lastDocID) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" appears more than once in this document (only one value is allowed per field)\");\n    }\n    if (value == null) {\n      throw new IllegalArgumentException(\"field=\\\"\" + fieldInfo.name + \"\\\": null value not allowed\");\n    }\n    if (value.length > MAX_LENGTH) {\n      throw new IllegalArgumentException(\"DocValuesField \\\"\" + fieldInfo.name + \"\\\" is too large, must be <= \" + MAX_LENGTH);\n    }\n\n    maxLength = Math.max(value.length, maxLength);\n    lengths.add(value.length);\n    try {\n      bytesOut.writeBytes(value.bytes, value.offset, value.length);\n    } catch (IOException ioe) {\n      // Should never happen!\n      throw new RuntimeException(ioe);\n    }\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n    updateBytesUsed();\n\n    lastDocID = docID;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":["d4d69c535930b5cce125cff868d40f6373dc27d4","e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"5844844466689b1121b12ccb467623f894eb269d":["3995f83351082af8ae83bb017e63c56818fc1568"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["c024a3e8fec0a081cbf9539845db12f0dc84d029","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["9faa42f41b6adb98daf009cf99a4ee239189e469","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["3995f83351082af8ae83bb017e63c56818fc1568","5844844466689b1121b12ccb467623f894eb269d"],"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ceec64003e8cc400e862d44c8589a41570432ab9":["5844844466689b1121b12ccb467623f894eb269d"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["539fb66d87cbb31b514367a0159d1e56b951ae3a"],"539fb66d87cbb31b514367a0159d1e56b951ae3a":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"3995f83351082af8ae83bb017e63c56818fc1568":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ceec64003e8cc400e862d44c8589a41570432ab9"]},"commit2Childs":{"9faa42f41b6adb98daf009cf99a4ee239189e469":["2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"3dffec77fb8f7d0e9ca4869dddd6af94528b4576":[],"5844844466689b1121b12ccb467623f894eb269d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","ceec64003e8cc400e862d44c8589a41570432ab9"],"199dfa410f1fdbfd3294106b04096cce5ed34b21":[],"e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","3995f83351082af8ae83bb017e63c56818fc1568"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["199dfa410f1fdbfd3294106b04096cce5ed34b21"],"2ceca04c06658aeb20e0a319ade784ad9a0576dd":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff"],"c447e0427ce53ca53d708ce8b64eaf8cfd372591":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"217deea97c6f9889ae5841798ceb2d62a98bee16":["539fb66d87cbb31b514367a0159d1e56b951ae3a"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["9faa42f41b6adb98daf009cf99a4ee239189e469","3dffec77fb8f7d0e9ca4869dddd6af94528b4576","c024a3e8fec0a081cbf9539845db12f0dc84d029"],"2e5d36d3b999ce76a1e80788e5d243f513c69d50":["217deea97c6f9889ae5841798ceb2d62a98bee16"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d4d69c535930b5cce125cff868d40f6373dc27d4","2e5d36d3b999ce76a1e80788e5d243f513c69d50"],"ceec64003e8cc400e862d44c8589a41570432ab9":["199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"847d1294c8ff2f0172af20892ef98a1c6a952e09":["c447e0427ce53ca53d708ce8b64eaf8cfd372591"],"539fb66d87cbb31b514367a0159d1e56b951ae3a":["847d1294c8ff2f0172af20892ef98a1c6a952e09"],"c024a3e8fec0a081cbf9539845db12f0dc84d029":["e70ec9cf78e14cbbf13fd0e1a9aefa8081c325ff","2ceca04c06658aeb20e0a319ade784ad9a0576dd"],"3995f83351082af8ae83bb017e63c56818fc1568":["5844844466689b1121b12ccb467623f894eb269d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3dffec77fb8f7d0e9ca4869dddd6af94528b4576","199dfa410f1fdbfd3294106b04096cce5ed34b21","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}