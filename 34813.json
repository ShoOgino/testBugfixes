{"path":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#add(int,int,byte[],byte[],byte[]).mjava","commits":[{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#add(int,int,byte[],byte[],byte[]).mjava","pathOld":"/dev/null","sourceNew":"  /** Result = a + b, where a and b are unsigned.  If there is an overflow, {@code IllegalArgumentException} is thrown. */\n  public static void add(int bytesPerDim, int dim, byte[] a, byte[] b, byte[] result) {\n    int start = dim * bytesPerDim;\n    int end = start + bytesPerDim;\n    int carry = 0;\n    for(int i=end-1;i>=start;i--) {\n      int digitSum = (a[i]&0xff) + (b[i]&0xff) + carry;\n      if (digitSum > 255) {\n        digitSum -= 256;\n        carry = 1;\n      } else {\n        carry = 0;\n      }\n      result[i-start] = (byte) digitSum;\n    }\n    if (carry != 0) {\n      throw new IllegalArgumentException(\"a + b overflows bytesPerDim=\" + bytesPerDim);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"770342641f7b505eaa8dccdc666158bff2419109","date":1449868421,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/NumericUtils#add(int,int,byte[],byte[],byte[]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/util/bkd/BKDUtil#add(int,int,byte[],byte[],byte[]).mjava","sourceNew":"  /** Result = a + b, where a and b are unsigned.  If there is an overflow, {@code IllegalArgumentException} is thrown. */\n  public static void add(int bytesPerDim, int dim, byte[] a, byte[] b, byte[] result) {\n    int start = dim * bytesPerDim;\n    int end = start + bytesPerDim;\n    int carry = 0;\n    for(int i=end-1;i>=start;i--) {\n      int digitSum = (a[i]&0xff) + (b[i]&0xff) + carry;\n      if (digitSum > 255) {\n        digitSum -= 256;\n        carry = 1;\n      } else {\n        carry = 0;\n      }\n      result[i-start] = (byte) digitSum;\n    }\n    if (carry != 0) {\n      throw new IllegalArgumentException(\"a + b overflows bytesPerDim=\" + bytesPerDim);\n    }\n  }\n\n","sourceOld":"  /** Result = a + b, where a and b are unsigned.  If there is an overflow, {@code IllegalArgumentException} is thrown. */\n  public static void add(int bytesPerDim, int dim, byte[] a, byte[] b, byte[] result) {\n    int start = dim * bytesPerDim;\n    int end = start + bytesPerDim;\n    int carry = 0;\n    for(int i=end-1;i>=start;i--) {\n      int digitSum = (a[i]&0xff) + (b[i]&0xff) + carry;\n      if (digitSum > 255) {\n        digitSum -= 256;\n        carry = 1;\n      } else {\n        carry = 0;\n      }\n      result[i-start] = (byte) digitSum;\n    }\n    if (carry != 0) {\n      throw new IllegalArgumentException(\"a + b overflows bytesPerDim=\" + bytesPerDim);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"770342641f7b505eaa8dccdc666158bff2419109":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["770342641f7b505eaa8dccdc666158bff2419109"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["770342641f7b505eaa8dccdc666158bff2419109"],"770342641f7b505eaa8dccdc666158bff2419109":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}