{"path":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","commits":[{"id":"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d","date":1461702806,"type":0,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=3}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","date":1461702806,"type":3,"author":"jbernste","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","sourceNew":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=3}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a71f63026529f3c1f03cfdd664910873ab2369ae","date":1497543264,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","sourceNew":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='7']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","date":1498028748,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","sourceNew":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='7']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","pathOld":"solr/core/src/test/org/apache/solr/search/TestGraphTermsQParserPlugin#testQueries().mjava","sourceNew":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/str[@name='id'][.='1']\",\n        \"//result/doc[2]/str[@name='id'][.='2']\",\n        \"//result/doc[3]/str[@name='id'][.='5']\",\n        \"//result/doc[4]/str[@name='id'][.='6']\",\n        \"//result/doc[5]/str[@name='id'][.='7']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/str[@name='id'][.='6']\",\n        \"//result/doc[2]/str[@name='id'][.='7']\"\n    );\n  }\n\n","sourceOld":"  @Test\n  public void testQueries() throws Exception {\n\n    String group = \"group_s\";\n\n    String[] doc = {\"id\",\"1\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc));\n    String[] doc1 = {\"id\",\"2\", \"term_s\",\"YYYY\", group, \"1\", \"test_ti\", \"5\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc1));\n\n    String[] doc2 = {\"id\",\"3\", \"term_s\", \"YYYY\", \"test_ti\", \"5000\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc2));\n    assertU(commit());\n    String[] doc3 = {\"id\",\"4\", \"term_s\", \"YYYY\", \"test_ti\", \"500\", \"test_tl\", \"1000\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc3));\n\n    String[] doc4 = {\"id\",\"5\", \"term_s\", \"YYYY\", group, \"2\", \"test_ti\", \"5\", \"test_tl\", \"10\", \"test_tf\", \"2000\"};\n    assertU(adoc(doc4));\n    assertU(commit());\n    String[] doc5 = {\"id\",\"6\", \"term_s\",\"YYYY\", group, \"2\", \"test_ti\", \"10\", \"test_tl\", \"100\", \"test_tf\", \"200\"};\n    assertU(adoc(doc5));\n    assertU(commit());\n\n    String[] doc6 = {\"id\",\"7\", \"term_s\", \"YYYY\", group, \"1\", \"test_ti\", \"10\", \"test_tl\", \"50\", \"test_tf\", \"300\"};\n    assertU(adoc(doc6));\n    assertU(commit());\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=10}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test without maxDocFreq param. Should default to Integer.MAX_VALUE and match all terms.\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=group_s maxDocFreq=1}1,2\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=10}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=5]\",\n        \"//result/doc[1]/float[@name='id'][.='1.0']\",\n        \"//result/doc[2]/float[@name='id'][.='2.0']\",\n        \"//result/doc[3]/float[@name='id'][.='5.0']\",\n        \"//result/doc[4]/float[@name='id'][.='6.0']\",\n        \"//result/doc[5]/float[@name='id'][.='7.0']\"\n    );\n\n    //Test with int field\n    params = new ModifiableSolrParams();\n    params.add(\"q\", \"{!graphTerms f=test_ti maxDocFreq=2}5,10\");\n    params.add(\"sort\", \"id asc\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=2]\",\n        \"//result/doc[1]/float[@name='id'][.='6.0']\",\n        \"//result/doc[2]/float[@name='id'][.='7.0']\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a71f63026529f3c1f03cfdd664910873ab2369ae":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"28288370235ed02234a64753cdbf0c6ec096304a":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","a71f63026529f3c1f03cfdd664910873ab2369ae"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96","a71f63026529f3c1f03cfdd664910873ab2369ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4d7e42d2692288d7e3f3e38cbfcc31ef1251054d"],"a71f63026529f3c1f03cfdd664910873ab2369ae":["28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"4d7e42d2692288d7e3f3e38cbfcc31ef1251054d":["94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96"],"94ac27a7f2b3e27d17f14b7aeeb3fcd450b7cc96":["a71f63026529f3c1f03cfdd664910873ab2369ae","28288370235ed02234a64753cdbf0c6ec096304a","2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["2a3ed3f77cdd034e789d00d1ca8bb7054c9fb8e9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}