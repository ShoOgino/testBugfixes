{"path":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","sourceNew":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","sourceNew":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","pathOld":"solr/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","sourceNew":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a6d3fca4763c45f22581927b942c808dbb2e2aec","date":1347304121,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","sourceNew":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registered by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registerd by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2668c99990e4c94a78bac005aa682b7c5986d23a","date":1561446137,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/SolrCore#[T]_initPlugins(Map[String,T],Class[T]).mjava","sourceNew":"  /**\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type     The type of the Plugin. These should be standard ones registered by type.getName() in SolrConfig\n   * @return The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","sourceOld":"  /**\n   *\n   * @param registry The map to which the instance should be added to. The key is the name attribute\n   * @param type The type of the Plugin. These should be standard ones registered by type.getName() in SolrConfig\n   * @return     The default if any\n   */\n  public <T> T initPlugins(Map<String, T> registry, Class<T> type) {\n    return initPlugins(registry, type, null);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6d3fca4763c45f22581927b942c808dbb2e2aec":["c26f00b574427b55127e869b935845554afde1fa"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["a6d3fca4763c45f22581927b942c808dbb2e2aec"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2668c99990e4c94a78bac005aa682b7c5986d23a"]},"commit2Childs":{"a6d3fca4763c45f22581927b942c808dbb2e2aec":["2668c99990e4c94a78bac005aa682b7c5986d23a"],"2668c99990e4c94a78bac005aa682b7c5986d23a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["a6d3fca4763c45f22581927b942c808dbb2e2aec"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}