{"path":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","commits":[{"id":"7bf07f4ebadc7539de83a531e64678350d78ca26","date":1322776167,"type":0,"author":"Dawid Weiss","isMerge":false,"pathNew":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","pathOld":"modules/suggest/src/java/org/apache/lucene/search/suggest/fst/FSTCompletionBuilder#FSTCompletionBuilder(int,BytesRefSorter,int).mjava","sourceNew":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","sourceOld":"  /**\n   * @param buckets\n   *          The number of buckets for weight discretization. Buckets are used\n   *          in {@link #add(BytesRef, int)} and must be smaller than the number\n   *          given here.\n   *          \n   * @param sorter\n   *          {@link BytesRefSorter} used for re-sorting input for the automaton.\n   *          For large inputs, use on-disk sorting implementations. The sorter\n   *          is closed automatically in {@link #build()} if it implements\n   *          {@link Closeable}.\n   *          \n   * @param shareMaxTailLength\n   *          Max shared suffix sharing length.\n   *          \n   *          See the description of this parameter in {@link Builder}'s constructor.\n   *          In general, for very large inputs you'll want to construct a non-minimal\n   *          automaton which will be larger, but the construction will take far less ram.\n   *          For minimal automata, set it to {@link Integer#MAX_VALUE}.\n   */\n  public FSTCompletionBuilder(int buckets, BytesRefSorter sorter, int shareMaxTailLength) {\n    if (buckets < 1 || buckets > 255) {\n      throw new IllegalArgumentException(\"Buckets must be >= 1 and <= 255: \"\n          + buckets);\n    }\n    \n    if (sorter == null) throw new IllegalArgumentException(\n        \"BytesRefSorter must not be null.\");\n    \n    this.sorter = sorter;\n    this.buckets = buckets;\n    this.shareMaxTailLength = shareMaxTailLength;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"7bf07f4ebadc7539de83a531e64678350d78ca26":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7bf07f4ebadc7539de83a531e64678350d78ca26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}