{"path":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","commits":[{"id":"8c12c43c449a172df0f2b122918f0f5fc0e9a470","date":1438415333,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","pathOld":"/dev/null","sourceNew":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4f558588ddbab152a12681d16572d483aa59616b","date":1439595052,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","sourceNew":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","sourceNew":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempDir != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = tempDir.resolve(\"sorted\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp, OfflineSorter.BufferSize.automatic(), tempDir, OfflineSorter.MAX_TEMPFILES);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","sourceNew":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      boolean success = false;\n      OfflineSorter sorter = new OfflineSorter(tempDir, tempFileNamePrefix, cmp);\n      String sortedFileName = sorter.sort(tempInput.getName());\n      try {\n        SliceWriter writer = convertToFixedWidth(sortedFileName);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          tempDir.deleteFile(sortedFileName);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, sortedFileName);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      Path sorted = Files.createTempFile(OfflineSorter.getDefaultTempDir(), \"sorted\", \"\");\n      boolean success = false;\n      try {\n        OfflineSorter sorter = new OfflineSorter(cmp);\n        sorter.sort(tempInput, sorted);\n        SliceWriter writer = convertToFixedWidth(sorted);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          IOUtils.rm(sorted);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(sorted);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1904709ea0185dc04e3d77ea01c79e909caf2796","date":1447006699,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/java/org/apache/lucene/rangetree/RangeTreeWriter#sort().mjava","sourceNew":null,"sourceOld":"  private SliceWriter sort() throws IOException {\n    if (heapWriter != null) {\n\n      assert valueCount < Integer.MAX_VALUE;\n\n      // All buffered points are still in heap\n      new InPlaceMergeSorter() {\n        @Override\n        protected void swap(int i, int j) {\n          int docID = heapWriter.docIDs[i];\n          heapWriter.docIDs[i] = heapWriter.docIDs[j];\n          heapWriter.docIDs[j] = docID;\n\n          long ord = heapWriter.ords[i];\n          heapWriter.ords[i] = heapWriter.ords[j];\n          heapWriter.ords[j] = ord;\n\n          long value = heapWriter.values[i];\n          heapWriter.values[i] = heapWriter.values[j];\n          heapWriter.values[j] = value;\n        }\n\n        @Override\n        protected int compare(int i, int j) {\n          int cmp = Long.compare(heapWriter.values[i], heapWriter.values[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(heapWriter.docIDs[i], heapWriter.docIDs[j]);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(heapWriter.ords[i], heapWriter.ords[j]);\n        }\n      }.sort(0, (int) valueCount);\n\n      HeapSliceWriter sorted = new HeapSliceWriter((int) valueCount);\n      for(int i=0;i<valueCount;i++) {\n        sorted.append(heapWriter.values[i],\n                      heapWriter.ords[i],\n                      heapWriter.docIDs[i]);\n      }\n      sorted.close();\n\n      return sorted;\n    } else {\n\n      // Offline sort:\n      assert tempInput != null;\n\n      final ByteArrayDataInput reader = new ByteArrayDataInput();\n      Comparator<BytesRef> cmp = new Comparator<BytesRef>() {\n        private final ByteArrayDataInput readerB = new ByteArrayDataInput();\n\n        @Override\n        public int compare(BytesRef a, BytesRef b) {\n          reader.reset(a.bytes, a.offset, a.length);\n          final long valueA = reader.readLong();\n          final int docIDA = reader.readVInt();\n          final long ordA = reader.readVLong();\n\n          reader.reset(b.bytes, b.offset, b.length);\n          final long valueB = reader.readLong();\n          final int docIDB = reader.readVInt();\n          final long ordB = reader.readVLong();\n\n          int cmp = Long.compare(valueA, valueB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          // Tie-break\n          cmp = Integer.compare(docIDA, docIDB);\n          if (cmp != 0) {\n            return cmp;\n          }\n\n          return Long.compare(ordA, ordB);\n        }\n      };\n\n      boolean success = false;\n      OfflineSorter sorter = new OfflineSorter(tempDir, tempFileNamePrefix, cmp);\n      String sortedFileName = sorter.sort(tempInput.getName());\n      try {\n        SliceWriter writer = convertToFixedWidth(sortedFileName);\n        success = true;\n        return writer;\n      } finally {\n        if (success) {\n          tempDir.deleteFile(sortedFileName);\n        } else {\n          IOUtils.deleteFilesIgnoringExceptions(tempDir, sortedFileName);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["4f558588ddbab152a12681d16572d483aa59616b"],"4f558588ddbab152a12681d16572d483aa59616b":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1904709ea0185dc04e3d77ea01c79e909caf2796":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1904709ea0185dc04e3d77ea01c79e909caf2796"]},"commit2Childs":{"8c12c43c449a172df0f2b122918f0f5fc0e9a470":["4f558588ddbab152a12681d16572d483aa59616b"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"4f558588ddbab152a12681d16572d483aa59616b":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8c12c43c449a172df0f2b122918f0f5fc0e9a470"],"1904709ea0185dc04e3d77ea01c79e909caf2796":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["1904709ea0185dc04e3d77ea01c79e909caf2796"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}