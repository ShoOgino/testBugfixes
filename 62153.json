{"path":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","commits":[{"id":"ae73da626f97850c922c42736f808d0378e165f0","date":1396625460,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      for (LeafCollector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    public void setScorer(Scorer scorer) throws IOException {\n      for(Collector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15e323346eac5e4685c0a9f2df85eb96b4239bbb","date":1396688577,"type":1,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/ExpandComponent.GroupExpandCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      for (LeafCollector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    public void setScorer(Scorer scorer) throws IOException {\n      for(Collector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d19aa12f12779ee822b14c5f0479847274d077ff","date":1424529172,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (LeafCollector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      for (LeafCollector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f1f60cafc4f1179da2c866dd61207060117456e8","date":1454946102,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (LeafCollector c : collectors) {\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":["ae73da626f97850c922c42736f808d0378e165f0"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff113a9993e8c54238f321fd07b74e8b28913b85","date":1531207054,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorer(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return in.getMaxScore(upTo);\n        }\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorer(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return in.getMaxScore(upTo);\n        }\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorer(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return in.getMaxScore(upTo);\n        }\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285244982ce6aa163d1e60a707f0e6e121736ce5","date":1536055304,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorable).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/MultiCollector.MultiLeafCollector#setScorer(Scorer).mjava","sourceNew":"    @Override\n    public void setScorer(Scorable scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorable(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public void setScorer(Scorer scorer) throws IOException {\n      if (cacheScores) {\n        scorer = new ScoreCachingWrappingScorer(scorer);\n      }\n      scorer = new FilterScorer(scorer) {\n        @Override\n        public void setMinCompetitiveScore(float minScore) {\n          // Ignore calls to setMinCompetitiveScore so that if we wrap two\n          // collectors and one of them wants to skip low-scoring hits, then\n          // the other collector still sees all hits. We could try to reconcile\n          // min scores and take the maximum min score across collectors, but\n          // this is very unlikely to be helpful in practice.\n        }\n        @Override\n        public float getMaxScore(int upTo) throws IOException {\n          return in.getMaxScore(upTo);\n        }\n      };\n      for (int i = 0; i < numCollectors; ++i) {\n        final LeafCollector c = collectors[i];\n        c.setScorer(scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["f1f60cafc4f1179da2c866dd61207060117456e8","ff113a9993e8c54238f321fd07b74e8b28913b85"],"285244982ce6aa163d1e60a707f0e6e121736ce5":["ff113a9993e8c54238f321fd07b74e8b28913b85"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae73da626f97850c922c42736f808d0378e165f0"],"d19aa12f12779ee822b14c5f0479847274d077ff":["ae73da626f97850c922c42736f808d0378e165f0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ae73da626f97850c922c42736f808d0378e165f0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["f1f60cafc4f1179da2c866dd61207060117456e8"],"f1f60cafc4f1179da2c866dd61207060117456e8":["d19aa12f12779ee822b14c5f0479847274d077ff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["285244982ce6aa163d1e60a707f0e6e121736ce5"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["f1f60cafc4f1179da2c866dd61207060117456e8","ff113a9993e8c54238f321fd07b74e8b28913b85"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"285244982ce6aa163d1e60a707f0e6e121736ce5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15e323346eac5e4685c0a9f2df85eb96b4239bbb":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","ae73da626f97850c922c42736f808d0378e165f0"],"d19aa12f12779ee822b14c5f0479847274d077ff":["f1f60cafc4f1179da2c866dd61207060117456e8"],"ae73da626f97850c922c42736f808d0378e165f0":["15e323346eac5e4685c0a9f2df85eb96b4239bbb","d19aa12f12779ee822b14c5f0479847274d077ff"],"ff113a9993e8c54238f321fd07b74e8b28913b85":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","285244982ce6aa163d1e60a707f0e6e121736ce5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"f1f60cafc4f1179da2c866dd61207060117456e8":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ff113a9993e8c54238f321fd07b74e8b28913b85","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","15e323346eac5e4685c0a9f2df85eb96b4239bbb","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}