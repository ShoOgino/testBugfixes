{"path":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","commits":[{"id":"43adc163640856c8b07e4cf1b2046c9af56d3ae7","date":1286989273,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ecea1664e8617d82eca3b8055a3c37cb4da8511","date":1287578668,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","date":1296400215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","pathOld":"solr/src/java/org/apache/solr/cloud/ZkSolrResourceLoader#openResource(String).mjava","sourceNew":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","sourceOld":"  /**\n   * Opens any resource by its name. By default, this will look in multiple\n   * locations to load the resource: $configDir/$resource from ZooKeeper.\n   * It will look for it in any jar\n   * accessible through the class loader if it cannot be found in ZooKeeper. \n   * Override this method to customize loading resources.\n   * \n   * @return the stream for the named resource\n   */\n  @Override\n  public InputStream openResource(String resource) {\n    InputStream is = null;\n    String file = collectionZkPath + \"/\" + resource;\n    try {\n      if (zkController.pathExists(file)) {\n        byte[] bytes = zkController.getZkClient().getData(collectionZkPath + \"/\" + resource, null, null);\n        return new ByteArrayInputStream(bytes);\n      }\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + file, e);\n    }\n    try {\n      // delegate to the class loader (looking into $INSTANCE_DIR/lib jars)\n      is = classLoader.getResourceAsStream(resource);\n    } catch (Exception e) {\n      throw new RuntimeException(\"Error opening \" + resource, e);\n    }\n    if (is == null) {\n      throw new RuntimeException(\"Can't find resource '\" + resource\n          + \"' in classpath or '\" + collectionZkPath + \"', cwd=\"\n          + System.getProperty(\"user.dir\"));\n    }\n    return is;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"c26f00b574427b55127e869b935845554afde1fa":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["4ecea1664e8617d82eca3b8055a3c37cb4da8511","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43adc163640856c8b07e4cf1b2046c9af56d3ae7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"43adc163640856c8b07e4cf1b2046c9af56d3ae7":["70e12dd4a648dadc5999dde1f0fb3a71a6ae4b01","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43adc163640856c8b07e4cf1b2046c9af56d3ae7","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","4ecea1664e8617d82eca3b8055a3c37cb4da8511"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"4ecea1664e8617d82eca3b8055a3c37cb4da8511":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","a258fbb26824fd104ed795e5d9033d2d040049ee","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}