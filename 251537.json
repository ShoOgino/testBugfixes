{"path":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb10b6bcde550b87d8f10e5f010bd8f3021023b6","date":1274974592,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexesNoOptimize\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a05409176bd65129d67a785ee70e881e238a9aef","date":1282582843,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53a31399f2471493d67b19a95c028a74e0113b6a","date":1289817072,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ab1f5591dc05f1f2b5407d809c9699f75554a32","date":1290008586,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockRAMDirectory(addDir);\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"639c36565ce03aed5b0fce7c9e4448e53a1f7efd","date":1308580104,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, IOContext.DEFAULT));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a37d7952ff54064a735708748444570f9963683e","date":1309331473,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6f9be74ca7baaef11857ad002cad40419979516","date":1309449808,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, IOContext.DEFAULT));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < NUM_THREADS; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < NUM_THREADS; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddc4c914be86e34b54f70023f45a60fa7f04e929","date":1310115160,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5d004d0e0b3f65bb40da76d476d659d7888270e8","date":1310158940,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterReader.AddDirectoriesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n      for (int i = 0; i < numThreads; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            try {\n              final Directory[] dirs = new Directory[numDirs];\n              for (int k = 0; k < numDirs; k++)\n                dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(addDir, newIOContext(random)));\n              //int j = 0;\n              //while (true) {\n                // System.out.println(Thread.currentThread().getName() + \": iter\n                // j=\" + j);\n                for (int x=0; x < numIter; x++) {\n                  // only do addIndexes\n                  doBody(x, dirs);\n                }\n                //if (numIter > 0 && j == numIter)\n                //  break;\n                //doBody(j++, dirs);\n                //doBody(5, dirs);\n              //}\n            } catch (Throwable t) {\n              handle(t);\n            }\n          }\n        };\n      }\n      for (int i = 0; i < numThreads; i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a37d7952ff54064a735708748444570f9963683e":["53a31399f2471493d67b19a95c028a74e0113b6a"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":["a05409176bd65129d67a785ee70e881e238a9aef","53a31399f2471493d67b19a95c028a74e0113b6a"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["53a31399f2471493d67b19a95c028a74e0113b6a"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6","53a31399f2471493d67b19a95c028a74e0113b6a"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["b6f9be74ca7baaef11857ad002cad40419979516","a37d7952ff54064a735708748444570f9963683e"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["53a31399f2471493d67b19a95c028a74e0113b6a","a37d7952ff54064a735708748444570f9963683e"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a05409176bd65129d67a785ee70e881e238a9aef"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b6f9be74ca7baaef11857ad002cad40419979516":["639c36565ce03aed5b0fce7c9e4448e53a1f7efd"],"a05409176bd65129d67a785ee70e881e238a9aef":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":["817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["a37d7952ff54064a735708748444570f9963683e","d083e83f225b11e5fdd900e83d26ddb385b6955c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a37d7952ff54064a735708748444570f9963683e":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","ddc4c914be86e34b54f70023f45a60fa7f04e929"],"9ab1f5591dc05f1f2b5407d809c9699f75554a32":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"639c36565ce03aed5b0fce7c9e4448e53a1f7efd":["b6f9be74ca7baaef11857ad002cad40419979516"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["ddc4c914be86e34b54f70023f45a60fa7f04e929"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["5d004d0e0b3f65bb40da76d476d659d7888270e8"],"fb10b6bcde550b87d8f10e5f010bd8f3021023b6":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","a05409176bd65129d67a785ee70e881e238a9aef"],"53a31399f2471493d67b19a95c028a74e0113b6a":["a37d7952ff54064a735708748444570f9963683e","9ab1f5591dc05f1f2b5407d809c9699f75554a32","639c36565ce03aed5b0fce7c9e4448e53a1f7efd","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"b6f9be74ca7baaef11857ad002cad40419979516":["d083e83f225b11e5fdd900e83d26ddb385b6955c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a05409176bd65129d67a785ee70e881e238a9aef":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","53a31399f2471493d67b19a95c028a74e0113b6a"],"5d004d0e0b3f65bb40da76d476d659d7888270e8":[],"ddc4c914be86e34b54f70023f45a60fa7f04e929":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","5d004d0e0b3f65bb40da76d476d659d7888270e8"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["fb10b6bcde550b87d8f10e5f010bd8f3021023b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9ab1f5591dc05f1f2b5407d809c9699f75554a32","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","5d004d0e0b3f65bb40da76d476d659d7888270e8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}