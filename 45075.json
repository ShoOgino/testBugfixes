{"path":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","pathOld":"lucene/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","sourceNew":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2a81b3988dfbdfb187c425043b89868e359b238","date":1329919075,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","sourceNew":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","sourceNew":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3b4a63b6b0155323dde6b827e0dc22a43580753","date":1346168671,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","sourceNew":"  /**\n   * Throws AlreadyClosedException if this IndexReader or any\n   * of its child readers is closed, otherwise returns.\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"05a14b2611ead08655a2b2bdc61632eb31316e57","date":1346366621,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexReader#ensureOpen().mjava","sourceNew":"  /**\n   * Throws AlreadyClosedException if this IndexReader or any\n   * of its child readers is closed, otherwise returns.\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","sourceOld":"  /**\n   * @throws AlreadyClosedException if this IndexReader is closed\n   */\n  protected final void ensureOpen() throws AlreadyClosedException {\n    if (refCount.get() <= 0) {\n      throw new AlreadyClosedException(\"this IndexReader is closed\");\n    }\n    // the happens before rule on reading the refCount, which must be after the fake write,\n    // ensures that we see the value:\n    if (closedByChild) {\n      throw new AlreadyClosedException(\"this IndexReader cannot be used anymore as one of its child readers was closed\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","a2a81b3988dfbdfb187c425043b89868e359b238"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["a2a81b3988dfbdfb187c425043b89868e359b238"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05a14b2611ead08655a2b2bdc61632eb31316e57":["a2a81b3988dfbdfb187c425043b89868e359b238","a3b4a63b6b0155323dde6b827e0dc22a43580753"],"a2a81b3988dfbdfb187c425043b89868e359b238":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a3b4a63b6b0155323dde6b827e0dc22a43580753"]},"commit2Childs":{"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a2a81b3988dfbdfb187c425043b89868e359b238"],"a3b4a63b6b0155323dde6b827e0dc22a43580753":["05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"05a14b2611ead08655a2b2bdc61632eb31316e57":[],"a2a81b3988dfbdfb187c425043b89868e359b238":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a3b4a63b6b0155323dde6b827e0dc22a43580753","05a14b2611ead08655a2b2bdc61632eb31316e57"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","05a14b2611ead08655a2b2bdc61632eb31316e57","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}