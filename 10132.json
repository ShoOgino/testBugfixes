{"path":"lucene/core/src/java/org/apache/lucene/store/IndexInput#copyBytes(IndexOutput,long).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/IndexInput#copyBytes(IndexOutput,long).mjava","pathOld":"lucene/src/java/org/apache/lucene/store/IndexInput#copyBytes(IndexOutput,long).mjava","sourceNew":"  /**\n   * Copies <code>numBytes</code> bytes to the given {@link IndexOutput}.\n   * <p>\n   * <b>NOTE:</b> this method uses an intermediate buffer to copy the bytes.\n   * Consider overriding it in your implementation, if you can make a better,\n   * optimized copy.\n   * <p>\n   * <b>NOTE</b> ensure that there are enough bytes in the input to copy to\n   * output. Otherwise, different exceptions may be thrown, depending on the\n   * implementation.\n   */\n  public void copyBytes(IndexOutput out, long numBytes) throws IOException {\n    assert numBytes >= 0: \"numBytes=\" + numBytes;\n\n    byte copyBuf[] = new byte[BufferedIndexInput.BUFFER_SIZE];\n\n    while (numBytes > 0) {\n      final int toCopy = (int) (numBytes > copyBuf.length ? copyBuf.length : numBytes);\n      readBytes(copyBuf, 0, toCopy);\n      out.writeBytes(copyBuf, 0, toCopy);\n      numBytes -= toCopy;\n    }\n  }\n\n","sourceOld":"  /**\n   * Copies <code>numBytes</code> bytes to the given {@link IndexOutput}.\n   * <p>\n   * <b>NOTE:</b> this method uses an intermediate buffer to copy the bytes.\n   * Consider overriding it in your implementation, if you can make a better,\n   * optimized copy.\n   * <p>\n   * <b>NOTE</b> ensure that there are enough bytes in the input to copy to\n   * output. Otherwise, different exceptions may be thrown, depending on the\n   * implementation.\n   */\n  public void copyBytes(IndexOutput out, long numBytes) throws IOException {\n    assert numBytes >= 0: \"numBytes=\" + numBytes;\n\n    byte copyBuf[] = new byte[BufferedIndexInput.BUFFER_SIZE];\n\n    while (numBytes > 0) {\n      final int toCopy = (int) (numBytes > copyBuf.length ? copyBuf.length : numBytes);\n      readBytes(copyBuf, 0, toCopy);\n      out.writeBytes(copyBuf, 0, toCopy);\n      numBytes -= toCopy;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66ad5d52334c6be735b490059924589a69b97bd6","date":1347452151,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/store/IndexInput#copyBytes(IndexOutput,long).mjava","sourceNew":null,"sourceOld":"  /**\n   * Copies <code>numBytes</code> bytes to the given {@link IndexOutput}.\n   * <p>\n   * <b>NOTE:</b> this method uses an intermediate buffer to copy the bytes.\n   * Consider overriding it in your implementation, if you can make a better,\n   * optimized copy.\n   * <p>\n   * <b>NOTE</b> ensure that there are enough bytes in the input to copy to\n   * output. Otherwise, different exceptions may be thrown, depending on the\n   * implementation.\n   */\n  public void copyBytes(IndexOutput out, long numBytes) throws IOException {\n    assert numBytes >= 0: \"numBytes=\" + numBytes;\n\n    byte copyBuf[] = new byte[BufferedIndexInput.BUFFER_SIZE];\n\n    while (numBytes > 0) {\n      final int toCopy = (int) (numBytes > copyBuf.length ? copyBuf.length : numBytes);\n      readBytes(copyBuf, 0, toCopy);\n      out.writeBytes(copyBuf, 0, toCopy);\n      numBytes -= toCopy;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66ad5d52334c6be735b490059924589a69b97bd6":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["66ad5d52334c6be735b490059924589a69b97bd6"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["66ad5d52334c6be735b490059924589a69b97bd6"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"66ad5d52334c6be735b490059924589a69b97bd6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}