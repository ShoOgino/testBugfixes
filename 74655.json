{"path":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"modules/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"#version\">above</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"#version\">above</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"75c530969ddebc3e0596993d3734a3d2ded28dcb","date":1335125333,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"QueryParser#version\">here</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"#version\">above</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44dc86d39e10e08383735f7aafe52fec69a971b","date":1335141386,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"QueryParser.html#version\">here</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"QueryParser#version\">here</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f","date":1338430031,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match. See <a href=\"QueryParser.html#version\">here</a>.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    if (matchVersion.onOrAfter(Version.LUCENE_31)) {\n      setAutoGeneratePhraseQueries(false);\n    } else {\n      setAutoGeneratePhraseQueries(true);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1c1dd5dce93e4fa48898dabc7e012560acda425","date":1381334364,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    analyzer = a;\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ff4227bb146f97aabae888091c19e48c88dbb0db","date":1406758576,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5cdab62f058ea765dd33deb05b4f19b7d626c801","date":1406803479,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379db3ad24c4f0214f30a122265a6d6be003a99d","date":1407537768,"type":5,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(String,Analyzer).mjava","pathOld":"lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParserBase#init(Version,String,Analyzer).mjava","sourceNew":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","sourceOld":"  /** Initializes a query parser.  Called by the QueryParser constructor\n   *  @param matchVersion  Lucene version to match.\n   *  @param f  the default field for query terms.\n   *  @param a   used to find terms in the query text.\n   */\n  public void init(Version matchVersion, String f, Analyzer a) {\n    setAnalyzer(a);\n    field = f;\n    setAutoGeneratePhraseQueries(false);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["c44dc86d39e10e08383735f7aafe52fec69a971b"],"c44dc86d39e10e08383735f7aafe52fec69a971b":["75c530969ddebc3e0596993d3734a3d2ded28dcb"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"75c530969ddebc3e0596993d3734a3d2ded28dcb":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["379db3ad24c4f0214f30a122265a6d6be003a99d"]},"commit2Childs":{"ff4227bb146f97aabae888091c19e48c88dbb0db":["5cdab62f058ea765dd33deb05b4f19b7d626c801"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["75c530969ddebc3e0596993d3734a3d2ded28dcb"],"c1c1dd5dce93e4fa48898dabc7e012560acda425":["ff4227bb146f97aabae888091c19e48c88dbb0db"],"e7e8d6f15900ee22ac3cb0a503f15dc952a3580f":["c1c1dd5dce93e4fa48898dabc7e012560acda425"],"c44dc86d39e10e08383735f7aafe52fec69a971b":["e7e8d6f15900ee22ac3cb0a503f15dc952a3580f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"379db3ad24c4f0214f30a122265a6d6be003a99d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5cdab62f058ea765dd33deb05b4f19b7d626c801":["379db3ad24c4f0214f30a122265a6d6be003a99d"],"75c530969ddebc3e0596993d3734a3d2ded28dcb":["c44dc86d39e10e08383735f7aafe52fec69a971b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}