{"path":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#checkBackupDeletionSuccess(String).mjava","commits":[{"id":"ec54bd926c45854b5a1599685b0f7d2bfbfe177f","date":1573838246,"type":0,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#checkBackupDeletionSuccess(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Does a single check of the replication handler's status to determine if the specified name matches \n   * the most recently deleted backup, and if deleting that backup was a success.\n   * Throws a test assertion failure if the status is about this backupName but the starts message \n   * with <code>\"Unable to delete\"</code>\n   *\n   * @returns true if the replication status info indicates the backup was deleted, false otherwise\n   * @see #waitForBackupDeletionSuccess(String,TimeOut)\n   */\n  public boolean checkBackupDeletionSuccess(final String backupName) throws Exception {\n    assertNotNull(\"backumpName must not be null\", backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Deletion Status of {}: {}\", backupName, data);\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData\n        || null == backupData.get(\"status\")\n        || ! backupName.equals(backupData.get(\"snapshotName\")) ) {\n      // either no backup activity at all,\n      // or most recent activity isn't something we can infer anything from,\n      // or is not about the backup we care about...\n      return false;\n    }\n    \n    final Object status = backupData.get(\"status\");\n    if (status.toString().startsWith(\"Unable to delete\")) {\n      // we already know backupData is about our backup\n      assertNull(\"Backup Deleting failure: \" + backupName, status);\n    }\n\n    if (\"success\".equals(status) && null != backupData.get(\"snapshotDeletedAt\")) {\n      return true; // backup done\n    }\n    \n    // if we're still here then this status is about our backup, but doesn't seem to be a deletion\n    return false;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#checkBackupDeletionSuccess(String).mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/BackupStatusChecker#checkBackupDeletionSuccess(String).mjava","sourceNew":"  /**\n   * Does a single check of the replication handler's status to determine if the specified name matches \n   * the most recently deleted backup, and if deleting that backup was a success.\n   * Throws a test assertion failure if the status is about this backupName but the starts message \n   * with <code>\"Unable to delete\"</code>\n   *\n   * @returns true if the replication status info indicates the backup was deleted, false otherwise\n   * @see #waitForBackupDeletionSuccess(String,TimeOut)\n   */\n  public boolean checkBackupDeletionSuccess(final String backupName) throws Exception {\n    assertNotNull(\"backumpName must not be null\", backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    @SuppressWarnings({\"rawtypes\"})\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Deletion Status of {}: {}\", backupName, data);\n    @SuppressWarnings({\"unchecked\"})\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData\n        || null == backupData.get(\"status\")\n        || ! backupName.equals(backupData.get(\"snapshotName\")) ) {\n      // either no backup activity at all,\n      // or most recent activity isn't something we can infer anything from,\n      // or is not about the backup we care about...\n      return false;\n    }\n    \n    final Object status = backupData.get(\"status\");\n    if (status.toString().startsWith(\"Unable to delete\")) {\n      // we already know backupData is about our backup\n      assertNull(\"Backup Deleting failure: \" + backupName, status);\n    }\n\n    if (\"success\".equals(status) && null != backupData.get(\"snapshotDeletedAt\")) {\n      return true; // backup done\n    }\n    \n    // if we're still here then this status is about our backup, but doesn't seem to be a deletion\n    return false;\n  }\n\n","sourceOld":"  /**\n   * Does a single check of the replication handler's status to determine if the specified name matches \n   * the most recently deleted backup, and if deleting that backup was a success.\n   * Throws a test assertion failure if the status is about this backupName but the starts message \n   * with <code>\"Unable to delete\"</code>\n   *\n   * @returns true if the replication status info indicates the backup was deleted, false otherwise\n   * @see #waitForBackupDeletionSuccess(String,TimeOut)\n   */\n  public boolean checkBackupDeletionSuccess(final String backupName) throws Exception {\n    assertNotNull(\"backumpName must not be null\", backupName);\n    final SimpleSolrResponse rsp = new GenericSolrRequest(GenericSolrRequest.METHOD.GET, path,\n                                                          params(\"command\", \"details\")).process(client);\n    final NamedList data = rsp.getResponse();\n    log.info(\"Checking Deletion Status of {}: {}\", backupName, data);\n    final NamedList<String> backupData = (NamedList<String>) data.findRecursive(\"details\",\"backup\");\n    if (null == backupData\n        || null == backupData.get(\"status\")\n        || ! backupName.equals(backupData.get(\"snapshotName\")) ) {\n      // either no backup activity at all,\n      // or most recent activity isn't something we can infer anything from,\n      // or is not about the backup we care about...\n      return false;\n    }\n    \n    final Object status = backupData.get(\"status\");\n    if (status.toString().startsWith(\"Unable to delete\")) {\n      // we already know backupData is about our backup\n      assertNull(\"Backup Deleting failure: \" + backupName, status);\n    }\n\n    if (\"success\".equals(status) && null != backupData.get(\"snapshotDeletedAt\")) {\n      return true; // backup done\n    }\n    \n    // if we're still here then this status is about our backup, but doesn't seem to be a deletion\n    return false;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"]},"commit2Childs":{"ec54bd926c45854b5a1599685b0f7d2bfbfe177f":["e98520789adb1d5ad05afb4956eca0944a929688"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ec54bd926c45854b5a1599685b0f7d2bfbfe177f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}