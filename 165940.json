{"path":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random().nextLong() + \":\" + random().nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random.nextLong() + \":\" + random.nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":["9d11511972fc8d4558c377d96ae9140cad10b67d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9d11511972fc8d4558c377d96ae9140cad10b67d","date":1334602989,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + random().nextLong() + \":\" + random().nextLong());\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b","date":1368612521,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n    InputStream is = p.getInputStream();\n    BufferedInputStream isl = new BufferedInputStream(is);\n    byte buffer[] = new byte[1024];\n    int len = 0;\n    if (VERBOSE) System.err.println(\">>> Begin subprocess output\");\n    while ((len = isl.read(buffer)) != -1) {\n      if (VERBOSE) {\n        System.err.write(buffer, 0, len);\n      }\n    }\n    if (VERBOSE) System.err.println(\"<<< End subprocess output\");\n    p.waitFor();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<String>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir);\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir.toFile());\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir.getPath());\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir);\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e6d6f6217dc04f29ee177d2837147dd47627787","date":1429543326,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  @SuppressForbidden(reason = \"ProcessBuilder requires java.io.File for CWD\")\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir);\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir.toFile());\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir);\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir.toFile());\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d","date":1433692150,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash#forkTest().mjava","sourceNew":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  @SuppressForbidden(reason = \"ProcessBuilder requires java.io.File for CWD\")\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(Paths.get(System.getProperty(\"java.home\"), \"bin\", \"java\").toString());\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir);\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd)\n      .directory(tempDir.toFile())\n      .redirectInput(Redirect.INHERIT)\n      .redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","sourceOld":"  /** fork ourselves in a new jvm. sets -Dtests.crashmode=true */\n  @SuppressForbidden(reason = \"ProcessBuilder requires java.io.File for CWD\")\n  public void forkTest() throws Exception {\n    List<String> cmd = new ArrayList<>();\n    cmd.add(System.getProperty(\"java.home\") \n        + System.getProperty(\"file.separator\")\n        + \"bin\"\n        + System.getProperty(\"file.separator\")\n        + \"java\");\n    cmd.add(\"-Xmx512m\");\n    cmd.add(\"-Dtests.crashmode=true\");\n    // passing NIGHTLY to this test makes it run for much longer, easier to catch it in the act...\n    cmd.add(\"-Dtests.nightly=true\");\n    cmd.add(\"-DtempDir=\" + tempDir);\n    cmd.add(\"-Dtests.seed=\" + SeedUtils.formatSeed(random().nextLong()));\n    cmd.add(\"-ea\");\n    cmd.add(\"-cp\");\n    cmd.add(System.getProperty(\"java.class.path\"));\n    cmd.add(\"org.junit.runner.JUnitCore\");\n    cmd.add(getClass().getName());\n    ProcessBuilder pb = new ProcessBuilder(cmd);\n    pb.directory(tempDir.toFile());\n    pb.redirectErrorStream(true);\n    Process p = pb.start();\n\n    // We pump everything to stderr.\n    PrintStream childOut = System.err; \n    Thread stdoutPumper = ThreadPumper.start(p.getInputStream(), childOut);\n    Thread stderrPumper = ThreadPumper.start(p.getErrorStream(), childOut);\n    if (VERBOSE) childOut.println(\">>> Begin subprocess output\");\n    p.waitFor();\n    stdoutPumper.join();\n    stderrPumper.join();\n    if (VERBOSE) childOut.println(\"<<< End subprocess output\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["f4abec28b874149a7223e32cc7a01704c27790de"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["9d11511972fc8d4558c377d96ae9140cad10b67d"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"9d11511972fc8d4558c377d96ae9140cad10b67d":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"f4abec28b874149a7223e32cc7a01704c27790de":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"]},"commit2Childs":{"7e6d6f6217dc04f29ee177d2837147dd47627787":["efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["f4abec28b874149a7223e32cc7a01704c27790de"],"db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9d11511972fc8d4558c377d96ae9140cad10b67d":["db62e3d5cd46d053fa0b9ac863a5a6dbe1c9498b"],"efa0ddc8716305bc4a06f27f9ae99fe5e23fc87d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["9d11511972fc8d4558c377d96ae9140cad10b67d"],"f4abec28b874149a7223e32cc7a01704c27790de":["7e6d6f6217dc04f29ee177d2837147dd47627787"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}