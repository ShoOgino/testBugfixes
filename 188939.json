{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","commits":[{"id":"a6987d91077abc969a2b13f6eba71e6f08774d7b","date":1498632689,"type":1,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      for (Map.Entry<String, Object> e : variables.entrySet()) {\n        ew1.put(e.getKey(), e.getValue());\n      }\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1bbcda32e5cd37ef61ea1190bacd080308e22070","date":1508850553,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      for (Map.Entry<String, Object> e : variables.entrySet()) {\n        ew1.put(e.getKey(), e.getValue());\n      }\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      for (Map.Entry<String, Object> e : variables.entrySet()) {\n        ew1.put(e.getKey(), e.getValue());\n      }\n      if (core != null && !variables.containsKey(ZkStateReader.CORE_NAME_PROP)) {\n        ew1.put(ZkStateReader.CORE_NAME_PROP, core);\n      }\n      if (shard != null && !variables.containsKey(ZkStateReader.SHARD_ID_PROP)) {\n        ew1.put(ZkStateReader.SHARD_ID_PROP, shard);\n      }\n      if (collection != null && !variables.containsKey(ZkStateReader.COLLECTION_PROP)) {\n        ew1.put(ZkStateReader.COLLECTION_PROP, collection);\n      }\n      if (node != null && !variables.containsKey(ZkStateReader.NODE_NAME_PROP)) {\n        ew1.put(ZkStateReader.NODE_NAME_PROP, node);\n      }\n      if (type != null) ew1.put(ZkStateReader.REPLICA_TYPE, type.toString());\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      if (variables != null) {\n        for (Map.Entry<String, Object> e : variables.entrySet()) {\n          ew1.put(e.getKey(), e.getValue());\n        }\n      }\n      if (type != null) ew1.put(\"type\", type.toString());\n    });\n  }\n\n","bugFix":null,"bugIntro":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"042da0877b8e28fd372a8ed80d11c4506a466ad7","date":1534516670,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    BiPredicate<String, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    ew.put(name, (MapWriter) ew1 -> {\n      ew1.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p);\n      for (Map.Entry<String, Object> e : variables.entrySet()) ew1.put(e.getKey(), e.getValue(), p);\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    ew.put(name, (MapWriter) ew1 -> {\n      for (Map.Entry<String, Object> e : variables.entrySet()) {\n        ew1.put(e.getKey(), e.getValue());\n      }\n      if (core != null && !variables.containsKey(ZkStateReader.CORE_NAME_PROP)) {\n        ew1.put(ZkStateReader.CORE_NAME_PROP, core);\n      }\n      if (shard != null && !variables.containsKey(ZkStateReader.SHARD_ID_PROP)) {\n        ew1.put(ZkStateReader.SHARD_ID_PROP, shard);\n      }\n      if (collection != null && !variables.containsKey(ZkStateReader.COLLECTION_PROP)) {\n        ew1.put(ZkStateReader.COLLECTION_PROP, collection);\n      }\n      if (node != null && !variables.containsKey(ZkStateReader.NODE_NAME_PROP)) {\n        ew1.put(ZkStateReader.NODE_NAME_PROP, node);\n      }\n      if (type != null) ew1.put(ZkStateReader.REPLICA_TYPE, type.toString());\n    });\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","8d1f7b3f5e5e45b15b9649564c72301c248de1b8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"457ac99a6d7227f954082cc753a08b18225e4553","date":1540167281,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    ew.put(name, (MapWriter) ew1 -> {\n      ew1.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p);\n      for (Map.Entry<String, Object> e : variables.entrySet()) ew1.put(e.getKey(), e.getValue(), p);\n    });\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    BiPredicate<String, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    ew.put(name, (MapWriter) ew1 -> {\n      ew1.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p);\n      for (Map.Entry<String, Object> e : variables.entrySet()) ew1.put(e.getKey(), e.getValue(), p);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/Replica#_allPropsWriter().mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/cloud/autoscaling/ReplicaInfo#writeMap(EntryWriter).mjava","sourceNew":"  private MapWriter _allPropsWriter() {\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    return writer -> {\n      // XXX this is why this class should be immutable - it's a mess !!!\n\n      // propMap takes precedence because it's mutable and we can't control its\n      // contents, so a third party may override some declared fields\n      for (Map.Entry<String, Object> e : propMap.entrySet()) {\n        writer.put(e.getKey(), e.getValue(), p);\n      }\n      writer.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p)\n          .put(ZkStateReader.STATE_PROP, state.toString(), p);\n    };\n  }\n\n","sourceOld":"  @Override\n  public void writeMap(EntryWriter ew) throws IOException {\n    BiPredicate<CharSequence, Object> p = dedupeKeyPredicate(new HashSet<>())\n        .and(NON_NULL_VAL);\n    ew.put(name, (MapWriter) ew1 -> {\n      ew1.put(ZkStateReader.CORE_NAME_PROP, core, p)\n          .put(ZkStateReader.SHARD_ID_PROP, shard, p)\n          .put(ZkStateReader.COLLECTION_PROP, collection, p)\n          .put(ZkStateReader.NODE_NAME_PROP, node, p)\n          .put(ZkStateReader.REPLICA_TYPE, type.toString(), p);\n      for (Map.Entry<String, Object> e : variables.entrySet()) ew1.put(e.getKey(), e.getValue(), p);\n    });\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a6987d91077abc969a2b13f6eba71e6f08774d7b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a6987d91077abc969a2b13f6eba71e6f08774d7b"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["457ac99a6d7227f954082cc753a08b18225e4553"],"457ac99a6d7227f954082cc753a08b18225e4553":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["560c18d71dad43d675158783c3840f8c80d6d39c"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"]},"commit2Childs":{"a6987d91077abc969a2b13f6eba71e6f08774d7b":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"457ac99a6d7227f954082cc753a08b18225e4553":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6987d91077abc969a2b13f6eba71e6f08774d7b","c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["1bbcda32e5cd37ef61ea1190bacd080308e22070"],"1bbcda32e5cd37ef61ea1190bacd080308e22070":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["042da0877b8e28fd372a8ed80d11c4506a466ad7"],"560c18d71dad43d675158783c3840f8c80d6d39c":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"042da0877b8e28fd372a8ed80d11c4506a466ad7":["457ac99a6d7227f954082cc753a08b18225e4553"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}