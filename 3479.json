{"path":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","commits":[{"id":"8b241ea5e635d896cc0af83cd96ffd0322e0aba7","date":1294226200,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,Searcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        Searcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce","date":1297021734,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test-framework/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/CheckHits#checkHits(Random,Query,String,IndexSearcher,int[]).mjava","sourceNew":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","sourceOld":"  /**\n   * Tests that a query matches the an expected set of documents using Hits.\n   *\n   * <p>\n   * Note that when using the Hits API, documents will only be returned\n   * if they have a positive normalized score.\n   * </p>\n   * @param query the query to test\n   * @param searcher the searcher to test the query against\n   * @param defaultFieldName used for displaing the query in assertion messages\n   * @param results a list of documentIds that must match the query\n   * @see Searcher#search(Query, int)\n   * @see #checkHitCollector\n   */\n  public static void checkHits(\n        Random random,\n        Query query,\n        String defaultFieldName,\n        IndexSearcher searcher,\n        int[] results)\n          throws IOException {\n\n    ScoreDoc[] hits = searcher.search(query, 1000).scoreDocs;\n\n    Set<Integer> correct = new TreeSet<Integer>();\n    for (int i = 0; i < results.length; i++) {\n      correct.add(Integer.valueOf(results[i]));\n    }\n\n    Set<Integer> actual = new TreeSet<Integer>();\n    for (int i = 0; i < hits.length; i++) {\n      actual.add(Integer.valueOf(hits[i].doc));\n    }\n\n    Assert.assertEquals(query.toString(defaultFieldName), correct, actual);\n\n    QueryUtils.check(random, query,searcher);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["70ad682703b8585f5d0a637efec044d57ec05efb","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"868da859b43505d9d2a023bfeae6dd0c795f5295":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","8b241ea5e635d896cc0af83cd96ffd0322e0aba7"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["8b241ea5e635d896cc0af83cd96ffd0322e0aba7"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":["29ef99d61cda9641b6250bf9567329a6e65f901d"],"8b241ea5e635d896cc0af83cd96ffd0322e0aba7":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["70ad682703b8585f5d0a637efec044d57ec05efb","8b241ea5e635d896cc0af83cd96ffd0322e0aba7","868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"f0b9dc55f42953d6740cddbc92cb0d19fe1ba0ce":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}