{"path":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","commits":[{"id":"44fcbde6fb2ac44ee3b45e013e54a42911e689ff","date":1292065621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["ced66195b26fdb1f77ee00e2a77ec6918dedd766","ced66195b26fdb1f77ee00e2a77ec6918dedd766"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","date":1309960478,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits delDocs = sub.getDeletedDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (delDocs == null || !delDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"913fa4c710b6d1168655966e59f0f4de566907a8","date":1327858476,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicIndexReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5cab9a86bd67202d20b6adc463008c8e982b070a","date":1327966443,"type":5,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(DirectoryReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#printDocs(IndexReader).mjava","sourceNew":"  private static void printDocs(DirectoryReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      // TODO: improve this\n      Bits liveDocs = ((AtomicReader)sub).getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  private static void printDocs(IndexReader r) throws Throwable {\n    IndexReader[] subs = r.getSequentialSubReaders();\n    for(IndexReader sub : subs) {\n      Bits liveDocs = sub.getLiveDocs();\n      System.out.println(\"  \" + ((SegmentReader) sub).getSegmentInfo());\n      for(int docID=0;docID<sub.maxDoc();docID++) {\n        Document doc = sub.document(docID);\n        if (liveDocs == null || liveDocs.get(docID)) {\n          System.out.println(\"    docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        } else {\n          System.out.println(\"    DEL docID=\" + docID + \" id:\" + doc.get(\"id\"));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"913fa4c710b6d1168655966e59f0f4de566907a8":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","44fcbde6fb2ac44ee3b45e013e54a42911e689ff"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"5cab9a86bd67202d20b6adc463008c8e982b070a":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","913fa4c710b6d1168655966e59f0f4de566907a8"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","e7bd246bb7bc35ac22edfee9157e034dfc4e65eb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5cab9a86bd67202d20b6adc463008c8e982b070a"]},"commit2Childs":{"44fcbde6fb2ac44ee3b45e013e54a42911e689ff":["e7bd246bb7bc35ac22edfee9157e034dfc4e65eb","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["44fcbde6fb2ac44ee3b45e013e54a42911e689ff","ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"e7bd246bb7bc35ac22edfee9157e034dfc4e65eb":["913fa4c710b6d1168655966e59f0f4de566907a8","d083e83f225b11e5fdd900e83d26ddb385b6955c","5cab9a86bd67202d20b6adc463008c8e982b070a","817d8435e9135b756f08ce6710ab0baac51bdf88"],"913fa4c710b6d1168655966e59f0f4de566907a8":["5cab9a86bd67202d20b6adc463008c8e982b070a"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"5cab9a86bd67202d20b6adc463008c8e982b070a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}