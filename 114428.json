{"path":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","commits":[{"id":"fb02351ae2b114dd41585916d1e35fb2cff98fb0","date":1337171337,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,\n                             boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return search(createNormalizedWeight(wrapFilter(query, filter)), (FieldDoc) after, n, sort, true,\n                  doDocScores, doMaxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef0d8a69209261514c5739c770bba706c2308450","date":1337607597,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,\n                             boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return search(createNormalizedWeight(wrapFilter(query, filter)), (FieldDoc) after, n, sort, true,\n                  doDocScores, doMaxScore);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,\n                             boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return search(createNormalizedWeight(wrapFilter(query, filter)), (FieldDoc) after, n, sort, true,\n                  doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses\n   */\n  public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,\n                             boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return search(createNormalizedWeight(wrapFilter(query, filter)), (FieldDoc) after, n, sort, true,\n                  doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, Filter filter, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, wrapFilter(query, filter), numHits, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopDocs searchAfter(ScoreDoc after, Query query, Filter filter, int n, Sort sort,\n                             boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return search(createNormalizedWeight(wrapFilter(query, filter)), (FieldDoc) after, n, sort, true,\n                  doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc","date":1424799790,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,int,Sort,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/IndexSearcher#searchAfter(ScoreDoc,Query,Filter,int,Sort,boolean,boolean).mjava","sourceNew":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, query, numHits, sort, doDocScores, doMaxScore);\n  }\n\n","sourceOld":"  /** Finds the top <code>n</code>\n   * hits for <code>query</code> where all results are after a previous \n   * result (<code>after</code>), allowing control over\n   * whether hit scores and max score should be computed.\n   * <p>\n   * By passing the bottom result from a previous page as <code>after</code>,\n   * this method can be used for efficient 'deep-paging' across potentially\n   * large result sets.  If <code>doDocScores</code> is <code>true</code>\n   * then the score of each hit will be computed and\n   * returned.  If <code>doMaxScore</code> is\n   * <code>true</code> then the maximum score over all\n   * collected hits will be computed.\n   *\n   * @throws BooleanQuery.TooManyClauses If a query would exceed \n   *         {@link BooleanQuery#getMaxClauseCount()} clauses.\n   */\n  public TopFieldDocs searchAfter(ScoreDoc after, Query query, Filter filter, int numHits, Sort sort,\n      boolean doDocScores, boolean doMaxScore) throws IOException {\n    if (after != null && !(after instanceof FieldDoc)) {\n      // TODO: if we fix type safety of TopFieldDocs we can\n      // remove this\n      throw new IllegalArgumentException(\"after must be a FieldDoc; got \" + after);\n    }\n    return searchAfter((FieldDoc) after, wrapFilter(query, filter), numHits, sort, doDocScores, doMaxScore);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"fb17639909a369c1e64866842e5c213440acc17e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["fb17639909a369c1e64866842e5c213440acc17e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef0d8a69209261514c5739c770bba706c2308450":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fb02351ae2b114dd41585916d1e35fb2cff98fb0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["fb17639909a369c1e64866842e5c213440acc17e"],"fb02351ae2b114dd41585916d1e35fb2cff98fb0":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","ef0d8a69209261514c5739c770bba706c2308450"],"fb17639909a369c1e64866842e5c213440acc17e":["f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fb02351ae2b114dd41585916d1e35fb2cff98fb0","ef0d8a69209261514c5739c770bba706c2308450"],"f8ec642b0195d666cf3b5a6a6c2a80bdd3b756bc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef0d8a69209261514c5739c770bba706c2308450":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ef0d8a69209261514c5739c770bba706c2308450","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}