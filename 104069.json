{"path":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","commits":[{"id":"fe874d5dba38e8313b2090a3d7335f4a39269336","date":1474455035,"type":0,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":1,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/request/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"be24bc5afb9111e35bec7963fc84f96ebd98d9ee","date":1477912779,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String namedListStyle = (random().nextBoolean() ? JSONWriter.JSON_NL_ARROFARR : JSONWriter.JSON_NL_ARROFNVP);\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String namedListStyle = (random().nextBoolean() ? JSONWriter.JSON_NL_ARROFARR : JSONWriter.JSON_NL_ARROFNVP);\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",\"arrarr\");\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n    jsonEq(\"{\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]],\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c","date":1478089840,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNVP,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String namedListStyle = (random().nextBoolean() ? JSONWriter.JSON_NL_ARROFARR : JSONWriter.JSON_NL_ARROFNVP);\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9720b151fde2073f4e401450f4574e5f31c2d0ff","date":1478184029,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNVP,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String namedListStyle = (random().nextBoolean() ? JSONWriter.JSON_NL_ARROFARR : JSONWriter.JSON_NL_ARROFNVP);\n    SolrQueryRequest req = req(\"wt\",\"json\",\"json.nl\",namedListStyle);\n    SolrQueryResponse rsp = new SolrQueryResponse();\n    JSONResponseWriter w = new JSONResponseWriter();\n\n    StringWriter buf = new StringWriter();\n    NamedList nl = new NamedList();\n    nl.add(\"data1\", \"he\\u2028llo\\u2029!\");       // make sure that 2028 and 2029 are both escaped (they are illegal in javascript)\n    nl.add(null, 42);\n    rsp.add(\"nl\", nl);\n\n    rsp.add(\"byte\", Byte.valueOf((byte)-3));\n    rsp.add(\"short\", Short.valueOf((short)-4));\n    rsp.add(\"bytes\", \"abc\".getBytes(StandardCharsets.UTF_8));\n\n    w.write(buf, req, rsp);\n\n    final String expectedNLjson;\n    if (namedListStyle == JSONWriter.JSON_NL_ARROFARR) {\n      expectedNLjson = \"\\\"nl\\\":[[\\\"data1\\\",\\\"he\\\\u2028llo\\\\u2029!\\\"],[null,42]]\";\n    } else if (namedListStyle == JSONWriter.JSON_NL_ARROFNVP) {\n      expectedNLjson = \"\\\"nl\\\":[{\\\"name\\\":\\\"data1\\\",\\\"str\\\":\\\"he\\\\u2028llo\\\\u2029!\\\"},{\\\"int\\\":42}]\";\n    } else {\n      expectedNLjson = null;\n      fail(\"unexpected namedListStyle=\"+namedListStyle);\n    }\n\n    jsonEq(\"{\"+expectedNLjson+\",\\\"byte\\\":-3,\\\"short\\\":-4,\\\"bytes\\\":\\\"YWJj\\\"}\", buf.toString());\n    req.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87f40a063571d1870bae89b6d191c3cb53b10f5e","date":1482933535,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNVP,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f03e4bed5023ec3ef93a771b8888cae991cf448d","date":1483469262,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNVP,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"26dad91f15019714a045b4d8c5f40162b2058b54","date":1528551655,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JsonTextWriter.JSON_NL_FLAT,\n        JsonTextWriter.JSON_NL_MAP,\n        JsonTextWriter.JSON_NL_ARROFARR,\n        JsonTextWriter.JSON_NL_ARROFMAP,\n        JsonTextWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JsonTextWriter.JSON_NL_FLAT,\n        JsonTextWriter.JSON_NL_MAP,\n        JsonTextWriter.JSON_NL_ARROFARR,\n        JsonTextWriter.JSON_NL_ARROFMAP,\n        JsonTextWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/JSONWriterTest#testJSON().mjava","sourceNew":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JsonTextWriter.JSON_NL_FLAT,\n        JsonTextWriter.JSON_NL_MAP,\n        JsonTextWriter.JSON_NL_ARROFARR,\n        JsonTextWriter.JSON_NL_ARROFMAP,\n        JsonTextWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","sourceOld":"  @Test\n  public void testJSON() throws IOException {\n    final String[] namedListStyles = new String[] {\n        JSONWriter.JSON_NL_FLAT,\n        JSONWriter.JSON_NL_MAP,\n        JSONWriter.JSON_NL_ARROFARR,\n        JSONWriter.JSON_NL_ARROFMAP,\n        JSONWriter.JSON_NL_ARROFNTV,\n    };\n    for (final String namedListStyle : namedListStyles) {\n      implTestJSON(namedListStyle);\n    }\n    assertEquals(JSONWriter.JSON_NL_STYLE_COUNT, namedListStyles.length);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"26dad91f15019714a045b4d8c5f40162b2058b54":["87f40a063571d1870bae89b6d191c3cb53b10f5e"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["320888923ec13b91f53082558f01f4c9960dd226","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"320888923ec13b91f53082558f01f4c9960dd226":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":["9720b151fde2073f4e401450f4574e5f31c2d0ff","87f40a063571d1870bae89b6d191c3cb53b10f5e"],"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["87f40a063571d1870bae89b6d191c3cb53b10f5e","26dad91f15019714a045b4d8c5f40162b2058b54"],"fe874d5dba38e8313b2090a3d7335f4a39269336":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","fe874d5dba38e8313b2090a3d7335f4a39269336"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["26dad91f15019714a045b4d8c5f40162b2058b54"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["87f40a063571d1870bae89b6d191c3cb53b10f5e","26dad91f15019714a045b4d8c5f40162b2058b54"]},"commit2Childs":{"26dad91f15019714a045b4d8c5f40162b2058b54":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"9720b151fde2073f4e401450f4574e5f31c2d0ff":["f03e4bed5023ec3ef93a771b8888cae991cf448d"],"87f40a063571d1870bae89b6d191c3cb53b10f5e":["26dad91f15019714a045b4d8c5f40162b2058b54","f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"320888923ec13b91f53082558f01f4c9960dd226":["9720b151fde2073f4e401450f4574e5f31c2d0ff"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["320888923ec13b91f53082558f01f4c9960dd226"],"f03e4bed5023ec3ef93a771b8888cae991cf448d":[],"be24bc5afb9111e35bec7963fc84f96ebd98d9ee":["320888923ec13b91f53082558f01f4c9960dd226","0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"fe874d5dba38e8313b2090a3d7335f4a39269336":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"0bc2a8bf9e7ef34dea49ba8feaac74e32a001a3c":["9720b151fde2073f4e401450f4574e5f31c2d0ff","87f40a063571d1870bae89b6d191c3cb53b10f5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","fe874d5dba38e8313b2090a3d7335f4a39269336","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","be24bc5afb9111e35bec7963fc84f96ebd98d9ee"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["f03e4bed5023ec3ef93a771b8888cae991cf448d","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}