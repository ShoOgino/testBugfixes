{"path":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.VerifyHits#test(IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","commits":[{"id":"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d","date":1437181221,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.VerifyHits#test(IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","pathOld":"/dev/null","sourceNew":"    public void test(IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null) {\n\n          if (hits.get(docID) != expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id +\n                               \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \" deleted?=\" + deleted.contains(id) + \" expected=\" + expected + \" but got \" + hits.get(docID) +\n                               \" query=\" + query);\n            fail(\"wrong hit\");\n          }\n        }\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07c50cb1eca5629cac5b6702dd0f5e06157af61a","date":1445464748,"type":4,"author":"Nick Knize","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/sandbox/src/test/org/apache/lucene/search/TestGeoPointQuery.VerifyHits#test(IndexSearcher,NumericDocValues,Set[Integer],Query,double[],double[]).mjava","sourceNew":null,"sourceOld":"    public void test(IndexSearcher s, NumericDocValues docIDToID, Set<Integer> deleted, Query query, double[] lats, double[] lons) throws Exception {\n      int maxDoc = s.getIndexReader().maxDoc();\n      final FixedBitSet hits = new FixedBitSet(maxDoc);\n      s.search(query, new SimpleCollector() {\n\n          private int docBase;\n\n          @Override\n          public boolean needsScores() {\n            return false;\n          }\n\n          @Override\n          protected void doSetNextReader(LeafReaderContext context) throws IOException {\n            docBase = context.docBase;\n          }\n\n          @Override\n          public void collect(int doc) {\n            hits.set(docBase+doc);\n          }\n        });\n\n      for(int docID=0;docID<maxDoc;docID++) {\n        int id = (int) docIDToID.get(docID);\n        Boolean expected;\n        if (deleted.contains(id)) {\n          expected = false;\n        } else {\n          expected = shouldMatch(lats[id], lons[id]);\n        }\n\n        // null means it's a borderline case which is allowed to be wrong:\n        if (expected != null) {\n\n          if (hits.get(docID) != expected) {\n            System.out.println(Thread.currentThread().getName() + \": id=\" + id +\n                               \" docID=\" + docID + \" lat=\" + lats[id] + \" lon=\" + lons[id] +\n                               \" deleted?=\" + deleted.contains(id) + \" expected=\" + expected + \" but got \" + hits.get(docID) +\n                               \" query=\" + query);\n            fail(\"wrong hit\");\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"]},"commit2Childs":{"a4c5421d43870949fb33be27fc9cba0f8f3a7c8d":["07c50cb1eca5629cac5b6702dd0f5e06157af61a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a4c5421d43870949fb33be27fc9cba0f8f3a7c8d"],"07c50cb1eca5629cac5b6702dd0f5e06157af61a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}