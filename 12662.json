{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","commits":[{"id":"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051","date":1412632911,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().getSegmentInfoWriter().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().getSegmentInfoReader().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["8521d944f9dfb45692ec28235dbf116d47ef69ba","0617d2d25b13b9a49450ea49ceb06123ebd6542a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e2fe60a17a7a0cfd101b1169acf089221bc6c166","date":1412767493,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().getSegmentInfoWriter().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().getSegmentInfoReader().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3384e6013a93e4d11b7d75388693f8d0388602bf","date":1413951663,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"db68c63cbfaa8698b9c4475f75ed2b9c9696d238","date":1414118621,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8521d944f9dfb45692ec28235dbf116d47ef69ba","date":1417535150,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"31741cf1390044e38a2ec3127cf302ba841bfd75","date":1491292636,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, null, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"92212fd254551a0b1156aafc3a1a6ed1a43932ad","date":1491296431,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, null, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0617d2d25b13b9a49450ea49ceb06123ebd6542a","date":1508865221,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BaseSegmentInfoFormatTestCase#testRandom().mjava","sourceNew":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      long randomSegmentIndex = Math.abs(random().nextLong());\n      String name = \"_\" + Long.toString(randomSegmentIndex != Long.MIN_VALUE ? randomSegmentIndex : random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, null, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","sourceOld":"  /** \n   * Sets some otherwise hard-to-test properties: \n   * random segment names, ID values, document count, etc and round-trips\n   */\n  public void testRandom() throws Exception {\n    Codec codec = getCodec();\n    Version[] versions = getVersions();\n    for (int i = 0; i < 10; i++) {\n      Directory dir = newDirectory();\n      Version version = versions[random().nextInt(versions.length)];\n      String name = \"_\" + Integer.toString(random().nextInt(Integer.MAX_VALUE), Character.MAX_RADIX);\n      int docCount = TestUtil.nextInt(random(), 1, IndexWriter.MAX_DOCS);\n      boolean isCompoundFile = random().nextBoolean();\n      Set<String> files = new HashSet<>();\n      int numFiles = random().nextInt(10);\n      for (int j = 0; j < numFiles; j++) {\n        String file = IndexFileNames.segmentFileName(name, \"\", Integer.toString(j));\n        files.add(file);\n        dir.createOutput(file, IOContext.DEFAULT).close();\n      }\n      Map<String,String> diagnostics = new HashMap<>();\n      int numDiags = random().nextInt(10);\n      for (int j = 0; j < numDiags; j++) {\n        diagnostics.put(TestUtil.randomUnicodeString(random()), \n                        TestUtil.randomUnicodeString(random()));\n      }\n      byte id[] = new byte[StringHelper.ID_LENGTH];\n      random().nextBytes(id);\n      \n      Map<String,String> attributes = new HashMap<>();\n      int numAttributes = random().nextInt(10);\n      for (int j = 0; j < numAttributes; j++) {\n        attributes.put(TestUtil.randomUnicodeString(random()), \n                       TestUtil.randomUnicodeString(random()));\n      }\n      \n      SegmentInfo info = new SegmentInfo(dir, version, null, name, docCount, isCompoundFile, codec, diagnostics, id, attributes, null);\n      info.setFiles(files);\n      codec.segmentInfoFormat().write(dir, info, IOContext.DEFAULT);\n      SegmentInfo info2 = codec.segmentInfoFormat().read(dir, name, id, IOContext.DEFAULT);\n      assertEquals(info, info2);\n \n      dir.close();\n    }\n  }\n\n","bugFix":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"55980207f1977bd1463465de1659b821347e2fa8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["55980207f1977bd1463465de1659b821347e2fa8"],"0ad30c6a479e764150a3316e57263319775f1df2":["8521d944f9dfb45692ec28235dbf116d47ef69ba","3d33e731a93d4b57e662ff094f64f94a745422d4"],"0617d2d25b13b9a49450ea49ceb06123ebd6542a":["31741cf1390044e38a2ec3127cf302ba841bfd75"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["8521d944f9dfb45692ec28235dbf116d47ef69ba","d470c8182e92b264680e34081b75e70a9f2b3c89"],"31741cf1390044e38a2ec3127cf302ba841bfd75":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["8521d944f9dfb45692ec28235dbf116d47ef69ba","0ad30c6a479e764150a3316e57263319775f1df2"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["e2fe60a17a7a0cfd101b1169acf089221bc6c166","3384e6013a93e4d11b7d75388693f8d0388602bf"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["8521d944f9dfb45692ec28235dbf116d47ef69ba","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0617d2d25b13b9a49450ea49ceb06123ebd6542a"]},"commit2Childs":{"e2fe60a17a7a0cfd101b1169acf089221bc6c166":["55980207f1977bd1463465de1659b821347e2fa8","db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"55980207f1977bd1463465de1659b821347e2fa8":["3384e6013a93e4d11b7d75388693f8d0388602bf"],"3384e6013a93e4d11b7d75388693f8d0388602bf":["db68c63cbfaa8698b9c4475f75ed2b9c9696d238"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0617d2d25b13b9a49450ea49ceb06123ebd6542a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"31741cf1390044e38a2ec3127cf302ba841bfd75":["0617d2d25b13b9a49450ea49ceb06123ebd6542a"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","31741cf1390044e38a2ec3127cf302ba841bfd75","92212fd254551a0b1156aafc3a1a6ed1a43932ad"],"8521d944f9dfb45692ec28235dbf116d47ef69ba":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"2c3c58609ce8cbaa9116c281d30aa3cdc6a87051":["e2fe60a17a7a0cfd101b1169acf089221bc6c166"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55980207f1977bd1463465de1659b821347e2fa8","2c3c58609ce8cbaa9116c281d30aa3cdc6a87051"],"db68c63cbfaa8698b9c4475f75ed2b9c9696d238":["8521d944f9dfb45692ec28235dbf116d47ef69ba"],"92212fd254551a0b1156aafc3a1a6ed1a43932ad":[],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","92212fd254551a0b1156aafc3a1a6ed1a43932ad","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}