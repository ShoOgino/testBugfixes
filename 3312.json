{"path":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","commits":[{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK\n    Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n        .getClusterProperty(\"metrics\", Collections.emptyMap())\n        .getOrDefault(\"history\", Collections.emptyMap());\n    args.putAll(props);\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, cloudManager.getTimeSource());\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager.getTimeSource();\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f8f0f2472d437d44ec2144932e1d13fb494e82a3","date":1528403207,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK\n    Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n        .getClusterProperty(\"metrics\", Collections.emptyMap())\n        .getOrDefault(\"history\", Collections.emptyMap());\n    args.putAll(props);\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, cloudManager.getTimeSource());\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager.getTimeSource();\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK\n    Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n        .getClusterProperty(\"metrics\", Collections.emptyMap())\n        .getOrDefault(\"history\", Collections.emptyMap());\n    args.putAll(props);\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, cloudManager.getTimeSource());\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager.getTimeSource();\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK\n    Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n        .getClusterProperty(\"metrics\", Collections.emptyMap())\n        .getOrDefault(\"history\", Collections.emptyMap());\n    args.putAll(props);\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, cloudManager.getTimeSource());\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager.getTimeSource();\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb03700c9690d16b15fb4f56f6ec36b128fd894e","date":1586745995,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new SolrNamedThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new DefaultSolrThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new SolrNamedThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new SolrNamedThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2bb87985079ab034ce215661202801376f614a8c","date":1595969187,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/MetricsHistoryHandler#MetricsHistoryHandler(String,MetricsHandler,SolrClient,SolrCloudManager,Map[String,Object]).mjava","sourceNew":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n              syncPeriod, this.timeSource);\n\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new SolrNamedThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    } else {\n      factory = null;\n    }\n  }\n\n","sourceOld":"  public MetricsHistoryHandler(String nodeName, MetricsHandler metricsHandler,\n        SolrClient solrClient, SolrCloudManager cloudManager, Map<String, Object> pluginArgs) {\n\n    Map<String, Object> args = new HashMap<>();\n    // init from optional solr.xml config\n    if (pluginArgs != null) {\n      args.putAll(pluginArgs);\n    }\n    // override from ZK if available\n    if (cloudManager != null) {\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> props = (Map<String, Object>)cloudManager.getClusterStateProvider()\n          .getClusterProperty(\"metrics\", Collections.emptyMap())\n          .getOrDefault(\"history\", Collections.emptyMap());\n      args.putAll(props);\n\n      overseerUrlScheme = cloudManager.getClusterStateProvider().getClusterProperty(\"urlScheme\", \"http\");\n    } else {\n      overseerUrlScheme = \"http\";\n    }\n\n    this.nodeName = nodeName;\n    this.enable = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_PROP, \"true\")));\n    // default to false - don't collect local per-replica metrics\n    this.enableReplicas = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_REPLICAS_PROP, \"false\")));\n    this.enableNodes = Boolean.parseBoolean(String.valueOf(args.getOrDefault(ENABLE_NODES_PROP, \"false\")));\n    this.collectPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(COLLECT_PERIOD_PROP, DEFAULT_COLLECT_PERIOD)));\n    int syncPeriod = Integer.parseInt(String.valueOf(args.getOrDefault(SYNC_PERIOD_PROP, SolrRrdBackendFactory.DEFAULT_SYNC_PERIOD)));\n\n    this.solrClient = solrClient;\n    this.metricsHandler = metricsHandler;\n    this.cloudManager = cloudManager;\n    this.timeSource = cloudManager != null ? cloudManager.getTimeSource() : TimeSource.NANO_TIME;\n    factory = new SolrRrdBackendFactory(solrClient, CollectionAdminParams.SYSTEM_COLL,\n            syncPeriod, this.timeSource);\n\n    counters.put(Group.core.toString(), DEFAULT_CORE_COUNTERS);\n    counters.put(Group.node.toString(), Collections.emptyList());\n    counters.put(Group.jvm.toString(), Collections.emptyList());\n    counters.put(Group.collection.toString(), Collections.emptyList());\n    gauges.put(Group.core.toString(), DEFAULT_CORE_GAUGES);\n    gauges.put(Group.node.toString(), DEFAULT_NODE_GAUGES);\n    gauges.put(Group.jvm.toString(), DEFAULT_JVM_GAUGES);\n    gauges.put(Group.collection.toString(), DEFAULT_COLLECTION_GAUGES);\n\n    versionString = this.getClass().getPackage().getImplementationVersion();\n    if (versionString == null) {\n      versionString = \"?.?.?\";\n    }\n    if (versionString.length() > 24) {\n      versionString = versionString.substring(0, 24) + \"...\";\n    }\n\n    if (enable) {\n      collectService = (ScheduledThreadPoolExecutor) Executors.newScheduledThreadPool(1,\n          new SolrNamedThreadFactory(\"MetricsHistoryHandler\"));\n      collectService.setRemoveOnCancelPolicy(true);\n      collectService.setExecuteExistingDelayedTasksAfterShutdownPolicy(false);\n      collectService.scheduleWithFixedDelay(() -> collectMetrics(),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          timeSource.convertDelay(TimeUnit.SECONDS, collectPeriod, TimeUnit.MILLISECONDS),\n          TimeUnit.MILLISECONDS);\n      checkSystemCollection();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ba055e19afc289adcb5bedaf68513793a7254012":["fb03700c9690d16b15fb4f56f6ec36b128fd894e"],"2bb87985079ab034ce215661202801376f614a8c":["ba055e19afc289adcb5bedaf68513793a7254012"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["f8f0f2472d437d44ec2144932e1d13fb494e82a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["2bb87985079ab034ce215661202801376f614a8c"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","f8f0f2472d437d44ec2144932e1d13fb494e82a3"]},"commit2Childs":{"f8f0f2472d437d44ec2144932e1d13fb494e82a3":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","fb03700c9690d16b15fb4f56f6ec36b128fd894e","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["f8f0f2472d437d44ec2144932e1d13fb494e82a3","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"ba055e19afc289adcb5bedaf68513793a7254012":["2bb87985079ab034ce215661202801376f614a8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"2bb87985079ab034ce215661202801376f614a8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb03700c9690d16b15fb4f56f6ec36b128fd894e":["ba055e19afc289adcb5bedaf68513793a7254012"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}