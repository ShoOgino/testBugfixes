{"path":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","commits":[{"id":"b1405362241b561f5590ff4a87d5d6e173bcd9cf","date":1190107634,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"/dev/null","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n        assertEquals(0, cms.getExceptions().size());\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"290c401c31db375e771805c3ba7ac5f64c7370dc","date":1192034795,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n        assertEquals(0, cms.getExceptions().size());\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0018e7a0579df5d3de71d0bd878322a7abef04d9","date":1202242049,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a","date":1221082732,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.TOKENIZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c4ae99f08f69aa3acba7cd75134e8447eb747559","date":1222344278,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true, IndexWriter.MaxFieldLength.LIMITED);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false, IndexWriter.MaxFieldLength.LIMITED);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"87c966e9308847938a7c905c2e46a56d8df788b8","date":1255035452,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<7;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    for(int pass=0;pass<2;pass++) {\n\n      boolean autoCommit = pass==0;\n      IndexWriter writer = new IndexWriter(directory, autoCommit, ANALYZER, true);\n\n      for(int iter=0;iter<7;iter++) {\n        ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n        writer.setMergeScheduler(cms);\n        writer.setMaxBufferedDocs(2);\n\n        for(int j=0;j<21;j++) {\n          Document doc = new Document();\n          doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n          writer.addDocument(doc);\n        }\n        \n        writer.close();\n        TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles autoCommit=\" + autoCommit);\n\n        // Reopen\n        writer = new IndexWriter(directory, autoCommit, ANALYZER, false);\n      }\n\n      writer.close();\n    }\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1cedb00d2dd44640194401179358a2e3ba6051bf","date":1268243626,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n\n    for(int iter=0;iter<7;iter++) {\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND)\n          .setMaxBufferedDocs(2));\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<7;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e52fea2c4081a1e552b98506691990be59503168","date":1268250331,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<7;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT).setMaxBufferedDocs(2));\n\n    for(int iter=0;iter<7;iter++) {\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT).setOpenMode(OpenMode.APPEND)\n          .setMaxBufferedDocs(2));\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8","date":1268494368,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n\n    for(int iter=0;iter<7;iter++) {\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, ANALYZER, true, IndexWriter.MaxFieldLength.UNLIMITED);\n\n    for(int iter=0;iter<7;iter++) {\n      ConcurrentMergeScheduler cms = new ConcurrentMergeScheduler();\n      writer.setMergeScheduler(cms);\n      writer.setMaxBufferedDocs(2);\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, ANALYZER, false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","pathOld":"src/test/org/apache/lucene/index/TestConcurrentMergeScheduler#testNoExtraFiles().mjava","sourceNew":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n\n    for(int iter=0;iter<7;iter++) {\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","sourceOld":"  public void testNoExtraFiles() throws IOException {\n\n    RAMDirectory directory = new MockRAMDirectory();\n\n    IndexWriter writer = new IndexWriter(directory, new IndexWriterConfig(\n        TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n        .setMaxBufferedDocs(2));\n\n    for(int iter=0;iter<7;iter++) {\n\n      for(int j=0;j<21;j++) {\n        Document doc = new Document();\n        doc.add(new Field(\"content\", \"a b c\", Field.Store.NO, Field.Index.ANALYZED));\n        writer.addDocument(doc);\n      }\n        \n      writer.close();\n      TestIndexWriter.assertNoUnreferencedFiles(directory, \"testNoExtraFiles\");\n\n      // Reopen\n      writer = new IndexWriter(directory, new IndexWriterConfig(\n          TEST_VERSION_CURRENT, new SimpleAnalyzer(TEST_VERSION_CURRENT))\n          .setOpenMode(OpenMode.APPEND).setMaxBufferedDocs(2));\n    }\n\n    writer.close();\n\n    directory.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["e52fea2c4081a1e552b98506691990be59503168"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"290c401c31db375e771805c3ba7ac5f64c7370dc":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["87c966e9308847938a7c905c2e46a56d8df788b8"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"e52fea2c4081a1e552b98506691990be59503168":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"87c966e9308847938a7c905c2e46a56d8df788b8":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"]},"commit2Childs":{"b1405362241b561f5590ff4a87d5d6e173bcd9cf":["290c401c31db375e771805c3ba7ac5f64c7370dc"],"84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c4ae99f08f69aa3acba7cd75134e8447eb747559":["87c966e9308847938a7c905c2e46a56d8df788b8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b1405362241b561f5590ff4a87d5d6e173bcd9cf"],"290c401c31db375e771805c3ba7ac5f64c7370dc":["0018e7a0579df5d3de71d0bd878322a7abef04d9"],"1cedb00d2dd44640194401179358a2e3ba6051bf":["e52fea2c4081a1e552b98506691990be59503168"],"b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a":["c4ae99f08f69aa3acba7cd75134e8447eb747559"],"e52fea2c4081a1e552b98506691990be59503168":["84080a7d7dbdaa3e6a4a1c9f1bb6221be40f47e8"],"0018e7a0579df5d3de71d0bd878322a7abef04d9":["b5015bd4c211c4f399ae66ee20fe6841ba5b0b6a"],"87c966e9308847938a7c905c2e46a56d8df788b8":["1cedb00d2dd44640194401179358a2e3ba6051bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}