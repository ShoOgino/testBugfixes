{"path":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","commits":[{"id":"464244264804e3f981bf1fb4b732516d8d62dbc2","date":1495736161,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5531f16a602ef350b6c9adfb08ebaa13a60fe3db","date":1495756318,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a513b6a92751e54c76fb5447948c9e7d437163a7","date":1496136565,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74aea047dff7f7c38a2d766827bd20d356f98c6a","date":1496721416,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58e890cd5653ae8550bc6088d739f4eaaf950aff","date":1547036285,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap?  new LinkedHashMap(map.size()): new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = new LinkedHashMap();\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb50877dc038c021eba3a70999fd1f6ed85001c1","date":1563596432,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if (map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap ? new LinkedHashMap(map.size()) : new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(), maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap?  new LinkedHashMap(map.size()): new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap?  new LinkedHashMap(map.size()): new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if (map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap ? new LinkedHashMap(map.size()) : new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(), maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8476949555f799dff381770c01cfad051a264487","date":1570505073,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","sourceNew":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if (map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap ? new LinkedHashMap(map.size()) : new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(), maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if(map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap?  new LinkedHashMap(map.size()): new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(),maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76","date":1591450217,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/Utils#getDeepCopy(Map,int,boolean,boolean).mjava","sourceNew":"  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if (map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap<>();\n    } else {\n      copy = map instanceof LinkedHashMap ? new LinkedHashMap<>(map.size()) : new HashMap<>(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(), maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","sourceOld":"  public static Map getDeepCopy(Map map, int maxDepth, boolean mutable, boolean sorted) {\n    if (map == null) return null;\n    if (maxDepth < 1) return map;\n    Map copy;\n    if (sorted) {\n      copy = new TreeMap();\n    } else {\n      copy = map instanceof LinkedHashMap ? new LinkedHashMap(map.size()) : new HashMap(map.size());\n    }\n    for (Object o : map.entrySet()) {\n      Map.Entry e = (Map.Entry) o;\n      copy.put(e.getKey(), makeDeepCopy(e.getValue(), maxDepth, mutable, sorted));\n    }\n    return mutable ? copy : Collections.unmodifiableMap(copy);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["28288370235ed02234a64753cdbf0c6ec096304a"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["8476949555f799dff381770c01cfad051a264487"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","464244264804e3f981bf1fb4b732516d8d62dbc2"],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a513b6a92751e54c76fb5447948c9e7d437163a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a513b6a92751e54c76fb5447948c9e7d437163a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8476949555f799dff381770c01cfad051a264487":["c44cc06c26e456fe9c215072b79fce30babe3975"],"c44cc06c26e456fe9c215072b79fce30babe3975":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"28288370235ed02234a64753cdbf0c6ec096304a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","74aea047dff7f7c38a2d766827bd20d356f98c6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"]},"commit2Childs":{"58e890cd5653ae8550bc6088d739f4eaaf950aff":["fb50877dc038c021eba3a70999fd1f6ed85001c1"],"8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"fb50877dc038c021eba3a70999fd1f6ed85001c1":["c44cc06c26e456fe9c215072b79fce30babe3975"],"5531f16a602ef350b6c9adfb08ebaa13a60fe3db":[],"74aea047dff7f7c38a2d766827bd20d356f98c6a":["28288370235ed02234a64753cdbf0c6ec096304a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","74aea047dff7f7c38a2d766827bd20d356f98c6a","a513b6a92751e54c76fb5447948c9e7d437163a7","464244264804e3f981bf1fb4b732516d8d62dbc2","28288370235ed02234a64753cdbf0c6ec096304a"],"464244264804e3f981bf1fb4b732516d8d62dbc2":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db"],"a513b6a92751e54c76fb5447948c9e7d437163a7":["74aea047dff7f7c38a2d766827bd20d356f98c6a"],"8476949555f799dff381770c01cfad051a264487":["8dc9df63ec3bc509a28d29b0ddcf6f14756b3e76"],"c44cc06c26e456fe9c215072b79fce30babe3975":["8476949555f799dff381770c01cfad051a264487"],"28288370235ed02234a64753cdbf0c6ec096304a":["58e890cd5653ae8550bc6088d739f4eaaf950aff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5531f16a602ef350b6c9adfb08ebaa13a60fe3db","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}