{"path":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","commits":[{"id":"98a8a68e6714cb8742c790308b9f5180d63417d4","date":1272554039,"type":1,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n\n    assertU(adoc(\"id\", \"1\",  f, \"AAA\"));\n    assertU(adoc(\"id\", \"2\",  f, \"B\"));\n    assertU(adoc(\"id\", \"3\",  f, \"BB\"));\n    assertU(adoc(\"id\", \"4\",  f, \"BB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"5\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"6\",  f, \"BBB\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"7\",  f, \"BBB\"));\n    assertU(adoc(\"id\", \"8\",  f, \"CC\"));\n    assertU(adoc(\"id\", \"9\",  f, \"CC\"));\n    assertU(commit());\n    assertU(adoc(\"id\", \"10\", f, \"CCC\"));\n    assertU(adoc(\"id\", \"11\", f, \"CCC\"));\n    assertU(commit());    \n    assertU(adoc(\"id\", \"12\", f, \"CCC\"));\n    assertU(commit());\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", f\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1","date":1282858367,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","pathOld":"solr/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1"],"c26f00b574427b55127e869b935845554afde1fa":["ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"98a8a68e6714cb8742c790308b9f5180d63417d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["98a8a68e6714cb8742c790308b9f5180d63417d4","ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1"],"ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["98a8a68e6714cb8742c790308b9f5180d63417d4"],"98a8a68e6714cb8742c790308b9f5180d63417d4":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"ba1ed9f3f70e34de5dd5d526f0316ec3d3ce8bc1":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}