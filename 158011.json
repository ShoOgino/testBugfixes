{"path":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","commits":[{"id":"3fc1f3f78b299e125f7e60f43b5d457392bea23f","date":1317431015,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,ScorerContext).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, ScorerContext scorerContext) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, ScorerContext.def());\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, scorerContext.scoreDocsInOrder(true));\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","pathOld":"modules/queries/src/java/org/apache/lucene/queries/CustomScoreQuery.CustomWeight#scorer(AtomicReaderContext,boolean,boolean,Bits).mjava","sourceNew":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","sourceOld":"    @Override\n    public Scorer scorer(AtomicReaderContext context, boolean scoreDocsInOrder,\n        boolean topScorer, Bits acceptDocs) throws IOException {\n      // Pass true for \"scoresDocsInOrder\", because we\n      // require in-order scoring, even if caller does not,\n      // since we call advance on the valSrcScorers.  Pass\n      // false for \"topScorer\" because we will not invoke\n      // score(Collector) on these scorers:\n      Scorer subQueryScorer = subQueryWeight.scorer(context, true, false, acceptDocs);\n      if (subQueryScorer == null) {\n        return null;\n      }\n      Scorer[] valSrcScorers = new Scorer[valSrcWeights.length];\n      for(int i = 0; i < valSrcScorers.length; i++) {\n         valSrcScorers[i] = valSrcWeights[i].scorer(context, true, topScorer, acceptDocs);\n      }\n      return new CustomScorer(CustomScoreQuery.this.getCustomScoreProvider(context), this, getBoost(), subQueryScorer, valSrcScorers);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3fc1f3f78b299e125f7e60f43b5d457392bea23f":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3fc1f3f78b299e125f7e60f43b5d457392bea23f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}