{"path":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","commits":[{"id":"9b5756469957918cac40a831acec9cf01c8c2bb3","date":1249167152,"type":2,"author":"Michael Busch","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseTokens(Token,int).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(input.correctOffset(theStart), input.correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseTokens(final Token reusableToken, int tokenType) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    reusableToken.setTermBuffer(s.toCharArray(), 0, s.length());\n    reusableToken.setStartOffset(input.correctOffset(theStart));\n    reusableToken.setEndOffset(input.correctOffset(theStart + s.length()));\n    reusableToken.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    } else {\n      tokens = null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(input.correctOffset(theStart), input.correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","bugFix":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c","date":1254521470,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuffer buffer = new StringBuffer(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c69d87d34a81230de56333f52f590caeb6d80667","date":1257848306,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List<AttributeSource.State> tmp = new ArrayList<AttributeSource.State>();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List tmp = new ArrayList();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","pathOld":"contrib/wikipedia/src/java/org/apache/lucene/wikipedia/analysis/WikipediaTokenizer#collapseAndSaveTokens(int,String).mjava","sourceNew":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List<AttributeSource.State> tmp = new ArrayList<AttributeSource.State>();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","sourceOld":"  private void collapseAndSaveTokens(int tokenType, String type) throws IOException {\n    //collapse\n    StringBuilder buffer = new StringBuilder(32);\n    int numAdded = scanner.setText(buffer);\n    //TODO: how to know how much whitespace to add\n    int theStart = scanner.yychar();\n    int lastPos = theStart + numAdded;\n    int tmpTokType;\n    int numSeen = 0;\n    List<AttributeSource.State> tmp = new ArrayList<AttributeSource.State>();\n    setupSavedToken(0, type);\n    tmp.add(captureState());\n    //while we can get a token and that token is the same type and we have not transitioned to a new wiki-item of the same type\n    while ((tmpTokType = scanner.getNextToken()) != WikipediaTokenizerImpl.YYEOF && tmpTokType == tokenType && scanner.getNumWikiTokensSeen() > numSeen){\n      int currPos = scanner.yychar();\n      //append whitespace\n      for (int i = 0; i < (currPos - lastPos); i++){\n        buffer.append(' ');\n      }\n      numAdded = scanner.setText(buffer);\n      setupSavedToken(scanner.getPositionIncrement(), type);\n      tmp.add(captureState());\n      numSeen++;\n      lastPos = currPos + numAdded;\n    }\n    //trim the buffer\n    String s = buffer.toString().trim();\n    termAtt.setTermBuffer(s.toCharArray(), 0, s.length());\n    offsetAtt.setOffset(correctOffset(theStart), correctOffset(theStart + s.length()));\n    flagsAtt.setFlags(UNTOKENIZED_TOKEN_FLAG);\n    //The way the loop is written, we will have proceeded to the next token.  We need to pushback the scanner to lastPos\n    if (tmpTokType != WikipediaTokenizerImpl.YYEOF){\n      scanner.yypushback(scanner.yylength());\n    }\n    tokens = tmp.iterator();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c69d87d34a81230de56333f52f590caeb6d80667":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c69d87d34a81230de56333f52f590caeb6d80667"]},"commit2Childs":{"c69d87d34a81230de56333f52f590caeb6d80667":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["4625cb7ffd7c9caaf2d62b206ba9a382d68da82c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b5756469957918cac40a831acec9cf01c8c2bb3"],"9b5756469957918cac40a831acec9cf01c8c2bb3":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"4625cb7ffd7c9caaf2d62b206ba9a382d68da82c":["c69d87d34a81230de56333f52f590caeb6d80667"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}