{"path":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    firstTime = false;\n    for (PhrasePositions pp = first; more && pp != null; pp = pp.next) {\n      more = pp.skipTo(target);\n    }\n    if (more) {\n      sort();                                     // re-sort\n    }\n    if (!doNext()) {\n      first.doc = NO_MORE_DOCS;\n    }\n    return first.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    firstTime = false;\n    for (PhrasePositions pp = first; more && pp != null; pp = pp.next) {\n      more = pp.skipTo(target);\n    }\n    if (more) {\n      sort();                                     // re-sort\n    }\n    if (!doNext()) {\n      first.doc = NO_MORE_DOCS;\n    }\n    return first.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9ff635e6838a2facda02727dec5b77d9e64dc4c","date":1316672863,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    firstTime = false;\n    for (PhrasePositions pp = first; more && pp != null; pp = pp.next) {\n      more = pp.skipTo(target);\n    }\n    if (more) {\n      sort();                                     // re-sort\n    }\n    if (!doNext()) {\n      first.doc = NO_MORE_DOCS;\n    }\n    return first.doc;\n  }\n\n","bugFix":["30a558487f2298c2c19ceca9103c1b6865d64708"],"bugIntro":["07c6861cb029cd251d930aa4c4578c8ca21aa957","07c6861cb029cd251d930aa4c4578c8ca21aa957"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/PhraseScorer#advance(int).mjava","sourceNew":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","sourceOld":"  @Override\n  public int advance(int target) throws IOException {\n    freq = 0.0f;\n    if (!advanceMin(target)) {\n      return NO_MORE_DOCS;\n    }        \n    boolean restart=false;\n    while (freq == 0.0f) {\n      while (min.doc < max.doc || restart) {\n        restart = false;\n        if (!advanceMin(max.doc)) {\n          return NO_MORE_DOCS;\n        }        \n      }\n      // found a doc with all of the terms\n      freq = phraseFreq(); // check for phrase\n      restart = true;\n    } \n\n    // found a match\n    return max.doc;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"c9ff635e6838a2facda02727dec5b77d9e64dc4c":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c9ff635e6838a2facda02727dec5b77d9e64dc4c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}