{"path":"modules/spatial/src/test/java/org/apache/lucene/spatial/StrategyTestCase#runTestQueries(Iterator[SpatialTestQuery],SpatialMatchConcern).mjava","commits":[{"id":"ef186f4ac90644cd4e8df6b66acb56a52e5ca602","date":1329778037,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/java/org/apache/lucene/spatial/StrategyTestCase#runTestQueries(Iterator[SpatialTestQuery],SpatialMatchConcern).mjava","pathOld":"modules/spatial-lucene/src/test/java/org/apache/lucene/spatial/StrategyTestCase#runTestQueries(Iterator[SpatialTestQuery],SpatialMatchConcern).mjava","sourceNew":"  public void runTestQueries(\n      Iterator<SpatialTestQuery> queries,\n      SpatialMatchConcern concern) {\n    while (queries.hasNext()) {\n      SpatialTestQuery q = queries.next();\n\n      String msg = q.line; //\"Query: \" + q.args.toString(ctx);\n      SearchResults got = executeQuery(strategy.makeQuery(q.args, fieldInfo), 100);\n      if (concern.orderIsImportant) {\n        Iterator<String> ids = q.ids.iterator();\n        for (SearchResult r : got.results) {\n          String id = r.document.get(\"id\");\n          Assert.assertEquals( \"out of order: \" + msg, ids.next(), id);\n        }\n        if (ids.hasNext()) {\n          Assert.fail(msg + \" :: expect more results then we got: \" + ids.next());\n        }\n      } else {\n        // We are looking at how the results overlap\n        if( concern.resultsAreSuperset ) {\n          Set<String> found = new HashSet<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n          for( String s : q.ids ) {\n            if( !found.contains( s ) ) {\n              Assert.fail( \"Results are mising id: \"+s + \" :: \" + found );\n            }\n          }\n        }\n        else {\n          List<String> found = new ArrayList<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n\n          // sort both so that the order is not important\n          Collections.sort(q.ids);\n          Collections.sort(found);\n          Assert.assertEquals(msg, q.ids.toString(), found.toString());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQueries(\n      Iterator<SpatialTestQuery> queries,\n      SpatialMatchConcern concern) {\n    while (queries.hasNext()) {\n      SpatialTestQuery q = queries.next();\n\n      String msg = q.line; //\"Query: \" + q.args.toString(ctx);\n      SearchResults got = executeQuery(strategy.makeQuery(q.args, fieldInfo), 100);\n      if (concern.orderIsImportant) {\n        Iterator<String> ids = q.ids.iterator();\n        for (SearchResult r : got.results) {\n          String id = r.document.get(\"id\");\n          Assert.assertEquals( \"out of order: \" + msg, ids.next(), id);\n        }\n        if (ids.hasNext()) {\n          Assert.fail(msg + \" :: expect more results then we got: \" + ids.next());\n        }\n      } else {\n        // We are looking at how the results overlap\n        if( concern.resultsAreSuperset ) {\n          Set<String> found = new HashSet<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n          for( String s : q.ids ) {\n            if( !found.contains( s ) ) {\n              Assert.fail( \"Results are mising id: \"+s + \" :: \" + found );\n            }\n          }\n        }\n        else {\n          List<String> found = new ArrayList<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n\n          // sort both so that the order is not important\n          Collections.sort(q.ids);\n          Collections.sort(found);\n          Assert.assertEquals(msg, q.ids.toString(), found.toString());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"935445a30e9e8dc0240a7c78efc73d08c2faa6a8","date":1329778521,"type":5,"author":"David Wayne Smiley","isMerge":false,"pathNew":"modules/spatial/src/test/org/apache/lucene/spatial/StrategyTestCase#runTestQueries(Iterator[SpatialTestQuery],SpatialMatchConcern).mjava","pathOld":"modules/spatial/src/test/java/org/apache/lucene/spatial/StrategyTestCase#runTestQueries(Iterator[SpatialTestQuery],SpatialMatchConcern).mjava","sourceNew":"  public void runTestQueries(\n      Iterator<SpatialTestQuery> queries,\n      SpatialMatchConcern concern) {\n    while (queries.hasNext()) {\n      SpatialTestQuery q = queries.next();\n\n      String msg = q.line; //\"Query: \" + q.args.toString(ctx);\n      SearchResults got = executeQuery(strategy.makeQuery(q.args, fieldInfo), 100);\n      if (concern.orderIsImportant) {\n        Iterator<String> ids = q.ids.iterator();\n        for (SearchResult r : got.results) {\n          String id = r.document.get(\"id\");\n          Assert.assertEquals( \"out of order: \" + msg, ids.next(), id);\n        }\n        if (ids.hasNext()) {\n          Assert.fail(msg + \" :: expect more results then we got: \" + ids.next());\n        }\n      } else {\n        // We are looking at how the results overlap\n        if( concern.resultsAreSuperset ) {\n          Set<String> found = new HashSet<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n          for( String s : q.ids ) {\n            if( !found.contains( s ) ) {\n              Assert.fail( \"Results are mising id: \"+s + \" :: \" + found );\n            }\n          }\n        }\n        else {\n          List<String> found = new ArrayList<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n\n          // sort both so that the order is not important\n          Collections.sort(q.ids);\n          Collections.sort(found);\n          Assert.assertEquals(msg, q.ids.toString(), found.toString());\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public void runTestQueries(\n      Iterator<SpatialTestQuery> queries,\n      SpatialMatchConcern concern) {\n    while (queries.hasNext()) {\n      SpatialTestQuery q = queries.next();\n\n      String msg = q.line; //\"Query: \" + q.args.toString(ctx);\n      SearchResults got = executeQuery(strategy.makeQuery(q.args, fieldInfo), 100);\n      if (concern.orderIsImportant) {\n        Iterator<String> ids = q.ids.iterator();\n        for (SearchResult r : got.results) {\n          String id = r.document.get(\"id\");\n          Assert.assertEquals( \"out of order: \" + msg, ids.next(), id);\n        }\n        if (ids.hasNext()) {\n          Assert.fail(msg + \" :: expect more results then we got: \" + ids.next());\n        }\n      } else {\n        // We are looking at how the results overlap\n        if( concern.resultsAreSuperset ) {\n          Set<String> found = new HashSet<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n          for( String s : q.ids ) {\n            if( !found.contains( s ) ) {\n              Assert.fail( \"Results are mising id: \"+s + \" :: \" + found );\n            }\n          }\n        }\n        else {\n          List<String> found = new ArrayList<String>();\n          for (SearchResult r : got.results) {\n            found.add(r.document.get(\"id\"));\n          }\n\n          // sort both so that the order is not important\n          Collections.sort(q.ids);\n          Collections.sort(found);\n          Assert.assertEquals(msg, q.ids.toString(), found.toString());\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"935445a30e9e8dc0240a7c78efc73d08c2faa6a8":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ef186f4ac90644cd4e8df6b66acb56a52e5ca602","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ef186f4ac90644cd4e8df6b66acb56a52e5ca602":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["935445a30e9e8dc0240a7c78efc73d08c2faa6a8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}