{"path":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee76d213d935c68932ca13b55fa0a8a32bf6af1a","date":1343572717,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce","629c38c4ae4e303d0617e05fbfe508140b32f0a3","772506f9863c8378488eb0cce3d71462e047ab5b","55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\n    q = qp.parse(\"\\\"hello\\\"^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"hello^2.0\");\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = qp.parse(\"\\\"on\\\"^1.0\");\n    assertNotNull(q);\n\n    QueryParser qp2 = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true));\n    q = qp2.parse(\"the^3\");\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eafa8c5eabc3dacd34680054e6a33bda024080ac","date":1367691488,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords, true);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET, true); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7f4ef381bf0c2d618c6db830d3dd668c6901c05a","date":1402592253,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeStringLight(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4ca1c732df8923f5624f6c06b1dcca9e69d98c96","date":1402957391,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeStringLight(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c84485629d80d203608e8975a1139de9933cc38","date":1403166128,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(BasicAutomata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2dfdf766e55e943d942055d7de53c7ad6bc45283","date":1441632886,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertFalse(q instanceof BoostQuery);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(q.getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertEquals(1.0f, q.getBoost(), 0.01f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4778b794a897685e2f6c62caa1ac04983d1e69f","date":1467997674,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertMatchNoDocsQuery(q);\n    assertFalse(q instanceof BoostQuery);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertFalse(q instanceof BoostQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","pathOld":"lucene/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testBoost().mjava","sourceNew":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertMatchNoDocsQuery(q);\n    assertFalse(q instanceof BoostQuery);\n  }\n\n","sourceOld":"  public void testBoost()\n    throws Exception {\n    CharacterRunAutomaton stopWords = new CharacterRunAutomaton(Automata.makeString(\"on\"));\n    Analyzer oneStopAnalyzer = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, stopWords);\n    CommonQueryParserConfiguration qp = getParserConfig(oneStopAnalyzer);\n    Query q = getQuery(\"on^1.0\",qp);\n    assertNotNull(q);\n    q = getQuery(\"\\\"hello\\\"^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"hello^2.0\",qp);\n    assertNotNull(q);\n    assertEquals(((BoostQuery) q).getBoost(), (float) 2.0, (float) 0.5);\n    q = getQuery(\"\\\"on\\\"^1.0\",qp);\n    assertNotNull(q);\n\n    Analyzer a2 = new MockAnalyzer(random(), MockTokenizer.SIMPLE, true, MockTokenFilter.ENGLISH_STOPSET); \n    CommonQueryParserConfiguration qp2 = getParserConfig(a2);\n    q = getQuery(\"the^3\", qp2);\n    // \"the\" is a stop word so the result is an empty query:\n    assertNotNull(q);\n    assertEquals(\"\", q.toString());\n    assertFalse(q instanceof BoostQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2dfdf766e55e943d942055d7de53c7ad6bc45283":["5c84485629d80d203608e8975a1139de9933cc38"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["eafa8c5eabc3dacd34680054e6a33bda024080ac"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["2dfdf766e55e943d942055d7de53c7ad6bc45283","f4778b794a897685e2f6c62caa1ac04983d1e69f"],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["b89678825b68eccaf09e6ab71675fc0b0af1e099","ee76d213d935c68932ca13b55fa0a8a32bf6af1a"],"5c84485629d80d203608e8975a1139de9933cc38":["eafa8c5eabc3dacd34680054e6a33bda024080ac","4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f4778b794a897685e2f6c62caa1ac04983d1e69f"]},"commit2Childs":{"2dfdf766e55e943d942055d7de53c7ad6bc45283":["f4778b794a897685e2f6c62caa1ac04983d1e69f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"eafa8c5eabc3dacd34680054e6a33bda024080ac":["7f4ef381bf0c2d618c6db830d3dd668c6901c05a","5c84485629d80d203608e8975a1139de9933cc38"],"7f4ef381bf0c2d618c6db830d3dd668c6901c05a":["4ca1c732df8923f5624f6c06b1dcca9e69d98c96"],"f4778b794a897685e2f6c62caa1ac04983d1e69f":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"ee76d213d935c68932ca13b55fa0a8a32bf6af1a":["eafa8c5eabc3dacd34680054e6a33bda024080ac","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ee76d213d935c68932ca13b55fa0a8a32bf6af1a","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"4ca1c732df8923f5624f6c06b1dcca9e69d98c96":["5c84485629d80d203608e8975a1139de9933cc38"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"5c84485629d80d203608e8975a1139de9933cc38":["2dfdf766e55e943d942055d7de53c7ad6bc45283"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}