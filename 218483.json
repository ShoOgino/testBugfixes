{"path":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","commits":[{"id":"86a0a50d2d14aaee1e635bbec914468551f7f9a2","date":1482234306,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = Arrays.copyOfRange(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"/dev/null","sourceNew":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = Arrays.copyOfRange(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9798d0818e7a880546802b509792d3f3d57babd2","date":1528358901,"type":3,"author":"Nhat Nguyen","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","sourceNew":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = Arrays.copyOfRange(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b70042a8a492f7054d480ccdd2be9796510d4327","date":1528386658,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","sourceNew":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = Arrays.copyOfRange(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","sourceNew":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = Arrays.copyOfRange(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","date":1599130480,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","sourceNew":"  static long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","sourceOld":"  private long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46a689927fad636f7324c6166ffe3df0b93d7ce6","date":1600780253,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/SortedSetDocValuesWriter#sortDocValues(int,Sorter.DocMap,SortedSetDocValues).mjava","sourceNew":null,"sourceOld":"  static long[][] sortDocValues(int maxDoc, Sorter.DocMap sortMap, SortedSetDocValues oldValues) throws IOException {\n    long[][] ords = new long[maxDoc][];\n    int docID;\n    while ((docID = oldValues.nextDoc()) != NO_MORE_DOCS) {\n      int newDocID = sortMap.oldToNew(docID);\n      long[] docOrds = new long[1];\n      int upto = 0;\n      while (true) {\n        long ord = oldValues.nextOrd();\n        if (ord == NO_MORE_ORDS) {\n          break;\n        }\n        if (upto == docOrds.length) {\n          docOrds = ArrayUtil.grow(docOrds);\n        }\n        docOrds[upto++] = ord;\n      }\n      ords[newDocID] = ArrayUtil.copyOfSubArray(docOrds, 0, upto);\n    }\n    return ords;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b70042a8a492f7054d480ccdd2be9796510d4327":["86a0a50d2d14aaee1e635bbec914468551f7f9a2","9798d0818e7a880546802b509792d3f3d57babd2"],"9798d0818e7a880546802b509792d3f3d57babd2":["86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"46a689927fad636f7324c6166ffe3df0b93d7ce6":["19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["9798d0818e7a880546802b509792d3f3d57babd2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["46a689927fad636f7324c6166ffe3df0b93d7ce6"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["86a0a50d2d14aaee1e635bbec914468551f7f9a2","9798d0818e7a880546802b509792d3f3d57babd2"]},"commit2Childs":{"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","86a0a50d2d14aaee1e635bbec914468551f7f9a2"],"b70042a8a492f7054d480ccdd2be9796510d4327":[],"9798d0818e7a880546802b509792d3f3d57babd2":["b70042a8a492f7054d480ccdd2be9796510d4327","19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"86a0a50d2d14aaee1e635bbec914468551f7f9a2":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b70042a8a492f7054d480ccdd2be9796510d4327","9798d0818e7a880546802b509792d3f3d57babd2","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"46a689927fad636f7324c6166ffe3df0b93d7ce6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19d8bfe2b34f3ba4420efc1f441e4145a2ad6c63":["46a689927fad636f7324c6166ffe3df0b93d7ce6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","b70042a8a492f7054d480ccdd2be9796510d4327","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}