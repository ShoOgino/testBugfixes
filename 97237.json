{"path":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters.  Returns the number of bytes\n   *  written to bytesOut. */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[ArrayUtil.oversize(maxLen, 1)];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6fdc35812ba3a566ec91032d28da131ae8dc601c","date":1272905807,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters.  Returns the number of bytes\n   *  written to bytesOut. */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[ArrayUtil.oversize(maxLen, 1)];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"04c997940e954960e04879a6a59ee049ffbe8f98","date":1272909567,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf","date":1284471407,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867c935d21f9b0e5740841f988a4919546dcb374","date":1322417002,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  // TODO: broken if incoming result.offset != 0\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(CharSequence,int,int,BytesRef).mjava","sourceNew":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  // TODO: broken if incoming result.offset != 0\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from this String, starting at offset\n   *  for length characters. After encoding, result.offset will always be 0.\n   */\n  // TODO: broken if incoming result.offset != 0\n  public static void UTF16toUTF8(final CharSequence s, final int offset, final int length, BytesRef result) {\n    final int end = offset + length;\n\n    byte[] out = result.bytes;\n    result.offset = 0;\n    // Pre-allocate for worst case 4-for-1\n    final int maxLen = length * 4;\n    if (out.length < maxLen)\n      out = result.bytes = new byte[maxLen];\n\n    int upto = 0;\n    for(int i=offset;i<end;i++) {\n      final int code = (int) s.charAt(i);\n\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && (i < end-1)) {\n          int utf32 = (int) s.charAt(i+1);\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = (code << 10) + utf32 + SURROGATE_OFFSET;\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(s, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"04c997940e954960e04879a6a59ee049ffbe8f98":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"6fdc35812ba3a566ec91032d28da131ae8dc601c":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["867c935d21f9b0e5740841f988a4919546dcb374"],"6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf":["04c997940e954960e04879a6a59ee049ffbe8f98"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["04c997940e954960e04879a6a59ee049ffbe8f98","6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf"],"867c935d21f9b0e5740841f988a4919546dcb374":["6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"04c997940e954960e04879a6a59ee049ffbe8f98":["6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"6fdc35812ba3a566ec91032d28da131ae8dc601c":["04c997940e954960e04879a6a59ee049ffbe8f98"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6b8d81a7ba745b9f6213ef40cc8175b8e7aecdcf":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","867c935d21f9b0e5740841f988a4919546dcb374"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["6fdc35812ba3a566ec91032d28da131ae8dc601c"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":[],"867c935d21f9b0e5740841f988a4919546dcb374":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}