{"path":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","commits":[{"id":"0b2ba7b58bce0f80c97a5eb2f11febac26681566","date":1542686312,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","pathOld":"/dev/null","sourceNew":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    FastOutputStream fos = new FastOutputStream(baos, buf, 0);\n    fos.writeUtf8CharSeq(utf8);\n    fos.flush();\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    new JavaBinCodec().marshal(m0, baos);\n    result = baos.toByteArray();\n    Map m1 = (Map) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream(result));\n    utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n    assertTrue(utf81.equals(utf8));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c5cdabe00d4d433e6a831e18f68201284973eef","date":1578510992,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","sourceNew":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    try (FastOutputStream fos = new FastOutputStream(baos, buf, 0)) {\n      fos.writeUtf8CharSeq(utf8);\n      fos.flush();\n    }\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m0, baos);\n    }\n    result = baos.toByteArray();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      Map m1 = (Map) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(result));\n      utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n      assertTrue(utf81.equals(utf8));\n    }\n  }\n\n","sourceOld":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    FastOutputStream fos = new FastOutputStream(baos, buf, 0);\n    fos.writeUtf8CharSeq(utf8);\n    fos.flush();\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    new JavaBinCodec().marshal(m0, baos);\n    result = baos.toByteArray();\n    Map m1 = (Map) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream(result));\n    utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n    assertTrue(utf81.equals(utf8));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1da93834e39ce341a13e42b611d0a83bd3114bba","date":1578567362,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","sourceNew":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    try (FastOutputStream fos = new FastOutputStream(baos, buf, 0)) {\n      fos.writeUtf8CharSeq(utf8);\n      fos.flush();\n    }\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m0, baos);\n    }\n    result = baos.toByteArray();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      Map m1 = (Map) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(result));\n      utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n      assertTrue(utf81.equals(utf8));\n    }\n  }\n\n","sourceOld":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    FastOutputStream fos = new FastOutputStream(baos, buf, 0);\n    fos.writeUtf8CharSeq(utf8);\n    fos.flush();\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    new JavaBinCodec().marshal(m0, baos);\n    result = baos.toByteArray();\n    Map m1 = (Map) new JavaBinCodec()\n        .setReadStringAsCharSeq(true)\n        .unmarshal(new ByteArrayInputStream(result));\n    utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n    assertTrue(utf81.equals(utf8));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ba1b632c041956c93c41aa1143d16a567014891","date":1592328473,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","pathOld":"solr/solrj/src/test/org/apache/solr/common/util/Utf8CharSequenceTest#testLargeString().mjava","sourceNew":"  @SuppressWarnings({\"unchecked\"})\n  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    try (FastOutputStream fos = new FastOutputStream(baos, buf, 0)) {\n      fos.writeUtf8CharSeq(utf8);\n      fos.flush();\n    }\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m0, baos);\n    }\n    result = baos.toByteArray();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      @SuppressWarnings({\"rawtypes\"})\n      Map m1 = (Map) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(result));\n      utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n      assertTrue(utf81.equals(utf8));\n    }\n  }\n\n","sourceOld":"  public void testLargeString() throws IOException {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < 100; i++) {\n      sb.append(\"Hello World!\");\n    }\n    ByteArrayUtf8CharSequence utf8 = new ByteArrayUtf8CharSequence(sb.toString());\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    byte[] buf = new byte[256];\n    try (FastOutputStream fos = new FastOutputStream(baos, buf, 0)) {\n      fos.writeUtf8CharSeq(utf8);\n      fos.flush();\n    }\n    byte[] result = baos.toByteArray();\n    ByteArrayUtf8CharSequence utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n    baos.reset();\n    utf8.write(baos);\n    result = baos.toByteArray();\n    utf81 = new ByteArrayUtf8CharSequence(result, 0, result.length);\n    assertTrue(utf81.equals(utf8));\n\n    Map m0 = new HashMap();\n    m0.put(\"str\", utf8);\n    baos.reset();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      jbc.marshal(m0, baos);\n    }\n    result = baos.toByteArray();\n    try (JavaBinCodec jbc = new JavaBinCodec()) {\n      Map m1 = (Map) jbc\n          .setReadStringAsCharSeq(true)\n          .unmarshal(new ByteArrayInputStream(result));\n      utf81 = (ByteArrayUtf8CharSequence) m1.get(\"str\");\n      assertTrue(utf81.equals(utf8));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9ba1b632c041956c93c41aa1143d16a567014891":["8c5cdabe00d4d433e6a831e18f68201284973eef"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1da93834e39ce341a13e42b611d0a83bd3114bba":["0b2ba7b58bce0f80c97a5eb2f11febac26681566","8c5cdabe00d4d433e6a831e18f68201284973eef"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ba1b632c041956c93c41aa1143d16a567014891"]},"commit2Childs":{"9ba1b632c041956c93c41aa1143d16a567014891":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0b2ba7b58bce0f80c97a5eb2f11febac26681566":["8c5cdabe00d4d433e6a831e18f68201284973eef","1da93834e39ce341a13e42b611d0a83bd3114bba"],"8c5cdabe00d4d433e6a831e18f68201284973eef":["9ba1b632c041956c93c41aa1143d16a567014891","1da93834e39ce341a13e42b611d0a83bd3114bba"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0b2ba7b58bce0f80c97a5eb2f11febac26681566"],"1da93834e39ce341a13e42b611d0a83bd3114bba":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1da93834e39ce341a13e42b611d0a83bd3114bba","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}