{"path":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","commits":[{"id":"7f000bf7f55bd914b9156b8cb423743fac2d9321","date":1013799582,"type":0,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n\treturn (new File(directory, \"write.lock\")).exists();\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6dbb14e9adf67f0e8fb9cc55a25a71063c230338","date":1051751355,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n      return (new File(directory, \"write.lock\")).exists();\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n\treturn (new File(directory, \"write.lock\")).exists();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"12ee37ea5a0061cfa8d91d87109b11dcf89142c4","date":1051818618,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n      return isLocked(FSDirectory.getDirectory(directory, false));\n    }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n      return (new File(directory, \"write.lock\")).exists();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"770281b8a8459cafcdd2354b6a06078fea2d83c9","date":1077308096,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    return isLocked(FSDirectory.getDirectory(directory, false));\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n    public static boolean isLocked(String directory) throws IOException {\n      return isLocked(FSDirectory.getDirectory(directory, false));\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9afb7bc8fbc6f70182619124426e8f334262311b","date":1082485266,"type":3,"author":"Christoph Goller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    return isLocked(FSDirectory.getDirectory(directory, false));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66b12ba4967665216eeb706b58d424c51fb3641a","date":1169160423,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory, false);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a problem with accessing the index\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":["7f000bf7f55bd914b9156b8cb423743fac2d9321"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(String)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f658c721de6fbc0c439a5288182c4a6bb53ac21b","date":1244025537,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(String)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba712167ee848727018d8b77aa0c273839fbe15c","date":1244411561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Please use {@link IndexWriter#isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e54e4a9a2442944e55f58e835877841cdac1271","date":1244628560,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return isLocked(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    boolean result = isLocked(dir);\n    dir.close();\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"082ab1b8bb93767e8e870fda3638b79d67035d3f","date":1251223359,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #isLocked(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return isLocked(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated This method will be removed in the 3.0 release.\n   * Use {@link #isLocked(Directory)} instead\n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return isLocked(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaea03be31988a41275d45a429ac71ff0ad740fb","date":1254612554,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexReader#isLocked(String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Returns <code>true</code> iff the index in the named directory is\n   * currently locked.\n   * @param directory the directory to check for a lock\n   * @throws IOException if there is a low-level IO error\n   * @deprecated Use {@link #isLocked(Directory)} instead.\n   *             This method will be removed in the 3.0 release.\n   * \n   */\n  public static boolean isLocked(String directory) throws IOException {\n    Directory dir = FSDirectory.getDirectory(directory);\n    try {\n      return isLocked(dir);\n    } finally {\n      dir.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["4e54e4a9a2442944e55f58e835877841cdac1271"],"1b54a9bc667895a2095a886184bf69a3179e63df":["66b12ba4967665216eeb706b58d424c51fb3641a"],"4e54e4a9a2442944e55f58e835877841cdac1271":["ba712167ee848727018d8b77aa0c273839fbe15c"],"9afb7bc8fbc6f70182619124426e8f334262311b":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["1b54a9bc667895a2095a886184bf69a3179e63df"],"ba712167ee848727018d8b77aa0c273839fbe15c":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["7f000bf7f55bd914b9156b8cb423743fac2d9321"],"7f000bf7f55bd914b9156b8cb423743fac2d9321":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"66b12ba4967665216eeb706b58d424c51fb3641a":["9afb7bc8fbc6f70182619124426e8f334262311b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["eaea03be31988a41275d45a429ac71ff0ad740fb"]},"commit2Childs":{"eaea03be31988a41275d45a429ac71ff0ad740fb":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"082ab1b8bb93767e8e870fda3638b79d67035d3f":["eaea03be31988a41275d45a429ac71ff0ad740fb"],"1b54a9bc667895a2095a886184bf69a3179e63df":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"4e54e4a9a2442944e55f58e835877841cdac1271":["082ab1b8bb93767e8e870fda3638b79d67035d3f"],"9afb7bc8fbc6f70182619124426e8f334262311b":["66b12ba4967665216eeb706b58d424c51fb3641a"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["f658c721de6fbc0c439a5288182c4a6bb53ac21b"],"ba712167ee848727018d8b77aa0c273839fbe15c":["4e54e4a9a2442944e55f58e835877841cdac1271"],"770281b8a8459cafcdd2354b6a06078fea2d83c9":["9afb7bc8fbc6f70182619124426e8f334262311b"],"6dbb14e9adf67f0e8fb9cc55a25a71063c230338":["12ee37ea5a0061cfa8d91d87109b11dcf89142c4"],"7f000bf7f55bd914b9156b8cb423743fac2d9321":["6dbb14e9adf67f0e8fb9cc55a25a71063c230338"],"66b12ba4967665216eeb706b58d424c51fb3641a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f000bf7f55bd914b9156b8cb423743fac2d9321"],"12ee37ea5a0061cfa8d91d87109b11dcf89142c4":["770281b8a8459cafcdd2354b6a06078fea2d83c9"],"f658c721de6fbc0c439a5288182c4a6bb53ac21b":["ba712167ee848727018d8b77aa0c273839fbe15c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}