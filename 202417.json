{"path":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","commits":[{"id":"2062967ab57824b59d116b38d53d2058ac7e4592","date":1367320813,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","pathOld":"/dev/null","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    RangeAccumulator a = new RangeAccumulator(fsp, r);\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49","date":1375103250,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    RangeAccumulator a = new RangeAccumulator(fsp, r);\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    FacetSearchParams fsp = new FacetSearchParams(\n                                new RangeFacetRequest<LongRange>(\"field\",\n                                                      new LongRange(\"less than 10\", 0L, true, 10L, false),\n                                                      new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n                                                      new LongRange(\"over 90\", 90L, false, 100L, false),\n                                                      new LongRange(\"90 or above\", 90L, true, 100L, false),\n                                                      new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n\n    RangeAccumulator a = new RangeAccumulator(fsp, r);\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aab6b2c06fbc20229856d7696afe3ee1d3be1c70","date":1382041103,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","sourceNew":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, false)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (0)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce7aff7772c162c15d520e31af46c555f60d5c3b","date":1385135519,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","sourceNew":null,"sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc728b07df73b197e6d940d27f9b08b63918f13","date":1388834348,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/facet/src/test/org/apache/lucene/facet/range/TestRangeAccumulator#testBasicLong().mjava","sourceNew":null,"sourceOld":"  public void testBasicLong() throws Exception {\n    Directory d = newDirectory();\n    RandomIndexWriter w = new RandomIndexWriter(random(), d);\n    Document doc = new Document();\n    NumericDocValuesField field = new NumericDocValuesField(\"field\", 0L);\n    doc.add(field);\n    for(long l=0;l<100;l++) {\n      field.setLongValue(l);\n      w.addDocument(doc);\n    }\n    field.setLongValue(Long.MAX_VALUE);\n    w.addDocument(doc);\n\n    IndexReader r = w.getReader();\n    w.close();\n\n    RangeAccumulator a = new RangeAccumulator(new RangeFacetRequest<LongRange>(\"field\",\n        new LongRange(\"less than 10\", 0L, true, 10L, false),\n        new LongRange(\"less than or equal to 10\", 0L, true, 10L, true),\n        new LongRange(\"over 90\", 90L, false, 100L, false),\n        new LongRange(\"90 or above\", 90L, true, 100L, false),\n        new LongRange(\"over 1000\", 1000L, false, Long.MAX_VALUE, true)));\n    \n    FacetsCollector fc = FacetsCollector.create(a);\n\n    IndexSearcher s = newSearcher(r);\n    s.search(new MatchAllDocsQuery(), fc);\n    List<FacetResult> result = fc.getFacetResults();\n    assertEquals(1, result.size());\n    assertEquals(\"field (0)\\n  less than 10 (10)\\n  less than or equal to 10 (11)\\n  over 90 (9)\\n  90 or above (10)\\n  over 1000 (1)\\n\", FacetTestUtils.toSimpleString(result.get(0)));\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"2062967ab57824b59d116b38d53d2058ac7e4592":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["2062967ab57824b59d116b38d53d2058ac7e4592"],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["aab6b2c06fbc20229856d7696afe3ee1d3be1c70"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["aab6b2c06fbc20229856d7696afe3ee1d3be1c70","ce7aff7772c162c15d520e31af46c555f60d5c3b"],"aab6b2c06fbc20229856d7696afe3ee1d3be1c70":["6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["2062967ab57824b59d116b38d53d2058ac7e4592"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3cc728b07df73b197e6d940d27f9b08b63918f13"]},"commit2Childs":{"2062967ab57824b59d116b38d53d2058ac7e4592":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2062967ab57824b59d116b38d53d2058ac7e4592"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"ce7aff7772c162c15d520e31af46c555f60d5c3b":["3cc728b07df73b197e6d940d27f9b08b63918f13"],"3cc728b07df73b197e6d940d27f9b08b63918f13":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"aab6b2c06fbc20229856d7696afe3ee1d3be1c70":["ce7aff7772c162c15d520e31af46c555f60d5c3b","3cc728b07df73b197e6d940d27f9b08b63918f13"],"6249cba93d7ad1bf6f5a225c34fbe3d547ed9f49":["aab6b2c06fbc20229856d7696afe3ee1d3be1c70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}