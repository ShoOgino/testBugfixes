{"path":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","commits":[{"id":"1263e37167e93fb2e178a37536df562455e7a587","date":1323545884,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/lucene40/values/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d638301ad1cfcae567b681b893bc8781f0ee48a5","date":1323801546,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/values/SortedBytesMergeUtils#buildSlices(MergeState,IndexDocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      IndexDocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eae7c5ddae4b9692a6691d2d252ab6a4229457b","date":1325870827,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(int[],int[][],DocValues[],MergeContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/SortedBytesMergeUtils#buildSlices(MergeState,DocValues[],MergeContext).mjava","sourceNew":"  public static List<SortedSourceSlice> buildSlices(int[] docBases ,int[][] docMaps,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            docBases, ctx.getMergeDocCount(), ctx.docToEntry);\n      }\n      createOrdMapping(docBases, docMaps, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","sourceOld":"  public static List<SortedSourceSlice> buildSlices(MergeState mergeState,\n      DocValues[] docValues, MergeContext ctx) throws IOException {\n    final List<SortedSourceSlice> slices = new ArrayList<SortedSourceSlice>();\n    for (int i = 0; i < docValues.length; i++) {\n      final SortedSourceSlice nextSlice;\n      final Source directSource;\n      if (docValues[i] != null\n          && (directSource = docValues[i].getDirectSource()) != null) {\n        final SortedSourceSlice slice = new SortedSourceSlice(i, directSource\n            .asSortedSource(), mergeState, ctx.docToEntry);\n        nextSlice = slice;\n      } else {\n        nextSlice = new SortedSourceSlice(i, new MissingValueSource(ctx),\n            mergeState, ctx.docToEntry);\n      }\n      createOrdMapping(mergeState, nextSlice);\n      slices.add(nextSlice);\n    }\n    return Collections.unmodifiableList(slices);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1263e37167e93fb2e178a37536df562455e7a587":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1263e37167e93fb2e178a37536df562455e7a587"]},"commit2Childs":{"1263e37167e93fb2e178a37536df562455e7a587":["d638301ad1cfcae567b681b893bc8781f0ee48a5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1263e37167e93fb2e178a37536df562455e7a587","d638301ad1cfcae567b681b893bc8781f0ee48a5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5eae7c5ddae4b9692a6691d2d252ab6a4229457b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d638301ad1cfcae567b681b893bc8781f0ee48a5":["5eae7c5ddae4b9692a6691d2d252ab6a4229457b"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}