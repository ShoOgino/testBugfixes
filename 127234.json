{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","commits":[{"id":"cb53c8e9da2afe33252ee698dda412264252cfa7","date":1418531581,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(Shape,Shape).mjava","sourceNew":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be normalized, and so sometimes a {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}\n   * will be returned, other times a\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.SpanUnitsNRShape} will be.\n   *\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other (yet they\n   * aren't equal).\n   */\n  public NRShape toRangeShape(UnitNRShape startUnit, UnitNRShape endUnit) {\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startUnit = startUnit.getShapeAtLevel(truncateStartVals(startUnit, 0)); // chops off trailing min-vals (zeroes)\n    endUnit = endUnit.getShapeAtLevel(truncateEndVals(endUnit, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefix(startUnit, endUnit);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+ startUnit +\" TO \"+ endUnit);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startUnit.getLevel() == endUnit.getLevel()) {\n        //same\n        return startUnit;\n      } else if (endUnit.getLevel() > startUnit.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endUnit, startUnit.getLevel()) == startUnit.getLevel()) {\n          return endUnit;\n        }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startUnit, endUnit.getLevel()) == endUnit.getLevel()) {\n          return startUnit;\n        }\n      }\n    }\n    return new SpanUnitsNRShape(startUnit, endUnit);\n  }\n\n","sourceOld":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be optimized.\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other.\n   */\n  public Shape toRangeShape(Shape start, Shape end) {\n    if (!(start instanceof LevelledValue && end instanceof LevelledValue))\n      throw new IllegalArgumentException(\"Must pass \"+LevelledValue.class+\" but got \"+start.getClass());\n    LevelledValue startLV = (LevelledValue) start;\n    LevelledValue endLV = (LevelledValue) end;\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startLV = startLV.getLVAtLevel(truncateStartVals(startLV, 0)); // chops off trailing min-vals (zeroes)\n    endLV = endLV.getLVAtLevel(truncateEndVals(endLV, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefixLV(startLV, endLV);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+start+\" TO \"+end);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startLV.getLevel() == endLV.getLevel()) {\n        //same\n        return startLV;\n      } else if (endLV.getLevel() > startLV.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endLV, startLV.getLevel()) == startLV.getLevel()) {\n          return endLV;\n  }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startLV, endLV.getLevel()) == endLV.getLevel()) {\n          return startLV;\n        }\n      }\n    }\n    return new NRShape(startLV, endLV);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","sourceNew":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be normalized, and so sometimes a {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}\n   * will be returned, other times a\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.SpanUnitsNRShape} will be.\n   *\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other (yet they\n   * aren't equal).\n   */\n  public NRShape toRangeShape(UnitNRShape startUnit, UnitNRShape endUnit) {\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startUnit = startUnit.getShapeAtLevel(truncateStartVals(startUnit, 0)); // chops off trailing min-vals (zeroes)\n    endUnit = endUnit.getShapeAtLevel(truncateEndVals(endUnit, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefix(startUnit, endUnit);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+ startUnit +\" TO \"+ endUnit);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startUnit.getLevel() == endUnit.getLevel()) {\n        //same\n        return startUnit;\n      } else if (endUnit.getLevel() > startUnit.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endUnit, startUnit.getLevel()) == startUnit.getLevel()) {\n          return endUnit;\n        }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startUnit, endUnit.getLevel()) == endUnit.getLevel()) {\n          return startUnit;\n        }\n      }\n    }\n    return new SpanUnitsNRShape(startUnit, endUnit);\n  }\n\n","sourceOld":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be normalized, and so sometimes a {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}\n   * will be returned, other times a\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.SpanUnitsNRShape} will be.\n   *\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other (yet they\n   * aren't equal).\n   */\n  public NRShape toRangeShape(UnitNRShape startUnit, UnitNRShape endUnit) {\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startUnit = startUnit.getShapeAtLevel(truncateStartVals(startUnit, 0)); // chops off trailing min-vals (zeroes)\n    endUnit = endUnit.getShapeAtLevel(truncateEndVals(endUnit, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefix(startUnit, endUnit);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+ startUnit +\" TO \"+ endUnit);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startUnit.getLevel() == endUnit.getLevel()) {\n        //same\n        return startUnit;\n      } else if (endUnit.getLevel() > startUnit.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endUnit, startUnit.getLevel()) == startUnit.getLevel()) {\n          return endUnit;\n        }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startUnit, endUnit.getLevel()) == endUnit.getLevel()) {\n          return startUnit;\n        }\n      }\n    }\n    return new SpanUnitsNRShape(startUnit, endUnit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#toRangeShape(UnitNRShape,UnitNRShape).mjava","sourceNew":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be normalized, and so sometimes a {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}\n   * will be returned, other times a\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.SpanUnitsNRShape} will be.\n   *\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other (yet they\n   * aren't equal).\n   */\n  public NRShape toRangeShape(UnitNRShape startUnit, UnitNRShape endUnit) {\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startUnit = startUnit.getShapeAtLevel(truncateStartVals(startUnit, 0)); // chops off trailing min-vals (zeroes)\n    endUnit = endUnit.getShapeAtLevel(truncateEndVals(endUnit, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefix(startUnit, endUnit);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+ startUnit +\" TO \"+ endUnit);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startUnit.getLevel() == endUnit.getLevel()) {\n        //same\n        return startUnit;\n      } else if (endUnit.getLevel() > startUnit.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endUnit, startUnit.getLevel()) == startUnit.getLevel()) {\n          return endUnit;\n        }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startUnit, endUnit.getLevel()) == endUnit.getLevel()) {\n          return startUnit;\n        }\n      }\n    }\n    return new SpanUnitsNRShape(startUnit, endUnit);\n  }\n\n","sourceOld":"  /** Returns a shape that represents the continuous range between {@code start} and {@code end}. It will\n   * be normalized, and so sometimes a {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.UnitNRShape}\n   * will be returned, other times a\n   * {@link org.apache.lucene.spatial.prefix.tree.NumberRangePrefixTree.SpanUnitsNRShape} will be.\n   *\n   * @throws IllegalArgumentException if the arguments are in the wrong order, or if either contains the other (yet they\n   * aren't equal).\n   */\n  public NRShape toRangeShape(UnitNRShape startUnit, UnitNRShape endUnit) {\n    //note: this normalization/optimization process is actually REQUIRED based on assumptions elsewhere.\n    //Normalize start & end\n    startUnit = startUnit.getShapeAtLevel(truncateStartVals(startUnit, 0)); // chops off trailing min-vals (zeroes)\n    endUnit = endUnit.getShapeAtLevel(truncateEndVals(endUnit, 0)); // chops off trailing max-vals\n    //Optimize to just start or end if it's equivalent, e.g. April to April 1st is April 1st.\n    int cmp = comparePrefix(startUnit, endUnit);\n    if (cmp > 0) {\n      throw new IllegalArgumentException(\"Wrong order: \"+ startUnit +\" TO \"+ endUnit);\n    }\n    if (cmp == 0) {//one is a prefix of the other\n      if (startUnit.getLevel() == endUnit.getLevel()) {\n        //same\n        return startUnit;\n      } else if (endUnit.getLevel() > startUnit.getLevel()) {\n        // e.g. April to April 1st\n        if (truncateStartVals(endUnit, startUnit.getLevel()) == startUnit.getLevel()) {\n          return endUnit;\n        }\n      } else {//minLV level > maxLV level\n        // e.g. April 30 to April\n        if (truncateEndVals(startUnit, endUnit.getLevel()) == endUnit.getLevel()) {\n          return startUnit;\n        }\n      }\n    }\n    return new SpanUnitsNRShape(startUnit, endUnit);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["cb53c8e9da2afe33252ee698dda412264252cfa7","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cb53c8e9da2afe33252ee698dda412264252cfa7"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cb53c8e9da2afe33252ee698dda412264252cfa7":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}