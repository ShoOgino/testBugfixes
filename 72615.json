{"path":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","commits":[{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":0,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff","date":1412587199,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55980207f1977bd1463465de1659b821347e2fa8","date":1413336386,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n\n      final int firstFilterDoc = filterIter.nextDoc();\n      if (firstFilterDoc == DocIdSetIterator.NO_MORE_DOCS) {\n        return null;\n      }\n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, firstFilterDoc);\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        assert firstFilterDoc > -1;\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        // TODO once we have way to figure out if we use RA or LeapFrog we can remove this scorer\n        return (scorer == null) ? null : new PrimaryAdvancedLeapFrogScorer(weight, firstFilterDoc, filterIter, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"781239fc84d36be12b84e4d3e2618f5f07a182e3","date":1423139668,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs, needsScores);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null, needsScores);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb17639909a369c1e64866842e5c213440acc17e","date":1423238093,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet,boolean).mjava","sourceNew":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","sourceOld":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet, boolean needsScores) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs, needsScores);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null, needsScores);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1db68e96dd908fcd79ef809095822736aa601d08","date":1434630596,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/search/FilteredQuery.RandomAccessFilterStrategy#filteredScorer(LeafReaderContext,Weight,DocIdSet).mjava","sourceNew":null,"sourceOld":"    @Override\n    public Scorer filteredScorer(LeafReaderContext context, Weight weight, DocIdSet docIdSet) throws IOException {\n      final DocIdSetIterator filterIter = docIdSet.iterator();\n      if (filterIter == null) {\n        // this means the filter does not accept any documents.\n        return null;\n      }  \n      \n      final Bits filterAcceptDocs = docIdSet.bits();\n      // force if RA is requested\n      final boolean useRandomAccess = filterAcceptDocs != null && useRandomAccess(filterAcceptDocs, filterIter.cost());\n      if (useRandomAccess) {\n        // if we are using random access, we return the inner scorer, just with other acceptDocs\n        return weight.scorer(context, filterAcceptDocs);\n      } else {\n        // we are gonna advance() this scorer, so we set inorder=true/toplevel=false\n        // we pass null as acceptDocs, as our filter has already respected acceptDocs, no need to do twice\n        final Scorer scorer = weight.scorer(context, null);\n        return (scorer == null) ? null : new LeapFrogScorer(weight, filterIter, scorer, scorer);\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fb17639909a369c1e64866842e5c213440acc17e":["781239fc84d36be12b84e4d3e2618f5f07a182e3"],"1db68e96dd908fcd79ef809095822736aa601d08":["fb17639909a369c1e64866842e5c213440acc17e"],"55980207f1977bd1463465de1659b821347e2fa8":["c9fb5f46e264daf5ba3860defe623a89d202dd87","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1db68e96dd908fcd79ef809095822736aa601d08"]},"commit2Childs":{"fb17639909a369c1e64866842e5c213440acc17e":["1db68e96dd908fcd79ef809095822736aa601d08"],"1db68e96dd908fcd79ef809095822736aa601d08":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"55980207f1977bd1463465de1659b821347e2fa8":[],"781239fc84d36be12b84e4d3e2618f5f07a182e3":["fb17639909a369c1e64866842e5c213440acc17e"],"c105e07cbe0e7bffe11a5efbaf5e5913ec512fff":["55980207f1977bd1463465de1659b821347e2fa8","781239fc84d36be12b84e4d3e2618f5f07a182e3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["55980207f1977bd1463465de1659b821347e2fa8","c105e07cbe0e7bffe11a5efbaf5e5913ec512fff"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["55980207f1977bd1463465de1659b821347e2fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}