{"path":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","commits":[{"id":"ea469eab8fd0f3032f4fcde1c644a721e8309d3b","date":1320301582,"type":1,"author":"Shai Erera","isMerge":false,"pathNew":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/lucene/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/taxonomy/directory/ParentArray#add(int,int).mjava","sourceNew":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","sourceOld":"  /**\n   * add() is used in LuceneTaxonomyWriter, not in LuceneTaxonomyReader.\n   * It is only called from a synchronized method, so it is not reentrant,\n   * and also doesn't need to worry about reads happening at the same time.\n   * \n   * NOTE: add() and refresh() CANNOT be used together. If you call add(),\n   * this changes the arrays and refresh() can no longer be used.\n   */\n  void add(int ordinal, int parentOrdinal) throws IOException {\n    if (ordinal >= prefetchParentOrdinal.length) {\n      // grow the array, if necessary.\n      // In Java 6, we could just do Arrays.copyOf()...\n      int[] newarray = new int[ordinal*2+1];\n      System.arraycopy(prefetchParentOrdinal, 0, newarray, 0,\n          prefetchParentOrdinal.length);\n      prefetchParentOrdinal = newarray;\n    }\n    prefetchParentOrdinal[ordinal] = parentOrdinal;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ea469eab8fd0f3032f4fcde1c644a721e8309d3b":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ea469eab8fd0f3032f4fcde1c644a721e8309d3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}