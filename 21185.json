{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","commits":[{"id":"3f767f8c99eaedb984df754fe61f21c5de260f94","date":1344105153,"type":1,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardProps(String,String).mjava","sourceNew":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","sourceOld":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da94fd5fcff99442877e118f00fb42094b59f497","date":1344115365,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getShards().get(coreNodeName)!=null) {\n        return slice.getShards().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5be977c105554c6a7b68afcdbc511439723ab","date":1344115570,"type":1,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/CloudState#getShardProps(String,String).mjava","sourceNew":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","sourceOld":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getShards().get(coreNodeName)!=null) {\n        return slice.getShards().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getShards().get(coreNodeName)!=null) {\n        return slice.getShards().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"\t/**\n\t * Get shard properties or null if shard is not found.\n\t */\n\tpublic ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n\t  Map<String, Slice> slices = getSlices(collection);\n\t  for(Slice slice: slices.values()) {\n\t    if(slice.getShards().get(coreNodeName)!=null) {\n\t      return slice.getShards().get(coreNodeName);\n\t    }\n\t  }\n\t  return null;\n\t}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fa64435b5902ce266c23755a4a00691a3285dab8","date":1347243290,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public ZkNodeProps getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getShards().get(coreNodeName)!=null) {\n        return slice.getShards().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","date":1351228731,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    if (slices == null) return null;\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    if (slices == null) return null;\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","sourceOld":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c5a558d54519c651068ddb202f03befefb1514a7","date":1354382006,"type":4,"author":"Yonik Seeley","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    if (slices == null) return null;\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"407687e67faf6e1f02a211ca078d8e3eed631027","date":1355157407,"type":4,"author":"Robert Muir","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/ClusterState#getShardProps(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Get shard properties or null if shard is not found.\n   */\n  public Replica getShardProps(final String collection, final String coreNodeName) {\n    Map<String, Slice> slices = getSlices(collection);\n    if (slices == null) return null;\n    for(Slice slice: slices.values()) {\n      if(slice.getReplicasMap().get(coreNodeName)!=null) {\n        return slice.getReplicasMap().get(coreNodeName);\n      }\n    }\n    return null;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"fa64435b5902ce266c23755a4a00691a3285dab8":["da94fd5fcff99442877e118f00fb42094b59f497"],"c5a558d54519c651068ddb202f03befefb1514a7":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"407687e67faf6e1f02a211ca078d8e3eed631027":["5e71cbdfcf34d779dd7e7ba148dfff6022f2005a","c5a558d54519c651068ddb202f03befefb1514a7"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da94fd5fcff99442877e118f00fb42094b59f497"],"f2126b84bd093fa3d921582a109a0ee578c28126":["fa64435b5902ce266c23755a4a00691a3285dab8","5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"8fd5be977c105554c6a7b68afcdbc511439723ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f767f8c99eaedb984df754fe61f21c5de260f94"],"da94fd5fcff99442877e118f00fb42094b59f497":["3f767f8c99eaedb984df754fe61f21c5de260f94"],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["fa64435b5902ce266c23755a4a00691a3285dab8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c5a558d54519c651068ddb202f03befefb1514a7"]},"commit2Childs":{"3f767f8c99eaedb984df754fe61f21c5de260f94":["8fd5be977c105554c6a7b68afcdbc511439723ab","da94fd5fcff99442877e118f00fb42094b59f497"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"fa64435b5902ce266c23755a4a00691a3285dab8":["f2126b84bd093fa3d921582a109a0ee578c28126","5e71cbdfcf34d779dd7e7ba148dfff6022f2005a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3f767f8c99eaedb984df754fe61f21c5de260f94","d6f074e73200c07d54f242d3880a8da5a35ff97b","8fd5be977c105554c6a7b68afcdbc511439723ab"],"c5a558d54519c651068ddb202f03befefb1514a7":["407687e67faf6e1f02a211ca078d8e3eed631027","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"407687e67faf6e1f02a211ca078d8e3eed631027":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"8fd5be977c105554c6a7b68afcdbc511439723ab":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"da94fd5fcff99442877e118f00fb42094b59f497":["c7869f64c874ebf7f317d22c00baf2b6857797a6","fa64435b5902ce266c23755a4a00691a3285dab8","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"5e71cbdfcf34d779dd7e7ba148dfff6022f2005a":["c5a558d54519c651068ddb202f03befefb1514a7","407687e67faf6e1f02a211ca078d8e3eed631027","f2126b84bd093fa3d921582a109a0ee578c28126"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","407687e67faf6e1f02a211ca078d8e3eed631027","d6f074e73200c07d54f242d3880a8da5a35ff97b","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}