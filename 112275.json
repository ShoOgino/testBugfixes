{"path":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(reporterName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(reporterName));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n          pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(), pluginInfo);\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(reporterName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(reporterName), reporters.get(reporterName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(reporterName));\n    }\n  }\n\n","bugFix":null,"bugIntro":["bfc52860e6d13d034226a760813c59d984c6817a"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f90f26c648df8320685eb76fec8bb9972e1994c4","date":1508340424,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n          pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore().getResourceLoader(),\n          pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bfc52860e6d13d034226a760813c59d984c6817a","date":1522229027,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n          pluginInfo, coreMetricManager.getTag());\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n          pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","bugFix":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43564cbb30b064675027cfb569564e8531096e97","date":1522334265,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","pathOld":"solr/core/src/test/org/apache/solr/metrics/SolrCoreMetricManagerTest#testLoadReporter().mjava","sourceNew":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n          pluginInfo, coreMetricManager.getTag());\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","sourceOld":"  @Test\n  public void testLoadReporter() throws Exception {\n    Random random = random();\n\n    String className = MockMetricReporter.class.getName();\n    String reporterName = TestUtil.randomUnicodeString(random);\n    String taggedName = reporterName + \"@\" + coreMetricManager.getTag();\n\n    Map<String, Object> attrs = new HashMap<>();\n    attrs.put(FieldType.CLASS_NAME, className);\n    attrs.put(CoreAdminParams.NAME, reporterName);\n\n    boolean shouldDefineConfigurable = random.nextBoolean();\n    String configurable = TestUtil.randomUnicodeString(random);\n    if (shouldDefineConfigurable) attrs.put(\"configurable\", configurable);\n\n    boolean shouldDefinePlugin = random.nextBoolean();\n    PluginInfo pluginInfo = shouldDefinePlugin ? new PluginInfo(TestUtil.randomUnicodeString(random), attrs) : null;\n\n    try {\n      metricManager.loadReporter(coreMetricManager.getRegistryName(), coreMetricManager.getCore(),\n          pluginInfo, String.valueOf(coreMetricManager.getCore().hashCode()));\n      assertNotNull(pluginInfo);\n      Map<String, SolrMetricReporter> reporters = metricManager.getReporters(coreMetricManager.getRegistryName());\n      assertTrue(\"reporters.size should be > 0, but was + \" + reporters.size(), reporters.size() > 0);\n      assertNotNull(\"reporter \" + reporterName + \" not present among \" + reporters, reporters.get(taggedName));\n      assertTrue(\"wrong reporter class: \" + reporters.get(taggedName), reporters.get(taggedName) instanceof MockMetricReporter);\n    } catch (IllegalArgumentException e) {\n      assertTrue(pluginInfo == null || attrs.get(\"configurable\") == null);\n      assertNull(metricManager.getReporters(coreMetricManager.getRegistryName()).get(taggedName));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bfc52860e6d13d034226a760813c59d984c6817a":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"43564cbb30b064675027cfb569564e8531096e97":["f90f26c648df8320685eb76fec8bb9972e1994c4","bfc52860e6d13d034226a760813c59d984c6817a"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["0265144286422ad99682a00904cc2536b79c8535"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["43564cbb30b064675027cfb569564e8531096e97"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"bfc52860e6d13d034226a760813c59d984c6817a":["43564cbb30b064675027cfb569564e8531096e97"],"43564cbb30b064675027cfb569564e8531096e97":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["f90f26c648df8320685eb76fec8bb9972e1994c4"],"f90f26c648df8320685eb76fec8bb9972e1994c4":["bfc52860e6d13d034226a760813c59d984c6817a","43564cbb30b064675027cfb569564e8531096e97"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}