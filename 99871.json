{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","sourceNew":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = _TestUtil.randomFixedByteLengthUnicodeString(random, data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","sourceOld":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = _TestUtil.randomFixedByteLengthUnicodeString(random, data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","sourceNew":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = _TestUtil.randomFixedByteLengthUnicodeString(random(), data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","sourceOld":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = _TestUtil.randomFixedByteLengthUnicodeString(random, data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","sourceNew":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = TestUtil.randomFixedByteLengthUnicodeString(random(), data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","sourceOld":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = _TestUtil.randomFixedByteLengthUnicodeString(random(), data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0","date":1422781929,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#generateRandomData(byte[]).mjava","sourceNew":"  private void generateRandomData(byte[] data) {\n    // this test needs the random data to be valid unicode\n    String s = TestUtil.randomFixedByteLengthUnicodeString(random(), data.length);\n    byte b[] = s.getBytes(utf8);\n    assert b.length == data.length;\n    System.arraycopy(b, 0, data, 0, b.length);\n  }\n\n","sourceOld":"    private void generateRandomData(byte[] data) {\n      // this test needs the random data to be valid unicode\n      String s = TestUtil.randomFixedByteLengthUnicodeString(random(), data.length);\n      byte b[] = s.getBytes(utf8);\n      assert b.length == data.length;\n      System.arraycopy(b, 0, data, 0, b.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6613659748fe4411a7dcf85266e55db1f95f7315":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["6613659748fe4411a7dcf85266e55db1f95f7315"]},"commit2Childs":{"6613659748fe4411a7dcf85266e55db1f95f7315":["5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5c1c5aa8e88aa52c9e1cbfc696b611d3a56223c0":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}