{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","commits":[{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01322d51122b6cbe6b5ba6059fffba67798dae72","date":1539067228,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n//    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89948af0461fead48f44ba8fb7866f107ce83f22","date":1545157711,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1","date":1546971158,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudTestUtils.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4","date":1588172214,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    operations.forEach(solrRequest -> log.info(solrRequest.getParams().toString()));\n    \n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n      \n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e","date":1594223844,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.setMaxShardsPerNode(2);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeWithMultipleReplicasLost().mjava","sourceNew":null,"sourceOld":"  // TODO: AwaitsFix - some checks had to be ignore in this test\n  public void testNodeWithMultipleReplicasLost() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n\n    // start 3 more nodes\n    cluster.simAddNode();\n    cluster.simAddNode();\n    cluster.simAddNode();\n\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_lost_trigger',\" +\n        \"'event' : 'nodeLost',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SolrRequest req = AutoScalingRequest.create(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    assertAutoscalingUpdateComplete();\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeWithMultipleReplicasLost\",\n        \"conf\",2, 3);\n    create.process(solrClient);\n\n    CloudUtil.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeWithMultipleReplicasLost\", CloudUtil.clusterShape(2, 3, false, true));\n\n    ClusterState clusterState = cluster.getClusterStateProvider().getClusterState();\n    log.debug(\"-- cluster state: {}\", clusterState);\n    DocCollection docCollection = clusterState.getCollection(\"testNodeWithMultipleReplicasLost\");\n\n    // lets find a node with at least 2 replicas\n    String stoppedNodeName = null;\n    List<Replica> replicasToBeMoved = null;\n    for (String node : cluster.getClusterStateProvider().getLiveNodes()) {\n      List<Replica> replicas = docCollection.getReplicas(node);\n      if (replicas != null && replicas.size() == 2) {\n        stoppedNodeName = node;\n        replicasToBeMoved = replicas;\n        cluster.simRemoveNode(node, false);\n        break;\n      }\n    }\n    assertNotNull(stoppedNodeName);\n\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n\n    TriggerEvent triggerEvent = eventRef.get();\n    assertNotNull(triggerEvent);\n    assertEquals(TriggerEventType.NODELOST, triggerEvent.getEventType());\n    // TODO assertEquals(stoppedNodeName, triggerEvent.getProperty(TriggerEvent.NODE_NAME));\n\n    @SuppressWarnings({\"rawtypes\"})\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null \" + actionContextPropsRef.get() + \"\\nevent: \" + eventRef.get(), operations);\n    if (log.isInfoEnabled()) {\n      operations.forEach(solrRequest -> log.info(\"{}\", solrRequest.getParams()));\n    }\n\n    // TODO: this can be 3!\n    // assertEquals(\"ComputePlanAction should have computed exactly 2 operation\", 2, operations.size());\n\n    for (@SuppressWarnings({\"rawtypes\"})SolrRequest solrRequest : operations) {\n      SolrParams params = solrRequest.getParams();\n      assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n      String moved = params.get(\"replica\");\n\n      // TODO: this can fail!\n      // assertTrue(replicasToBeMoved.stream().anyMatch(replica -> replica.getName().equals(moved)));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"3f504512a03d978990cbff30db0522b354e846db":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"89948af0461fead48f44ba8fb7866f107ce83f22":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"01322d51122b6cbe6b5ba6059fffba67798dae72":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a6a5c1c40529f15b445e6720dfde1967e139bff1":["01322d51122b6cbe6b5ba6059fffba67798dae72"],"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["e46a76bb135597b8bf35930cfdb3702bdd1cbe6e"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["89948af0461fead48f44ba8fb7866f107ce83f22"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"ce85ed088dcf7aa1742105d4a8caa9aab3b491c1":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["fe9f2c4a0d7ac164e4bdd4eee7f87131aec83fd4"],"89948af0461fead48f44ba8fb7866f107ce83f22":["ce85ed088dcf7aa1742105d4a8caa9aab3b491c1"],"e46a76bb135597b8bf35930cfdb3702bdd1cbe6e":["3f504512a03d978990cbff30db0522b354e846db"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}