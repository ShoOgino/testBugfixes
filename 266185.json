{"path":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","commits":[{"id":"d20d5e40789b1c42f4f926e3174b271256c43657","date":1301641092,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b09c7419b92e982a901698cb401ce22ac35e4b04","date":1301668869,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":1,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1c5c000a4f7db9f84794088342aa428d80dfa37","date":1303079085,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d493718201f0d0c54c773fb323d87bbd2fbffe41","date":1303546048,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"/dev/null","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","pathOld":"solr/src/test-framework/org/apache/solr/BaseDistributedSearchTestCase#query(Object...).mjava","sourceNew":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    final QueryResponse controlRsp = controlClient.query(params);\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void query(Object... q) throws Exception {\n    final ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"reqid\",Integer.toString(random.nextInt())); // just to help correlate top-level requests w/ sub requests\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n\n    params.add(\"controlClient\",\"true\"); // just to enable easier sorting through log files\n    final QueryResponse controlRsp = controlClient.query(params);\n    params.remove(\"controlClient\");\n\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryServer(params);\n\n    compareResponses(rsp, controlRsp);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  compareResponses(rsp, controlRsp);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["d20d5e40789b1c42f4f926e3174b271256c43657"],"c26f00b574427b55127e869b935845554afde1fa":["d1c5c000a4f7db9f84794088342aa428d80dfa37","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d20d5e40789b1c42f4f926e3174b271256c43657":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["d1c5c000a4f7db9f84794088342aa428d80dfa37"],"d493718201f0d0c54c773fb323d87bbd2fbffe41":["45669a651c970812a680841b97a77cce06af559f","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"45669a651c970812a680841b97a77cce06af559f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b09c7419b92e982a901698cb401ce22ac35e4b04"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["b09c7419b92e982a901698cb401ce22ac35e4b04"]},"commit2Childs":{"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["135621f3a0670a9394eb563224a3b76cc4dddc0f","b09c7419b92e982a901698cb401ce22ac35e4b04","d20d5e40789b1c42f4f926e3174b271256c43657","45669a651c970812a680841b97a77cce06af559f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d20d5e40789b1c42f4f926e3174b271256c43657":["c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"b09c7419b92e982a901698cb401ce22ac35e4b04":["45669a651c970812a680841b97a77cce06af559f","d1c5c000a4f7db9f84794088342aa428d80dfa37"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"d493718201f0d0c54c773fb323d87bbd2fbffe41":[],"45669a651c970812a680841b97a77cce06af559f":["d493718201f0d0c54c773fb323d87bbd2fbffe41"],"d1c5c000a4f7db9f84794088342aa428d80dfa37":["c26f00b574427b55127e869b935845554afde1fa","135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","a258fbb26824fd104ed795e5d9033d2d040049ee","d493718201f0d0c54c773fb323d87bbd2fbffe41","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}