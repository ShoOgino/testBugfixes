{"path":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","pathOld":"/dev/null","sourceNew":"  public static String fillRanges(SolrCloudManager cloudManager, ZkNodeProps message, DocCollection collection, Slice parentSlice,\n                                List<DocRouter.Range> subRanges, List<String> subSlices, List<String> subShardNames) {\n    String splitKey = message.getStr(\"split.key\");\n    DocRouter.Range range = parentSlice.getRange();\n    if (range == null) {\n      range = new PlainIdRouter().fullRange();\n    }\n    DocRouter router = collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;\n\n    String rangesStr = message.getStr(CoreAdminParams.RANGES);\n    if (rangesStr != null) {\n      String[] ranges = rangesStr.split(\",\");\n      if (ranges.length == 0 || ranges.length == 1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"There must be at least two ranges specified to split a shard\");\n      } else {\n        for (int i = 0; i < ranges.length; i++) {\n          String r = ranges[i];\n          try {\n            subRanges.add(DocRouter.DEFAULT.fromString(r));\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exception in parsing hexadecimal hash range: \" + r, e);\n          }\n          if (!subRanges.get(i).isSubsetOf(range)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Specified hash range: \" + r + \" is not a subset of parent shard's range: \" + range.toString());\n          }\n        }\n        List<DocRouter.Range> temp = new ArrayList<>(subRanges); // copy to preserve original order\n        Collections.sort(temp);\n        if (!range.equals(new DocRouter.Range(temp.get(0).min, temp.get(temp.size() - 1).max))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Specified hash ranges: \" + rangesStr + \" do not cover the entire range of parent shard: \" + range);\n        }\n        for (int i = 1; i < temp.size(); i++) {\n          if (temp.get(i - 1).max + 1 != temp.get(i).min) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specified hash ranges: \" + rangesStr\n                + \" either overlap with each other or \" + \"do not cover the entire range of parent shard: \" + range);\n          }\n        }\n      }\n    } else if (splitKey != null) {\n      if (router instanceof CompositeIdRouter) {\n        CompositeIdRouter compositeIdRouter = (CompositeIdRouter) router;\n        List<DocRouter.Range> tmpSubRanges = compositeIdRouter.partitionRangeByKey(splitKey, range);\n        if (tmpSubRanges.size() == 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey\n              + \" has a hash range that is exactly equal to hash range of shard: \" + parentSlice.getName());\n        }\n        for (DocRouter.Range subRange : tmpSubRanges) {\n          if (subRange.min == subRange.max) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey + \" must be a compositeId\");\n          }\n        }\n        subRanges.addAll(tmpSubRanges);\n        log.info(\"Partitioning parent shard \" + parentSlice.getName() + \" range: \" + parentSlice.getRange() + \" yields: \" + subRanges);\n        rangesStr = \"\";\n        for (int i = 0; i < subRanges.size(); i++) {\n          DocRouter.Range subRange = subRanges.get(i);\n          rangesStr += subRange.toString();\n          if (i < subRanges.size() - 1) rangesStr += ',';\n        }\n      }\n    } else {\n      // todo: fixed to two partitions?\n      subRanges.addAll(router.partitionRange(2, range));\n    }\n\n    for (int i = 0; i < subRanges.size(); i++) {\n      String subSlice = parentSlice.getName() + \"_\" + i;\n      subSlices.add(subSlice);\n      String subShardName = Assign.buildSolrCoreName(cloudManager.getDistribStateManager(), collection, subSlice, Replica.Type.NRT);\n      subShardNames.add(subShardName);\n    }\n    return rangesStr;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","sourceNew":"  public static String fillRanges(SolrCloudManager cloudManager, ZkNodeProps message, DocCollection collection, Slice parentSlice,\n                                List<DocRouter.Range> subRanges, List<String> subSlices, List<String> subShardNames) {\n    String splitKey = message.getStr(\"split.key\");\n    DocRouter.Range range = parentSlice.getRange();\n    if (range == null) {\n      range = new PlainIdRouter().fullRange();\n    }\n    DocRouter router = collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;\n\n    String rangesStr = message.getStr(CoreAdminParams.RANGES);\n    if (rangesStr != null) {\n      String[] ranges = rangesStr.split(\",\");\n      if (ranges.length == 0 || ranges.length == 1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"There must be at least two ranges specified to split a shard\");\n      } else {\n        for (int i = 0; i < ranges.length; i++) {\n          String r = ranges[i];\n          try {\n            subRanges.add(DocRouter.DEFAULT.fromString(r));\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exception in parsing hexadecimal hash range: \" + r, e);\n          }\n          if (!subRanges.get(i).isSubsetOf(range)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Specified hash range: \" + r + \" is not a subset of parent shard's range: \" + range.toString());\n          }\n        }\n        List<DocRouter.Range> temp = new ArrayList<>(subRanges); // copy to preserve original order\n        Collections.sort(temp);\n        if (!range.equals(new DocRouter.Range(temp.get(0).min, temp.get(temp.size() - 1).max))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Specified hash ranges: \" + rangesStr + \" do not cover the entire range of parent shard: \" + range);\n        }\n        for (int i = 1; i < temp.size(); i++) {\n          if (temp.get(i - 1).max + 1 != temp.get(i).min) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specified hash ranges: \" + rangesStr\n                + \" either overlap with each other or \" + \"do not cover the entire range of parent shard: \" + range);\n          }\n        }\n      }\n    } else if (splitKey != null) {\n      if (router instanceof CompositeIdRouter) {\n        CompositeIdRouter compositeIdRouter = (CompositeIdRouter) router;\n        List<DocRouter.Range> tmpSubRanges = compositeIdRouter.partitionRangeByKey(splitKey, range);\n        if (tmpSubRanges.size() == 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey\n              + \" has a hash range that is exactly equal to hash range of shard: \" + parentSlice.getName());\n        }\n        for (DocRouter.Range subRange : tmpSubRanges) {\n          if (subRange.min == subRange.max) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey + \" must be a compositeId\");\n          }\n        }\n        subRanges.addAll(tmpSubRanges);\n        log.info(\"Partitioning parent shard \" + parentSlice.getName() + \" range: \" + parentSlice.getRange() + \" yields: \" + subRanges);\n        rangesStr = \"\";\n        for (int i = 0; i < subRanges.size(); i++) {\n          DocRouter.Range subRange = subRanges.get(i);\n          rangesStr += subRange.toString();\n          if (i < subRanges.size() - 1) rangesStr += ',';\n        }\n      }\n    } else {\n      // todo: fixed to two partitions?\n      subRanges.addAll(router.partitionRange(2, range));\n    }\n\n    for (int i = 0; i < subRanges.size(); i++) {\n      String subSlice = parentSlice.getName() + \"_\" + i;\n      subSlices.add(subSlice);\n      String subShardName = Assign.buildSolrCoreName(cloudManager.getDistribStateManager(), collection, subSlice, Replica.Type.NRT);\n      subShardNames.add(subShardName);\n    }\n    return rangesStr;\n  }\n\n","sourceOld":"  public static String fillRanges(SolrCloudManager cloudManager, ZkNodeProps message, DocCollection collection, Slice parentSlice,\n                                List<DocRouter.Range> subRanges, List<String> subSlices, List<String> subShardNames) {\n    String splitKey = message.getStr(\"split.key\");\n    DocRouter.Range range = parentSlice.getRange();\n    if (range == null) {\n      range = new PlainIdRouter().fullRange();\n    }\n    DocRouter router = collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;\n\n    String rangesStr = message.getStr(CoreAdminParams.RANGES);\n    if (rangesStr != null) {\n      String[] ranges = rangesStr.split(\",\");\n      if (ranges.length == 0 || ranges.length == 1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"There must be at least two ranges specified to split a shard\");\n      } else {\n        for (int i = 0; i < ranges.length; i++) {\n          String r = ranges[i];\n          try {\n            subRanges.add(DocRouter.DEFAULT.fromString(r));\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exception in parsing hexadecimal hash range: \" + r, e);\n          }\n          if (!subRanges.get(i).isSubsetOf(range)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Specified hash range: \" + r + \" is not a subset of parent shard's range: \" + range.toString());\n          }\n        }\n        List<DocRouter.Range> temp = new ArrayList<>(subRanges); // copy to preserve original order\n        Collections.sort(temp);\n        if (!range.equals(new DocRouter.Range(temp.get(0).min, temp.get(temp.size() - 1).max))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Specified hash ranges: \" + rangesStr + \" do not cover the entire range of parent shard: \" + range);\n        }\n        for (int i = 1; i < temp.size(); i++) {\n          if (temp.get(i - 1).max + 1 != temp.get(i).min) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specified hash ranges: \" + rangesStr\n                + \" either overlap with each other or \" + \"do not cover the entire range of parent shard: \" + range);\n          }\n        }\n      }\n    } else if (splitKey != null) {\n      if (router instanceof CompositeIdRouter) {\n        CompositeIdRouter compositeIdRouter = (CompositeIdRouter) router;\n        List<DocRouter.Range> tmpSubRanges = compositeIdRouter.partitionRangeByKey(splitKey, range);\n        if (tmpSubRanges.size() == 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey\n              + \" has a hash range that is exactly equal to hash range of shard: \" + parentSlice.getName());\n        }\n        for (DocRouter.Range subRange : tmpSubRanges) {\n          if (subRange.min == subRange.max) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey + \" must be a compositeId\");\n          }\n        }\n        subRanges.addAll(tmpSubRanges);\n        log.info(\"Partitioning parent shard \" + parentSlice.getName() + \" range: \" + parentSlice.getRange() + \" yields: \" + subRanges);\n        rangesStr = \"\";\n        for (int i = 0; i < subRanges.size(); i++) {\n          DocRouter.Range subRange = subRanges.get(i);\n          rangesStr += subRange.toString();\n          if (i < subRanges.size() - 1) rangesStr += ',';\n        }\n      }\n    } else {\n      // todo: fixed to two partitions?\n      subRanges.addAll(router.partitionRange(2, range));\n    }\n\n    for (int i = 0; i < subRanges.size(); i++) {\n      String subSlice = parentSlice.getName() + \"_\" + i;\n      subSlices.add(subSlice);\n      String subShardName = Assign.buildSolrCoreName(cloudManager.getDistribStateManager(), collection, subSlice, Replica.Type.NRT);\n      subShardNames.add(subShardName);\n    }\n    return rangesStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/SplitShardCmd#fillRanges(SolrCloudManager,ZkNodeProps,DocCollection,Slice,List[DocRouter.Range],List[String],List[String]).mjava","sourceNew":"  public static String fillRanges(SolrCloudManager cloudManager, ZkNodeProps message, DocCollection collection, Slice parentSlice,\n                                List<DocRouter.Range> subRanges, List<String> subSlices, List<String> subShardNames) {\n    String splitKey = message.getStr(\"split.key\");\n    DocRouter.Range range = parentSlice.getRange();\n    if (range == null) {\n      range = new PlainIdRouter().fullRange();\n    }\n    DocRouter router = collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;\n\n    String rangesStr = message.getStr(CoreAdminParams.RANGES);\n    if (rangesStr != null) {\n      String[] ranges = rangesStr.split(\",\");\n      if (ranges.length == 0 || ranges.length == 1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"There must be at least two ranges specified to split a shard\");\n      } else {\n        for (int i = 0; i < ranges.length; i++) {\n          String r = ranges[i];\n          try {\n            subRanges.add(DocRouter.DEFAULT.fromString(r));\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exception in parsing hexadecimal hash range: \" + r, e);\n          }\n          if (!subRanges.get(i).isSubsetOf(range)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Specified hash range: \" + r + \" is not a subset of parent shard's range: \" + range.toString());\n          }\n        }\n        List<DocRouter.Range> temp = new ArrayList<>(subRanges); // copy to preserve original order\n        Collections.sort(temp);\n        if (!range.equals(new DocRouter.Range(temp.get(0).min, temp.get(temp.size() - 1).max))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Specified hash ranges: \" + rangesStr + \" do not cover the entire range of parent shard: \" + range);\n        }\n        for (int i = 1; i < temp.size(); i++) {\n          if (temp.get(i - 1).max + 1 != temp.get(i).min) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specified hash ranges: \" + rangesStr\n                + \" either overlap with each other or \" + \"do not cover the entire range of parent shard: \" + range);\n          }\n        }\n      }\n    } else if (splitKey != null) {\n      if (router instanceof CompositeIdRouter) {\n        CompositeIdRouter compositeIdRouter = (CompositeIdRouter) router;\n        List<DocRouter.Range> tmpSubRanges = compositeIdRouter.partitionRangeByKey(splitKey, range);\n        if (tmpSubRanges.size() == 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey\n              + \" has a hash range that is exactly equal to hash range of shard: \" + parentSlice.getName());\n        }\n        for (DocRouter.Range subRange : tmpSubRanges) {\n          if (subRange.min == subRange.max) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey + \" must be a compositeId\");\n          }\n        }\n        subRanges.addAll(tmpSubRanges);\n        log.info(\"Partitioning parent shard \" + parentSlice.getName() + \" range: \" + parentSlice.getRange() + \" yields: \" + subRanges);\n        rangesStr = \"\";\n        for (int i = 0; i < subRanges.size(); i++) {\n          DocRouter.Range subRange = subRanges.get(i);\n          rangesStr += subRange.toString();\n          if (i < subRanges.size() - 1) rangesStr += ',';\n        }\n      }\n    } else {\n      // todo: fixed to two partitions?\n      subRanges.addAll(router.partitionRange(2, range));\n    }\n\n    for (int i = 0; i < subRanges.size(); i++) {\n      String subSlice = parentSlice.getName() + \"_\" + i;\n      subSlices.add(subSlice);\n      String subShardName = Assign.buildSolrCoreName(cloudManager.getDistribStateManager(), collection, subSlice, Replica.Type.NRT);\n      subShardNames.add(subShardName);\n    }\n    return rangesStr;\n  }\n\n","sourceOld":"  public static String fillRanges(SolrCloudManager cloudManager, ZkNodeProps message, DocCollection collection, Slice parentSlice,\n                                List<DocRouter.Range> subRanges, List<String> subSlices, List<String> subShardNames) {\n    String splitKey = message.getStr(\"split.key\");\n    DocRouter.Range range = parentSlice.getRange();\n    if (range == null) {\n      range = new PlainIdRouter().fullRange();\n    }\n    DocRouter router = collection.getRouter() != null ? collection.getRouter() : DocRouter.DEFAULT;\n\n    String rangesStr = message.getStr(CoreAdminParams.RANGES);\n    if (rangesStr != null) {\n      String[] ranges = rangesStr.split(\",\");\n      if (ranges.length == 0 || ranges.length == 1) {\n        throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"There must be at least two ranges specified to split a shard\");\n      } else {\n        for (int i = 0; i < ranges.length; i++) {\n          String r = ranges[i];\n          try {\n            subRanges.add(DocRouter.DEFAULT.fromString(r));\n          } catch (Exception e) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Exception in parsing hexadecimal hash range: \" + r, e);\n          }\n          if (!subRanges.get(i).isSubsetOf(range)) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n                \"Specified hash range: \" + r + \" is not a subset of parent shard's range: \" + range.toString());\n          }\n        }\n        List<DocRouter.Range> temp = new ArrayList<>(subRanges); // copy to preserve original order\n        Collections.sort(temp);\n        if (!range.equals(new DocRouter.Range(temp.get(0).min, temp.get(temp.size() - 1).max))) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST,\n              \"Specified hash ranges: \" + rangesStr + \" do not cover the entire range of parent shard: \" + range);\n        }\n        for (int i = 1; i < temp.size(); i++) {\n          if (temp.get(i - 1).max + 1 != temp.get(i).min) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Specified hash ranges: \" + rangesStr\n                + \" either overlap with each other or \" + \"do not cover the entire range of parent shard: \" + range);\n          }\n        }\n      }\n    } else if (splitKey != null) {\n      if (router instanceof CompositeIdRouter) {\n        CompositeIdRouter compositeIdRouter = (CompositeIdRouter) router;\n        List<DocRouter.Range> tmpSubRanges = compositeIdRouter.partitionRangeByKey(splitKey, range);\n        if (tmpSubRanges.size() == 1) {\n          throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey\n              + \" has a hash range that is exactly equal to hash range of shard: \" + parentSlice.getName());\n        }\n        for (DocRouter.Range subRange : tmpSubRanges) {\n          if (subRange.min == subRange.max) {\n            throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"The split.key: \" + splitKey + \" must be a compositeId\");\n          }\n        }\n        subRanges.addAll(tmpSubRanges);\n        log.info(\"Partitioning parent shard \" + parentSlice.getName() + \" range: \" + parentSlice.getRange() + \" yields: \" + subRanges);\n        rangesStr = \"\";\n        for (int i = 0; i < subRanges.size(); i++) {\n          DocRouter.Range subRange = subRanges.get(i);\n          rangesStr += subRange.toString();\n          if (i < subRanges.size() - 1) rangesStr += ',';\n        }\n      }\n    } else {\n      // todo: fixed to two partitions?\n      subRanges.addAll(router.partitionRange(2, range));\n    }\n\n    for (int i = 0; i < subRanges.size(); i++) {\n      String subSlice = parentSlice.getName() + \"_\" + i;\n      subSlices.add(subSlice);\n      String subShardName = Assign.buildSolrCoreName(cloudManager.getDistribStateManager(), collection, subSlice, Replica.Type.NRT);\n      subShardNames.add(subShardName);\n    }\n    return rangesStr;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}