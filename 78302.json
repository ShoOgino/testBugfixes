{"path":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSimple().mjava","commits":[{"id":"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8","date":1310355420,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSimple().mjava","pathOld":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new MockAnalyzer(random), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new MockAnalyzer(random), \"ümlaut\");\n\n    // FIXME: enhance MockAnalyzer to be able to support this\n    // it must no longer extend CharTokenizer\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n//    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n//    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    // +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n    };\n    assertQueryEquals(\"a - b\", a, \"a - b\");\n    assertQueryEquals(\"a + b\", a, \"a + b\");\n    assertQueryEquals(\"a ! b\", a, \"a ! b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new MockAnalyzer(random), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new MockAnalyzer(random), \"ümlaut\");\n\n    // FIXME: enhance MockAnalyzer to be able to support this\n    // it must no longer extend CharTokenizer\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n//    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n//    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    // +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n    };\n    assertQueryEquals(\"a - b\", a, \"a - b\");\n    assertQueryEquals(\"a + b\", a, \"a + b\");\n    assertQueryEquals(\"a ! b\", a, \"a ! b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5629050969c1e696c5dc14e8639f3e733e8e33c","date":1313606044,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/queryparser/src/test/org/apache/lucene/queryparser/util/QueryParserTestBase#testSimple().mjava","pathOld":"modules/queryparser/src/test/org/apache/lucene/queryparser/classic/TestQueryParser#testSimple().mjava","sourceNew":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new MockAnalyzer(random), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new MockAnalyzer(random), \"ümlaut\");\n\n    // FIXME: enhance MockAnalyzer to be able to support this\n    // it must no longer extend CharTokenizer\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n//    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n//    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    // +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n    };\n    assertQueryEquals(\"a - b\", a, \"a - b\");\n    assertQueryEquals(\"a + b\", a, \"a + b\");\n    assertQueryEquals(\"a ! b\", a, \"a ! b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","sourceOld":"  public void testSimple() throws Exception {\n    assertQueryEquals(\"term term term\", null, \"term term term\");\n    assertQueryEquals(\"türm term term\", new MockAnalyzer(random), \"türm term term\");\n    assertQueryEquals(\"ümlaut\", new MockAnalyzer(random), \"ümlaut\");\n\n    // FIXME: enhance MockAnalyzer to be able to support this\n    // it must no longer extend CharTokenizer\n    //assertQueryEquals(\"\\\"\\\"\", new KeywordAnalyzer(), \"\");\n    //assertQueryEquals(\"foo:\\\"\\\"\", new KeywordAnalyzer(), \"foo:\");\n\n    assertQueryEquals(\"a AND b\", null, \"+a +b\");\n    assertQueryEquals(\"(a AND b)\", null, \"+a +b\");\n    assertQueryEquals(\"c OR (a AND b)\", null, \"c (+a +b)\");\n    assertQueryEquals(\"a AND NOT b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND -b\", null, \"+a -b\");\n    assertQueryEquals(\"a AND !b\", null, \"+a -b\");\n    assertQueryEquals(\"a && b\", null, \"+a +b\");\n//    assertQueryEquals(\"a && ! b\", null, \"+a -b\");\n\n    assertQueryEquals(\"a OR b\", null, \"a b\");\n    assertQueryEquals(\"a || b\", null, \"a b\");\n    assertQueryEquals(\"a OR !b\", null, \"a -b\");\n//    assertQueryEquals(\"a OR ! b\", null, \"a -b\");\n    assertQueryEquals(\"a OR -b\", null, \"a -b\");\n\n    // +,-,! should be directly adjacent to operand (i.e. not separated by whitespace) to be treated as an operator\n    Analyzer a = new Analyzer() {\n      @Override\n      public TokenStream tokenStream(String fieldName, Reader reader) {\n        return new MockTokenizer(reader, MockTokenizer.WHITESPACE, false);\n      }\n    };\n    assertQueryEquals(\"a - b\", a, \"a - b\");\n    assertQueryEquals(\"a + b\", a, \"a + b\");\n    assertQueryEquals(\"a ! b\", a, \"a ! b\");\n\n    assertQueryEquals(\"+term -term term\", null, \"+term -term term\");\n    assertQueryEquals(\"foo:term AND field:anotherTerm\", null,\n                      \"+foo:term +anotherterm\");\n    assertQueryEquals(\"term AND \\\"phrase phrase\\\"\", null,\n                      \"+term +\\\"phrase phrase\\\"\");\n    assertQueryEquals(\"\\\"hello there\\\"\", null, \"\\\"hello there\\\"\");\n    assertTrue(getQuery(\"a AND b\", null) instanceof BooleanQuery);\n    assertTrue(getQuery(\"hello\", null) instanceof TermQuery);\n    assertTrue(getQuery(\"\\\"hello there\\\"\", null) instanceof PhraseQuery);\n\n    assertQueryEquals(\"germ term^2.0\", null, \"germ term^2.0\");\n    assertQueryEquals(\"(term)^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"(germ term)^2.0\", null, \"(germ term)^2.0\");\n    assertQueryEquals(\"term^2.0\", null, \"term^2.0\");\n    assertQueryEquals(\"term^2\", null, \"term^2.0\");\n    assertQueryEquals(\"\\\"germ term\\\"^2.0\", null, \"\\\"germ term\\\"^2.0\");\n    assertQueryEquals(\"\\\"term germ\\\"^2\", null, \"\\\"term germ\\\"^2.0\");\n\n    assertQueryEquals(\"(foo OR bar) AND (baz OR boo)\", null,\n                      \"+(foo bar) +(baz boo)\");\n    assertQueryEquals(\"((a OR b) AND NOT c) OR d\", null,\n                      \"(+(a b) -c) d\");\n    assertQueryEquals(\"+(apple \\\"steve jobs\\\") -(foo bar baz)\", null,\n                      \"+(apple \\\"steve jobs\\\") -(foo bar baz)\");\n    assertQueryEquals(\"+title:(dog OR cat) -author:\\\"bob dole\\\"\", null,\n                      \"+(title:dog title:cat) -author:\\\"bob dole\\\"\");\n    \n    QueryParser qp = new QueryParser(TEST_VERSION_CURRENT, \"field\", new MockAnalyzer(random));\n    // make sure OR is the default:\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.AND_OPERATOR);\n    assertEquals(QueryParser.AND_OPERATOR, qp.getDefaultOperator());\n    qp.setDefaultOperator(QueryParser.OR_OPERATOR);\n    assertEquals(QueryParser.OR_OPERATOR, qp.getDefaultOperator());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5629050969c1e696c5dc14e8639f3e733e8e33c"]},"commit2Childs":{"91a3609ac9a09ca0c8eee1b765401bbdacaceaf8":["b5629050969c1e696c5dc14e8639f3e733e8e33c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91a3609ac9a09ca0c8eee1b765401bbdacaceaf8"],"b5629050969c1e696c5dc14e8639f3e733e8e33c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}