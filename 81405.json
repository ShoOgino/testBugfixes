{"path":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#compress(LongBuffer,LongBuffer).mjava","commits":[{"id":"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","date":1343686506,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#compress(LongBuffer,LongBuffer).mjava","pathOld":"/dev/null","sourceNew":"  /** Compress given int[] into output stream, with For format\n   */\n  public static int compress(final LongBuffer data, LongBuffer packed) throws IOException {\n    int numBits=getNumBits(data.array());\n\n    if (numBits == 0) { // when block is equal, save the value once\n      packed.put(0, data.get(0)<<32); // java uses big endian for LongBuffer impl \n      return (getHeader(1,numBits));\n    }\n\n    PackedInts.Format format = PackedInts.fastestFormatAndBits(128, numBits, PackedInts.FASTEST).format;\n    PackedInts.Encoder encoder = PackedInts.getEncoder(format, PackedInts.VERSION_CURRENT, numBits);\n    int perIter = encoder.values();\n    int iters = 128/perIter;\n    int nblocks = encoder.blocks()*iters;\n    assert 128 % perIter == 0;\n\n    packed.rewind();\n    data.rewind();\n\n    encoder.encode(data, packed, iters);\n\n    int encodedSize = nblocks*2;\n    return getHeader(encodedSize,numBits);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0e3359210474c12c0b79e6400450313e3d7ef2bb","date":1344347790,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/blockpacked/ForUtil#compress(LongBuffer,LongBuffer).mjava","sourceNew":null,"sourceOld":"  /** Compress given int[] into output stream, with For format\n   */\n  public static int compress(final LongBuffer data, LongBuffer packed) throws IOException {\n    int numBits=getNumBits(data.array());\n\n    if (numBits == 0) { // when block is equal, save the value once\n      packed.put(0, data.get(0)<<32); // java uses big endian for LongBuffer impl \n      return (getHeader(1,numBits));\n    }\n\n    PackedInts.Format format = PackedInts.fastestFormatAndBits(128, numBits, PackedInts.FASTEST).format;\n    PackedInts.Encoder encoder = PackedInts.getEncoder(format, PackedInts.VERSION_CURRENT, numBits);\n    int perIter = encoder.values();\n    int iters = 128/perIter;\n    int nblocks = encoder.blocks()*iters;\n    assert 128 % perIter == 0;\n\n    packed.rewind();\n    data.rewind();\n\n    encoder.encode(data, packed, iters);\n\n    int encodedSize = nblocks*2;\n    return getHeader(encodedSize,numBits);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0e3359210474c12c0b79e6400450313e3d7ef2bb":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"7250f5f8fbbaeebf817404fb2b3ce3b26161d5df":["0e3359210474c12c0b79e6400450313e3d7ef2bb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7250f5f8fbbaeebf817404fb2b3ce3b26161d5df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0e3359210474c12c0b79e6400450313e3d7ef2bb":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0e3359210474c12c0b79e6400450313e3d7ef2bb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}