{"path":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","commits":[{"id":"91109046a59c58ee0ee5d0d2767b08d1f30d6702","date":1000830588,"type":0,"author":"Jason van Zyl","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","pathOld":"/dev/null","sourceNew":"  final void score(HitCollector results, int end) throws IOException {\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = Similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.norm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"14aec0a40da5a9c26f8752701a5aa10f78f5017d","date":1027969875,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","sourceNew":"  final void score(HitCollector results, int end) throws IOException {\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = Similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","sourceOld":"  final void score(HitCollector results, int end) throws IOException {\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = Similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.norm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6f5efa46fb27648cd98137d9898d819e115911bc","date":1036690287,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","sourceNew":"  final void score(HitCollector results, int end) throws IOException {\n    Similarity similarity = getSimilarity();\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","sourceOld":"  final void score(HitCollector results, int end) throws IOException {\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = Similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27274410c91546fcfc28e692abd2dd77ca99be4b","date":1042501834,"type":3,"author":"Doug Cutting","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","sourceNew":"  public final void score(HitCollector results, int end) throws IOException {\n    Similarity similarity = getSimilarity();\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      freq = phraseFreq();                        // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = similarity.tf(freq)*value;  // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","sourceOld":"  final void score(HitCollector results, int end) throws IOException {\n    Similarity similarity = getSimilarity();\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      float freq = phraseFreq();\t\t  // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = similarity.tf(freq)*weight; // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d","date":1063243547,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","sourceNew":"    public final void score(HitCollector results, int end) throws IOException {\n        Similarity similarity = getSimilarity();\n        while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n            while (first.doc < last.doc) {\t\t  // scan forward in first\n                do {\n                    first.next();\n                } while (first.doc < last.doc);\n                firstToLast();\n                if (last.doc >= end)\n                    return;\n            }\n\n            // found doc with all terms\n            freq = phraseFreq();                        // check for phrase\n\n            if (freq > 0.0) {\n                float score = similarity.tf(freq) * value;  // compute score\n                score *= Similarity.decodeNorm(norms[first.doc]); // normalize\n                results.collect(first.doc, score);\t  // add to results\n            }\n            last.next();\t\t\t\t  // resume scanning\n        }\n    }\n\n","sourceOld":"  public final void score(HitCollector results, int end) throws IOException {\n    Similarity similarity = getSimilarity();\n    while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n      while (first.doc < last.doc) {\t\t  // scan forward in first\n\tdo {\n\t  first.next();\n\t} while (first.doc < last.doc);\n\tfirstToLast();\n\tif (last.doc >= end)\n\t  return;\n      }\n\n      // found doc with all terms\n      freq = phraseFreq();                        // check for phrase\n\n      if (freq > 0.0) {\n\tfloat score = similarity.tf(freq)*value;  // compute score\n\tscore *= Similarity.decodeNorm(norms[first.doc]); // normalize\n\tresults.collect(first.doc, score);\t  // add to results\n      }\n      last.next();\t\t\t\t  // resume scanning\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15c469602973ef1a33c9a07367a380d278ffab20","date":1074206555,"type":4,"author":"Doug Cutting","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/search/PhraseScorer#score(HitCollector,int).mjava","sourceNew":null,"sourceOld":"    public final void score(HitCollector results, int end) throws IOException {\n        Similarity similarity = getSimilarity();\n        while (last.doc < end) {\t\t\t  // find doc w/ all the terms\n            while (first.doc < last.doc) {\t\t  // scan forward in first\n                do {\n                    first.next();\n                } while (first.doc < last.doc);\n                firstToLast();\n                if (last.doc >= end)\n                    return;\n            }\n\n            // found doc with all terms\n            freq = phraseFreq();                        // check for phrase\n\n            if (freq > 0.0) {\n                float score = similarity.tf(freq) * value;  // compute score\n                score *= Similarity.decodeNorm(norms[first.doc]); // normalize\n                results.collect(first.doc, score);\t  // add to results\n            }\n            last.next();\t\t\t\t  // resume scanning\n        }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["6f5efa46fb27648cd98137d9898d819e115911bc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"6f5efa46fb27648cd98137d9898d819e115911bc":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["15c469602973ef1a33c9a07367a380d278ffab20"],"15c469602973ef1a33c9a07367a380d278ffab20":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"]},"commit2Childs":{"14aec0a40da5a9c26f8752701a5aa10f78f5017d":["6f5efa46fb27648cd98137d9898d819e115911bc"],"91109046a59c58ee0ee5d0d2767b08d1f30d6702":["14aec0a40da5a9c26f8752701a5aa10f78f5017d"],"27274410c91546fcfc28e692abd2dd77ca99be4b":["e9d9dc36efcf84dcc613e66f8eeef578481dfc8d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["91109046a59c58ee0ee5d0d2767b08d1f30d6702"],"6f5efa46fb27648cd98137d9898d819e115911bc":["27274410c91546fcfc28e692abd2dd77ca99be4b"],"e9d9dc36efcf84dcc613e66f8eeef578481dfc8d":["15c469602973ef1a33c9a07367a380d278ffab20"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"15c469602973ef1a33c9a07367a380d278ffab20":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}