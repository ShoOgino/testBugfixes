{"path":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   * \n   * @param hits\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort#checkHits(ScoreDoc[],String).mjava","sourceNew":"  /**\n   * Check the hits for duplicates.\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Check the hits for duplicates.\n   */\n  private void checkHits(ScoreDoc[] hits, String prefix) {\n    if (hits != null) {\n      Map<Integer,Integer> idMap = new TreeMap<Integer,Integer>();\n      for (int docnum = 0; docnum < hits.length; ++docnum) {\n        Integer luceneId = null;\n        \n        luceneId = Integer.valueOf(hits[docnum].doc);\n        if (idMap.containsKey(luceneId)) {\n          StringBuilder message = new StringBuilder(prefix);\n          message.append(\"Duplicate key for hit index = \");\n          message.append(docnum);\n          message.append(\", previous index = \");\n          message.append((idMap.get(luceneId)).toString());\n          message.append(\", Lucene ID = \");\n          message.append(luceneId);\n          log(message.toString());\n        } else {\n          idMap.put(luceneId, Integer.valueOf(docnum));\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}