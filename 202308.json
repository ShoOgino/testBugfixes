{"path":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocsEnum.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocsEnum.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d08eba3d52b63561ebf936481ce73e6b6a14aa03","date":1333879759,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(InvertedFields,InvertedFields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(InvertedFields d1, InvertedFields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","date":1333892281,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(InvertedFields,InvertedFields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(InvertedFields d1, InvertedFields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdb5e42b0cecd8dfb27767a02ada71899bf17917","date":1334100099,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.getUniqueFieldCount() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random, termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random, termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":["02331260bb246364779cb6f04919ca47900d01bb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"02331260bb246364779cb6f04919ca47900d01bb","date":1343749884,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1, false);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2, false);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, true);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, true);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fb07ab105350b80ed9d63ca64b117084ed7391bc","date":1344824719,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    FieldsEnum fieldsEnum1 = d1.iterator();\n    FieldsEnum fieldsEnum2 = d2.iterator();\n    String field1;\n    while ((field1 = fieldsEnum1.next()) != null) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = fieldsEnum1.terms();\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = fieldsEnum2.terms();\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertNull(fieldsEnum2.next());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = _TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = _TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63241596de245e96a0a3c36c7b03eb92130b81db","date":1398708795,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3394716f52b34ab259ad5247e7595d9f9db6e935","date":1398791921,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","date":1398844771,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum1.attributes().getAttribute(OffsetAttribute.class) : null;\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().hasAttribute(OffsetAttribute.class) ? dpEnum2.attributes().getAttribute(OffsetAttribute.class) : null;\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.FLAG_ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.FLAG_ALL);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      DocsAndPositionsEnum dpEnum1 = null;\n      DocsAndPositionsEnum dpEnum2 = null;\n      DocsEnum dEnum1 = null;\n      DocsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.docsAndPositions(null, dpEnum1);\n        dpEnum2 = termsEnum2.docsAndPositions(null, dpEnum2);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, DocsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, DocsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.FLAG_ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.FLAG_ALL);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FLAG_FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FLAG_FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb5311f0bff57ce15a23909f4cfb953773630534","date":1424827033,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n        // nocommit: check\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc4c56406857196c12c90c43a9bd87bbf2a6f82b","date":1427828038,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n        // nocommit: check\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6b4e3cd382d0d075a0f1725649c084bb6510c483","date":1428096423,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n        if (dpEnum1 != null) {\n          assertNotNull(dpEnum2);\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n          OffsetAttribute offsetAtt1 = dpEnum1.attributes().getAttribute(OffsetAttribute.class);\n          OffsetAttribute offsetAtt2 = dpEnum2.attributes().getAttribute(OffsetAttribute.class);\n\n          if (offsetAtt1 != null) {\n            assertNotNull(offsetAtt2);\n          } else {\n            assertNull(offsetAtt2);\n          }\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (offsetAtt1 != null) {\n              assertEquals(offsetAtt1.startOffset(),\n                           offsetAtt2.startOffset());\n              assertEquals(offsetAtt1.endOffset(),\n                           offsetAtt2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82","date":1428522487,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator();\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator();\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator(null);\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator(null);\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f4464508ee83288c8c4585b533f9faaa93aa314","date":1435240759,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2#verifyEquals(Fields,Fields).mjava","sourceNew":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator();\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator();\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","sourceOld":"  public static void verifyEquals(Fields d1, Fields d2) throws IOException {\n    if (d1 == null) {\n      assertTrue(d2 == null || d2.size() == 0);\n      return;\n    }\n    assertTrue(d2 != null);\n\n    Iterator<String> fieldsEnum2 = d2.iterator();\n\n    for (String field1 : d1) {\n      String field2 = fieldsEnum2.next();\n      assertEquals(field1, field2);\n\n      Terms terms1 = d1.terms(field1);\n      assertNotNull(terms1);\n      TermsEnum termsEnum1 = terms1.iterator();\n\n      Terms terms2 = d2.terms(field2);\n      assertNotNull(terms2);\n      TermsEnum termsEnum2 = terms2.iterator();\n\n      PostingsEnum dpEnum1 = null;\n      PostingsEnum dpEnum2 = null;\n      PostingsEnum dEnum1 = null;\n      PostingsEnum dEnum2 = null;\n      \n      BytesRef term1;\n      while ((term1 = termsEnum1.next()) != null) {\n        BytesRef term2 = termsEnum2.next();\n        assertEquals(term1, term2);\n        assertEquals(termsEnum1.totalTermFreq(),\n                     termsEnum2.totalTermFreq());\n        \n        dpEnum1 = termsEnum1.postings(null, dpEnum1, PostingsEnum.ALL);\n        dpEnum2 = termsEnum2.postings(null, dpEnum2, PostingsEnum.ALL);\n\n        if (terms1.hasPositions()) {\n          assertTrue(terms2.hasPositions());\n          int docID1 = dpEnum1.nextDoc();\n          dpEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dpEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          \n          int freq1 = dpEnum1.freq();\n          int freq2 = dpEnum2.freq();\n          assertEquals(freq1, freq2);\n\n          for(int posUpto=0;posUpto<freq1;posUpto++) {\n            int pos1 = dpEnum1.nextPosition();\n            int pos2 = dpEnum2.nextPosition();\n            assertEquals(pos1, pos2);\n            if (terms1.hasOffsets()) {\n              assertTrue(terms2.hasOffsets());\n              assertEquals(dpEnum1.startOffset(),\n                           dpEnum2.startOffset());\n              assertEquals(dpEnum1.endOffset(),\n                           dpEnum2.endOffset());\n            }\n          }\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dpEnum2.nextDoc());\n        } else {\n          dEnum1 = TestUtil.docs(random(), termsEnum1, null, dEnum1, PostingsEnum.FREQS);\n          dEnum2 = TestUtil.docs(random(), termsEnum2, null, dEnum2, PostingsEnum.FREQS);\n          assertNotNull(dEnum1);\n          assertNotNull(dEnum2);\n          int docID1 = dEnum1.nextDoc();\n          dEnum2.nextDoc();\n          // docIDs are not supposed to be equal\n          //int docID2 = dEnum2.nextDoc();\n          //assertEquals(docID1, docID2);\n          assertTrue(docID1 != DocIdSetIterator.NO_MORE_DOCS);\n          int freq1 = dEnum1.freq();\n          int freq2 = dEnum2.freq();\n          assertEquals(freq1, freq2);\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum1.nextDoc());\n          assertEquals(DocIdSetIterator.NO_MORE_DOCS, dEnum2.nextDoc());\n        }\n      }\n\n      assertNull(termsEnum2.next());\n    }\n    assertFalse(fieldsEnum2.hasNext());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cb5311f0bff57ce15a23909f4cfb953773630534":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4","fc4c56406857196c12c90c43a9bd87bbf2a6f82b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["d6f074e73200c07d54f242d3880a8da5a35ff97b","fb07ab105350b80ed9d63ca64b117084ed7391bc"],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":["6613659748fe4411a7dcf85266e55db1f95f7315","3394716f52b34ab259ad5247e7595d9f9db6e935"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf","bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"fc4c56406857196c12c90c43a9bd87bbf2a6f82b":["cb5311f0bff57ce15a23909f4cfb953773630534"],"6613659748fe4411a7dcf85266e55db1f95f7315":["fb07ab105350b80ed9d63ca64b117084ed7391bc"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["02331260bb246364779cb6f04919ca47900d01bb"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"51f5280f31484820499077f41fcdfe92d527d9dc":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["6613659748fe4411a7dcf85266e55db1f95f7315","63241596de245e96a0a3c36c7b03eb92130b81db"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"63241596de245e96a0a3c36c7b03eb92130b81db":["6613659748fe4411a7dcf85266e55db1f95f7315"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["629c38c4ae4e303d0617e05fbfe508140b32f0a3","02331260bb246364779cb6f04919ca47900d01bb"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["bdb5e42b0cecd8dfb27767a02ada71899bf17917"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"02331260bb246364779cb6f04919ca47900d01bb":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"0a773283ef5eab2e9c7136eeb66574a4b7a2dc82":["0f4464508ee83288c8c4585b533f9faaa93aa314"],"bdb5e42b0cecd8dfb27767a02ada71899bf17917":["5a238fc456663f685a9db1ed8d680e348bb45171","629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"cb5311f0bff57ce15a23909f4cfb953773630534":["fc4c56406857196c12c90c43a9bd87bbf2a6f82b"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"6b4e3cd382d0d075a0f1725649c084bb6510c483":["0a773283ef5eab2e9c7136eeb66574a4b7a2dc82"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf":["bdb5e42b0cecd8dfb27767a02ada71899bf17917","5a238fc456663f685a9db1ed8d680e348bb45171"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["02331260bb246364779cb6f04919ca47900d01bb"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"c0cd85fde84cb318b4dc97710dcf15e2959a1bbe":[],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"fc4c56406857196c12c90c43a9bd87bbf2a6f82b":["6b4e3cd382d0d075a0f1725649c084bb6510c483"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","d08eba3d52b63561ebf936481ce73e6b6a14aa03"],"6613659748fe4411a7dcf85266e55db1f95f7315":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","3394716f52b34ab259ad5247e7595d9f9db6e935","63241596de245e96a0a3c36c7b03eb92130b81db"],"fb07ab105350b80ed9d63ca64b117084ed7391bc":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","6613659748fe4411a7dcf85266e55db1f95f7315"],"d08eba3d52b63561ebf936481ce73e6b6a14aa03":["e3f8ac3877ad6d160de0fd3a6f7155b243dfbddf"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"3394716f52b34ab259ad5247e7595d9f9db6e935":["c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","51f5280f31484820499077f41fcdfe92d527d9dc"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["cb5311f0bff57ce15a23909f4cfb953773630534","6b4e3cd382d0d075a0f1725649c084bb6510c483"],"0f4464508ee83288c8c4585b533f9faaa93aa314":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"63241596de245e96a0a3c36c7b03eb92130b81db":["3394716f52b34ab259ad5247e7595d9f9db6e935"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["c7869f64c874ebf7f317d22c00baf2b6857797a6"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["322360ac5185a8446d3e0b530b2068bef67cd3d5","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"02331260bb246364779cb6f04919ca47900d01bb":["fb07ab105350b80ed9d63ca64b117084ed7391bc","b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","c0cd85fde84cb318b4dc97710dcf15e2959a1bbe","5a238fc456663f685a9db1ed8d680e348bb45171","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}