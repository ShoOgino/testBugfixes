{"path":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","commits":[{"id":"098528909bb70948871fd7ed865fafb87ed73964","date":1484667487,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302d34f2c66e8d489ee13078305c330cbf67b226","date":1484754357,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eaa82f7ae8119e5850fcdeb0a7f2362a7d732bac","date":1524923226,"type":3,"author":"Michael Sokolov","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","sourceNew":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE |\n          IGNORE_KEYWORDS)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","sourceOld":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"47e241984c8185946746fd8e18cff4200659091e","date":1543916862,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,boolean,byte[],int,CharArraySet).mjava","pathOld":"lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/WordDelimiterGraphFilter#WordDelimiterGraphFilter(TokenStream,byte[],int,CharArraySet).mjava","sourceNew":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param adjustInternalOffsets if the offsets of partial terms should be adjusted\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, boolean adjustInternalOffsets, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE |\n          IGNORE_KEYWORDS)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n    this.adjustInternalOffsets = adjustInternalOffsets;\n  }\n\n","sourceOld":"  /**\n   * Creates a new WordDelimiterGraphFilter\n   *\n   * @param in TokenStream to be filtered\n   * @param charTypeTable table containing character types\n   * @param configurationFlags Flags configuring the filter\n   * @param protWords If not null is the set of tokens to protect from being delimited\n   */\n  public WordDelimiterGraphFilter(TokenStream in, byte[] charTypeTable, int configurationFlags, CharArraySet protWords) {\n    super(in);\n    if ((configurationFlags &\n        ~(GENERATE_WORD_PARTS |\n          GENERATE_NUMBER_PARTS |\n          CATENATE_WORDS |\n          CATENATE_NUMBERS |\n          CATENATE_ALL |\n          PRESERVE_ORIGINAL |\n          SPLIT_ON_CASE_CHANGE |\n          SPLIT_ON_NUMERICS |\n          STEM_ENGLISH_POSSESSIVE |\n          IGNORE_KEYWORDS)) != 0) {\n      throw new IllegalArgumentException(\"flags contains unrecognized flag: \" + configurationFlags);\n    }\n    this.flags = configurationFlags;\n    this.protWords = protWords;\n    this.iterator = new WordDelimiterIterator(\n        charTypeTable, has(SPLIT_ON_CASE_CHANGE), has(SPLIT_ON_NUMERICS), has(STEM_ENGLISH_POSSESSIVE));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"098528909bb70948871fd7ed865fafb87ed73964":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"eaa82f7ae8119e5850fcdeb0a7f2362a7d732bac":["098528909bb70948871fd7ed865fafb87ed73964"],"47e241984c8185946746fd8e18cff4200659091e":["eaa82f7ae8119e5850fcdeb0a7f2362a7d732bac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["47e241984c8185946746fd8e18cff4200659091e"],"302d34f2c66e8d489ee13078305c330cbf67b226":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","098528909bb70948871fd7ed865fafb87ed73964"]},"commit2Childs":{"098528909bb70948871fd7ed865fafb87ed73964":["eaa82f7ae8119e5850fcdeb0a7f2362a7d732bac","302d34f2c66e8d489ee13078305c330cbf67b226"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["098528909bb70948871fd7ed865fafb87ed73964","302d34f2c66e8d489ee13078305c330cbf67b226"],"eaa82f7ae8119e5850fcdeb0a7f2362a7d732bac":["47e241984c8185946746fd8e18cff4200659091e"],"47e241984c8185946746fd8e18cff4200659091e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"302d34f2c66e8d489ee13078305c330cbf67b226":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","302d34f2c66e8d489ee13078305c330cbf67b226"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}