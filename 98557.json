{"path":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","commits":[{"id":"77855215e331ce146763531cb9b0c050726f6ae5","date":1338323851,"type":0,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"/dev/null","sourceNew":"    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","sourceOld":"    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f3a4e0a58e724ac3915a2f3421d6b8305d83476d","date":1360603009,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        fromDocTermOrds.lookupOrd(ord, scratch);\n        \n        int termID = collectedTerms.add(scratch);\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            scoreSums = ArrayUtil.grow(scoreSums);\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ddbb72a33557d2b5bc22ee95daf3281c43560502","date":1361334582,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        fromDocTermOrds.lookupOrd(ord, scratch);\n        \n        int termID = collectedTerms.add(scratch);\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            scoreSums = ArrayUtil.grow(scoreSums);\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      reuse = fromDocTermOrds.lookup(doc, reuse);\n      int[] buffer = new int[5];\n\n      int chunk;\n      do {\n        chunk = reuse.read(buffer);\n        if (chunk == 0) {\n          return;\n        }\n\n        for (int idx = 0; idx < chunk; idx++) {\n          int key = buffer[idx];\n          docTermsEnum.seekExact((long) key);\n          int ord = collectedTerms.add(docTermsEnum.term());\n          if (ord < 0) {\n            ord = -ord - 1;\n          } else {\n            if (ord >= scoreSums.length) {\n              scoreSums = ArrayUtil.grow(scoreSums);\n            }\n          }\n\n          final float current = scorer.score();\n          final float existing = scoreSums[ord];\n          if (Float.compare(existing, 0.0f) == 0) {\n            scoreSums[ord] = current;\n          } else {\n            switch (scoreMode) {\n              case Total:\n                scoreSums[ord] = existing + current;\n                break;\n              case Max:\n                if (current > existing) {\n                  scoreSums[ord] = current;\n                }\n            }\n          }\n        }\n      } while (chunk >= buffer.length);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(fromDocTermOrds.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            scoreSums = ArrayUtil.grow(scoreSums);\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        fromDocTermOrds.lookupOrd(ord, scratch);\n        \n        int termID = collectedTerms.add(scratch);\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            scoreSums = ArrayUtil.grow(scoreSums);\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fe4b37941dda041ab19456b15412aacb9c657a26","date":1429449253,"type":3,"author":"Martijn van Groningen","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(fromDocTermOrds.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(fromDocTermOrds.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            scoreSums = ArrayUtil.grow(scoreSums);\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","date":1449514606,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      docValues.setDocument(doc);\n      long ord;\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(docValues.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      fromDocTermOrds.setDocument(doc);\n      long ord;\n      while ((ord = fromDocTermOrds.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(fromDocTermOrds.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      docValues.setDocument(doc);\n      long ord;\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(docValues.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      docValues.setDocument(doc);\n      long ord;\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(docValues.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      docValues.setDocument(doc);\n      long ord;\n      while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n        int termID = collectedTerms.add(docValues.lookupOrd(ord));\n        if (termID < 0) {\n          termID = -termID - 1;\n        } else {\n          if (termID >= scoreSums.length) {\n            int begin = scoreSums.length;\n            scoreSums = ArrayUtil.grow(scoreSums);\n            if (scoreMode == ScoreMode.Min) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n            } else if (scoreMode == ScoreMode.Max) {\n              Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n            }\n          }\n        }\n        \n        switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","date":1518443389,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.advanceExact(doc)) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","pathOld":"lucene/join/src/java/org/apache/lucene/search/join/TermsWithScoreCollector.MV#collect(int).mjava","sourceNew":"    @Override\n    public void collect(int doc) throws IOException {\n      if (docValues.advanceExact(doc)) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","sourceOld":"    @Override\n    public void collect(int doc) throws IOException {\n      if (doc > docValues.docID()) {\n        docValues.advance(doc);\n      }\n      if (doc == docValues.docID()) {\n        long ord;\n        while ((ord = docValues.nextOrd()) != SortedSetDocValues.NO_MORE_ORDS) {\n          int termID = collectedTerms.add(docValues.lookupOrd(ord));\n          if (termID < 0) {\n            termID = -termID - 1;\n          } else {\n            if (termID >= scoreSums.length) {\n              int begin = scoreSums.length;\n              scoreSums = ArrayUtil.grow(scoreSums);\n              if (scoreMode == ScoreMode.Min) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.POSITIVE_INFINITY);\n              } else if (scoreMode == ScoreMode.Max) {\n                Arrays.fill(scoreSums, begin, scoreSums.length, Float.NEGATIVE_INFINITY);\n              }\n            }\n          }\n        \n          switch (scoreMode) {\n          case Total:\n            scoreSums[termID] += scorer.score();\n            break;\n          case Min:\n            scoreSums[termID] = Math.min(scoreSums[termID], scorer.score());\n            break;\n          case Max:\n            scoreSums[termID] = Math.max(scoreSums[termID], scorer.score());\n            break;\n          default:\n            throw new AssertionError(\"unexpected: \" + scoreMode);\n          }\n        }\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["77855215e331ce146763531cb9b0c050726f6ae5","7530de27b87b961b51f01bd1299b7004d46e8823"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"fe4b37941dda041ab19456b15412aacb9c657a26":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["7530de27b87b961b51f01bd1299b7004d46e8823","f3a4e0a58e724ac3915a2f3421d6b8305d83476d"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","81f64a6570bc5d216c5d575c3b29ecb106fa0e6b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"f3a4e0a58e724ac3915a2f3421d6b8305d83476d":["7530de27b87b961b51f01bd1299b7004d46e8823"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["fe4b37941dda041ab19456b15412aacb9c657a26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"77855215e331ce146763531cb9b0c050726f6ae5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["77855215e331ce146763531cb9b0c050726f6ae5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["fe4b37941dda041ab19456b15412aacb9c657a26"],"81f64a6570bc5d216c5d575c3b29ecb106fa0e6b":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"fe4b37941dda041ab19456b15412aacb9c657a26":["af3f3d3f7a6a159ccf14d58544fd71ae72c89b10"],"ddbb72a33557d2b5bc22ee95daf3281c43560502":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"f3a4e0a58e724ac3915a2f3421d6b8305d83476d":["ddbb72a33557d2b5bc22ee95daf3281c43560502"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["81f64a6570bc5d216c5d575c3b29ecb106fa0e6b","bfcdec9fcf0409223f35c5ec3bc14094314941b4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"af3f3d3f7a6a159ccf14d58544fd71ae72c89b10":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["77855215e331ce146763531cb9b0c050726f6ae5"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"77855215e331ce146763531cb9b0c050726f6ae5":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","ddbb72a33557d2b5bc22ee95daf3281c43560502","f3a4e0a58e724ac3915a2f3421d6b8305d83476d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}