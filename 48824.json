{"path":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","commits":[{"id":"94df854a0d36420ddbf7a4a21330bd00c2354017","date":1384538000,"type":0,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    //String schema = getFileContentFromZooKeeper(\"schema.xml\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"174cf555ccf6aeb63c765897000c8214a84fe4f1","date":1384563221,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    //String schema = getFileContentFromZooKeeper(\"schema.xml\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    //String schema = getFileContentFromZooKeeper(\"schema.xml\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b51e04dc58a1002908e3caba8f5eb8ef59abe00","date":1384906513,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    //String schema = getFileContentFromZooKeeper(\"schema.xml\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7455ee5c847b2ee7e44656e4218141f62dacb572","date":1386032125,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", \"Testing rewrite of schema.xml file.\".equals(contents));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9d3d365762604952e436b51980101dfc84cc1b3e","date":1396298116,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), \"UTF-8\");\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), \"UTF-8\");\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"08e4487fdb9c03a92e5fcd495993ce0d0497200d","date":1418667953,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Input stream list was null for admin file write operation.\");\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7b4ce16597512fdef68476dc96d48c56f33076","date":1418724719,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"No file name specified for write operation.\"));\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Can not access: bogus.txt\"));\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"No file name specified for write operation.\");\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertEquals(e.getMessage(), \"Can not access: bogus.txt\");\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"No file name specified for write operation.\"));\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Can not access: bogus.txt\"));\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrServer client = (HttpSolrServer) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"No file name specified for write operation.\"));\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Can not access: bogus.txt\"));\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b20fb0ec13a714c528bd1ff701c977114e476c58","date":1420694146,"type":4,"author":"Erick Erickson","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestModifyConfFiles#doTest().mjava","sourceNew":null,"sourceOld":"  @Override\n  public void doTest() throws Exception {\n    int which = r.nextInt(clients.size());\n    HttpSolrClient client = (HttpSolrClient) clients.get(which);\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"schema.xml\");\n    QueryRequest request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Input stream list was null for admin file write operation.\"));\n    }\n\n    params.remove(\"file\");\n    params.set(\"stream.body\", \"Testing rewrite of schema.xml file.\");\n    params.set(\"op\", \"test\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"No file name specified for write operation.\"));\n    }\n\n    params.set(\"op\", \"write\");\n    params.set(\"file\", \"bogus.txt\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n    try {\n      client.request(request);\n      fail(\"Should have caught exception\");\n    } catch (Exception e) {\n      assertThat(e.getMessage(), containsString(\"Can not access: bogus.txt\"));\n    }\n\n    try {\n      params.set(\"file\", \"schema.xml\");\n      request = new QueryRequest(params);\n      request.setPath(\"/admin/fileedit\");\n      client.request(request);\n      fail(\"Should have caught exception since it's mal-formed XML\");\n    } catch (Exception e) {\n      assertTrue(\"Should have a sax parser exception here!\",\n          e.getMessage().contains(\"Invalid XML file: org.xml.sax.SAXParseException\"));\n    }\n\n    String top = SolrTestCaseJ4.TEST_HOME() + \"/collection1/conf\";\n    params.set(\"stream.body\", FileUtils.readFileToString(new File(top, \"schema-tiny.xml\"), \"UTF-8\"));\n    params.set(\"file\", \"schema.xml\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    SolrZkClient zkClient = cloudClient.getZkStateReader().getZkClient();\n    String contents = new String(zkClient.getData(\"/configs/conf1/schema.xml\", null, null, true), StandardCharsets.UTF_8);\n\n    assertTrue(\"Schema contents should have changed!\", contents.contains(\"<schema name=\\\"tiny\\\" version=\\\"1.1\\\">\"));\n\n    // Create a velocity/whatever node. Put a bit of data in it. See if you can change it.\n    zkClient.makePath(\"/configs/conf1/velocity/test.vm\", false, true);\n\n    params.set(\"stream.body\", \"Some bogus stuff for a test.\");\n    params.set(\"file\", \"velocity/test.vm\");\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/fileedit\");\n\n    client.request(request);\n\n    contents = new String(zkClient.getData(\"/configs/conf1/velocity/test.vm\", null, null, true), StandardCharsets.UTF_8);\n    assertTrue(\"Should have found new content in a velocity/test.vm.\",\n        contents.indexOf(\"Some bogus stuff for a test.\") != -1);\n\n    params = new ModifiableSolrParams();\n    request = new QueryRequest(params);\n    request.setPath(\"/admin/file\");\n    NamedList<Object> res = client.request(request);\n\n    NamedList files = (NamedList)res.get(\"files\");\n    assertNotNull(\"Should have gotten files back\", files);\n    SimpleOrderedMap schema = (SimpleOrderedMap)files.get(\"schema.xml\");\n    assertNotNull(\"Should have a schema returned\", schema);\n    assertNull(\"Schema.xml should not be a directory\", schema.get(\"directory\"));\n\n    SimpleOrderedMap velocity = (SimpleOrderedMap)files.get(\"velocity\");\n    assertNotNull(\"Should have velocity dir returned\", velocity);\n\n    assertTrue(\"Velocity should be a directory\", (boolean)velocity.get(\"directory\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["7455ee5c847b2ee7e44656e4218141f62dacb572","9d3d365762604952e436b51980101dfc84cc1b3e"],"b20fb0ec13a714c528bd1ff701c977114e476c58":["bafca15d8e408346a67f4282ad1143b88023893b"],"08e4487fdb9c03a92e5fcd495993ce0d0497200d":["9d3d365762604952e436b51980101dfc84cc1b3e"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"bafca15d8e408346a67f4282ad1143b88023893b":["ca7b4ce16597512fdef68476dc96d48c56f33076"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["94df854a0d36420ddbf7a4a21330bd00c2354017"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"ca7b4ce16597512fdef68476dc96d48c56f33076":["08e4487fdb9c03a92e5fcd495993ce0d0497200d"],"9d3d365762604952e436b51980101dfc84cc1b3e":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7455ee5c847b2ee7e44656e4218141f62dacb572"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b20fb0ec13a714c528bd1ff701c977114e476c58"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":[],"b20fb0ec13a714c528bd1ff701c977114e476c58":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"08e4487fdb9c03a92e5fcd495993ce0d0497200d":["ca7b4ce16597512fdef68476dc96d48c56f33076"],"94df854a0d36420ddbf7a4a21330bd00c2354017":["174cf555ccf6aeb63c765897000c8214a84fe4f1"],"7455ee5c847b2ee7e44656e4218141f62dacb572":["5eb2511ababf862ea11e10761c70ee560cd84510","9d3d365762604952e436b51980101dfc84cc1b3e","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"bafca15d8e408346a67f4282ad1143b88023893b":["b20fb0ec13a714c528bd1ff701c977114e476c58"],"174cf555ccf6aeb63c765897000c8214a84fe4f1":["8b51e04dc58a1002908e3caba8f5eb8ef59abe00"],"8b51e04dc58a1002908e3caba8f5eb8ef59abe00":["7455ee5c847b2ee7e44656e4218141f62dacb572"],"ca7b4ce16597512fdef68476dc96d48c56f33076":["bafca15d8e408346a67f4282ad1143b88023893b"],"9d3d365762604952e436b51980101dfc84cc1b3e":["5eb2511ababf862ea11e10761c70ee560cd84510","08e4487fdb9c03a92e5fcd495993ce0d0497200d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["94df854a0d36420ddbf7a4a21330bd00c2354017","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5eb2511ababf862ea11e10761c70ee560cd84510","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}