{"path":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","commits":[{"id":"39342cb658ac11dfcbf4459807fb00eb9ada0218","date":1472876688,"type":0,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    query(params);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"422691f7c332c0def7c083ef9861c203aa759a7a","date":1472936090,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    query(params);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bc8f206328a706450934717bec7ccc22ad166fc0","date":1473142172,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"89424def13674ea17829b41c5883c54ecc31a132","date":1473767373,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"/dev/null","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","sourceOld":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n    // skip miss count check, here cloud is different to non-distrib\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.put(null, SKIP);\n    }\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","bugFix":["422691f7c332c0def7c083ef9861c203aa759a7a"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8fd5b53bca0e8d1ea79c88b2df6582fca737135f","date":1552323766,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/component/DistributedFacetExistsSmallTest#checkRandomParams().mjava","sourceNew":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    // don't bother trying to to test facet.missing=true + facet.limit=0\n    // distrib & non-distrib are known to behave differently in this \n    if (rand.nextInt(100) < 20 && 0 < params.getInt(\"facet.limit\", 100)) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    query(params);\n  }\n\n","sourceOld":"  private void checkRandomParams() throws Exception {\n    final ModifiableSolrParams params = buildParams();\n    Random rand = random();\n\n    if (rand.nextBoolean()) {\n      int from;\n      params.set(\"q\", \"[\"+(from = rand.nextInt(maxId/2))+\n                  \" TO \"+((from-1)+(rand.nextInt(maxId)))+\"]\");\n    }\n    \n    int offset = 0;\n    int indexSize = 6;\n    if (rand .nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        offset = rand.nextInt(100) < 10 ? rand.nextInt(indexSize *2) : rand.nextInt(indexSize/3+1);\n      }\n      params.add(\"facet.offset\", Integer.toString(offset));\n    }\n\n    int limit = 100;\n    if (rand.nextInt(100) < 20) {\n      if (rand.nextBoolean()) {\n        limit = rand.nextInt(100) < 10 ? rand.nextInt(indexSize/2+1) : rand.nextInt(indexSize*2);\n      }\n      params.add(\"facet.limit\", Integer.toString(limit));\n    }\n\n    if (rand.nextBoolean()) {\n      params.add(\"facet.sort\", rand.nextBoolean() ? \"index\" : \"count\");\n    }\n\n    if ( rand.nextInt(100) < 20) {\n      final String[] prefixes = new String[] {\"A\",\"B\",\"C\"};\n      params.add(\"facet.prefix\", prefixes[rand.nextInt(prefixes.length)]);\n    }\n\n    if (rand.nextInt(100) < 20) {\n      params.add(\"facet.missing\", \"true\");\n    }\n    \n    if (rand.nextInt(100) < 20) { // assigning only valid vals\n      params.add(\"facet.mincount\", rand.nextBoolean() ? \"0\": \"1\" );\n    }\n    \n    final boolean shardRespondsWithMissingEvenLimitIsZero = \n          params.getBool(\"facet.missing\", false) && params.getInt(\"facet.limit\", 100)==0;\n\n    query(params);\n    if (shardRespondsWithMissingEvenLimitIsZero ) {\n      handle.remove(null);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8fd5b53bca0e8d1ea79c88b2df6582fca737135f":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","89424def13674ea17829b41c5883c54ecc31a132"],"bc8f206328a706450934717bec7ccc22ad166fc0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","422691f7c332c0def7c083ef9861c203aa759a7a"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8fd5b53bca0e8d1ea79c88b2df6582fca737135f"],"89424def13674ea17829b41c5883c54ecc31a132":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bc8f206328a706450934717bec7ccc22ad166fc0"],"422691f7c332c0def7c083ef9861c203aa759a7a":["39342cb658ac11dfcbf4459807fb00eb9ada0218"]},"commit2Childs":{"8fd5b53bca0e8d1ea79c88b2df6582fca737135f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["8fd5b53bca0e8d1ea79c88b2df6582fca737135f"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","bc8f206328a706450934717bec7ccc22ad166fc0","39342cb658ac11dfcbf4459807fb00eb9ada0218","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","89424def13674ea17829b41c5883c54ecc31a132"],"bc8f206328a706450934717bec7ccc22ad166fc0":["89424def13674ea17829b41c5883c54ecc31a132"],"39342cb658ac11dfcbf4459807fb00eb9ada0218":["422691f7c332c0def7c083ef9861c203aa759a7a"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"89424def13674ea17829b41c5883c54ecc31a132":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"422691f7c332c0def7c083ef9861c203aa759a7a":["bc8f206328a706450934717bec7ccc22ad166fc0"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}