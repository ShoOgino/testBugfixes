{"path":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","commits":[{"id":"a0a506fe165b26e024afa1aec8a4a7d758e837ff","date":1410971446,"type":1,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    setLockFactory(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, Configuration configuration)\n      throws IOException {\n    setLockFactory(NoLockFactory.getNoLockFactory());\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    setLockFactory(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6784d0cc613dc1ee97030eaaa5e0754edc22d164","date":1420824784,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":["7c88c33fee958027b9192ef2c6bb54836618b165"],"bugIntro":["cd9650414be9b844650990af156ad2fdd813cbac"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197","date":1427044180,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":["849494cf2f3a96af5c8c84995108ddd8456fcd04"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.newInstance(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd9650414be9b844650990af156ad2fdd813cbac","date":1444569243,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    while (true) {\n      try {\n        if (!fileSystem.exists(hdfsDirPath)) {\n          boolean success = fileSystem.mkdirs(hdfsDirPath);\n          if (!success) {\n            throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n          }\n        } else {\n          fileSystem.mkdirs(hdfsDirPath); // check for safe mode\n        }\n        \n        break;\n      } catch (RemoteException e) {\n        if (e.getClassName().equals(\"org.apache.hadoop.hdfs.server.namenode.SafeModeException\")) {\n          LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n          try {\n            Thread.sleep(5000);\n          } catch (InterruptedException e1) {\n            Thread.interrupted();\n          }\n          continue;\n        }\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      } catch (Exception e) {\n        org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n        throw new RuntimeException(\n            \"Problem creating directory: \" + hdfsDirPath, e);\n      }\n    }\n  }\n\n","bugFix":["7c88c33fee958027b9192ef2c6bb54836618b165","6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","date":1466528770,"type":5,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration,int).mjava","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration, int bufferSize)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    this.bufferSize = bufferSize;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/store/hdfs/HdfsDirectory#HdfsDirectory(Path,LockFactory,Configuration).mjava","sourceNew":null,"sourceOld":"  public HdfsDirectory(Path hdfsDirPath, LockFactory lockFactory, Configuration configuration)\n      throws IOException {\n    super(lockFactory);\n    this.hdfsDirPath = hdfsDirPath;\n    this.configuration = configuration;\n    fileSystem = FileSystem.get(hdfsDirPath.toUri(), configuration);\n    fileContext = FileContext.getFileContext(hdfsDirPath.toUri(), configuration);\n    \n    if (fileSystem instanceof DistributedFileSystem) {\n      // Make sure dfs is not in safe mode\n      while (((DistributedFileSystem) fileSystem).setSafeMode(SafeModeAction.SAFEMODE_GET, true)) {\n        LOG.warn(\"The NameNode is in SafeMode - Solr will wait 5 seconds and try again.\");\n        try {\n          Thread.sleep(5000);\n        } catch (InterruptedException e) {\n          Thread.interrupted();\n          // continue\n        }\n      }\n    }\n    \n    try {\n      if (!fileSystem.exists(hdfsDirPath)) {\n        boolean success = fileSystem.mkdirs(hdfsDirPath);\n        if (!success) {\n          throw new RuntimeException(\"Could not create directory: \" + hdfsDirPath);\n        }\n      }\n    } catch (Exception e) {\n      org.apache.solr.common.util.IOUtils.closeQuietly(fileSystem);\n      throw new RuntimeException(\"Problem creating directory: \" + hdfsDirPath, e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["6784d0cc613dc1ee97030eaaa5e0754edc22d164","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"285cdc737de75b7cc7c284a156b20214deb67bca":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd9650414be9b844650990af156ad2fdd813cbac":["a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["cd9650414be9b844650990af156ad2fdd813cbac"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["285cdc737de75b7cc7c284a156b20214deb67bca"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["cd9650414be9b844650990af156ad2fdd813cbac","61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd"]},"commit2Childs":{"a0a506fe165b26e024afa1aec8a4a7d758e837ff":["285cdc737de75b7cc7c284a156b20214deb67bca"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd9650414be9b844650990af156ad2fdd813cbac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0a506fe165b26e024afa1aec8a4a7d758e837ff"],"285cdc737de75b7cc7c284a156b20214deb67bca":["6784d0cc613dc1ee97030eaaa5e0754edc22d164"],"cd9650414be9b844650990af156ad2fdd813cbac":["61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"61c6fb105d0ce095d846502a1d7a2a4bbf8fdecd":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6784d0cc613dc1ee97030eaaa5e0754edc22d164":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a3bf63a4bdcd7c37d2bef84364a56ffdb8a51197"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}