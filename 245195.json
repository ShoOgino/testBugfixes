{"path":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","commits":[{"id":"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2","date":1346834651,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockStartOffset = lastStartOffset;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockStartOffset = lastStartOffset;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c2808fd811f853d032fff6b48bb83a4b7b6f48e7","date":1348836593,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockStartOffset = lastStartOffset;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":["8081d5018e8846bf4080f2809432c759996e749f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cf8086c7e11dc41303ef1b8050bd355ddfaee76d","date":1350007219,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7492bcb52be51e55d596134b95b2e53cc4ffb91","date":1350223278,"type":5,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"db4fdbf3d262768eabc027cd8321edca0cd11fa8","date":1350574784,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41PostingsWriter#finishDoc().mjava","pathOld":"lucene/codecs/src/java/org/apache/lucene/codecs/block/BlockPostingsWriter#finishDoc().mjava","sourceNew":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","sourceOld":"  @Override\n  public void finishDoc() throws IOException {\n    // Since we don't know df for current term, we had to buffer\n    // those skip data for each block, and when a new doc comes, \n    // write them to skip file.\n    if (docBufferUpto == BLOCK_SIZE) {\n      lastBlockDocID = lastDocID;\n      if (posOut != null) {\n        if (payOut != null) {\n          lastBlockPayFP = payOut.getFilePointer();\n        }\n        lastBlockPosFP = posOut.getFilePointer();\n        lastBlockPosBufferUpto = posBufferUpto;\n        lastBlockPayloadByteUpto = payloadByteUpto;\n      }\n      // if (DEBUG) {\n      //   System.out.println(\"  docBufferUpto=\"+docBufferUpto+\" now get lastBlockDocID=\"+lastBlockDocID+\" lastBlockPosFP=\" + lastBlockPosFP + \" lastBlockPosBufferUpto=\" +  lastBlockPosBufferUpto + \" lastBlockPayloadByteUpto=\" + lastBlockPayloadByteUpto);\n      // }\n      docBufferUpto = 0;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7","cf8086c7e11dc41303ef1b8050bd355ddfaee76d"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7","c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"c2808fd811f853d032fff6b48bb83a4b7b6f48e7":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"]},"commit2Childs":{"c7492bcb52be51e55d596134b95b2e53cc4ffb91":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cf8086c7e11dc41303ef1b8050bd355ddfaee76d":["c7492bcb52be51e55d596134b95b2e53cc4ffb91"],"3e45d45bc3730ddd1341f4eb6025f33b8482e6e2":["c2808fd811f853d032fff6b48bb83a4b7b6f48e7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3e45d45bc3730ddd1341f4eb6025f33b8482e6e2"],"db4fdbf3d262768eabc027cd8321edca0cd11fa8":[],"c2808fd811f853d032fff6b48bb83a4b7b6f48e7":["c7492bcb52be51e55d596134b95b2e53cc4ffb91","cf8086c7e11dc41303ef1b8050bd355ddfaee76d","db4fdbf3d262768eabc027cd8321edca0cd11fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["db4fdbf3d262768eabc027cd8321edca0cd11fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}