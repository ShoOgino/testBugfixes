{"path":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","commits":[{"id":"11134e449dabe11d6d0ff6a564d84b82cbe93722","date":1477299083,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID <= docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d2714c85633b642b29871cf5ff8d17d3ba7bfd76","date":1477307753,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID <= docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","pathOld":"/dev/null","sourceNew":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID <= docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"14b133bc4d7193efff507eb88f86fcc07c4e8b50","date":1477907694,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","sourceNew":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID < docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","sourceOld":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID <= docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","bugFix":["11134e449dabe11d6d0ff6a564d84b82cbe93722"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"320888923ec13b91f53082558f01f4c9960dd226","date":1477926871,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MultiDocValues.MultiSortedDocValues#advanceExact(int).mjava","sourceNew":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID < docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","sourceOld":"    @Override\n    public boolean advanceExact(int targetDocID) throws IOException {\n      if (targetDocID <= docID) {\n        throw new IllegalArgumentException(\"can only advance beyond current document: on docID=\" + docID + \" but targetDocID=\" + targetDocID);\n      }\n      int readerIndex = ReaderUtil.subIndex(targetDocID, docStarts);\n      if (readerIndex >= nextLeaf) {\n        if (readerIndex == values.length) {\n          throw new IllegalArgumentException(\"Out of range: \" + targetDocID);\n        }\n        currentDocStart = docStarts[readerIndex];\n        currentValues = values[readerIndex];\n        nextLeaf = readerIndex+1;\n      }\n      docID = targetDocID;\n      if (currentValues == null) {\n        return false;\n      }\n      return currentValues.advanceExact(targetDocID - currentDocStart);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"320888923ec13b91f53082558f01f4c9960dd226":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","11134e449dabe11d6d0ff6a564d84b82cbe93722"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["14b133bc4d7193efff507eb88f86fcc07c4e8b50"]},"commit2Childs":{"11134e449dabe11d6d0ff6a564d84b82cbe93722":["d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11134e449dabe11d6d0ff6a564d84b82cbe93722","80d0e6d59ae23f4a6f30eaf40bfb40742300287f","d2714c85633b642b29871cf5ff8d17d3ba7bfd76"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["320888923ec13b91f53082558f01f4c9960dd226"],"14b133bc4d7193efff507eb88f86fcc07c4e8b50":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"320888923ec13b91f53082558f01f4c9960dd226":[],"d2714c85633b642b29871cf5ff8d17d3ba7bfd76":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","14b133bc4d7193efff507eb88f86fcc07c4e8b50"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["320888923ec13b91f53082558f01f4c9960dd226","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}