{"path":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","commits":[{"id":"9272a617a9cbebf86be127014bbbacd7cf8f8e83","date":1467480344,"type":0,"author":"Erick","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLs() throws Exception {\n\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"lister\");\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3100fa57deee363537557f82c2b38812a2576acc","date":1467500858,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","sourceNew":"  @Test\n  public void testLs() throws Exception {\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"lister\");\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testLs() throws Exception {\n\n    Path src = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\").resolve(\"conf\");\n    Path configSet = TEST_PATH().resolve(\"configsets\").resolve(\"cloud-subdirs\");\n\n    copyConfigUp(src, configSet, \"lister\");\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testLs() throws Exception {\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"lister\");\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4949836c6e83246ddba8997472e3333f40986c8c","date":1560293762,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/SolrCLIZkUtilsTest#testLs().mjava","sourceNew":"  @Test\n  public void testLs() throws Exception {\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n\n    AbstractDistribZkTestBase.copyConfigUp(configSet, \"cloud-subdirs\", \"lister\", zkAddr);\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testLs() throws Exception {\n\n    Path configSet = TEST_PATH().resolve(\"configsets\");\n\n    copyConfigUp(configSet, \"cloud-subdirs\", \"lister\");\n\n    // Should only find a single level.\n    String[] args = new String[]{\n        \"-path\", \"/configs\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n    PrintStream ps = new PrintStream(baos, false, StandardCharsets.UTF_8.name());\n    SolrCLI.ZkLsTool tool = new SolrCLI.ZkLsTool(ps);\n\n\n    int res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    String content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n\n    // simple ls recurse=false\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"false\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertFalse(\"Return should NOT contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // recurse=true\n    args = new String[]{\n        \"-path\", \"/configs\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    // Saw a case where going from root foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n    args = new String[]{\n        \"-path\", \"/\",\n        \"-zkHost\", zkAddr,\n    };\n    \n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertFalse(\"Return should not contain /zookeeper\", content.contains(\"/zookeeper\"));\n\n    // Saw a case where ending in slash foo'd, so test it.\n    args = new String[]{\n        \"-path\", \"/configs/\",\n        \"-recurse\", \"true\",\n        \"-zkHost\", zkAddr,\n    };\n\n    res = tool.runTool(SolrCLI.processCommandLineArgs(SolrCLI.joinCommonAndToolOptions(tool.getOptions()), args));\n    content = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n\n    assertEquals(\"List should have succeeded\", res, 0);\n    assertTrue(\"Return should contain the conf directory\", content.contains(\"lister\"));\n    assertTrue(\"Return should contain a child node\", content.contains(\"solrconfig.xml\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3100fa57deee363537557f82c2b38812a2576acc":["9272a617a9cbebf86be127014bbbacd7cf8f8e83"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4949836c6e83246ddba8997472e3333f40986c8c":["3100fa57deee363537557f82c2b38812a2576acc"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3100fa57deee363537557f82c2b38812a2576acc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4949836c6e83246ddba8997472e3333f40986c8c"]},"commit2Childs":{"3100fa57deee363537557f82c2b38812a2576acc":["4949836c6e83246ddba8997472e3333f40986c8c","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9272a617a9cbebf86be127014bbbacd7cf8f8e83":["3100fa57deee363537557f82c2b38812a2576acc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9272a617a9cbebf86be127014bbbacd7cf8f8e83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4949836c6e83246ddba8997472e3333f40986c8c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}