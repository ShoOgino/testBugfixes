{"path":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#NumberRangePrefixTree(int[]).mjava","commits":[{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#NumberRangePrefixTree(int[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#NumberRangePrefixTree(int[]).mjava","sourceNew":"  protected NumberRangePrefixTree(int[] maxSubCellsByLevel) {\n    super(DUMMY_CTX, maxSubCellsByLevel.length);\n    this.maxSubCellsByLevel = maxSubCellsByLevel;\n\n    // Fill termLenByLevel\n    this.termLenByLevel = new int[maxLevels + 1];\n    termLenByLevel[0] = 0;\n    final int MAX_STATES = 1 << 15;//1 bit less than 2 bytes\n    for (int level = 1; level <= maxLevels; level++) {\n      final int states = maxSubCellsByLevel[level - 1];\n      if (states >= MAX_STATES || states <= 1) {\n        throw new IllegalArgumentException(\"Max states is \"+MAX_STATES+\", given \"+states+\" at level \"+level);\n      }\n      boolean twoBytes = states >= 256;\n      termLenByLevel[level] = termLenByLevel[level-1] + (twoBytes ? 2 : 1);\n    }\n    maxTermLen = termLenByLevel[maxLevels] + 1;// + 1 for leaf byte\n\n    // Fill levelByTermLen\n    levelByTermLen = new int[maxTermLen];\n    levelByTermLen[0] = 0;\n    for (int level = 1; level < termLenByLevel.length; level++) {\n      int termLen = termLenByLevel[level];\n      int prevTermLen = termLenByLevel[level-1];\n      if (termLen - prevTermLen == 2) {//2 byte delta\n        //if the term doesn't completely cover this cell then it must be a leaf of the prior.\n        levelByTermLen[termLen-1] = -1;//won't be used; otherwise erroneous\n        levelByTermLen[termLen] = level;\n      } else {//1 byte delta\n        assert termLen - prevTermLen == 1;\n        levelByTermLen[termLen] = level;\n      }\n    }\n\n  }\n\n","sourceOld":"  protected NumberRangePrefixTree(int[] maxSubCellsByLevel) {\n    super(DUMMY_CTX, maxSubCellsByLevel.length);\n    this.maxSubCellsByLevel = maxSubCellsByLevel;\n\n    // Fill termLenByLevel\n    this.termLenByLevel = new int[maxLevels + 1];\n    termLenByLevel[0] = 0;\n    final int MAX_STATES = 1 << 15;//1 bit less than 2 bytes\n    for (int level = 1; level <= maxLevels; level++) {\n      final int states = maxSubCellsByLevel[level - 1];\n      if (states >= MAX_STATES || states <= 1) {\n        throw new IllegalArgumentException(\"Max states is \"+MAX_STATES+\", given \"+states+\" at level \"+level);\n      }\n      boolean twoBytes = states >= 256;\n      termLenByLevel[level] = termLenByLevel[level-1] + (twoBytes ? 2 : 1);\n    }\n    maxTermLen = termLenByLevel[maxLevels] + 1;// + 1 for leaf byte\n\n    // Fill levelByTermLen\n    levelByTermLen = new int[maxTermLen];\n    levelByTermLen[0] = 0;\n    for (int level = 1; level < termLenByLevel.length; level++) {\n      int termLen = termLenByLevel[level];\n      int prevTermLen = termLenByLevel[level-1];\n      if (termLen - prevTermLen == 2) {//2 byte delta\n        //if the term doesn't completely cover this cell then it must be a leaf of the prior.\n        levelByTermLen[termLen-1] = -1;//won't be used; otherwise erroneous\n        levelByTermLen[termLen] = level;\n      } else {//1 byte delta\n        assert termLen - prevTermLen == 1;\n        levelByTermLen[termLen] = level;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":1,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#NumberRangePrefixTree(int[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/prefix/tree/NumberRangePrefixTree#NumberRangePrefixTree(int[]).mjava","sourceNew":"  protected NumberRangePrefixTree(int[] maxSubCellsByLevel) {\n    super(DUMMY_CTX, maxSubCellsByLevel.length);\n    this.maxSubCellsByLevel = maxSubCellsByLevel;\n\n    // Fill termLenByLevel\n    this.termLenByLevel = new int[maxLevels + 1];\n    termLenByLevel[0] = 0;\n    final int MAX_STATES = 1 << 15;//1 bit less than 2 bytes\n    for (int level = 1; level <= maxLevels; level++) {\n      final int states = maxSubCellsByLevel[level - 1];\n      if (states >= MAX_STATES || states <= 1) {\n        throw new IllegalArgumentException(\"Max states is \"+MAX_STATES+\", given \"+states+\" at level \"+level);\n      }\n      boolean twoBytes = states >= 256;\n      termLenByLevel[level] = termLenByLevel[level-1] + (twoBytes ? 2 : 1);\n    }\n    maxTermLen = termLenByLevel[maxLevels] + 1;// + 1 for leaf byte\n\n    // Fill levelByTermLen\n    levelByTermLen = new int[maxTermLen];\n    levelByTermLen[0] = 0;\n    for (int level = 1; level < termLenByLevel.length; level++) {\n      int termLen = termLenByLevel[level];\n      int prevTermLen = termLenByLevel[level-1];\n      if (termLen - prevTermLen == 2) {//2 byte delta\n        //if the term doesn't completely cover this cell then it must be a leaf of the prior.\n        levelByTermLen[termLen-1] = -1;//won't be used; otherwise erroneous\n        levelByTermLen[termLen] = level;\n      } else {//1 byte delta\n        assert termLen - prevTermLen == 1;\n        levelByTermLen[termLen] = level;\n      }\n    }\n\n  }\n\n","sourceOld":"  protected NumberRangePrefixTree(int[] maxSubCellsByLevel) {\n    super(DUMMY_CTX, maxSubCellsByLevel.length);\n    this.maxSubCellsByLevel = maxSubCellsByLevel;\n\n    // Fill termLenByLevel\n    this.termLenByLevel = new int[maxLevels + 1];\n    termLenByLevel[0] = 0;\n    final int MAX_STATES = 1 << 15;//1 bit less than 2 bytes\n    for (int level = 1; level <= maxLevels; level++) {\n      final int states = maxSubCellsByLevel[level - 1];\n      if (states >= MAX_STATES || states <= 1) {\n        throw new IllegalArgumentException(\"Max states is \"+MAX_STATES+\", given \"+states+\" at level \"+level);\n      }\n      boolean twoBytes = states >= 256;\n      termLenByLevel[level] = termLenByLevel[level-1] + (twoBytes ? 2 : 1);\n    }\n    maxTermLen = termLenByLevel[maxLevels] + 1;// + 1 for leaf byte\n\n    // Fill levelByTermLen\n    levelByTermLen = new int[maxTermLen];\n    levelByTermLen[0] = 0;\n    for (int level = 1; level < termLenByLevel.length; level++) {\n      int termLen = termLenByLevel[level];\n      int prevTermLen = termLenByLevel[level-1];\n      if (termLen - prevTermLen == 2) {//2 byte delta\n        //if the term doesn't completely cover this cell then it must be a leaf of the prior.\n        levelByTermLen[termLen-1] = -1;//won't be used; otherwise erroneous\n        levelByTermLen[termLen] = level;\n      } else {//1 byte delta\n        assert termLen - prevTermLen == 1;\n        levelByTermLen[termLen] = level;\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}