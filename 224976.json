{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","commits":[{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getOverseerStatus(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getOverseerStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":1,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#getOverseerStatus(ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private void getOverseerStatus(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0f3e7752e8a5e963c6939aaa99c36134147a5ece","date":1479805653,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      TimerUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      TimerUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      Snapshot snapshot = timer.getSnapshot();\n      lst.add(\"totalTime\", timer.getSum());\n      lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n      lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n      lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n      lst.add(\"avgTimePerRequest\", timer.getMean());\n      lst.add(\"medianRequestTime\", snapshot.getMedian());\n      lst.add(\"75thPctlRequestTime\", snapshot.get75thPercentile());\n      lst.add(\"95thPctlRequestTime\", snapshot.get95thPercentile());\n      lst.add(\"99thPctlRequestTime\", snapshot.get99thPercentile());\n      lst.add(\"999thPctlRequestTime\", snapshot.get999thPercentile());\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      TimerUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      TimerUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Overseer.Stats stats = ocmh.stats;\n    for (Map.Entry<String, Overseer.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Overseer.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Overseer.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerStatusCmd#call(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","sourceOld":"  @Override\n  @SuppressWarnings(\"unchecked\")\n  public void call(ClusterState state, ZkNodeProps message, NamedList results) throws Exception {\n    ZkStateReader zkStateReader = ocmh.zkStateReader;\n    String leaderNode = OverseerTaskProcessor.getLeaderNode(zkStateReader.getZkClient());\n    results.add(\"leader\", leaderNode);\n    Stat stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue\",null, stat, true);\n    results.add(\"overseer_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/queue-work\",null, stat, true);\n    results.add(\"overseer_work_queue_size\", stat.getNumChildren());\n    stat = new Stat();\n    zkStateReader.getZkClient().getData(\"/overseer/collection-queue-work\",null, stat, true);\n    results.add(\"overseer_collection_queue_size\", stat.getNumChildren());\n\n    NamedList overseerStats = new NamedList();\n    NamedList collectionStats = new NamedList();\n    NamedList stateUpdateQueueStats = new NamedList();\n    NamedList workQueueStats = new NamedList();\n    NamedList collectionQueueStats = new NamedList();\n    Stats stats = ocmh.stats;\n    for (Map.Entry<String, Stats.Stat> entry : stats.getStats().entrySet()) {\n      String key = entry.getKey();\n      NamedList<Object> lst = new SimpleOrderedMap<>();\n      if (key.startsWith(\"collection_\"))  {\n        collectionStats.add(key.substring(11), lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n        List<Stats.FailedOp> failureDetails = stats.getFailureDetails(key);\n        if (failureDetails != null) {\n          List<SimpleOrderedMap<Object>> failures = new ArrayList<>();\n          for (Stats.FailedOp failedOp : failureDetails) {\n            SimpleOrderedMap<Object> fail = new SimpleOrderedMap<>();\n            fail.add(\"request\", failedOp.req.getProperties());\n            fail.add(\"response\", failedOp.resp.getResponse());\n            failures.add(fail);\n          }\n          lst.add(\"recent_failures\", failures);\n        }\n      } else if (key.startsWith(\"/overseer/queue_\"))  {\n        stateUpdateQueueStats.add(key.substring(16), lst);\n      } else if (key.startsWith(\"/overseer/queue-work_\"))  {\n        workQueueStats.add(key.substring(21), lst);\n      } else if (key.startsWith(\"/overseer/collection-queue-work_\"))  {\n        collectionQueueStats.add(key.substring(32), lst);\n      } else  {\n        // overseer stats\n        overseerStats.add(key, lst);\n        int successes = stats.getSuccessCount(entry.getKey());\n        int errors = stats.getErrorCount(entry.getKey());\n        lst.add(\"requests\", successes);\n        lst.add(\"errors\", errors);\n      }\n      Timer timer = entry.getValue().requestTime;\n      MetricUtils.addMetrics(lst, timer);\n    }\n    results.add(\"overseer_operations\", overseerStats);\n    results.add(\"collection_operations\", collectionStats);\n    results.add(\"overseer_queue\", stateUpdateQueueStats);\n    results.add(\"overseer_internal_queue\", workQueueStats);\n    results.add(\"collection_queue\", collectionQueueStats);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"0265144286422ad99682a00904cc2536b79c8535":["0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"727bb765ff2542275f6d31f67be18d7104bae148":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","0f3e7752e8a5e963c6939aaa99c36134147a5ece"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["727bb765ff2542275f6d31f67be18d7104bae148","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["0265144286422ad99682a00904cc2536b79c8535"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"0f3e7752e8a5e963c6939aaa99c36134147a5ece":["0265144286422ad99682a00904cc2536b79c8535","727bb765ff2542275f6d31f67be18d7104bae148"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["0f3e7752e8a5e963c6939aaa99c36134147a5ece","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"727bb765ff2542275f6d31f67be18d7104bae148":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["727bb765ff2542275f6d31f67be18d7104bae148"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}