{"path":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","commits":[{"id":"f3517d617f8b4502b5cca1a57e228d54bda3dd0f","date":1307019502,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","pathOld":"/dev/null","sourceNew":"  /* convert past tense (-ed) to present, and `-ied' to `y' */\n  private void pastTense() {\n    /*\n     * Handle words less than 5 letters with a direct mapping This prevents\n     * (fled -> fl).\n     */\n    if (word.length() <= 4) return;\n    \n    if (endsIn('i', 'e', 'd')) {\n      word.setLength(j + 3);\n      k--;\n      if (lookup()) /* we almost always want to convert -ied to -y, but */\n      return; /* this isn't true for short words (died->die) */\n      k++; /* I don't know any long words that this applies to, */\n      word.unsafeWrite('d'); /* but just in case... */\n      setSuffix(\"y\");\n      lookup();\n      return;\n    }\n    \n    /* the vowelInStem() is necessary so we don't stem acronyms */\n    if (endsIn('e', 'd') && vowelInStem()) {\n      /* see if the root ends in `e' */\n      word.setLength(j + 2);\n      k = j + 1;\n      \n      DictEntry entry = wordInDict();\n      if (entry != null) if (!entry.exception) /*\n                                                * if it's in the dictionary and\n                                                * not an exception\n                                                */\n      return;\n      \n      /* try removing the \"ed\" */\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) return;\n      \n      /*\n       * try removing a doubled consonant. if the root isn't found in the\n       * dictionary, the default is to leave it doubled. This will correctly\n       * capture `backfilled' -> `backfill' instead of `backfill' ->\n       * `backfille', and seems correct most of the time\n       */\n\n      if (doubleC(k)) {\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(k));\n        k++;\n        lookup();\n        return;\n      }\n      \n      /* if we have a `un-' prefix, then leave the word alone */\n      /* (this will sometimes screw up with `under-', but we */\n      /* will take care of that later) */\n\n      if ((word.charAt(0) == 'u') && (word.charAt(1) == 'n')) {\n        word.unsafeWrite('e');\n        word.unsafeWrite('d');\n        k = k + 2;\n        // nolookup()\n        return;\n      }\n      \n      /*\n       * it wasn't found by just removing the `d' or the `ed', so prefer to end\n       * with an `e' (e.g., `microcoded' -> `microcode').\n       */\n\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      // nolookup() - we already tried the \"e\" ending\n      return;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62f5453a200cec2cbb60148de159dbf55591e9d","date":1307049300,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","pathOld":"/dev/null","sourceNew":"  /* convert past tense (-ed) to present, and `-ied' to `y' */\n  private void pastTense() {\n    /*\n     * Handle words less than 5 letters with a direct mapping This prevents\n     * (fled -> fl).\n     */\n    if (word.length() <= 4) return;\n    \n    if (endsIn('i', 'e', 'd')) {\n      word.setLength(j + 3);\n      k--;\n      if (lookup()) /* we almost always want to convert -ied to -y, but */\n      return; /* this isn't true for short words (died->die) */\n      k++; /* I don't know any long words that this applies to, */\n      word.unsafeWrite('d'); /* but just in case... */\n      setSuffix(\"y\");\n      lookup();\n      return;\n    }\n    \n    /* the vowelInStem() is necessary so we don't stem acronyms */\n    if (endsIn('e', 'd') && vowelInStem()) {\n      /* see if the root ends in `e' */\n      word.setLength(j + 2);\n      k = j + 1;\n      \n      DictEntry entry = wordInDict();\n      if (entry != null) if (!entry.exception) /*\n                                                * if it's in the dictionary and\n                                                * not an exception\n                                                */\n      return;\n      \n      /* try removing the \"ed\" */\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) return;\n      \n      /*\n       * try removing a doubled consonant. if the root isn't found in the\n       * dictionary, the default is to leave it doubled. This will correctly\n       * capture `backfilled' -> `backfill' instead of `backfill' ->\n       * `backfille', and seems correct most of the time\n       */\n\n      if (doubleC(k)) {\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(k));\n        k++;\n        lookup();\n        return;\n      }\n      \n      /* if we have a `un-' prefix, then leave the word alone */\n      /* (this will sometimes screw up with `under-', but we */\n      /* will take care of that later) */\n\n      if ((word.charAt(0) == 'u') && (word.charAt(1) == 'n')) {\n        word.unsafeWrite('e');\n        word.unsafeWrite('d');\n        k = k + 2;\n        // nolookup()\n        return;\n      }\n      \n      /*\n       * it wasn't found by just removing the `d' or the `ed', so prefer to end\n       * with an `e' (e.g., `microcoded' -> `microcode').\n       */\n\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      // nolookup() - we already tried the \"e\" ending\n      return;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c715a0f99152be7566591f323c6c5a25725a1bcb","date":1307118449,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","pathOld":"/dev/null","sourceNew":"  /* convert past tense (-ed) to present, and `-ied' to `y' */\n  private void pastTense() {\n    /*\n     * Handle words less than 5 letters with a direct mapping This prevents\n     * (fled -> fl).\n     */\n    if (word.length() <= 4) return;\n    \n    if (endsIn('i', 'e', 'd')) {\n      word.setLength(j + 3);\n      k--;\n      if (lookup()) /* we almost always want to convert -ied to -y, but */\n      return; /* this isn't true for short words (died->die) */\n      k++; /* I don't know any long words that this applies to, */\n      word.unsafeWrite('d'); /* but just in case... */\n      setSuffix(\"y\");\n      lookup();\n      return;\n    }\n    \n    /* the vowelInStem() is necessary so we don't stem acronyms */\n    if (endsIn('e', 'd') && vowelInStem()) {\n      /* see if the root ends in `e' */\n      word.setLength(j + 2);\n      k = j + 1;\n      \n      DictEntry entry = wordInDict();\n      if (entry != null) if (!entry.exception) /*\n                                                * if it's in the dictionary and\n                                                * not an exception\n                                                */\n      return;\n      \n      /* try removing the \"ed\" */\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) return;\n      \n      /*\n       * try removing a doubled consonant. if the root isn't found in the\n       * dictionary, the default is to leave it doubled. This will correctly\n       * capture `backfilled' -> `backfill' instead of `backfill' ->\n       * `backfille', and seems correct most of the time\n       */\n\n      if (doubleC(k)) {\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(k));\n        k++;\n        lookup();\n        return;\n      }\n      \n      /* if we have a `un-' prefix, then leave the word alone */\n      /* (this will sometimes screw up with `under-', but we */\n      /* will take care of that later) */\n\n      if ((word.charAt(0) == 'u') && (word.charAt(1) == 'n')) {\n        word.unsafeWrite('e');\n        word.unsafeWrite('d');\n        k = k + 2;\n        // nolookup()\n        return;\n      }\n      \n      /*\n       * it wasn't found by just removing the `d' or the `ed', so prefer to end\n       * with an `e' (e.g., `microcoded' -> `microcode').\n       */\n\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      // nolookup() - we already tried the \"e\" ending\n      return;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","pathOld":"modules/analysis/common/src/java/org/apache/lucene/analysis/en/KStemmer#pastTense().mjava","sourceNew":"  /* convert past tense (-ed) to present, and `-ied' to `y' */\n  private void pastTense() {\n    /*\n     * Handle words less than 5 letters with a direct mapping This prevents\n     * (fled -> fl).\n     */\n    if (word.length() <= 4) return;\n    \n    if (endsIn('i', 'e', 'd')) {\n      word.setLength(j + 3);\n      k--;\n      if (lookup()) /* we almost always want to convert -ied to -y, but */\n      return; /* this isn't true for short words (died->die) */\n      k++; /* I don't know any long words that this applies to, */\n      word.unsafeWrite('d'); /* but just in case... */\n      setSuffix(\"y\");\n      lookup();\n      return;\n    }\n    \n    /* the vowelInStem() is necessary so we don't stem acronyms */\n    if (endsIn('e', 'd') && vowelInStem()) {\n      /* see if the root ends in `e' */\n      word.setLength(j + 2);\n      k = j + 1;\n      \n      DictEntry entry = wordInDict();\n      if (entry != null) if (!entry.exception) /*\n                                                * if it's in the dictionary and\n                                                * not an exception\n                                                */\n      return;\n      \n      /* try removing the \"ed\" */\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) return;\n      \n      /*\n       * try removing a doubled consonant. if the root isn't found in the\n       * dictionary, the default is to leave it doubled. This will correctly\n       * capture `backfilled' -> `backfill' instead of `backfill' ->\n       * `backfille', and seems correct most of the time\n       */\n\n      if (doubleC(k)) {\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(k));\n        k++;\n        lookup();\n        return;\n      }\n      \n      /* if we have a `un-' prefix, then leave the word alone */\n      /* (this will sometimes screw up with `under-', but we */\n      /* will take care of that later) */\n\n      if ((word.charAt(0) == 'u') && (word.charAt(1) == 'n')) {\n        word.unsafeWrite('e');\n        word.unsafeWrite('d');\n        k = k + 2;\n        // nolookup()\n        return;\n      }\n      \n      /*\n       * it wasn't found by just removing the `d' or the `ed', so prefer to end\n       * with an `e' (e.g., `microcoded' -> `microcode').\n       */\n\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      // nolookup() - we already tried the \"e\" ending\n      return;\n    }\n  }\n\n","sourceOld":"  /* convert past tense (-ed) to present, and `-ied' to `y' */\n  private void pastTense() {\n    /*\n     * Handle words less than 5 letters with a direct mapping This prevents\n     * (fled -> fl).\n     */\n    if (word.length() <= 4) return;\n    \n    if (endsIn('i', 'e', 'd')) {\n      word.setLength(j + 3);\n      k--;\n      if (lookup()) /* we almost always want to convert -ied to -y, but */\n      return; /* this isn't true for short words (died->die) */\n      k++; /* I don't know any long words that this applies to, */\n      word.unsafeWrite('d'); /* but just in case... */\n      setSuffix(\"y\");\n      lookup();\n      return;\n    }\n    \n    /* the vowelInStem() is necessary so we don't stem acronyms */\n    if (endsIn('e', 'd') && vowelInStem()) {\n      /* see if the root ends in `e' */\n      word.setLength(j + 2);\n      k = j + 1;\n      \n      DictEntry entry = wordInDict();\n      if (entry != null) if (!entry.exception) /*\n                                                * if it's in the dictionary and\n                                                * not an exception\n                                                */\n      return;\n      \n      /* try removing the \"ed\" */\n      word.setLength(j + 1);\n      k = j;\n      if (lookup()) return;\n      \n      /*\n       * try removing a doubled consonant. if the root isn't found in the\n       * dictionary, the default is to leave it doubled. This will correctly\n       * capture `backfilled' -> `backfill' instead of `backfill' ->\n       * `backfille', and seems correct most of the time\n       */\n\n      if (doubleC(k)) {\n        word.setLength(k);\n        k--;\n        if (lookup()) return;\n        word.unsafeWrite(word.charAt(k));\n        k++;\n        lookup();\n        return;\n      }\n      \n      /* if we have a `un-' prefix, then leave the word alone */\n      /* (this will sometimes screw up with `under-', but we */\n      /* will take care of that later) */\n\n      if ((word.charAt(0) == 'u') && (word.charAt(1) == 'n')) {\n        word.unsafeWrite('e');\n        word.unsafeWrite('d');\n        k = k + 2;\n        // nolookup()\n        return;\n      }\n      \n      /*\n       * it wasn't found by just removing the `d' or the `ed', so prefer to end\n       * with an `e' (e.g., `microcoded' -> `microcode').\n       */\n\n      word.setLength(j + 1);\n      word.unsafeWrite('e');\n      k = j + 1;\n      // nolookup() - we already tried the \"e\" ending\n      return;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c715a0f99152be7566591f323c6c5a25725a1bcb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"d62f5453a200cec2cbb60148de159dbf55591e9d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","f3517d617f8b4502b5cca1a57e228d54bda3dd0f"],"c715a0f99152be7566591f323c6c5a25725a1bcb":[],"d62f5453a200cec2cbb60148de159dbf55591e9d":[],"f3517d617f8b4502b5cca1a57e228d54bda3dd0f":["b89678825b68eccaf09e6ab71675fc0b0af1e099","c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c715a0f99152be7566591f323c6c5a25725a1bcb","d62f5453a200cec2cbb60148de159dbf55591e9d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}