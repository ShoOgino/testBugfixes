{"path":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","pathOld":"src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","sourceNew":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n          TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","sourceOld":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n          TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790c3f61c9b891d66d919c5d10db9fa5216eb0f1","date":1274818604,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","sourceNew":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","sourceOld":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      LowerCaseTokenizer tokenizer = new LowerCaseTokenizer(\n          TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1d6179f9c4237a7e5d423f4e4b439a94e967efc9","date":1304382587,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testExtendCharBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","sourceNew":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","sourceOld":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c700f8d0842d3e52bb2bdfbfdc046a137e836edb","date":1305285499,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/analysis/common/src/test/org/apache/lucene/analysis/util/TestCharTokenizers#testExtendCharBuffer().mjava","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","sourceNew":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      Tokenizer tokenizer = new LowerCaseTokenizer(TEST_VERSION_CURRENT, new StringReader(builder.toString()));\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","sourceOld":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":4,"author":"Steven Rowe","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/test/org/apache/lucene/analysis/TestCharTokenizers#testExtendCharBuffer().mjava","sourceNew":null,"sourceOld":"  /*\n   * test to extend the buffer TermAttribute buffer internally. If the internal\n   * alg that extends the size of the char array only extends by 1 char and the\n   * next char to be filled in is a supplementary codepoint (using 2 chars) an\n   * index out of bound exception is triggered.\n   */\n  public void testExtendCharBuffer() throws IOException {\n    for (int i = 0; i < 40; i++) {\n      StringBuilder builder = new StringBuilder();\n      for (int j = 0; j < 1+i; j++) {\n        builder.append(\"a\");\n      }\n      builder.append(\"\\ud801\\udc1cabc\");\n      MockTokenizer tokenizer = new MockTokenizer(new StringReader(builder.toString()), MockTokenizer.SIMPLE, true);\n      assertTokenStreamContents(tokenizer, new String[] {builder.toString().toLowerCase()});\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1","1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9"],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"1d6179f9c4237a7e5d423f4e4b439a94e967efc9":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"c700f8d0842d3e52bb2bdfbfdc046a137e836edb":[],"790c3f61c9b891d66d919c5d10db9fa5216eb0f1":["1d6179f9c4237a7e5d423f4e4b439a94e967efc9","a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["790c3f61c9b891d66d919c5d10db9fa5216eb0f1"]},"heads":["a3776dccca01c11e7046323cfad46a3b4a471233","c700f8d0842d3e52bb2bdfbfdc046a137e836edb","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}