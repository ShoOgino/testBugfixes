{"path":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","commits":[{"id":"38dc812cdb844a46e522ae3af71f812ffe7ab082","date":1318322150,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"/dev/null","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.optimize();\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.optimize();\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestBooleanQuery#testBS2DisjunctionNextVsAdvance().mjava","sourceNew":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","sourceOld":"  public void testBS2DisjunctionNextVsAdvance() throws Exception {\n    final Directory d = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random, d);\n    final int numDocs = atLeast(300);\n    for(int docUpto=0;docUpto<numDocs;docUpto++) {\n      String contents = \"a\";\n      if (random.nextInt(20) <= 16) {\n        contents += \" b\";\n      }\n      if (random.nextInt(20) <= 8) {\n        contents += \" c\";\n      }\n      if (random.nextInt(20) <= 4) {\n        contents += \" d\";\n      }\n      if (random.nextInt(20) <= 2) {\n        contents += \" e\";\n      }\n      if (random.nextInt(20) <= 1) {\n        contents += \" f\";\n      }\n      Document doc = new Document();\n      doc.add(new TextField(\"field\", contents));\n      w.addDocument(doc);\n    }\n    w.forceMerge(1);\n    final IndexReader r = w.getReader();\n    final IndexSearcher s = newSearcher(r);\n    w.close();\n\n    for(int iter=0;iter<10*RANDOM_MULTIPLIER;iter++) {\n      if (VERBOSE) {\n        System.out.println(\"iter=\" + iter);\n      }\n      final List<String> terms = new ArrayList<String>(Arrays.asList(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"));\n      final int numTerms = _TestUtil.nextInt(random, 1, terms.size());\n      while(terms.size() > numTerms) {\n        terms.remove(random.nextInt(terms.size()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  terms=\" + terms);\n      }\n\n      final BooleanQuery q = new BooleanQuery();\n      for(String term : terms) {\n        q.add(new BooleanClause(new TermQuery(new Term(\"field\", term)), BooleanClause.Occur.SHOULD));\n      }\n\n      Weight weight = s.createNormalizedWeight(q);\n\n      Scorer scorer = weight.scorer(s.leafContexts[0],\n                                          true, false, null);\n\n      // First pass: just use .nextDoc() to gather all hits\n      final List<ScoreDoc> hits = new ArrayList<ScoreDoc>();\n      while(scorer.nextDoc() != DocIdSetIterator.NO_MORE_DOCS) {\n        hits.add(new ScoreDoc(scorer.docID(), scorer.score()));\n      }\n\n      if (VERBOSE) {\n        System.out.println(\"  \" + hits.size() + \" hits\");\n      }\n\n      // Now, randomly next/advance through the list and\n      // verify exact match:\n      for(int iter2=0;iter2<10;iter2++) {\n\n        weight = s.createNormalizedWeight(q);\n        scorer = weight.scorer(s.leafContexts[0],\n                               true, false, null);\n\n        if (VERBOSE) {\n          System.out.println(\"  iter2=\" + iter2);\n        }\n\n        int upto = -1;\n        while(upto < hits.size()) {\n          final int nextUpto;\n          final int nextDoc;\n          final int left = hits.size() - upto;\n          if (left == 1 || random.nextBoolean()) {\n            // next\n            nextUpto = 1+upto;\n            nextDoc = scorer.nextDoc();\n          } else {\n            // advance\n            int inc = _TestUtil.nextInt(random, 1, left-1);\n            nextUpto = inc + upto;\n            nextDoc = scorer.advance(hits.get(nextUpto).doc);\n          }\n\n          if (nextUpto == hits.size()) {\n            assertEquals(DocIdSetIterator.NO_MORE_DOCS, nextDoc);\n          } else {\n            final ScoreDoc hit = hits.get(nextUpto);\n            assertEquals(hit.doc, nextDoc);\n            // Test for precise float equality:\n            assertTrue(\"doc \" + hit.doc + \" has wrong score: expected=\" + hit.score + \" actual=\" + scorer.score(), hit.score == scorer.score());\n          }\n          upto = nextUpto;\n        }\n      }\n    }\n    \n    r.close();\n    d.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["38dc812cdb844a46e522ae3af71f812ffe7ab082"],"38dc812cdb844a46e522ae3af71f812ffe7ab082":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["38dc812cdb844a46e522ae3af71f812ffe7ab082"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"38dc812cdb844a46e522ae3af71f812ffe7ab082":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}