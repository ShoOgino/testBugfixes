{"path":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","commits":[{"id":"0584ee2be458044f19041ac184df00c69c632b4d","date":1231348258,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n\n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(size);\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      distances.put(i, d);\n        \n      if (d < distance){\n        result.set(i);\n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size);\n  \n\n    cdistance = null;\n    \n    return result;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4281ba2c96715d60b63bc198a292ca602a888c2d","date":1240977201,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    /* store calculated distances for reuse by other components */\n    boolean db = false;\n    offset += reader.maxDoc();\n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }else {\n    \tdb=true;\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        distances.put(i+ nextOffset, d); // include nextOffset for multireader  \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size);\n  \n\n    cdistance = null;\n    nextOffset += offset;  // this should be something that's part of indexReader\n    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n\n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    /* store calculated distances for reuse by other components */\n    distances = new HashMap<Integer,Double>(size);\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      distances.put(i, d);\n        \n      if (d < distance){\n        result.set(i);\n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size);\n  \n\n    cdistance = null;\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2d6be147c89de7996054b96873a638b6adc5cea1","date":1244667566,"type":3,"author":"Patrick O'Leary","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    /* store calculated distances for reuse by other components */\n    boolean db = false;\n    offset += reader.maxDoc();\n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }else {\n    \tdb=true;\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        distances.put(i+ nextOffset, d); // include nextOffset for multireader  \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size);\n  \n\n    cdistance = null;\n    nextOffset += offset;  // this should be something that's part of indexReader\n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"379c1e8147f491f226438f941a2ebb48900791c8","date":1244994435,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n\n      if (reader.isDeleted(i)) {\n        i = bits.nextSetBit(i+1);\n        continue;\n      }\n\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60fe82b6af0f490fe9a473a5315847479e78f73f","date":1247758686,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","sourceNew":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n\n      if (reader.isDeleted(i)) {\n        i = bits.nextSetBit(i+1);\n        continue;\n      }\n\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      x = latIndex[i];\n      y = lngIndex[i];\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","sourceOld":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    String[] latIndex = FieldCache.DEFAULT.getStrings(reader, latField);\n    String[] lngIndex = FieldCache.DEFAULT.getStrings(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n\n      if (reader.isDeleted(i)) {\n        i = bits.nextSetBit(i+1);\n        continue;\n      }\n\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      String sx = latIndex[i];\n      String sy = lngIndex[i];\n      x = NumberUtils.SortableStr2double(sx);\n      y = NumberUtils.SortableStr2double(sy);\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d41c10b9c61bc826acd344f499e062fb46bc42ae","date":1249408917,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"contrib/spatial/src/java/org/apache/lucene/spatial/tier/LatLongDistanceFilter#bits(IndexReader,BitSet).mjava","sourceNew":null,"sourceOld":"  @Override\n  public BitSet bits(IndexReader reader, BitSet bits) throws Exception {\n\n  \n    /* Create a BitSet to store the result */\n  \t\n    int size = bits.cardinality();\n    BitSet result = new BitSet(size);\n    \n    \n    /* create an intermediate cache to avoid recomputing\n         distances for the same point  */\n    HashMap<String,Double> cdistance = new HashMap<String,Double>(size);\n    \n\n    \n    if (distances == null){\n    \tdistances = new HashMap<Integer,Double>();\n    }\n    \n    long start = System.currentTimeMillis();\n    double[] latIndex = FieldCache.DEFAULT.getDoubles(reader, latField);\n    double[] lngIndex = FieldCache.DEFAULT.getDoubles(reader, lngField);\n    \n    /* loop over all set bits (hits from the boundary box filters) */\n    int i = bits.nextSetBit(0);\n    while (i >= 0){\n\n      if (reader.isDeleted(i)) {\n        i = bits.nextSetBit(i+1);\n        continue;\n      }\n\n      double x,y;\n      \n      // if we have a completed\n      // filter chain, lat / lngs can be retrived from \n      // memory rather than document base.\n\n      x = latIndex[i];\n      y = lngIndex[i];\n      \n      // round off lat / longs if necessary\n//      x = DistanceHandler.getPrecision(x, precise);\n//      y = DistanceHandler.getPrecision(y, precise);\n\n      String ck = new Double(x).toString()+\",\"+new Double(y).toString();\n      Double cachedDistance = cdistance.get(ck);\n      double d;\n      \n      if(cachedDistance != null){\n        d = cachedDistance.doubleValue();\n        \n      } else {\n        d = DistanceUtils.getInstance().getDistanceMi(lat, lng, x, y);\n        //d = DistanceUtils.getLLMDistance(lat, lng, x, y);\n        cdistance.put(ck, d);\n      }\n      \n      // why was i storing all distances again?\n      if (d < distance){\n        result.set(i);\n        int did = i + nextOffset;\n        distances.put(did, d); // include nextOffset for multi segment reader  \n        \n      }\n      i = bits.nextSetBit(i+1);\n    }\n    \n    long end = System.currentTimeMillis();\n    nextOffset += reader.maxDoc();  // this should be something that's part of indexReader\n    log.fine(\"Time taken : \"+ (end - start) + \n        \", results : \"+ distances.size() + \n        \", cached : \"+ cdistance.size() +\n        \", incoming size: \"+ size+\n        \", nextOffset: \"+ nextOffset);\n  \n\n    cdistance = null;\n    \n    \n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4281ba2c96715d60b63bc198a292ca602a888c2d":["0584ee2be458044f19041ac184df00c69c632b4d"],"2d6be147c89de7996054b96873a638b6adc5cea1":["4281ba2c96715d60b63bc198a292ca602a888c2d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"379c1e8147f491f226438f941a2ebb48900791c8":["2d6be147c89de7996054b96873a638b6adc5cea1"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["379c1e8147f491f226438f941a2ebb48900791c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4281ba2c96715d60b63bc198a292ca602a888c2d":["2d6be147c89de7996054b96873a638b6adc5cea1"],"2d6be147c89de7996054b96873a638b6adc5cea1":["379c1e8147f491f226438f941a2ebb48900791c8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0584ee2be458044f19041ac184df00c69c632b4d"],"379c1e8147f491f226438f941a2ebb48900791c8":["60fe82b6af0f490fe9a473a5315847479e78f73f"],"d41c10b9c61bc826acd344f499e062fb46bc42ae":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"60fe82b6af0f490fe9a473a5315847479e78f73f":["d41c10b9c61bc826acd344f499e062fb46bc42ae"],"0584ee2be458044f19041ac184df00c69c632b4d":["4281ba2c96715d60b63bc198a292ca602a888c2d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}