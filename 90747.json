{"path":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d572389229127c297dd1fa5ce4758e1cec41e799","date":1273610938,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new WhitespaceAnalyzer(TEST_VERSION_CURRENT)));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c084e47df29de3330311d69dabf515ceaa989512","date":1279030906,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f4e87790277826a2aea119328600dfb07761f32","date":1279827275,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    IndexWriter writer = new IndexWriter (directory, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    writer.optimize ();\n    writer.close ();\n\n    searcher = new IndexSearcher (directory, true);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"15bbd254c1506df5299c4df8c148262c7bd6301e","date":1279913113,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d","date":1279972526,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    // nocommit seed\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97","date":1280158618,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    // nocommit seed\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b103252dee6afa1b6d7a622c773d178788eb85a","date":1280180143,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3242a09f703274d3b9283f2064a1a33064b53a1b","date":1280263474,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory, \n        new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()));\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","date":1281477834,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c","date":1281646583,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new MockRAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1f653cfcf159baeaafe5d01682a911e95bba4012","date":1284122058,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    Random random = newRandom();\n    directory = newDirectory(random);\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"132903c28af3aa6f67284b78de91c0f0a99488c2","date":1284282129,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"43b04c27924fe393e38e9f0986e32c634f261859","date":1284399440,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  protected void setUp() throws Exception {\n    super.setUp();\n    directory = new RAMDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (newRandom(), directory);\n\n    Document doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (new Field(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (new Field(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c19f985e36a65cc969e8e564fe337a0d41512075","date":1296330536,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"790e1fde4caa765b3faaad3fbcd25c6973450336","date":1296689245,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory);\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = new IndexSearcher (reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"01e5948db9a07144112d2f08f28ca2e3cd880348","date":1301759232,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"45669a651c970812a680841b97a77cce06af559f","date":1301922222,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f2c5f0cb44df114db4228c8f77861714b5cabaea","date":1302542431,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962d04139994fce5193143ef35615499a9a96d78","date":1302693744,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a3776dccca01c11e7046323cfad46a3b4a471233","date":1306100719,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMergePolicy(newInOrderLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"b\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"d\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"a\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", Field.Store.YES, Field.Index.ANALYZED));\n    doc.add (newField(\"sorter\", \"c\", Field.Store.YES, Field.Index.ANALYZED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":["04f07771a2a7dd3a395700665ed839c3dae2def2"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6620df8541b174097b1133a4fc370adb2e570524","date":1319544675,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d14e8d18c0e3970c20354dbeeb49da11bd587fbd","date":1321041051,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.optimize();\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/TestFilteredQuery#setUp().mjava","sourceNew":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","sourceOld":"  @Override\n  public void setUp() throws Exception {\n    super.setUp();\n    directory = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter (random, directory, newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMergePolicy(newLogMergePolicy()));\n\n    Document doc = new Document();\n    doc.add (newField(\"field\", \"one two three four five\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"b\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three four\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"d\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two three y\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"a\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    doc = new Document();\n    doc.add (newField(\"field\", \"one two x\", TextField.TYPE_STORED));\n    doc.add (newField(\"sorter\", \"c\", TextField.TYPE_STORED));\n    writer.addDocument (doc);\n\n    // tests here require single segment (eg try seed\n    // 8239472272678419952L), because SingleDocTestFilter(x)\n    // blindly accepts that docID in any sub-segment\n    writer.forceMerge(1);\n\n    reader = writer.getReader();\n    writer.close ();\n\n    searcher = newSearcher(reader);\n\n    query = new TermQuery (new Term (\"field\", \"three\"));\n    filter = newStaticFilterB();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"6620df8541b174097b1133a4fc370adb2e570524":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["c084e47df29de3330311d69dabf515ceaa989512"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["6620df8541b174097b1133a4fc370adb2e570524"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["3242a09f703274d3b9283f2064a1a33064b53a1b","43b04c27924fe393e38e9f0986e32c634f261859"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["43b04c27924fe393e38e9f0986e32c634f261859"],"43b04c27924fe393e38e9f0986e32c634f261859":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"c084e47df29de3330311d69dabf515ceaa989512":["d572389229127c297dd1fa5ce4758e1cec41e799"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["01e5948db9a07144112d2f08f28ca2e3cd880348"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["43b04c27924fe393e38e9f0986e32c634f261859","790e1fde4caa765b3faaad3fbcd25c6973450336"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["f2c5f0cb44df114db4228c8f77861714b5cabaea"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","790e1fde4caa765b3faaad3fbcd25c6973450336"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["15bbd254c1506df5299c4df8c148262c7bd6301e"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["5f4e87790277826a2aea119328600dfb07761f32","4b103252dee6afa1b6d7a622c773d178788eb85a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["c084e47df29de3330311d69dabf515ceaa989512","c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["29ef99d61cda9641b6250bf9567329a6e65f901d","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"d572389229127c297dd1fa5ce4758e1cec41e799":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"5f4e87790277826a2aea119328600dfb07761f32":["d572389229127c297dd1fa5ce4758e1cec41e799","c084e47df29de3330311d69dabf515ceaa989512"],"962d04139994fce5193143ef35615499a9a96d78":["45669a651c970812a680841b97a77cce06af559f","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"790e1fde4caa765b3faaad3fbcd25c6973450336":["c19f985e36a65cc969e8e564fe337a0d41512075"],"a3776dccca01c11e7046323cfad46a3b4a471233":["790e1fde4caa765b3faaad3fbcd25c6973450336","f2c5f0cb44df114db4228c8f77861714b5cabaea"],"45669a651c970812a680841b97a77cce06af559f":["bde51b089eb7f86171eb3406e38a274743f9b7ac","01e5948db9a07144112d2f08f28ca2e3cd880348"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"6620df8541b174097b1133a4fc370adb2e570524":["d14e8d18c0e3970c20354dbeeb49da11bd587fbd"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"15bbd254c1506df5299c4df8c148262c7bd6301e":["24b91b08ba3110a0904b8ba9803276bf9a9b5f6d"],"d14e8d18c0e3970c20354dbeeb49da11bd587fbd":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"132903c28af3aa6f67284b78de91c0f0a99488c2":["43b04c27924fe393e38e9f0986e32c634f261859"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["bde51b089eb7f86171eb3406e38a274743f9b7ac"],"c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97":["4b103252dee6afa1b6d7a622c773d178788eb85a"],"43b04c27924fe393e38e9f0986e32c634f261859":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","c19f985e36a65cc969e8e564fe337a0d41512075","29ef99d61cda9641b6250bf9567329a6e65f901d"],"c19f985e36a65cc969e8e564fe337a0d41512075":["790e1fde4caa765b3faaad3fbcd25c6973450336"],"01e5948db9a07144112d2f08f28ca2e3cd880348":["f2c5f0cb44df114db4228c8f77861714b5cabaea","45669a651c970812a680841b97a77cce06af559f"],"c084e47df29de3330311d69dabf515ceaa989512":["15bbd254c1506df5299c4df8c148262c7bd6301e","4b103252dee6afa1b6d7a622c773d178788eb85a","5f4e87790277826a2aea119328600dfb07761f32"],"f2c5f0cb44df114db4228c8f77861714b5cabaea":["1509f151d7692d84fae414b2b799ac06ba60fcb4","135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233"],"1f653cfcf159baeaafe5d01682a911e95bba4012":["132903c28af3aa6f67284b78de91c0f0a99488c2"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c":["ab9633cb67e3c0aec3c066147a23a957d6e7ad8c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["6620df8541b174097b1133a4fc370adb2e570524"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["45669a651c970812a680841b97a77cce06af559f"],"24b91b08ba3110a0904b8ba9803276bf9a9b5f6d":["c9f6bb0c3d7b1c1dd8aeab43a34a89f050069e97"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["d572389229127c297dd1fa5ce4758e1cec41e799"],"3242a09f703274d3b9283f2064a1a33064b53a1b":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"4b103252dee6afa1b6d7a622c773d178788eb85a":["1a2e46fd1b7cbc52d7d6461a6ef99e7107ae2a9c","3242a09f703274d3b9283f2064a1a33064b53a1b"],"ab9633cb67e3c0aec3c066147a23a957d6e7ad8c":["1f653cfcf159baeaafe5d01682a911e95bba4012"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":[],"d572389229127c297dd1fa5ce4758e1cec41e799":["c084e47df29de3330311d69dabf515ceaa989512","5f4e87790277826a2aea119328600dfb07761f32"],"5f4e87790277826a2aea119328600dfb07761f32":["3242a09f703274d3b9283f2064a1a33064b53a1b"],"962d04139994fce5193143ef35615499a9a96d78":[],"790e1fde4caa765b3faaad3fbcd25c6973450336":["01e5948db9a07144112d2f08f28ca2e3cd880348","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","a3776dccca01c11e7046323cfad46a3b4a471233"],"a3776dccca01c11e7046323cfad46a3b4a471233":[],"45669a651c970812a680841b97a77cce06af559f":["962d04139994fce5193143ef35615499a9a96d78"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["135621f3a0670a9394eb563224a3b76cc4dddc0f","962d04139994fce5193143ef35615499a9a96d78","a3776dccca01c11e7046323cfad46a3b4a471233","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}