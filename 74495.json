{"path":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createDataIterator(String,String,String,int).mjava","commits":[{"id":"5238b7e551c27d6d8b882878a8f8b114bd79f1b5","date":1421397215,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createDataIterator(String,String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  @SuppressWarnings(\"unchecked\")\n  private List<String> createDataIterator(String query, String type, String description, int count) {\n    List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();\n    List<String> ids = new ArrayList<String>(count);\n    for (int index = 0; index < count; ++index) {\n      String docId = nextId();\n      ids.add(docId);\n      Map<String, Object> doc = createMap(FIELD_ID, docId, \"desc\", docId + \" \" + description, \"type_s\", type);\n      data.add(doc);\n    }\n    Collections.shuffle(data, random());\n    MockDataSource.setIterator(query, data.iterator());\n    \n    return ids;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestHierarchicalDocBuilder#createDataIterator(String,String,String,int).mjava","sourceNew":null,"sourceOld":"  @SuppressWarnings(\"unchecked\")\n  private List<String> createDataIterator(String query, String type, String description, int count) {\n    List<Map<String, Object>> data = new ArrayList<Map<String, Object>>();\n    List<String> ids = new ArrayList<String>(count);\n    for (int index = 0; index < count; ++index) {\n      String docId = nextId();\n      ids.add(docId);\n      Map<String, Object> doc = createMap(FIELD_ID, docId, \"desc\", docId + \" \" + description, \"type_s\", type);\n      data.add(doc);\n    }\n    Collections.shuffle(data, random());\n    MockDataSource.setIterator(query, data.iterator());\n    \n    return ids;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5238b7e551c27d6d8b882878a8f8b114bd79f1b5":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5238b7e551c27d6d8b882878a8f8b114bd79f1b5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}