{"path":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFieldNums().mjava","commits":[{"id":"eda61b1e90b490cc5837200e04c02639a0d272c7","date":1358795519,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFieldNums().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<Integer>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"07155cdd910937cdf6877e48884d5782845c8b8b","date":1358796205,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFieldNums().mjava","pathOld":"/dev/null","sourceNew":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<Integer>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFieldNums().mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/compressing/CompressingTermVectorsWriter#flushFieldNums().mjava","sourceNew":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","sourceOld":"  /** Returns a sorted array containing unique field numbers */\n  private int[] flushFieldNums() throws IOException {\n    SortedSet<Integer> fieldNums = new TreeSet<Integer>();\n    for (DocData dd : pendingDocs) {\n      for (FieldData fd : dd.fields) {\n        fieldNums.add(fd.fieldNum);\n      }\n    }\n\n    final int numDistinctFields = fieldNums.size();\n    assert numDistinctFields > 0;\n    final int bitsRequired = PackedInts.bitsRequired(fieldNums.last());\n    final int token = (Math.min(numDistinctFields - 1, 0x07) << 5) | bitsRequired;\n    vectorsStream.writeByte((byte) token);\n    if (numDistinctFields - 1 >= 0x07) {\n      vectorsStream.writeVInt(numDistinctFields - 1 - 0x07);\n    }\n    final PackedInts.Writer writer = PackedInts.getWriterNoHeader(vectorsStream, PackedInts.Format.PACKED, fieldNums.size(), bitsRequired, 1);\n    for (Integer fieldNum : fieldNums) {\n      writer.add(fieldNum);\n    }\n    writer.finish();\n\n    int[] fns = new int[fieldNums.size()];\n    int i = 0;\n    for (Integer key : fieldNums) {\n      fns[i++] = key;\n    }\n    return fns;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["eda61b1e90b490cc5837200e04c02639a0d272c7"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"07155cdd910937cdf6877e48884d5782845c8b8b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","eda61b1e90b490cc5837200e04c02639a0d272c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"eda61b1e90b490cc5837200e04c02639a0d272c7":["634f330c54fd3f9f491d52036dc3f40b4f4d8934","07155cdd910937cdf6877e48884d5782845c8b8b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["eda61b1e90b490cc5837200e04c02639a0d272c7","07155cdd910937cdf6877e48884d5782845c8b8b"],"07155cdd910937cdf6877e48884d5782845c8b8b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["07155cdd910937cdf6877e48884d5782845c8b8b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}