{"path":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","commits":[{"id":"29baaefef1b62d76a3370ff72a0fe5f9bd84e365","date":1348949582,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = atLeast(10);\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"932f8bd50a005a7ebff09b5ed8f577ab843025b3","date":1349011503,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = atLeast(10);\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = atLeast(10);\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36","date":1349174553,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = atLeast(10);\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6613659748fe4411a7dcf85266e55db1f95f7315","date":1392773913,"type":3,"author":"Benson Margulies","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rmDir(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = _TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      _TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0d579490a72f2e6297eaa648940611234c57cf1","date":1395917140,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rmDir(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5eb2511ababf862ea11e10761c70ee560cd84510","date":1396607225,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c","date":1396633078,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2a0f5bb79c600763ffe7b8141df59a3169d31e48","date":1396689440,"type":3,"author":"Dawid Weiss","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = TestUtil.getTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rmDir(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cbc3688252d4a8045d69a164236b2cf87b721f17","date":1409846185,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      TestUtil.rm(path);\n    }\n  }\n\n","bugFix":["5eb2511ababf862ea11e10761c70ee560cd84510"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4abec28b874149a7223e32cc7a01704c27790de","date":1410644789,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      File path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = buildIndex(dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testRandom().mjava","sourceNew":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n    }\n  }\n\n","sourceOld":"  public void testRandom() throws Exception {\n\n    int iters = 5;\n\n    for(int iter=0;iter<iters;iter++) {\n      Path path = createTempDir(\"testPostingsFormat\");\n      Directory dir = newFSDirectory(path);\n\n      boolean indexPayloads = random().nextBoolean();\n      // TODO test thread safety of buildIndex too\n      FieldsProducer fieldsProducer = postingsTester.buildIndex(getCodec(), dir, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, indexPayloads, false);\n\n      postingsTester.testFields(fieldsProducer);\n\n      // NOTE: you can also test \"weaker\" index options than\n      // you indexed with:\n      postingsTester.testTerms(fieldsProducer, EnumSet.allOf(RandomPostingsTester.Option.class), IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS, false);\n\n      fieldsProducer.close();\n      fieldsProducer = null;\n\n      dir.close();\n      IOUtils.rm(path);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5eb2511ababf862ea11e10761c70ee560cd84510":["d0d579490a72f2e6297eaa648940611234c57cf1","6613659748fe4411a7dcf85266e55db1f95f7315"],"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["6613659748fe4411a7dcf85266e55db1f95f7315","a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"6613659748fe4411a7dcf85266e55db1f95f7315":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"5a207d19eac354d649c3f0e2cce070017c78125e":["3e8715d826e588419327562287d5d6a8040d63d6","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3e8715d826e588419327562287d5d6a8040d63d6","b470f36a9372c97283360b1304eacbde22df6c0d"],"f4abec28b874149a7223e32cc7a01704c27790de":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"d0d579490a72f2e6297eaa648940611234c57cf1":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["5eb2511ababf862ea11e10761c70ee560cd84510"],"b470f36a9372c97283360b1304eacbde22df6c0d":["3e8715d826e588419327562287d5d6a8040d63d6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d2638f781be724518ff6c2263d14a48cf6e68017":["f4abec28b874149a7223e32cc7a01704c27790de","3e8715d826e588419327562287d5d6a8040d63d6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["3e8715d826e588419327562287d5d6a8040d63d6"],"932f8bd50a005a7ebff09b5ed8f577ab843025b3":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"3e8715d826e588419327562287d5d6a8040d63d6":["f4abec28b874149a7223e32cc7a01704c27790de"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["932f8bd50a005a7ebff09b5ed8f577ab843025b3"]},"commit2Childs":{"5eb2511ababf862ea11e10761c70ee560cd84510":["a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c"],"29baaefef1b62d76a3370ff72a0fe5f9bd84e365":["932f8bd50a005a7ebff09b5ed8f577ab843025b3"],"2a0f5bb79c600763ffe7b8141df59a3169d31e48":["cbc3688252d4a8045d69a164236b2cf87b721f17"],"6613659748fe4411a7dcf85266e55db1f95f7315":["5eb2511ababf862ea11e10761c70ee560cd84510","2a0f5bb79c600763ffe7b8141df59a3169d31e48","d0d579490a72f2e6297eaa648940611234c57cf1"],"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d0d579490a72f2e6297eaa648940611234c57cf1":["5eb2511ababf862ea11e10761c70ee560cd84510"],"f4abec28b874149a7223e32cc7a01704c27790de":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"cbc3688252d4a8045d69a164236b2cf87b721f17":["f4abec28b874149a7223e32cc7a01704c27790de"],"a9a24bae1e63c3bb5ff2fb47b0119240d840ee7c":["2a0f5bb79c600763ffe7b8141df59a3169d31e48"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["29baaefef1b62d76a3370ff72a0fe5f9bd84e365"],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"932f8bd50a005a7ebff09b5ed8f577ab843025b3":["2fe4b12f0dcf02b1690143f2ad02d8f89625eb36"],"3e8715d826e588419327562287d5d6a8040d63d6":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","d2638f781be724518ff6c2263d14a48cf6e68017","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"2fe4b12f0dcf02b1690143f2ad02d8f89625eb36":["6613659748fe4411a7dcf85266e55db1f95f7315"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}