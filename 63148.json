{"path":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c8323d210478d76a02372693d254b69aac614689","date":1295877066,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, AtomicReaderContext context)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(context), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb9b72f7c3d7827c64dd4ec580ded81778da361d","date":1295897920,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,AtomicReaderContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":"  public NearSpansUnordered(SpanNearQuery query, AtomicReaderContext context)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(context), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/src/java/org/apache/lucene/search/spans/NearSpansUnordered#NearSpansUnordered(SpanNearQuery,IndexReader).mjava","sourceNew":null,"sourceOld":"  public NearSpansUnordered(SpanNearQuery query, IndexReader reader)\n    throws IOException {\n    this.query = query;\n    this.slop = query.getSlop();\n\n    SpanQuery[] clauses = query.getClauses();\n    queue = new CellQueue(clauses.length);\n    subSpans = new Spans[clauses.length];    \n    for (int i = 0; i < clauses.length; i++) {\n      SpansCell cell =\n        new SpansCell(clauses[i].getSpans(reader), i);\n      ordered.add(cell);\n      subSpans[i] = cell.spans;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c8323d210478d76a02372693d254b69aac614689":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c8323d210478d76a02372693d254b69aac614689"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":["9454a6510e2db155fb01faa5c049b06ece95fab9","c8323d210478d76a02372693d254b69aac614689"]},"commit2Childs":{"c8323d210478d76a02372693d254b69aac614689":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["c8323d210478d76a02372693d254b69aac614689","29ef99d61cda9641b6250bf9567329a6e65f901d","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"bb9b72f7c3d7827c64dd4ec580ded81778da361d":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","cd5edd1f2b162a5cfa08efd17851a07373a96817","bb9b72f7c3d7827c64dd4ec580ded81778da361d"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}