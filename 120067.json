{"path":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","commits":[{"id":"e6a2315ba749856e5787b2ad962fa124bc3ed121","date":1334194349,"type":1,"author":"Christopher John Male","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3de2e9a536c4115b4f53f14b6ab496ba3af1840c","date":1400252137,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw new IOException(re.getMessage(), re);\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ccc69a67d5c846a04c7f71e28cb1914e3af895f3","date":1400252660,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw new IOException(re.getMessage(), re);\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56572ec06f1407c066d6b7399413178b33176cd8","date":1400495675,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw new IOException(re.getMessage(), re);\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","sourceOld":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw (IOException) (new IOException(re.getMessage()).initCause(re));\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4e06677b4aab487aad861dc2ffa1077e535698e5","date":1525609294,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","pathOld":"solr/core/src/java/org/apache/solr/util/SystemIdResolver#resolveEntity(String,String,String,String).mjava","sourceNew":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null) {\n      return null;\n    }\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw new IOException(re.getMessage(), re);\n        }\n      } else {\n        throw new IOException(\"Cannot resolve absolute systemIDs / external entities (only relative paths work): \" + systemId);\n      }\n    } catch (URISyntaxException use) {\n      throw new IOException(\"An URI syntax problem occurred during resolving systemId: \" + systemId, use);\n    }\n  }\n\n","sourceOld":"  @Override\n  public InputSource resolveEntity(String name, String publicId, String baseURI, String systemId) throws IOException {\n    if (systemId == null)\n      return null;\n    try {\n      final URI uri = resolveRelativeURI(baseURI, systemId);\n      \n      // check schema and resolve with ResourceLoader\n      if (RESOURCE_LOADER_URI_SCHEME.equals(uri.getScheme())) {\n        String path = uri.getPath(), authority = uri.getAuthority();\n        if (!RESOURCE_LOADER_AUTHORITY_ABSOLUTE.equals(authority)) {\n          path = path.substring(1);\n        }\n        try {\n          final InputSource is = new InputSource(loader.openResource(path));\n          is.setSystemId(uri.toASCIIString());\n          is.setPublicId(publicId);\n          return is;\n        } catch (RuntimeException re) {\n          // unfortunately XInclude fallback only works with IOException, but openResource() never throws that one\n          throw new IOException(re.getMessage(), re);\n        }\n      } else {\n        // resolve all other URIs using the standard resolver\n        return null;\n      }\n    } catch (URISyntaxException use) {\n      log.warn(\"An URI systax problem occurred during resolving SystemId, falling back to default resolver\", use);\n      return null;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["e6a2315ba749856e5787b2ad962fa124bc3ed121","7530de27b87b961b51f01bd1299b7004d46e8823"],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"56572ec06f1407c066d6b7399413178b33176cd8":["7530de27b87b961b51f01bd1299b7004d46e8823","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["7530de27b87b961b51f01bd1299b7004d46e8823"],"7530de27b87b961b51f01bd1299b7004d46e8823":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4e06677b4aab487aad861dc2ffa1077e535698e5"],"4e06677b4aab487aad861dc2ffa1077e535698e5":["3de2e9a536c4115b4f53f14b6ab496ba3af1840c"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":["7530de27b87b961b51f01bd1299b7004d46e8823","3de2e9a536c4115b4f53f14b6ab496ba3af1840c"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"e6a2315ba749856e5787b2ad962fa124bc3ed121":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6a2315ba749856e5787b2ad962fa124bc3ed121"],"56572ec06f1407c066d6b7399413178b33176cd8":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","3de2e9a536c4115b4f53f14b6ab496ba3af1840c","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"3de2e9a536c4115b4f53f14b6ab496ba3af1840c":["56572ec06f1407c066d6b7399413178b33176cd8","4e06677b4aab487aad861dc2ffa1077e535698e5","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"4e06677b4aab487aad861dc2ffa1077e535698e5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ccc69a67d5c846a04c7f71e28cb1914e3af895f3":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","56572ec06f1407c066d6b7399413178b33176cd8","cd5edd1f2b162a5cfa08efd17851a07373a96817","ccc69a67d5c846a04c7f71e28cb1914e3af895f3"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}