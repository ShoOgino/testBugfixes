{"path":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","commits":[{"id":"f8da75c64a26663199511eef8db650621ed89107","date":1251204606,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is\n   * proportional to {@link Searcher#docFreq(Term)} , i.e., when one is\n   * inaccurate, so is the other, and in the same direction.\n   * \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        //@Override\n        public float getIdf() {\n          return idf;\n        }\n        //@Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        //@Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        //@Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53d1297e80bc9b90821486a8bbb4ecfb695787a3","date":1253036675,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        //@Override\n        public float getIdf() {\n          return idf;\n        }\n        //@Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        //@Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        //@Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs()} because it is\n   * proportional to {@link Searcher#docFreq(Term)} , i.e., when one is\n   * inaccurate, so is the other, and in the same direction.\n   * \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        //@Override\n        public float getIdf() {\n          return idf;\n        }\n        //@Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        //@Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        //@Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d62b1ed69b2d54a65df6f993499b39562d1dc1f9","date":1255700561,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        @Override\n        public float getIdf() {\n          return idf;\n        }\n        @Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        //@Override\n        public float getIdf() {\n          return idf;\n        }\n        //@Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        //@Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        //@Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58","date":1256297148,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    if(supportedMethods.overridesTermIDF) {\n      final float idf = idf(term, searcher);\n      return new IDFExplanation() {\n        @Override\n        public float getIdf() {\n          return idf;\n        }\n        @Override\n        public String explain() {\n          return \"Inexplicable\";\n        }\n      };\n    }\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","pathOld":"src/java/org/apache/lucene/search/Similarity#idfExplain(Term,Searcher).mjava","sourceNew":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","sourceOld":"  /**\n   * Computes a score factor for a simple term and returns an explanation\n   * for that score factor.\n   * \n   * <p>\n   * The default implementation uses:\n   * \n   * <pre>\n   * idf(searcher.docFreq(term), searcher.maxDoc());\n   * </pre>\n   * \n   * Note that {@link Searcher#maxDoc()} is used instead of\n   * {@link org.apache.lucene.index.IndexReader#numDocs() IndexReader#numDocs()} because also \n   * {@link Searcher#docFreq(Term)} is used, and when the latter \n   * is inaccurate, so is {@link Searcher#maxDoc()}, and in the same direction.\n   * In addition, {@link Searcher#maxDoc()} is more efficient to compute\n   *   \n   * @param term the term in question\n   * @param searcher the document collection being searched\n   * @return an IDFExplain object that includes both an idf score factor \n             and an explanation for the term.\n   * @throws IOException\n   */\n  public IDFExplanation idfExplain(final Term term, final Searcher searcher) throws IOException {\n    final int df = searcher.docFreq(term);\n    final int max = searcher.maxDoc();\n    final float idf = idf(df, max);\n    return new IDFExplanation() {\n        @Override\n        public String explain() {\n          return \"idf(docFreq=\" + df +\n          \", maxDocs=\" + max + \")\";\n        }\n        @Override\n        public float getIdf() {\n          return idf;\n        }};\n   }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["53d1297e80bc9b90821486a8bbb4ecfb695787a3"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"f8da75c64a26663199511eef8db650621ed89107":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"53d1297e80bc9b90821486a8bbb4ecfb695787a3":["f8da75c64a26663199511eef8db650621ed89107"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"]},"commit2Childs":{"d62b1ed69b2d54a65df6f993499b39562d1dc1f9":["ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58"],"ca7db7f1c27f53e2fbd8dc29c316e1ac3d808e58":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"f8da75c64a26663199511eef8db650621ed89107":["53d1297e80bc9b90821486a8bbb4ecfb695787a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f8da75c64a26663199511eef8db650621ed89107"],"53d1297e80bc9b90821486a8bbb4ecfb695787a3":["d62b1ed69b2d54a65df6f993499b39562d1dc1f9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}