{"path":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean).mjava","commits":[{"id":"1d3f7ab1a502671bbdb03bcced21e764d2483221","date":1532329609,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean testScores, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        if (testScores) {\n          assertEquals(expectedFD.score, actualFD.score, 0.1);\n        } else {\n          // TODO: too anal for now\n          //assertEquals(Float.NaN, actualFD.score);\n        }\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83788ad129a5154d5c6562c4e8ce3db48793aada","date":1532961485,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean).mjava","pathOld":"lucene/grouping/src/test/org/apache/lucene/search/grouping/TestGrouping#assertEquals(int[],TopGroups[BytesRef],TopGroups[BytesRef],boolean,boolean,boolean).mjava","sourceNew":"  private void assertEquals(int[] docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits.value, actualGroup.totalHits.value);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","sourceOld":"  private void assertEquals(int[] docIDtoID, TopGroups<BytesRef> expected, TopGroups<BytesRef> actual, boolean verifyGroupValues, boolean verifyTotalGroupCount, boolean idvBasedImplsUsed) {\n    if (expected == null) {\n      assertNull(actual);\n      return;\n    }\n    assertNotNull(actual);\n\n    assertEquals(\"expected.groups.length != actual.groups.length\", expected.groups.length, actual.groups.length);\n    assertEquals(\"expected.totalHitCount != actual.totalHitCount\", expected.totalHitCount, actual.totalHitCount);\n    assertEquals(\"expected.totalGroupedHitCount != actual.totalGroupedHitCount\", expected.totalGroupedHitCount, actual.totalGroupedHitCount);\n    if (expected.totalGroupCount != null && verifyTotalGroupCount) {\n      assertEquals(\"expected.totalGroupCount != actual.totalGroupCount\", expected.totalGroupCount, actual.totalGroupCount);\n    }\n\n    for(int groupIDX=0;groupIDX<expected.groups.length;groupIDX++) {\n      if (VERBOSE) {\n        System.out.println(\"  check groupIDX=\" + groupIDX);\n      }\n      final GroupDocs<BytesRef> expectedGroup = expected.groups[groupIDX];\n      final GroupDocs<BytesRef> actualGroup = actual.groups[groupIDX];\n      if (verifyGroupValues) {\n        if (idvBasedImplsUsed) {\n          if (actualGroup.groupValue.length == 0) {\n            assertNull(expectedGroup.groupValue);\n          } else {\n            assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n          }\n        } else {\n          assertEquals(expectedGroup.groupValue, actualGroup.groupValue);\n        }\n\n      }\n      assertArrayEquals(expectedGroup.groupSortValues, actualGroup.groupSortValues);\n\n      // TODO\n      // assertEquals(expectedGroup.maxScore, actualGroup.maxScore);\n      assertEquals(expectedGroup.totalHits, actualGroup.totalHits);\n\n      final ScoreDoc[] expectedFDs = expectedGroup.scoreDocs;\n      final ScoreDoc[] actualFDs = actualGroup.scoreDocs;\n\n      assertEquals(expectedFDs.length, actualFDs.length);\n      for(int docIDX=0;docIDX<expectedFDs.length;docIDX++) {\n        final FieldDoc expectedFD = (FieldDoc) expectedFDs[docIDX];\n        final FieldDoc actualFD = (FieldDoc) actualFDs[docIDX];\n        //System.out.println(\"  actual doc=\" + docIDtoID[actualFD.doc] + \" score=\" + actualFD.score);\n        assertEquals(expectedFD.doc, docIDtoID[actualFD.doc]);\n        assertArrayEquals(expectedFD.fields, actualFD.fields);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"83788ad129a5154d5c6562c4e8ce3db48793aada":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d3f7ab1a502671bbdb03bcced21e764d2483221"],"83788ad129a5154d5c6562c4e8ce3db48793aada":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1d3f7ab1a502671bbdb03bcced21e764d2483221":["83788ad129a5154d5c6562c4e8ce3db48793aada"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}