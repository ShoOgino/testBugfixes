{"path":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","commits":[{"id":"e75e40c2252a5624016ad28ba7e8d3354c4d9c86","date":1502965942,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68541eebed1904d72a1ab713fc1afcec49e3f466","date":1502966016,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3955a9511098c96b652734b2f2d4160d07cc2d63","date":1504780677,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde90f0aeea55f3df9af71ba1c47aac717b4c52a","date":1504801315,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","date":1504848000,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6","date":1505752009,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":3,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c3f354f2175f861ee625bb3c9572d53b77cd8545","date":1508405819,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer().getMetricManager());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"750239682d222924398443d581163940f48d68fc","date":1533297311,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer().getMetricManager());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad2010e2591e2d11678b59291d2ab31bd30e3ac7","date":1559150835,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58af973abe9f7c0faa777c1a6285fc7f72c171c5","date":1559329541,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a117d95183986014a31f25bb04e5464ca06d6068","date":1566208086,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":3,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":3,"author":"jimczi","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map)val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number)val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList)values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba055e19afc289adcb5bedaf68513793a7254012","date":1591268575,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n\n    handler.close();\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n\n    handler.close();\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n\n    handler.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"233211c3dbff6f367588be5bbb4ac77f72eae193","date":1602085975,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/admin/MetricsHandlerTest#testKeyMetrics().mjava","sourceNew":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof MapWriter);\n    assertTrue(((MapWriter)val)._size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    val = resp.getValues()._get(\"metrics/\" + key2, null);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n\n    val = resp.getValues()._get( \"metrics/\" + key3, null);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n\n    val = resp.getValues()._get( \"metrics/\" + key1, null);\n    assertNotNull(val);\n    val = resp.getValues()._get( \"metrics/\" + key2, null);\n    assertNotNull(val);\n    val = resp.getValues()._get( \"metrics/\" + key3, null);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    // the key contains a slash, need explicit list of path elements\n    val = resp.getValues()._get(Arrays.asList(\"metrics\", key4), null);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n\n    handler.close();\n  }\n\n","sourceOld":"  @Test\n  public void testKeyMetrics() throws Exception {\n    MetricsHandler handler = new MetricsHandler(h.getCoreContainer());\n\n    String key1 = \"solr.core.collection1:CACHE.core.fieldCache\";\n    SolrQueryResponse resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1), resp);\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList values = resp.getValues();\n    Object val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    assertTrue(val instanceof Map);\n    assertTrue(((Map) val).size() >= 2);\n\n    String key2 = \"solr.core.collection1:CACHE.core.fieldCache:entries_count\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key2), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    String key3 = \"solr.jetty:solrtest_foo\\\\:bar\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n    assertEquals(3, ((Number) val).intValue());\n\n    // test multiple keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key1, MetricsHandler.KEY_PARAM, key2, MetricsHandler.KEY_PARAM, key3), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key1);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key2);\n    assertNotNull(val);\n    val = values.findRecursive(\"metrics\", key3);\n    assertNotNull(val);\n\n    String key4 = \"solr.core.collection1:QUERY./select.requestTimes:1minRate\";\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, key4), resp);\n    values = resp.getValues();\n    val = values.findRecursive(\"metrics\", key4);\n    assertNotNull(val);\n    assertTrue(val instanceof Number);\n\n    // test errors\n\n    // invalid keys\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo\", MetricsHandler.KEY_PARAM, \"foo:bar:baz:xyz\"), resp);\n    values = resp.getValues();\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo\"));\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz:xyz\"));\n\n    // unknown registry\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"foo:bar:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"foo:bar:baz\"));\n\n    // unknown metric\n    resp = new SolrQueryResponse();\n    handler.handleRequestBody(req(CommonParams.QT, \"/admin/metrics\", CommonParams.WT, \"json\",\n        MetricsHandler.KEY_PARAM, \"solr.jetty:unknown:baz\"), resp);\n    values = resp.getValues();\n    metrics = (NamedList) values.get(\"metrics\");\n    assertEquals(0, metrics.size());\n    assertNotNull(values.findRecursive(\"errors\", \"solr.jetty:unknown:baz\"));\n\n    handler.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["c44cc06c26e456fe9c215072b79fce30babe3975"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["e98520789adb1d5ad05afb4956eca0944a929688"],"c44cc06c26e456fe9c215072b79fce30babe3975":["a117d95183986014a31f25bb04e5464ca06d6068"],"a117d95183986014a31f25bb04e5464ca06d6068":["ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"bde90f0aeea55f3df9af71ba1c47aac717b4c52a":["68541eebed1904d72a1ab713fc1afcec49e3f466"],"e98520789adb1d5ad05afb4956eca0944a929688":["ba055e19afc289adcb5bedaf68513793a7254012"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["560c18d71dad43d675158783c3840f8c80d6d39c"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["68541eebed1904d72a1ab713fc1afcec49e3f466","bde90f0aeea55f3df9af71ba1c47aac717b4c52a"],"ba055e19afc289adcb5bedaf68513793a7254012":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":["750239682d222924398443d581163940f48d68fc","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["750239682d222924398443d581163940f48d68fc"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"560c18d71dad43d675158783c3840f8c80d6d39c":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"750239682d222924398443d581163940f48d68fc":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"b0b597c65628ca9e73913a07e81691f8229bae35":["a117d95183986014a31f25bb04e5464ca06d6068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"3955a9511098c96b652734b2f2d4160d07cc2d63":["b71597cbe4c0f463a81f3f225fc0ff1355c8fee6"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["ba055e19afc289adcb5bedaf68513793a7254012"],"c44cc06c26e456fe9c215072b79fce30babe3975":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","b0b597c65628ca9e73913a07e81691f8229bae35"],"233211c3dbff6f367588be5bbb4ac77f72eae193":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a117d95183986014a31f25bb04e5464ca06d6068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"bde90f0aeea55f3df9af71ba1c47aac717b4c52a":["104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"e98520789adb1d5ad05afb4956eca0944a929688":["233211c3dbff6f367588be5bbb4ac77f72eae193"],"c3f354f2175f861ee625bb3c9572d53b77cd8545":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"68541eebed1904d72a1ab713fc1afcec49e3f466":["bde90f0aeea55f3df9af71ba1c47aac717b4c52a","104a3f62ee393d48b5596de76ed4d9a4e0ea6de7"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["750239682d222924398443d581163940f48d68fc"],"104a3f62ee393d48b5596de76ed4d9a4e0ea6de7":["c304e97e7c1d472bc70e801b35ee78583916c6cd","560c18d71dad43d675158783c3840f8c80d6d39c"],"ba055e19afc289adcb5bedaf68513793a7254012":["e98520789adb1d5ad05afb4956eca0944a929688"],"e75e40c2252a5624016ad28ba7e8d3354c4d9c86":["3955a9511098c96b652734b2f2d4160d07cc2d63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["68541eebed1904d72a1ab713fc1afcec49e3f466","e75e40c2252a5624016ad28ba7e8d3354c4d9c86"],"58af973abe9f7c0faa777c1a6285fc7f72c171c5":[],"ad2010e2591e2d11678b59291d2ab31bd30e3ac7":["a117d95183986014a31f25bb04e5464ca06d6068","58af973abe9f7c0faa777c1a6285fc7f72c171c5"],"b71597cbe4c0f463a81f3f225fc0ff1355c8fee6":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"560c18d71dad43d675158783c3840f8c80d6d39c":["c3f354f2175f861ee625bb3c9572d53b77cd8545"],"750239682d222924398443d581163940f48d68fc":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","ad2010e2591e2d11678b59291d2ab31bd30e3ac7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["58af973abe9f7c0faa777c1a6285fc7f72c171c5","cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}