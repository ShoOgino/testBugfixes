{"path":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","commits":[{"id":"42579622cc27f9908e64f29fa1130bfc28306009","date":1177874771,"type":0,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"/dev/null","sourceNew":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is neccessary to implement reset(). \n   */\n  public void reset() throws IOException {}\n\n","sourceOld":null,"bugFix":null,"bugIntro":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"97c663a0e8cf62834049da11ecd70bd4a639ac9c","date":1195852652,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is necessary to implement reset(). \n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is neccessary to implement reset(). \n   */\n  public void reset() throws IOException {}\n\n","bugFix":["42579622cc27f9908e64f29fa1130bfc28306009"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e2cb543b41c145f33390f460ee743d6693c9c6c","date":1219243087,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is necessary to implement reset().  Note that\n   *  if your TokenStream caches tokens and feeds them back\n   *  again after a reset, it is imperative that you\n   *  clone the tokens when you store them away (on the\n   *  first pass) as well as when you return them (on future\n   *  passes after reset()).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is necessary to implement reset(). \n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"39c72a0a1f317a4165b759c7842b5d73d7858d1d","date":1251209760,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * {@link TokenStream} are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /** Resets this stream to the beginning. This is an\n   *  optional operation, so subclasses may or may not\n   *  implement this method. Reset() is not needed for\n   *  the standard indexing process. However, if the Tokens \n   *  of a TokenStream are intended to be consumed more than \n   *  once, it is necessary to implement reset().  Note that\n   *  if your TokenStream caches tokens and feeds them back\n   *  again after a reset, it is imperative that you\n   *  clone the tokens when you store them away (on the\n   *  first pass) as well as when you return them (on future\n   *  passes after reset()).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8b494acb55b671ca43504fbe9f6120ae44819ecb","date":1251652238,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * <code>TokenStream</code> are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","sourceOld":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * {@link TokenStream} are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/TokenStream#reset().mjava","sourceNew":null,"sourceOld":"  /**\n   * Resets this stream to the beginning. This is an optional operation, so\n   * subclasses may or may not implement this method. {@link #reset()} is not needed for\n   * the standard indexing process. However, if the tokens of a\n   * <code>TokenStream</code> are intended to be consumed more than once, it is\n   * necessary to implement {@link #reset()}. Note that if your TokenStream\n   * caches tokens and feeds them back again after a reset, it is imperative\n   * that you clone the tokens when you store them away (on the first pass) as\n   * well as when you return them (on future passes after {@link #reset()}).\n   */\n  public void reset() throws IOException {}\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["42579622cc27f9908e64f29fa1130bfc28306009"],"42579622cc27f9908e64f29fa1130bfc28306009":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"8b494acb55b671ca43504fbe9f6120ae44819ecb":["39c72a0a1f317a4165b759c7842b5d73d7858d1d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8b494acb55b671ca43504fbe9f6120ae44819ecb"],"39c72a0a1f317a4165b759c7842b5d73d7858d1d":["7e2cb543b41c145f33390f460ee743d6693c9c6c"]},"commit2Childs":{"7e2cb543b41c145f33390f460ee743d6693c9c6c":["39c72a0a1f317a4165b759c7842b5d73d7858d1d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["42579622cc27f9908e64f29fa1130bfc28306009"],"97c663a0e8cf62834049da11ecd70bd4a639ac9c":["7e2cb543b41c145f33390f460ee743d6693c9c6c"],"42579622cc27f9908e64f29fa1130bfc28306009":["97c663a0e8cf62834049da11ecd70bd4a639ac9c"],"8b494acb55b671ca43504fbe9f6120ae44819ecb":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"39c72a0a1f317a4165b759c7842b5d73d7858d1d":["8b494acb55b671ca43504fbe9f6120ae44819ecb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}