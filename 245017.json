{"path":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","commits":[{"id":"6864413dbc0c12104c978c05456f3da1d45adb03","date":1186770873,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","pathOld":"/dev/null","sourceNew":"  /** Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  protected void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a7b6415105eb600e81c2950437d3c3798bf1a05f","date":1198660906,"type":3,"author":"Doron Cohen","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","sourceOld":"  /** Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  protected void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2","date":1245784531,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = CharReader.get(input);\n  }\n\n","sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a82fda1447250ff156ff3b862d94a99bf0a3c23c","date":1252649533,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","pathOld":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","sourceNew":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = CharReader.get(input);\n  }\n\n","bugFix":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":4,"author":"Dawid Weiss","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/analysis/Tokenizer#reset(Reader).mjava","sourceNew":null,"sourceOld":"  /** Expert: Reset the tokenizer to a new reader.  Typically, an\n   *  analyzer (in its reusableTokenStream method) will use\n   *  this to re-use a previously created tokenizer. */\n  public void reset(Reader input) throws IOException {\n    this.input = input;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a7b6415105eb600e81c2950437d3c3798bf1a05f":["6864413dbc0c12104c978c05456f3da1d45adb03"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["a7b6415105eb600e81c2950437d3c3798bf1a05f"]},"commit2Childs":{"a82fda1447250ff156ff3b862d94a99bf0a3c23c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"6864413dbc0c12104c978c05456f3da1d45adb03":["a7b6415105eb600e81c2950437d3c3798bf1a05f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6864413dbc0c12104c978c05456f3da1d45adb03"],"a7b6415105eb600e81c2950437d3c3798bf1a05f":["cd27af5c226d98a7c6378c388a67a3bff7c0b3a2"],"cd27af5c226d98a7c6378c388a67a3bff7c0b3a2":["a82fda1447250ff156ff3b862d94a99bf0a3c23c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}