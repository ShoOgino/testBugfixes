{"path":"lucene/facet/src/java/org/apache/lucene/facet/simple/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,SimpleFacetsCollector).mjava","commits":[{"id":"f01616d06510fc630b6ef0ec324bdebc2fc49b3c","date":1385331328,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/simple/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,SimpleFacetsCollector).mjava","pathOld":"/dev/null","sourceNew":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  SimpleFacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, SimpleFacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"21d36d0db865f7b84026b447bec653469a6e66df","date":1385495602,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,FacetsCollector).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/simple/Facets#search(IndexSearcher,Query,Filter,int,Sort,boolean,boolean,SimpleFacetsCollector).mjava","sourceNew":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  FacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, FacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","sourceOld":"  /** Utility method, to search for top hits by a custom\n   *  {@link Sort} with a filter\n   *  ({@link IndexSearcher#search(Query,Filter,int,Sort,boolean,boolean)}), but\n   *  also collect results into a {@link\n   *  SimpleFacetsCollector} for faceting. */\n  public static TopFieldDocs search(IndexSearcher searcher, Query q, Filter filter, int topN, Sort sort, boolean doDocScores, boolean doMaxScore, SimpleFacetsCollector sfc) throws IOException {\n    int limit = searcher.getIndexReader().maxDoc();\n    if (limit == 0) {\n      limit = 1;\n    }\n    topN = Math.min(topN, limit);\n\n    boolean fillFields = true;\n    TopFieldCollector hitsCollector = TopFieldCollector.create(sort, topN,\n                                                               null,\n                                                               fillFields,\n                                                               doDocScores,\n                                                               doMaxScore,\n                                                               false);\n    if (filter != null) {\n      q = new FilteredQuery(q, filter);\n    }\n    searcher.search(q, MultiCollector.wrap(hitsCollector, sfc));\n    return (TopFieldDocs) hitsCollector.topDocs();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"21d36d0db865f7b84026b447bec653469a6e66df":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c"],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f01616d06510fc630b6ef0ec324bdebc2fc49b3c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"21d36d0db865f7b84026b447bec653469a6e66df":[],"f01616d06510fc630b6ef0ec324bdebc2fc49b3c":["21d36d0db865f7b84026b447bec653469a6e66df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["21d36d0db865f7b84026b447bec653469a6e66df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}