{"path":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","commits":[{"id":"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3","date":1448892165,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,String,Properties,SolrParams).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a String containing the instanceDir\n   * @param coreProps       a Properties object of the properties for this core\n   * @param params          additional params\n   */\n  public CoreDescriptor(CoreContainer container, String name, String instanceDir,\n                        Properties coreProps, SolrParams params) {\n\n    this.coreContainer = container;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n    originalCoreProperties.setProperty(CORE_INSTDIR, instanceDir);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n    instanceDir = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(instanceDir, CORE_INSTDIR),\n                                                    containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n    coreProperties.put(CORE_INSTDIR, instanceDir);\n    coreProperties.put(CORE_ABS_INSTDIR, convertToAbsolute(instanceDir, container.getCoreRootDirectory()));\n\n    for (String propname : coreProps.stringPropertyNames()) {\n\n      String propvalue = coreProps.getProperty(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n      if (params != null) {\n        cloudDesc.setParams(params);\n      }\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9367dbf5b00d7764583d991c1888f4acc9c9991a","date":1449048142,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    SolrCore.log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"962cd4f5e313777f35da8f521265323e84184929","date":1474533758,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.info(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"729cb470f975115d4c60517b2cb7c42e37a7a2e1","date":1492041760,"type":5,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(String,Path,Map[String,String],Properties,boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":"  /**\n   * Create a new CoreDescriptor.\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   * @param containerProperties the properties from the enclosing container.\n   * @param isZooKeeperAware if true, we ar in SolrCloud mode.\n   */\n\n\n  public CoreDescriptor(String name, Path instanceDir, Map<String, String> coreProps,\n                        Properties containerProperties, boolean isZooKeeperAware) {\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (isZooKeeperAware) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/core/CoreDescriptor#CoreDescriptor(CoreContainer,String,Path,Map[String,String]).mjava","sourceNew":null,"sourceOld":"  /**\n   * Create a new CoreDescriptor.\n   * @param container       the CoreDescriptor's container\n   * @param name            the CoreDescriptor's name\n   * @param instanceDir     a Path resolving to the instanceDir\n   * @param coreProps       a Map of the properties for this core\n   */\n  public CoreDescriptor(CoreContainer container, String name, Path instanceDir,\n                        Map<String, String> coreProps) {\n\n    this.coreContainer = container;\n    this.instanceDir = instanceDir;\n\n    originalCoreProperties.setProperty(CORE_NAME, name);\n\n    Properties containerProperties = container.getContainerProperties();\n    name = PropertiesUtil.substituteProperty(checkPropertyIsNotEmpty(name, CORE_NAME),\n                                             containerProperties);\n\n    coreProperties.putAll(defaultProperties);\n    coreProperties.put(CORE_NAME, name);\n\n    for (String propname : coreProps.keySet()) {\n\n      String propvalue = coreProps.get(propname);\n\n      if (isUserDefinedProperty(propname))\n        originalExtraProperties.put(propname, propvalue);\n      else\n        originalCoreProperties.put(propname, propvalue);\n\n      if (!requiredProperties.contains(propname))   // Required props are already dealt with\n        coreProperties.setProperty(propname,\n            PropertiesUtil.substituteProperty(propvalue, containerProperties));\n    }\n\n    loadExtraProperties();\n    buildSubstitutableProperties();\n\n    // TODO maybe make this a CloudCoreDescriptor subclass?\n    if (container.isZooKeeperAware()) {\n      cloudDesc = new CloudDescriptor(name, coreProperties, this);\n    }\n    else {\n      cloudDesc = null;\n    }\n\n    log.debug(\"Created CoreDescriptor: \" + coreProperties);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"962cd4f5e313777f35da8f521265323e84184929":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["9367dbf5b00d7764583d991c1888f4acc9c9991a","962cd4f5e313777f35da8f521265323e84184929"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9367dbf5b00d7764583d991c1888f4acc9c9991a","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["729cb470f975115d4c60517b2cb7c42e37a7a2e1"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"962cd4f5e313777f35da8f521265323e84184929":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"11d8a050b7d5f98040f790d32ec1cfd2fc3490e3":["9367dbf5b00d7764583d991c1888f4acc9c9991a"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","729cb470f975115d4c60517b2cb7c42e37a7a2e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["11d8a050b7d5f98040f790d32ec1cfd2fc3490e3"],"9367dbf5b00d7764583d991c1888f4acc9c9991a":["962cd4f5e313777f35da8f521265323e84184929","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"729cb470f975115d4c60517b2cb7c42e37a7a2e1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}