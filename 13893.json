{"path":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/src/common/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2c007e7c4cf8c55bc2a5884e315123afaaeec87f","date":1327520966,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","date":1327523564,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d22ac6a4146774c1bc8400160fc0b6150294e92","date":1327528604,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean failOnExists) throws KeeperException, InterruptedException {\n    if (log.isInfoEnabled()) {\n      log.info(\"makePath: \" + path);\n    }\n    \n    if (path.startsWith(\"/\")) {\n      path = path.substring(1, path.length());\n    }\n    String[] paths = path.split(\"/\");\n    StringBuilder sbPath = new StringBuilder();\n    for (int i = 0; i < paths.length; i++) {\n      byte[] bytes = null;\n      String pathPiece = paths[i];\n      sbPath.append(\"/\" + pathPiece);\n      String currentPath = sbPath.toString();\n      Object exists = exists(currentPath, watcher);\n      if (exists == null || ((i == paths.length -1) && failOnExists)) {\n        CreateMode mode = CreateMode.PERSISTENT;\n        if (i == paths.length - 1) {\n          mode = createMode;\n          bytes = data;\n        }\n        keeper.create(currentPath, bytes, ZooDefs.Ids.OPEN_ACL_UNSAFE, mode);\n        if(i == paths.length -1) {\n          // set new watch\n          exists(currentPath, watcher);\n        }\n      } else if (i == paths.length - 1) {\n        // TODO: version ? for now, don't worry about race\n        setData(currentPath, data, -1);\n        // set new watch\n        exists(currentPath, watcher);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param path\n   * @param data to set on the last zkNode\n   * @param createMode\n   * @param watcher\n   * @param retryOnConnLoss\n   * @throws KeeperException\n   * @throws InterruptedException\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"86290366cefc1b9d4eced13b430858c4a4c0421d","date":1432321109,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   * \n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   * \n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f291d2d430e8149d24fdd06b0bcdab0941ec9144","date":1481216635,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss, 0);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","bugFix":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient#makePath(String,byte[],CreateMode,Watcher,boolean).mjava","sourceNew":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss, 0);\n  }\n\n","sourceOld":"  /**\n   * Creates the path in ZooKeeper, creating each node as necessary.\n   *\n   * e.g. If <code>path=/solr/group/node</code> and none of the nodes, solr,\n   * group, node exist, each will be created.\n   *\n   * @param data to set on the last zkNode\n   */\n  public void makePath(String path, byte[] data, CreateMode createMode,\n      Watcher watcher, boolean retryOnConnLoss) throws KeeperException, InterruptedException {\n    makePath(path, data, createMode, watcher, true, retryOnConnLoss);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":["c26f00b574427b55127e869b935845554afde1fa","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c26f00b574427b55127e869b935845554afde1fa"],"9856095f7afb5a607bf5e65077615ed91273508c":["86290366cefc1b9d4eced13b430858c4a4c0421d","f291d2d430e8149d24fdd06b0bcdab0941ec9144"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["f291d2d430e8149d24fdd06b0bcdab0941ec9144"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["86290366cefc1b9d4eced13b430858c4a4c0421d"],"86290366cefc1b9d4eced13b430858c4a4c0421d":["f291d2d430e8149d24fdd06b0bcdab0941ec9144","9856095f7afb5a607bf5e65077615ed91273508c"],"0d22ac6a4146774c1bc8400160fc0b6150294e92":[],"f291d2d430e8149d24fdd06b0bcdab0941ec9144":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","2c007e7c4cf8c55bc2a5884e315123afaaeec87f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d":[],"2c007e7c4cf8c55bc2a5884e315123afaaeec87f":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0d22ac6a4146774c1bc8400160fc0b6150294e92","a3c68e20c73359a10cf3eb4a35c9fa7ab1f3c30d","9856095f7afb5a607bf5e65077615ed91273508c","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}