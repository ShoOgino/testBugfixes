{"path":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","commits":[{"id":"dbdfda95da145c32af2267b537c92481acc7a522","date":1435597588,"type":0,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"big\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        fail(\"expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        fail(\"actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      fail(\"expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      fail(\"actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      fail(\"big & diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      fail(\"small & diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      fail(\"diff long\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      fail(\"diff int\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      fail(\"diff date\");\n    } catch (AssertionError e) {}\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81fc740d160f95a9a8fb82dc39da5e9898e65930","date":1438117317,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"large b\",\n                   new Double(1.2722582464444444E9),\n                   new Double(1.2722582464444442E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"large a negative\", \n                   new Double(-2.3005390038169265E9), \n                   new Double(-2.300539003816927E9));\n    assertNumerics(\"large b negative\",\n                   new Double(-1.2722582464444444E9),\n                   new Double(-1.2722582464444442E9));\n    assertNumerics(\"small negative\", \n                   new Double(-2.3005390038169265E-9), \n                   new Double(-2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"big\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        fail(\"expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        fail(\"actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      fail(\"expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      fail(\"actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      fail(\"big & diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      fail(\"small & diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      fail(\"diff long\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      fail(\"diff int\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      fail(\"diff date\");\n    } catch (AssertionError e) {}\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","date":1528054850,"type":3,"author":"Michael Braun","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\",\n        2.3005390038169265E9,\n        2.300539003816927E9);\n    assertNumerics(\"large b\",\n        1.2722582464444444E9,\n        1.2722582464444442E9);\n    assertNumerics(\"small\",\n        2.3005390038169265E-9,\n        2.300539003816927E-9);\n    \n    assertNumerics(\"large a negative\",\n        -2.3005390038169265E9,\n        -2.300539003816927E9);\n    assertNumerics(\"large b negative\",\n        -1.2722582464444444E9,\n        -1.2722582464444442E9);\n    assertNumerics(\"small negative\",\n        -2.3005390038169265E-9,\n        -2.300539003816927E-9);\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E9,\n          2.267272520100462E9);\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E-9,\n          2.267272520100462E-9);\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"large b\",\n                   new Double(1.2722582464444444E9),\n                   new Double(1.2722582464444442E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"large a negative\", \n                   new Double(-2.3005390038169265E9), \n                   new Double(-2.300539003816927E9));\n    assertNumerics(\"large b negative\",\n                   new Double(-1.2722582464444444E9),\n                   new Double(-1.2722582464444442E9));\n    assertNumerics(\"small negative\", \n                   new Double(-2.3005390038169265E-9), \n                   new Double(-2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"628903f37b6c442da0d390db1c6af9a0e74d41a7","date":1531736685,"type":3,"author":"Uwe Schindler","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\",\n        2.3005390038169265E9,\n        2.300539003816927E9);\n    assertNumerics(\"large b\",\n        1.2722582464444444E9,\n        1.2722582464444442E9);\n    assertNumerics(\"small\",\n        2.3005390038169265E-9,\n        2.300539003816927E-9);\n    \n    assertNumerics(\"large a negative\",\n        -2.3005390038169265E9,\n        -2.300539003816927E9);\n    assertNumerics(\"large b negative\",\n        -1.2722582464444444E9,\n        -1.2722582464444442E9);\n    assertNumerics(\"small negative\",\n        -2.3005390038169265E-9,\n        -2.300539003816927E-9);\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E9,\n          2.267272520100462E9);\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E-9,\n          2.267272520100462E-9);\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"large b\",\n                   new Double(1.2722582464444444E9),\n                   new Double(1.2722582464444442E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"large a negative\", \n                   new Double(-2.3005390038169265E9), \n                   new Double(-2.300539003816927E9));\n    assertNumerics(\"large b negative\",\n                   new Double(-1.2722582464444444E9),\n                   new Double(-1.2722582464444442E9));\n    assertNumerics(\"small negative\", \n                   new Double(-2.3005390038169265E-9), \n                   new Double(-2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","sourceNew":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\",\n        2.3005390038169265E9,\n        2.300539003816927E9);\n    assertNumerics(\"large b\",\n        1.2722582464444444E9,\n        1.2722582464444442E9);\n    assertNumerics(\"small\",\n        2.3005390038169265E-9,\n        2.300539003816927E-9);\n    \n    assertNumerics(\"large a negative\",\n        -2.3005390038169265E9,\n        -2.300539003816927E9);\n    assertNumerics(\"large b negative\",\n        -1.2722582464444444E9,\n        -1.2722582464444442E9);\n    assertNumerics(\"small negative\",\n        -2.3005390038169265E-9,\n        -2.300539003816927E-9);\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E9,\n          2.267272520100462E9);\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E-9,\n          2.267272520100462E-9);\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\", \n                   new Double(2.3005390038169265E9), \n                   new Double(2.300539003816927E9));\n    assertNumerics(\"large b\",\n                   new Double(1.2722582464444444E9),\n                   new Double(1.2722582464444442E9));\n    assertNumerics(\"small\", \n                   new Double(2.3005390038169265E-9), \n                   new Double(2.300539003816927E-9));\n    \n    assertNumerics(\"large a negative\", \n                   new Double(-2.3005390038169265E9), \n                   new Double(-2.300539003816927E9));\n    assertNumerics(\"large b negative\",\n                   new Double(-1.2722582464444444E9),\n                   new Double(-1.2722582464444442E9));\n    assertNumerics(\"small negative\", \n                   new Double(-2.3005390038169265E-9), \n                   new Double(-2.300539003816927E-9));\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E9), \n                     new Double(2.267272520100462E9));\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\", \n                     new Double(2.3005390038169265E-9), \n                     new Double(2.267272520100462E-9));\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2","date":1541135000,"type":4,"author":"Chris Hostetter","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestCloudPivotFacet#sanityCheckAssertNumerics().mjava","sourceNew":null,"sourceOld":"  /**\n   * test the test\n   */\n  private void sanityCheckAssertNumerics() {\n    \n    assertNumerics(\"Null?\", null, null);\n    assertNumerics(\"large a\",\n        2.3005390038169265E9,\n        2.300539003816927E9);\n    assertNumerics(\"large b\",\n        1.2722582464444444E9,\n        1.2722582464444442E9);\n    assertNumerics(\"small\",\n        2.3005390038169265E-9,\n        2.300539003816927E-9);\n    \n    assertNumerics(\"large a negative\",\n        -2.3005390038169265E9,\n        -2.300539003816927E9);\n    assertNumerics(\"large b negative\",\n        -1.2722582464444444E9,\n        -1.2722582464444442E9);\n    assertNumerics(\"small negative\",\n        -2.3005390038169265E-9,\n        -2.300539003816927E-9);\n    \n    assertNumerics(\"high long\", Long.MAX_VALUE, Long.MAX_VALUE);\n    assertNumerics(\"high int\", Integer.MAX_VALUE, Integer.MAX_VALUE);\n    assertNumerics(\"low long\", Long.MIN_VALUE, Long.MIN_VALUE);\n    assertNumerics(\"low int\", Integer.MIN_VALUE, Integer.MIN_VALUE);\n\n    // NOTE: can't use 'fail' in these try blocks, because we are catching AssertionError\n    // (ie: the code we are expecting to 'fail' is an actual test assertion generator)\n    \n    for (Object num : new Object[] { new Date(42), 42, 42L, 42.0F }) {\n      try {\n        assertNumerics(\"non-null\", null, num);\n        throw new RuntimeException(\"did not get assertion failure when expected was null\");\n      } catch (AssertionError e) {}\n      \n      try {\n        assertNumerics(\"non-null\", num, null);\n        throw new RuntimeException(\"did not get assertion failure when actual was null\");\n      } catch (AssertionError e) {}\n    }\n  \n    try {\n      assertNumerics(\"non-number\", \"foo\", 42);\n      throw new RuntimeException(\"did not get assertion failure when expected was non-number\");\n    } catch (AssertionError e) {}\n\n    try {\n      assertNumerics(\"non-number\", 42, \"foo\");\n      throw new RuntimeException(\"did not get assertion failure when actual was non-number\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E9,\n          2.267272520100462E9);\n      throw new RuntimeException(\"did not get assertion failure when args are big & too diff\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff\",\n          2.3005390038169265E-9,\n          2.267272520100462E-9);\n      throw new RuntimeException(\"did not get assertion failure when args are small & too diff\");\n    } catch (AssertionError e) {}\n  \n    try {\n      assertNumerics(\"diff long\", Long.MAX_VALUE, Long.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff longs\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff int\", Integer.MAX_VALUE, Integer.MAX_VALUE-1);\n      throw new RuntimeException(\"did not get assertion failure when args are diff ints\");\n    } catch (AssertionError e) {}\n    try {\n      assertNumerics(\"diff date\", new Date(42), new Date(43));\n      throw new RuntimeException(\"did not get assertion failure when args are diff dates\");\n    } catch (AssertionError e) {}\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["81fc740d160f95a9a8fb82dc39da5e9898e65930"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["81fc740d160f95a9a8fb82dc39da5e9898e65930","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"81fc740d160f95a9a8fb82dc39da5e9898e65930":["dbdfda95da145c32af2267b537c92481acc7a522"],"dbdfda95da145c32af2267b537c92481acc7a522":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["81fc740d160f95a9a8fb82dc39da5e9898e65930","b6a269c1ddba3f8c9fa9a40572ecc538eddda41a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2"]},"commit2Childs":{"b6a269c1ddba3f8c9fa9a40572ecc538eddda41a":["628903f37b6c442da0d390db1c6af9a0e74d41a7"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["dbdfda95da145c32af2267b537c92481acc7a522"],"81fc740d160f95a9a8fb82dc39da5e9898e65930":["b6a269c1ddba3f8c9fa9a40572ecc538eddda41a","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","628903f37b6c442da0d390db1c6af9a0e74d41a7"],"628903f37b6c442da0d390db1c6af9a0e74d41a7":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","ab69ebfb1ee96d15d8a6b2ed13c2ac96c82ee0d2"],"dbdfda95da145c32af2267b537c92481acc7a522":["81fc740d160f95a9a8fb82dc39da5e9898e65930"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}