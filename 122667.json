{"path":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63131741120598595ba46620adaf3fad049ca291","date":1335567423,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (state == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7530de27b87b961b51f01bd1299b7004d46e8823","date":1355236261,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3fcb70cf561547c7bb1506e0cf32ca7b1287064","date":1357616416,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","date":1469530061,"type":3,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3b013574eedcdbac35dc7e35b0ee616ffc38895d","date":1470897818,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val;\n    }\n  }\n\n","sourceOld":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.incrementAndGet();\n        if (val!=null) {\n          hits++;\n          stats.hits.incrementAndGet();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","date":1568645407,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      CacheValue<V> val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val == null ? null : val.value;\n    }\n  }\n\n","sourceOld":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      V val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7d3943904804560937e6239effeebda0f920e4","date":1573762904,"type":4,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/search/LRUCache#get(K).mjava","sourceNew":null,"sourceOld":"  @Override\n  public V get(K key) {\n    synchronized (map) {\n      CacheValue<V> val = map.get(key);\n      if (getState() == State.LIVE) {\n        // only increment lookups and hits if we are live.\n        lookups++;\n        stats.lookups.increment();\n        if (val!=null) {\n          hits++;\n          stats.hits.increment();\n        }\n      }\n      return val == null ? null : val.value;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":["63131741120598595ba46620adaf3fad049ca291","7530de27b87b961b51f01bd1299b7004d46e8823"],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"4d7d3943904804560937e6239effeebda0f920e4":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["7530de27b87b961b51f01bd1299b7004d46e8823"],"63131741120598595ba46620adaf3fad049ca291":["c26f00b574427b55127e869b935845554afde1fa"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["7530de27b87b961b51f01bd1299b7004d46e8823","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7530de27b87b961b51f01bd1299b7004d46e8823":["63131741120598595ba46620adaf3fad049ca291"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":["7530de27b87b961b51f01bd1299b7004d46e8823","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4d7d3943904804560937e6239effeebda0f920e4"]},"commit2Childs":{"d3fcb70cf561547c7bb1506e0cf32ca7b1287064":[],"fbd58791ecf2b92d8917c2f4aab0e50965ec6a83":["4d7d3943904804560937e6239effeebda0f920e4"],"c26f00b574427b55127e869b935845554afde1fa":["63131741120598595ba46620adaf3fad049ca291"],"4d7d3943904804560937e6239effeebda0f920e4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bc0fbfa191179ae7a0081ee1cf7da0464bcd8078":["fbd58791ecf2b92d8917c2f4aab0e50965ec6a83","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"63131741120598595ba46620adaf3fad049ca291":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","7530de27b87b961b51f01bd1299b7004d46e8823"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c26f00b574427b55127e869b935845554afde1fa","c903c3d15906a3da96b8c0c2fb704491005fdbdb","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"7530de27b87b961b51f01bd1299b7004d46e8823":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","bc0fbfa191179ae7a0081ee1cf7da0464bcd8078","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","3b013574eedcdbac35dc7e35b0ee616ffc38895d"],"3b013574eedcdbac35dc7e35b0ee616ffc38895d":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d3fcb70cf561547c7bb1506e0cf32ca7b1287064","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","a258fbb26824fd104ed795e5d9033d2d040049ee","3b013574eedcdbac35dc7e35b0ee616ffc38895d","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}