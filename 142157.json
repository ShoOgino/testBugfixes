{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","commits":[{"id":"43280fb98087f117dc35e340eed3217cb6e8c165","date":1337724008,"type":0,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3599646b4d4c346cf74d334813488b8b337b5bf5","date":1337790261,"type":0,"author":"Robert Muir","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22ab38ff04ce5ef43f5e0d4f228af0a1af9e6e55","date":1338909683,"type":3,"author":"Tommaso Teofili","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069","date":1348430063,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor\n   * @throws SolrServerException\n   * @throws IOException\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrClient#commit(boolean,boolean,boolean).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/SolrServer#commit(boolean,boolean,boolean).mjava","sourceNew":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit(boolean waitFlush, boolean waitSearcher, boolean softCommit) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction(UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit).process( this );\n  }\n\n","sourceOld":"  /**\n   * Performs an explicit commit, causing pending documents to be committed for indexing\n   * @param waitFlush  block until index changes are flushed to disk\n   * @param waitSearcher  block until a new searcher is opened and registered as the main query searcher, making the changes visible\n   * @param softCommit makes index changes visible while neither fsync-ing index files nor writing a new index descriptor\n   * @throws IOException If there is a low-level I/O error.\n   */\n  public UpdateResponse commit( boolean waitFlush, boolean waitSearcher, boolean softCommit ) throws SolrServerException, IOException {\n    return new UpdateRequest().setAction( UpdateRequest.ACTION.COMMIT, waitFlush, waitSearcher, softCommit ).process( this );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["22ab38ff04ce5ef43f5e0d4f228af0a1af9e6e55"],"43280fb98087f117dc35e340eed3217cb6e8c165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"22ab38ff04ce5ef43f5e0d4f228af0a1af9e6e55":["43280fb98087f117dc35e340eed3217cb6e8c165"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3599646b4d4c346cf74d334813488b8b337b5bf5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","43280fb98087f117dc35e340eed3217cb6e8c165"],"bafca15d8e408346a67f4282ad1143b88023893b":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069":["bafca15d8e408346a67f4282ad1143b88023893b"],"43280fb98087f117dc35e340eed3217cb6e8c165":["22ab38ff04ce5ef43f5e0d4f228af0a1af9e6e55","3599646b4d4c346cf74d334813488b8b337b5bf5"],"22ab38ff04ce5ef43f5e0d4f228af0a1af9e6e55":["c7bd1fdddb8e84c1857d1a55c32ced51f0ed2069"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["43280fb98087f117dc35e340eed3217cb6e8c165","3599646b4d4c346cf74d334813488b8b337b5bf5"],"3599646b4d4c346cf74d334813488b8b337b5bf5":[],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["3599646b4d4c346cf74d334813488b8b337b5bf5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}