{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","commits":[{"id":"12df104910eced8075ef09fb442e2db6273d6741","date":1475520560,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   * @deprecated use {@link Builder} instead.  This will soon be a protected\n   * method and will only be available for use in implementing subclasses.\n   */\n  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   * @deprecated use {@link Builder} instead.  This will soon be a protected\n   * method and will only be available for use in implementing subclasses.\n   */\n  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"63a1978c6710c767fa084741e3d6424840003a62","date":1495850671,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   * @deprecated use {@link Builder} instead.  This will soon be a protected\n   * method and will only be available for use in implementing subclasses.\n   */\n  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   * @deprecated use {@link Builder} instead.  This will soon be a protected\n   * method and will only be available for use in implementing subclasses.\n   */\n  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   * @deprecated use {@link Builder} instead.  This will soon be a protected\n   * method and will only be available for use in implementing subclasses.\n   */\n  public LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c07dc645ff236a7d51da2a5ef49a948dfbf8610c","date":1498242650,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   *\n   * @deprecated use {@link LBHttpSolrClient#LBHttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    this(new Builder()\n        .withHttpSolrClientBuilder(httpSolrClientBuilder)\n        .withHttpClient(httpClient)\n        .withBaseSolrUrls(solrServerUrl));\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":["12df104910eced8075ef09fb442e2db6273d6741"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   *\n   * @deprecated use {@link LBHttpSolrClient#LBHttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    this(new Builder()\n        .withHttpSolrClientBuilder(httpSolrClientBuilder)\n        .withHttpClient(httpClient)\n        .withBaseSolrUrls(solrServerUrl));\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrClient#LBHttpSolrClient(HttpSolrClient.Builder,HttpClient,String...).mjava","sourceNew":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   *\n   * @deprecated use {@link LBHttpSolrClient#LBHttpSolrClient(Builder)} instead, as it is a more extension/subclassing-friendly alternative\n   */\n  @Deprecated\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    this(new Builder()\n        .withHttpSolrClientBuilder(httpSolrClientBuilder)\n        .withHttpClient(httpClient)\n        .withBaseSolrUrls(solrServerUrl));\n  }\n\n","sourceOld":"  /**\n   * The provided httpClient should use a multi-threaded connection manager\n   */\n  protected LBHttpSolrClient(HttpSolrClient.Builder httpSolrClientBuilder,\n                          HttpClient httpClient, String... solrServerUrl) {\n    clientIsInternal = httpClient == null;\n    this.httpSolrClientBuilder = httpSolrClientBuilder;\n    httpClient = constructClient(null);\n    this.httpClient = httpClient;\n    if (solrServerUrl != null) {\n      for (String s : solrServerUrl) {\n        ServerWrapper wrapper = new ServerWrapper(makeSolrClient(s));\n        aliveServers.put(wrapper.getKey(), wrapper);\n      }\n    }\n    updateAliveList();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["12df104910eced8075ef09fb442e2db6273d6741","63a1978c6710c767fa084741e3d6424840003a62"],"63a1978c6710c767fa084741e3d6424840003a62":["12df104910eced8075ef09fb442e2db6273d6741"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"12df104910eced8075ef09fb442e2db6273d6741":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["e9017cf144952056066919f1ebc7897ff9bd71b1","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["12df104910eced8075ef09fb442e2db6273d6741","63a1978c6710c767fa084741e3d6424840003a62"],"28288370235ed02234a64753cdbf0c6ec096304a":["d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","12df104910eced8075ef09fb442e2db6273d6741"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["63a1978c6710c767fa084741e3d6424840003a62"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1"],"63a1978c6710c767fa084741e3d6424840003a62":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9","c07dc645ff236a7d51da2a5ef49a948dfbf8610c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["12df104910eced8075ef09fb442e2db6273d6741","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"12df104910eced8075ef09fb442e2db6273d6741":["e9017cf144952056066919f1ebc7897ff9bd71b1","63a1978c6710c767fa084741e3d6424840003a62","d1f5728f32a4a256b36cfabd7a2636452f599bb9","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["28288370235ed02234a64753cdbf0c6ec096304a"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"c07dc645ff236a7d51da2a5ef49a948dfbf8610c":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}