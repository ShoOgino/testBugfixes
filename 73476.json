{"path":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","commits":[{"id":"9d3854546d75fdc5a4c3b13d0c67b6b331185945","date":1429762111,"type":1,"author":"David Wayne Smiley","isMerge":false,"pathNew":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    this.grid = new QuadPrefixTree(ctx, maxLevels);\n    this.strategy = newRPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"112d77ac8d3e10a362516ad834c9a11d35c94234","date":1456784319,"type":5,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/spatial-extras/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","pathOld":"lucene/spatial/src/test/org/apache/lucene/spatial/prefix/RandomSpatialOpFuzzyPrefixTreeTest#setupQuadGrid(int,boolean).mjava","sourceNew":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","sourceOld":"  private void setupQuadGrid(int maxLevels, boolean packedQuadPrefixTree) {\n    //non-geospatial makes this test a little easier (in gridSnap), and using boundary values 2^X raises\n    // the prospect of edge conditions we want to test, plus makes for simpler numbers (no decimals).\n    SpatialContextFactory factory = new SpatialContextFactory();\n    factory.geo = false;\n    factory.worldBounds = new RectangleImpl(0, 256, -128, 128, null);\n    this.ctx = factory.newSpatialContext();\n    //A fairly shallow grid, and default 2.5% distErrPct\n    if (maxLevels == -1)\n      maxLevels = randomIntBetween(1, 8);//max 64k cells (4^8), also 256*256\n    if (packedQuadPrefixTree) {\n      this.grid = new PackedQuadPrefixTree(ctx, maxLevels);\n    } else {\n      this.grid = new QuadPrefixTree(ctx, maxLevels);\n    }\n    this.strategy = newRPT();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["9d3854546d75fdc5a4c3b13d0c67b6b331185945","112d77ac8d3e10a362516ad834c9a11d35c94234"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"112d77ac8d3e10a362516ad834c9a11d35c94234":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["af2638813028b254a88b418ebeafb541afb49653"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9d3854546d75fdc5a4c3b13d0c67b6b331185945":["af2638813028b254a88b418ebeafb541afb49653","112d77ac8d3e10a362516ad834c9a11d35c94234"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9d3854546d75fdc5a4c3b13d0c67b6b331185945"],"112d77ac8d3e10a362516ad834c9a11d35c94234":["af2638813028b254a88b418ebeafb541afb49653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}