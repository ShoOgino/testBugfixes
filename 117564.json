{"path":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","commits":[{"id":"6dc6ab6902f8f70ae43365947ccf44c25986906d","date":1204603577,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#register(SolrCore).mjava","sourceNew":"  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    CoreDescriptor old = cores.put(name, descr);\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","sourceOld":"  public SolrCore register( SolrCore core ) {\n    if( core == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = core.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    SolrCore old = cores.put(name, core);\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n    } else {\n      log.info( \"replacing core: \"+name );\n    }\n    return old;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"58b41d4093a9662306bdc051e4b46643deff70de","date":1205090944,"type":3,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    CoreDescriptor old = cores.put(name, descr);\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","sourceOld":"  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    CoreDescriptor old = cores.put(name, descr);\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0323fcfcacbfb8242fbf70eb58498551b2018c67","date":1206721690,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    CoreDescriptor old = null;    \n    synchronized (cores) {\n      old = cores.put(name, descr);\n    }\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n    \n    CoreDescriptor old = cores.put(name, descr);\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","date":1218639440,"type":5,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/core/CoreContainer#register(CoreDescriptor).mjava","pathOld":"src/java/org/apache/solr/core/MultiCore#register(CoreDescriptor).mjava","sourceNew":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    CoreDescriptor old = null;    \n    synchronized (cores) {\n      old = cores.put(name, descr);\n    }\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","sourceOld":"  /**\n   * Registers a SolrCore descriptor in the registry.\n   * @param descr the Solr core descriptor\n   * @return a previous descriptor having the same name if it existed, null otherwise\n   */\n  public CoreDescriptor register( CoreDescriptor descr ) {\n    if( descr == null ) {\n      throw new RuntimeException( \"Can not register a null core.\" );\n    }\n    String name = descr.getName();\n    if( name == null || \n        name.length() < 1 ||\n        name.indexOf( '/'  ) >= 0 ||\n        name.indexOf( '\\\\' ) >= 0 ){\n      throw new RuntimeException( \"Invalid core name: \"+name );\n    }\n\n    CoreDescriptor old = null;    \n    synchronized (cores) {\n      old = cores.put(name, descr);\n    }\n    if( old == null ) {\n      log.info( \"registering core: \"+name );\n      return null;\n    } \n    else {\n      log.info( \"replacing core: \"+name );\n      return old;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"58b41d4093a9662306bdc051e4b46643deff70de":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["58b41d4093a9662306bdc051e4b46643deff70de"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"6dc6ab6902f8f70ae43365947ccf44c25986906d":["58b41d4093a9662306bdc051e4b46643deff70de"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["6dc6ab6902f8f70ae43365947ccf44c25986906d"],"58b41d4093a9662306bdc051e4b46643deff70de":["0323fcfcacbfb8242fbf70eb58498551b2018c67"],"9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5":[],"0323fcfcacbfb8242fbf70eb58498551b2018c67":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9c74b2e17824ac88cefd4b764b4b9f2c56ceeea5","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}