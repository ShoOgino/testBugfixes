{"path":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyProperties(String,Map[String,String],Map[String,String],SolrZkClient).mjava","commits":[{"id":"2209af2c265d2258ec4b29c8cc78622d36994a15","date":1440641916,"type":0,"author":"Gregory Chanan","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyProperties(String,Map[String,String],Map[String,String],SolrZkClient).mjava","pathOld":"/dev/null","sourceNew":"  private void verifyProperties(String configSetName, Map<String, String> oldProps,\n       Map<String, String> newProps, SolrZkClient zkClient) throws Exception {\n    NamedList properties = getConfigSetPropertiesFromZk(zkClient,\n        ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName + \"/\" + DEFAULT_FILENAME);\n    // let's check without merging the maps, since that's what the MessageHandler does\n    // (since we'd probably repeat any bug in the MessageHandler here)\n    if (oldProps == null && newProps == null) {\n      assertNull(properties);\n      return;\n    }\n    assertNotNull(properties);\n\n    // check all oldProps are in props\n    if (oldProps != null) {\n      for (Map.Entry<String, String> entry : oldProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n    // check all newProps are in props\n    if (newProps != null) {\n      for (Map.Entry<String, String> entry : newProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n\n    // check the value in properties are correct\n    Iterator<Map.Entry<String, Object>> it = properties.iterator();\n    while (it.hasNext()) {\n      Map.Entry<String, Object> entry = it.next();\n      String newValue = newProps != null ? newProps.get(entry.getKey()) : null;\n      String oldValue = oldProps != null ? oldProps.get(entry.getKey()) : null;\n      if (newValue != null) {\n        assertTrue(newValue.equals(entry.getValue()));\n      } else if (oldValue != null) {\n        assertTrue(oldValue.equals(entry.getValue()));\n      } else {\n        // not in either\n        assert(false);\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyProperties(String,Map[String,String],Map[String,String],SolrZkClient).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/TestConfigSetsAPI#verifyProperties(String,Map[String,String],Map[String,String],SolrZkClient).mjava","sourceNew":"  private void verifyProperties(String configSetName, Map<String, String> oldProps,\n       Map<String, String> newProps, SolrZkClient zkClient) throws Exception {\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList properties = getConfigSetPropertiesFromZk(zkClient,\n        ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName + \"/\" + DEFAULT_FILENAME);\n    // let's check without merging the maps, since that's what the MessageHandler does\n    // (since we'd probably repeat any bug in the MessageHandler here)\n    if (oldProps == null && newProps == null) {\n      assertNull(properties);\n      return;\n    }\n    assertNotNull(properties);\n\n    // check all oldProps are in props\n    if (oldProps != null) {\n      for (Map.Entry<String, String> entry : oldProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n    // check all newProps are in props\n    if (newProps != null) {\n      for (Map.Entry<String, String> entry : newProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n\n    // check the value in properties are correct\n    @SuppressWarnings({\"unchecked\"})\n    Iterator<Map.Entry<String, Object>> it = properties.iterator();\n    while (it.hasNext()) {\n      Map.Entry<String, Object> entry = it.next();\n      String newValue = newProps != null ? newProps.get(entry.getKey()) : null;\n      String oldValue = oldProps != null ? oldProps.get(entry.getKey()) : null;\n      if (newValue != null) {\n        assertTrue(newValue.equals(entry.getValue()));\n      } else if (oldValue != null) {\n        assertTrue(oldValue.equals(entry.getValue()));\n      } else {\n        // not in either\n        assert(false);\n      }\n    }\n  }\n\n","sourceOld":"  private void verifyProperties(String configSetName, Map<String, String> oldProps,\n       Map<String, String> newProps, SolrZkClient zkClient) throws Exception {\n    NamedList properties = getConfigSetPropertiesFromZk(zkClient,\n        ZkConfigManager.CONFIGS_ZKNODE + \"/\" + configSetName + \"/\" + DEFAULT_FILENAME);\n    // let's check without merging the maps, since that's what the MessageHandler does\n    // (since we'd probably repeat any bug in the MessageHandler here)\n    if (oldProps == null && newProps == null) {\n      assertNull(properties);\n      return;\n    }\n    assertNotNull(properties);\n\n    // check all oldProps are in props\n    if (oldProps != null) {\n      for (Map.Entry<String, String> entry : oldProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n    // check all newProps are in props\n    if (newProps != null) {\n      for (Map.Entry<String, String> entry : newProps.entrySet()) {\n        assertNotNull(properties.get(entry.getKey()));\n      }\n    }\n\n    // check the value in properties are correct\n    Iterator<Map.Entry<String, Object>> it = properties.iterator();\n    while (it.hasNext()) {\n      Map.Entry<String, Object> entry = it.next();\n      String newValue = newProps != null ? newProps.get(entry.getKey()) : null;\n      String oldValue = oldProps != null ? oldProps.get(entry.getKey()) : null;\n      if (newValue != null) {\n        assertTrue(newValue.equals(entry.getValue()));\n      } else if (oldValue != null) {\n        assertTrue(oldValue.equals(entry.getValue()));\n      } else {\n        // not in either\n        assert(false);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"2209af2c265d2258ec4b29c8cc78622d36994a15":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["2209af2c265d2258ec4b29c8cc78622d36994a15"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}