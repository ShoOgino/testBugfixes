{"path":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#getSparseVisitor(ShapeQuery,DocIdSetBuilder).mjava","commits":[{"id":"637ced5887480f9803707c2fc68df68ce0c0bf13","date":1568120036,"type":0,"author":"Ignacio Vera","isMerge":false,"pathNew":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#getSparseVisitor(ShapeQuery,DocIdSetBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n  private static IntersectVisitor getSparseVisitor(final ShapeQuery query, final DocIdSetBuilder result) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n      DocIdSetBuilder.BulkAdder adder;\n\n      @Override\n      public void grow(int count) {\n        adder = result.grow(count);\n      }\n\n      @Override\n      public void visit(int docID) {\n        adder.add(docID);\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          int docID;\n          while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            visit(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":5,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/ShapeQuery#getSparseVisitor(ShapeQuery,DocIdSetBuilder).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/document/ShapeQuery#getSparseVisitor(ShapeQuery,DocIdSetBuilder).mjava","sourceNew":"  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n  private static IntersectVisitor getSparseVisitor(final ShapeQuery query, final DocIdSetBuilder result) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n      DocIdSetBuilder.BulkAdder adder;\n\n      @Override\n      public void grow(int count) {\n        adder = result.grow(count);\n      }\n\n      @Override\n      public void visit(int docID) {\n        adder.add(docID);\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          int docID;\n          while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            visit(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","sourceOld":"  /** create a visitor that adds documents that match the query using a sparse bitset. (Used by INTERSECT) */\n  private static IntersectVisitor getSparseVisitor(final ShapeQuery query, final DocIdSetBuilder result) {\n    return new IntersectVisitor() {\n      final ShapeField.DecodedTriangle scratchTriangle = new ShapeField.DecodedTriangle();\n      DocIdSetBuilder.BulkAdder adder;\n\n      @Override\n      public void grow(int count) {\n        adder = result.grow(count);\n      }\n\n      @Override\n      public void visit(int docID) {\n        adder.add(docID);\n      }\n\n      @Override\n      public void visit(int docID, byte[] t) {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          visit(docID);\n        }\n      }\n\n      @Override\n      public void visit(DocIdSetIterator iterator, byte[] t) throws IOException {\n        if (query.queryMatches(t, scratchTriangle, query.getQueryRelation())) {\n          int docID;\n          while ((docID = iterator.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) {\n            visit(docID);\n          }\n        }\n      }\n\n      @Override\n      public Relation compare(byte[] minTriangle, byte[] maxTriangle) {\n        return query.relateRangeToQuery(minTriangle, maxTriangle, query.getQueryRelation());\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["09c1e6d465800c73af60624bf9d4459a19f7940c"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["637ced5887480f9803707c2fc68df68ce0c0bf13"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"637ced5887480f9803707c2fc68df68ce0c0bf13":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}