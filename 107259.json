{"path":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","pathOld":"backwards/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/index/TestOmitTf#testBasic().mjava","sourceNew":null,"sourceOld":"  // Test scores with one field with Term Freqs and one without, otherwise with equal content \n  public void testBasic() throws Exception {\n    Directory dir = new MockRAMDirectory();  \n    Analyzer analyzer = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    IndexWriter writer = new IndexWriter(dir, analyzer, true, IndexWriter.MaxFieldLength.LIMITED);\n    writer.setMergeFactor(2);\n    writer.setMaxBufferedDocs(2);\n    writer.setSimilarity(new SimpleSimilarity());\n        \n        \n    StringBuilder sb = new StringBuilder(265);\n    String term = \"term\";\n    for(int i = 0; i<30; i++){\n      Document d = new Document();\n      sb.append(term).append(\" \");\n      String content  = sb.toString();\n      Field noTf = new Field(\"noTf\", content + (i%2==0 ? \"\" : \" notf\"), Field.Store.NO, Field.Index.ANALYZED);\n      noTf.setOmitTermFreqAndPositions(true);\n      d.add(noTf);\n          \n      Field tf = new Field(\"tf\", content + (i%2==0 ? \" tf\" : \"\"), Field.Store.NO, Field.Index.ANALYZED);\n      d.add(tf);\n          \n      writer.addDocument(d);\n      //System.out.println(d);\n    }\n        \n    writer.optimize();\n    // flush\n    writer.close();\n    _TestUtil.checkIndex(dir);\n\n    /*\n     * Verify the index\n     */         \n    Searcher searcher = new IndexSearcher(dir, true);\n    searcher.setSimilarity(new SimpleSimilarity());\n        \n    Term a = new Term(\"noTf\", term);\n    Term b = new Term(\"tf\", term);\n    Term c = new Term(\"noTf\", \"notf\");\n    Term d = new Term(\"tf\", \"tf\");\n    TermQuery q1 = new TermQuery(a);\n    TermQuery q2 = new TermQuery(b);\n    TermQuery q3 = new TermQuery(c);\n    TermQuery q4 = new TermQuery(d);\n\n        \n    searcher.search(q1,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q2,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q2: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f+doc);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n         \n        \n        \n        \n        \n    searcher.search(q3,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        float score = scorer.score();\n                        assertTrue(score==1.0f);\n                        assertFalse(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n    searcher.search(q4,\n                    new CountingHitCollector() {\n                      private Scorer scorer;\n                      @Override\n                      public final void setScorer(Scorer scorer) {\n                        this.scorer = scorer;\n                      }\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        float score = scorer.score();\n                        //System.out.println(\"Q1: Doc=\" + doc + \" score=\" + score);\n                        assertTrue(score==1.0f);\n                        assertTrue(doc%2==0);\n                        super.collect(doc);\n                      }\n                    });\n    //System.out.println(CountingHitCollector.getCount());\n        \n        \n        \n    BooleanQuery bq = new BooleanQuery();\n    bq.add(q1,Occur.MUST);\n    bq.add(q4,Occur.MUST);\n        \n    searcher.search(bq,\n                    new CountingHitCollector() {\n                      @Override\n                      public final void collect(int doc) throws IOException {\n                        //System.out.println(\"BQ: Doc=\" + doc + \" score=\" + score);\n                        super.collect(doc);\n                      }\n                    });\n    assertTrue(15 == CountingHitCollector.getCount());\n        \n    searcher.close();     \n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}