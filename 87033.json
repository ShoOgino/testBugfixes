{"path":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#entryQuery(List[String],String,ProvidedService).mjava","commits":[{"id":"5824af871ba6863399636aa5989bfc0ef2ea448c","date":1166013128,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#entryQuery(List[String],String,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#entryQuery(List[String],String,ProvidedService).mjava","sourceNew":"    /**\n     * Fetches the requested entries from the storage. The given list contains\n     * entry id's to be looked up in the storage. First the {@link StorageBuffer}\n     * will be queried for the entry id's. If not all of the entries remain in\n     * the buffer the underlying lucene index will be searched. The entries are\n     * not guaranteed to be in the same order as they are in the given id list.\n     * Entry ID's not found in the index or the buffer will be omitted.\n     * <p>\n     * The entries will be searched in a feed context specified by the given\n     * feed ID\n     * </p>\n     * \n     * @param entryIds -\n     *            the entry id's to fetch.\n     * @param feedId -\n     *            the feed id e.g. feed context.\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * \n     * @return - the list of entries corresponding to the given entry id list.\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public List<BaseEntry> entryQuery(List<String> entryIds,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        List<BaseEntry> resultList = new ArrayList<BaseEntry>(entryIds.size());\n        List<String> searchList = new ArrayList<String>(entryIds.size());\n        for (String entry : entryIds) {\n\n            StorageEntryWrapper bufferedEntry = this.buffer.getEntry(entry,\n                    feedId);\n            if (bufferedEntry != null) {\n                resultList.add(bufferedEntry.getEntry());\n            } else\n                searchList.add(entry);\n        }\n        if (searchList.isEmpty())\n            return resultList;\n\n        Hits hits = storageQuery(searchList);\n        Iterator hitIterator = hits.iterator();\n        while (hitIterator.hasNext()) {\n            Hit hit = (Hit) hitIterator.next();\n            Document doc = hit.getDocument();\n            BaseEntry entry = buildEntryFromLuceneDocument(doc, config);\n            resultList.add(entry);\n\n        }\n\n        return resultList;\n\n    }\n\n","sourceOld":"    /**\n     * Fetches the requested entries from the storage. The given list contains\n     * entry id's to be looked up in the storage. First the {@link StorageBuffer}\n     * will be queried for the entry id's. If not all of the entries remain in\n     * the buffer the underlying lucene index will be searched. The entries are\n     * not guaranteed to be in the same order as they are in the given id list.\n     * Entry ID's not found in the index or the buffer will be omitted.\n     * <p>\n     * The entries will be searched in a feed context specified by the given\n     * feed ID\n     * </p>\n     * \n     * @param entryIds -\n     *            the entry id's to fetch.\n     * @param feedId -\n     *            the feed id e.g. feed context.\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * \n     * @return - the list of entries corresponding to the given entry id list.\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public List<BaseEntry> entryQuery(List<String> entryIds,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        List<BaseEntry> resultList = new ArrayList<BaseEntry>(entryIds.size());\n        List<String> searchList = new ArrayList<String>(entryIds.size());\n        for (String entry : entryIds) {\n\n            StorageEntryWrapper bufferedEntry = this.buffer.getEntry(entry,\n                    feedId);\n            if (bufferedEntry != null) {\n                resultList.add(bufferedEntry.getEntry());\n            } else\n                searchList.add(entry);\n        }\n        if (searchList.isEmpty())\n            return resultList;\n\n        Hits hits = storageQuery(searchList);\n        Iterator hitIterator = hits.iterator();\n        while (hitIterator.hasNext()) {\n            Hit hit = (Hit) hitIterator.next();\n            Document doc = hit.getDocument();\n            BaseEntry entry = buildEntryFromLuceneDocument(doc, config);\n            resultList.add(entry);\n\n        }\n\n        return resultList;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe","date":1166036663,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"contrib/gdata-server/src/core/src/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#entryQuery(List[String],String,ProvidedService).mjava","pathOld":"contrib/gdata-server/src/core/java/org/apache/lucene/gdata/storage/lucenestorage/StorageQuery#entryQuery(List[String],String,ProvidedService).mjava","sourceNew":"    /**\n     * Fetches the requested entries from the storage. The given list contains\n     * entry id's to be looked up in the storage. First the {@link StorageBuffer}\n     * will be queried for the entry id's. If not all of the entries remain in\n     * the buffer the underlying lucene index will be searched. The entries are\n     * not guaranteed to be in the same order as they are in the given id list.\n     * Entry ID's not found in the index or the buffer will be omitted.\n     * <p>\n     * The entries will be searched in a feed context specified by the given\n     * feed ID\n     * </p>\n     * \n     * @param entryIds -\n     *            the entry id's to fetch.\n     * @param feedId -\n     *            the feed id e.g. feed context.\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * \n     * @return - the list of entries corresponding to the given entry id list.\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public List<BaseEntry> entryQuery(List<String> entryIds,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        List<BaseEntry> resultList = new ArrayList<BaseEntry>(entryIds.size());\n        List<String> searchList = new ArrayList<String>(entryIds.size());\n        for (String entry : entryIds) {\n\n            StorageEntryWrapper bufferedEntry = this.buffer.getEntry(entry,\n                    feedId);\n            if (bufferedEntry != null) {\n                resultList.add(bufferedEntry.getEntry());\n            } else\n                searchList.add(entry);\n        }\n        if (searchList.isEmpty())\n            return resultList;\n\n        Hits hits = storageQuery(searchList);\n        Iterator hitIterator = hits.iterator();\n        while (hitIterator.hasNext()) {\n            Hit hit = (Hit) hitIterator.next();\n            Document doc = hit.getDocument();\n            BaseEntry entry = buildEntryFromLuceneDocument(doc, config);\n            resultList.add(entry);\n\n        }\n\n        return resultList;\n\n    }\n\n","sourceOld":"    /**\n     * Fetches the requested entries from the storage. The given list contains\n     * entry id's to be looked up in the storage. First the {@link StorageBuffer}\n     * will be queried for the entry id's. If not all of the entries remain in\n     * the buffer the underlying lucene index will be searched. The entries are\n     * not guaranteed to be in the same order as they are in the given id list.\n     * Entry ID's not found in the index or the buffer will be omitted.\n     * <p>\n     * The entries will be searched in a feed context specified by the given\n     * feed ID\n     * </p>\n     * \n     * @param entryIds -\n     *            the entry id's to fetch.\n     * @param feedId -\n     *            the feed id e.g. feed context.\n     * @param config -\n     *            the FeedInstanceConfiguration containing extension profile used\n     *            to create the entry instances\n     * \n     * @return - the list of entries corresponding to the given entry id list.\n     * @throws IOException -\n     *             if the index could not be queries or the entries could not be\n     *             build\n     * @throws ParseException -\n     *             if an entry could not be parsed while building it from the\n     *             Lucene Document.\n     */\n    public List<BaseEntry> entryQuery(List<String> entryIds,\n            final String feedId, final ProvidedService config)\n            throws IOException, ParseException {\n        List<BaseEntry> resultList = new ArrayList<BaseEntry>(entryIds.size());\n        List<String> searchList = new ArrayList<String>(entryIds.size());\n        for (String entry : entryIds) {\n\n            StorageEntryWrapper bufferedEntry = this.buffer.getEntry(entry,\n                    feedId);\n            if (bufferedEntry != null) {\n                resultList.add(bufferedEntry.getEntry());\n            } else\n                searchList.add(entry);\n        }\n        if (searchList.isEmpty())\n            return resultList;\n\n        Hits hits = storageQuery(searchList);\n        Iterator hitIterator = hits.iterator();\n        while (hitIterator.hasNext()) {\n            Hit hit = (Hit) hitIterator.next();\n            Document doc = hit.getDocument();\n            BaseEntry entry = buildEntryFromLuceneDocument(doc, config);\n            resultList.add(entry);\n\n        }\n\n        return resultList;\n\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5824af871ba6863399636aa5989bfc0ef2ea448c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"]},"commit2Childs":{"4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5824af871ba6863399636aa5989bfc0ef2ea448c"],"5824af871ba6863399636aa5989bfc0ef2ea448c":["4055ae1e0f6bbe8fa4c1069a11adee5e57b518fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}