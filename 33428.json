{"path":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","commits":[{"id":"75ffaed6edffab734233feb10c3a40decddfeb63","date":1344540694,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertTrue(de.hasPayload());\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552","date":1344797146,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertTrue(de.hasPayload());\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c7869f64c874ebf7f317d22c00baf2b6857797a6","date":1344856617,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","date":1344867506,"type":0,"author":"Uwe Schindler","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"/dev/null","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b6a0e3c1c21aac8ecf75706605133012833585c7","date":1347535263,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(null, \"field\", new BytesRef(\"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338","date":1389274049,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(new StringReader(\"here we go\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(new StringReader(\"nopayload\"), MockTokenizer.WHITESPACE, true);\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.shutdown();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75","date":1399205975,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.shutdown();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n\n    assertFalse(ts.hasAttribute(PayloadAttribute.class));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.shutdown();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.shutdown();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"51f5280f31484820499077f41fcdfe92d527d9dc","date":1423229122,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.termDocsEnum(new Term(\"field\", \"withPayload\"), PostingsEnum.FLAG_POSITIONS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    DocsAndPositionsEnum de = sr.termPositionsEnum(new Term(\"field\", \"withPayload\"));\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"e73063b92d958076ef4ae8beb5f493e8ccdcecb4","date":1424177215,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.postings(new Term(\"field\", \"withPayload\"), PostingsEnum.POSITIONS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.termDocsEnum(new Term(\"field\", \"withPayload\"), PostingsEnum.FLAG_POSITIONS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a9023c2bf8056230665bace786651c0716d78d31","date":1424736578,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.postings(new Term(\"field\", \"withPayload\"), PostingsEnum.PAYLOADS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.postings(new Term(\"field\", \"withPayload\"), PostingsEnum.POSITIONS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1","date":1457644139,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestPayloads#testMixupMultiValued().mjava","sourceNew":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    LeafReader sr = getOnlyLeafReader(reader);\n    PostingsEnum de = sr.postings(new Term(\"field\", \"withPayload\"), PostingsEnum.PAYLOADS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** some field instances have payload att, some not */\n  public void testMixupMultiValued() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n    Document doc = new Document();\n    Field field = new TextField(\"field\", \"\", Field.Store.NO);\n    TokenStream ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"here we go\"));\n    field.setTokenStream(ts);\n    doc.add(field);\n    Field field2 = new TextField(\"field\", \"\", Field.Store.NO);\n    Token withPayload = new Token(\"withPayload\", 0, 11);\n    withPayload.setPayload(new BytesRef(\"test\"));\n    ts = new CannedTokenStream(withPayload);\n    assertTrue(ts.hasAttribute(PayloadAttribute.class));\n    field2.setTokenStream(ts);\n    doc.add(field2);\n    Field field3 = new TextField(\"field\", \"\", Field.Store.NO);\n    ts = new MockTokenizer(MockTokenizer.WHITESPACE, true);\n    ((Tokenizer)ts).setReader(new StringReader(\"nopayload\"));\n    field3.setTokenStream(ts);\n    doc.add(field3);\n    writer.addDocument(doc);\n    DirectoryReader reader = writer.getReader();\n    SegmentReader sr = getOnlySegmentReader(reader);\n    PostingsEnum de = sr.postings(new Term(\"field\", \"withPayload\"), PostingsEnum.PAYLOADS);\n    de.nextDoc();\n    de.nextPosition();\n    assertEquals(new BytesRef(\"test\"), de.getPayload());\n    writer.close();\n    reader.close();\n    dir.close();\n  }\n\n","bugFix":["75ffaed6edffab734233feb10c3a40decddfeb63"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["b6a0e3c1c21aac8ecf75706605133012833585c7"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"51f5280f31484820499077f41fcdfe92d527d9dc":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["a9023c2bf8056230665bace786651c0716d78d31"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"75ffaed6edffab734233feb10c3a40decddfeb63":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["75ffaed6edffab734233feb10c3a40decddfeb63"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"d0ef034a4f10871667ae75181537775ddcf8ade4":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"a9023c2bf8056230665bace786651c0716d78d31":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"]},"commit2Childs":{"ae889fd5c8a69f6b5d130d3c895bfa5b04d07338":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"923f36bb0db6f793cf62dbb68723ae3bfbaf1d75":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"51f5280f31484820499077f41fcdfe92d527d9dc":["e73063b92d958076ef4ae8beb5f493e8ccdcecb4"],"0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"e73063b92d958076ef4ae8beb5f493e8ccdcecb4":["a9023c2bf8056230665bace786651c0716d78d31"],"75ffaed6edffab734233feb10c3a40decddfeb63":["2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552"],"c7869f64c874ebf7f317d22c00baf2b6857797a6":[],"2b4c7e630332c5e9e7d7a70f4ace4b3ffd3fc552":["c7869f64c874ebf7f317d22c00baf2b6857797a6","b6a0e3c1c21aac8ecf75706605133012833585c7","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["75ffaed6edffab734233feb10c3a40decddfeb63","c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9"],"b6a0e3c1c21aac8ecf75706605133012833585c7":["ae889fd5c8a69f6b5d130d3c895bfa5b04d07338"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["51f5280f31484820499077f41fcdfe92d527d9dc"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["923f36bb0db6f793cf62dbb68723ae3bfbaf1d75"],"a9023c2bf8056230665bace786651c0716d78d31":["0bdb67d0b49ddf963c3bfc4975fce171ad3aacb1"],"d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c7869f64c874ebf7f317d22c00baf2b6857797a6","d0ba34ddeec9e4ab657150c29a5614a7bfbb53c9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}