{"path":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      TermFreqVector [] vectors = reader.getTermFreqVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      TermFreqVector vector = reader.getTermFreqVector(docId, \"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      vectors = new TermFreqVector[1];\n      vectors[0] = vector;\n      \n      verifyVectors(vectors, docId);\n      \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","pathOld":"lucene/src/test/org/apache/lucene/search/MultiThreadTermVectorsReader[TestMultiThreadTermVectors]#testTermVectors().mjava","sourceNew":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","sourceOld":"  private void testTermVectors() throws Exception {\n    // check:\n    int numDocs = reader.numDocs();\n    long start = 0L;\n    for (int docId = 0; docId < numDocs; docId++) {\n      start = System.currentTimeMillis();\n      Fields vectors = reader.getTermVectors(docId);\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      // verify vectors result\n      verifyVectors(vectors, docId);\n      \n      start = System.currentTimeMillis();\n      Terms vector = reader.getTermVectors(docId).terms(\"field\");\n      timeElapsed += System.currentTimeMillis()-start;\n      \n      verifyVector(vector.iterator(null), docId);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cc749c053615f5871f3b95715fe292f34e70a53":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"3cc749c053615f5871f3b95715fe292f34e70a53":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["3cc749c053615f5871f3b95715fe292f34e70a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}