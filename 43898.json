{"path":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","commits":[{"id":"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d","date":1419896224,"type":0,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","pathOld":"/dev/null","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp();\n    clusterPropRequest.setPropertyName(ZkStateReader.LEGACY_CLOUD);\n    clusterPropRequest.setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    \n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp();\n    clusterPropRequest.setPropertyName(ZkStateReader.LEGACY_CLOUD);\n    clusterPropRequest.setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeOut = System.currentTimeMillis() + 3000;\n    changed = false;\n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"182acd29cf4cb1644a02b8517f3a5b867c0d7cce","date":1432665213,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    \n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeOut = System.currentTimeMillis() + 3000;\n    changed = false;\n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp();\n    clusterPropRequest.setPropertyName(ZkStateReader.LEGACY_CLOUD);\n    clusterPropRequest.setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    \n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp();\n    clusterPropRequest.setPropertyName(ZkStateReader.LEGACY_CLOUD);\n    clusterPropRequest.setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeOut = System.currentTimeMillis() + 3000;\n    changed = false;\n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    long timeOut = System.currentTimeMillis() + 3000;\n    boolean changed = false;\n    \n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeOut = System.currentTimeMillis() + 3000;\n    changed = false;\n    while(System.currentTimeMillis() < timeOut){\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"30f9ea0e61a3df8b29a67bce1ea06c83201ad871","date":1457138084,"type":5,"author":"anshum","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"922ddd897402a6df25c766ea8300443be5e82b3d","date":1457157606,"type":5,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTest#testClusterProp().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/CollectionsAPISolrJTests#testClusterProp().mjava","sourceNew":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","sourceOld":"  private void testClusterProp() throws InterruptedException, IOException, SolrServerException {\n    CollectionAdminRequest.ClusterProp clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(\"false\");\n    CollectionAdminResponse response = clusterPropRequest.process(cloudClient);\n\n    assertEquals(0, response.getStatus());\n\n    TimeOut timeout = new TimeOut(3, TimeUnit.SECONDS);\n    boolean changed = false;\n    \n    while(! timeout.hasTimedOut()){\n      Thread.sleep(10);\n      changed = Objects.equals(\"false\",\n          cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD));\n      if(changed) break;\n    }\n    assertTrue(\"The Cluster property wasn't set\", changed);\n    \n    // Unset ClusterProp that we set.\n    clusterPropRequest = new CollectionAdminRequest.ClusterProp()\n            .setPropertyName(ZkStateReader.LEGACY_CLOUD)\n            .setPropertyValue(null);\n    clusterPropRequest.process(cloudClient);\n\n    timeout = new TimeOut(3, TimeUnit.SECONDS);\n    changed = false;\n    while(! timeout.hasTimedOut()) {\n      Thread.sleep(10);\n      changed = (cloudClient.getZkStateReader().getClusterProps().get(ZkStateReader.LEGACY_CLOUD) == null);\n      if(changed)  \n        break;\n    }\n    assertTrue(\"The Cluster property wasn't unset\", changed);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"922ddd897402a6df25c766ea8300443be5e82b3d":["bcf9886c8ff537aafde14de48ebf744f5673f08b","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["922ddd897402a6df25c766ea8300443be5e82b3d"]},"commit2Childs":{"922ddd897402a6df25c766ea8300443be5e82b3d":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d"],"30f9ea0e61a3df8b29a67bce1ea06c83201ad871":["922ddd897402a6df25c766ea8300443be5e82b3d"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["922ddd897402a6df25c766ea8300443be5e82b3d","30f9ea0e61a3df8b29a67bce1ea06c83201ad871"],"182acd29cf4cb1644a02b8517f3a5b867c0d7cce":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"d0ec3dbdc850ca18bf4aef9acb85f2ea0554306d":["182acd29cf4cb1644a02b8517f3a5b867c0d7cce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}