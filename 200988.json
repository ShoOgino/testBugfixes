{"path":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","commits":[{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"modules/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"571abba77e55fea386a38c0024f72ffa5b37a9ad","date":1360272747,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"607428da722dcb3e86bbd11c63de8986e6275c36","date":1360334150,"type":5,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/search/FacetRequest#getValueOf(FacetArrays,int).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/search/params/FacetRequest#getValueOf(FacetArrays,int).mjava","sourceNew":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","sourceOld":"  /**\n   * Return the value of a category used for facets computations for this\n   * request. For a count request this would be the count for that facet, i.e.\n   * an integer number. but for other requests this can be the result of a more\n   * complex operation, and the result can be any double precision number.\n   * Having this method with a general name <b>value</b> which is double\n   * precision allows to have more compact API and code for handling counts and\n   * perhaps other requests (such as for associations) very similarly, and by\n   * the same code and API, avoiding code duplication.\n   * \n   * @param arrays\n   *          provider for facet arrays in use for current computation.\n   * @param idx\n   *          an index into the count arrays now in effect in\n   *          <code>arrays</code>. E.g., for ordinal number <i>n</i>, with\n   *          partition, of size <i>partitionSize</i>, now covering <i>n</i>,\n   *          <code>getValueOf</code> would be invoked with <code>idx</code>\n   *          being <i>n</i> % <i>partitionSize</i>.\n   */\n  // TODO perhaps instead of getValueOf we can have a postProcess(FacetArrays)\n  // That, together with getFacetArraysSource should allow ResultHandlers to\n  // efficiently obtain the values from the arrays directly\n  public abstract double getValueOf(FacetArrays arrays, int idx);\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"607428da722dcb3e86bbd11c63de8986e6275c36":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["607428da722dcb3e86bbd11c63de8986e6275c36"]},"commit2Childs":{"607428da722dcb3e86bbd11c63de8986e6275c36":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["571abba77e55fea386a38c0024f72ffa5b37a9ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"571abba77e55fea386a38c0024f72ffa5b37a9ad":["607428da722dcb3e86bbd11c63de8986e6275c36"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}