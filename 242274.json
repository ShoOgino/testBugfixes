{"path":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","commits":[{"id":"edf5b262a72d10530eb2f01dc8f19060355b213e","date":1557765866,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    return replicaInfos.getOrDefault(node, Collections.emptyMap());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d3d2a34ea3732f91149b31bcad82026ad85fda69","date":1567850949,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n    Map<String, Map<String, List<ReplicaInfo>>> infos = replicaInfos.getOrDefault(node, Collections.emptyMap());\n    // deep copy\n    infos.forEach((coll, shards) -> {\n      shards.forEach((shard, replicas) -> {\n        replicas.forEach(ri -> {\n          List<ReplicaInfo> myReplicas = result\n              .computeIfAbsent(coll, c -> new LinkedHashMap<>())\n              .computeIfAbsent(shard, s -> new ArrayList<>());\n          ReplicaInfo myReplica = (ReplicaInfo)ri.clone();\n          myReplicas.add(myReplica);\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    return replicaInfos.getOrDefault(node, Collections.emptyMap());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd","date":1594731683,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","sourceNew":"  @Override\n  public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n    Map<String, Map<String, List<Replica>>> result = new LinkedHashMap<>();\n    Map<String, Map<String, List<Replica>>> infos = replicaInfos.getOrDefault(node, Collections.emptyMap());\n    // deep copy\n    infos.forEach((coll, shards) -> {\n      shards.forEach((shard, replicas) -> {\n        replicas.forEach(ri -> {\n          List<Replica> myReplicas = result\n              .computeIfAbsent(coll, c -> new LinkedHashMap<>())\n              .computeIfAbsent(shard, s -> new ArrayList<>());\n          Replica myReplica = (Replica)ri.clone();\n          myReplicas.add(myReplica);\n        });\n      });\n    });\n    return result;\n  }\n\n","sourceOld":"  @Override\n  public Map<String, Map<String, List<ReplicaInfo>>> getReplicaInfo(String node, Collection<String> keys) {\n    Map<String, Map<String, List<ReplicaInfo>>> result = new LinkedHashMap<>();\n    Map<String, Map<String, List<ReplicaInfo>>> infos = replicaInfos.getOrDefault(node, Collections.emptyMap());\n    // deep copy\n    infos.forEach((coll, shards) -> {\n      shards.forEach((shard, replicas) -> {\n        replicas.forEach(ri -> {\n          List<ReplicaInfo> myReplicas = result\n              .computeIfAbsent(coll, c -> new LinkedHashMap<>())\n              .computeIfAbsent(shard, s -> new ArrayList<>());\n          ReplicaInfo myReplica = (ReplicaInfo)ri.clone();\n          myReplicas.add(myReplica);\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f504512a03d978990cbff30db0522b354e846db","date":1595247421,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SnapshotNodeStateProvider#getReplicaInfo(String,Collection[String]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public Map<String, Map<String, List<Replica>>> getReplicaInfo(String node, Collection<String> keys) {\n    Map<String, Map<String, List<Replica>>> result = new LinkedHashMap<>();\n    Map<String, Map<String, List<Replica>>> infos = replicaInfos.getOrDefault(node, Collections.emptyMap());\n    // deep copy\n    infos.forEach((coll, shards) -> {\n      shards.forEach((shard, replicas) -> {\n        replicas.forEach(ri -> {\n          List<Replica> myReplicas = result\n              .computeIfAbsent(coll, c -> new LinkedHashMap<>())\n              .computeIfAbsent(shard, s -> new ArrayList<>());\n          Replica myReplica = (Replica)ri.clone();\n          myReplicas.add(myReplica);\n        });\n      });\n    });\n    return result;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"3f504512a03d978990cbff30db0522b354e846db":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"edf5b262a72d10530eb2f01dc8f19060355b213e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3f504512a03d978990cbff30db0522b354e846db"]},"commit2Childs":{"d3d2a34ea3732f91149b31bcad82026ad85fda69":["7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd"],"7e8ce2f9d2ddfcf5cfa7e73b8b2af287a2a276fd":["3f504512a03d978990cbff30db0522b354e846db"],"3f504512a03d978990cbff30db0522b354e846db":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["edf5b262a72d10530eb2f01dc8f19060355b213e"],"edf5b262a72d10530eb2f01dc8f19060355b213e":["d3d2a34ea3732f91149b31bcad82026ad85fda69"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}