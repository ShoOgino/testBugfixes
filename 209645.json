{"path":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","commits":[{"id":"4f1a1d7f1604a41328b566b1be0c5ad6038117e8","date":1252499131,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]]).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles) {\n    FileOutputStream outFile = null;\n    FileInputStream inFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = new Properties();\n    long replicationTime = System.currentTimeMillis();\n    try {\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      int indexCount = 1, confFilesCount = 1;\n      if (f.exists()) {\n        inFile = new FileInputStream(f);\n        props.load(inFile);\n      }\n      if (props.containsKey(\"timesIndexReplicated\")) {\n        indexCount = Integer.valueOf(props.getProperty(\"timesIndexReplicated\")) + 1;\n      }\n      props.setProperty(\"timesIndexReplicated\", String.valueOf(indexCount));\n      props.setProperty(\"indexReplicatedAt\", String.valueOf(replicationTime));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(\"confFilesReplicated\", confFiles.toString());\n        props.setProperty(\"confFilesReplicatedAt\", String.valueOf(replicationTime));\n        if (props.containsKey(\"timesConfigReplicated\")) {\n          confFilesCount = Integer.valueOf(props.getProperty(\"timesConfigReplicated\")) + 1;\n        }\n        props.setProperty(\"timesConfigReplicated\", String.valueOf(confFilesCount));\n      }\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(inFile);\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","pathOld":"src/java/org/apache/solr/handler/SnapPuller#logReplicationTimeAndConfFiles(Collection[Map[String,Object]],boolean).mjava","sourceNew":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","sourceOld":"  /**\n   * Helper method to record the last replication's details so that we can show them on the statistics page across\n   * restarts.\n   */\n  private void logReplicationTimeAndConfFiles(Collection<Map<String, Object>> modifiedConfFiles, boolean successfulInstall) {\n    FileOutputStream outFile = null;\n    List<String> confFiles = new ArrayList<String>();\n    if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty())\n      for (Map<String, Object> map1 : modifiedConfFiles)\n        confFiles.add((String) map1.get(NAME));\n\n    Properties props = replicationHandler.loadReplicationProperties();\n    long replicationTime = System.currentTimeMillis();\n    long replicationTimeTaken = (replicationTime - getReplicationStartTime()) / 1000;\n    try {\n      int indexCount = 1, confFilesCount = 1;\n      if (props.containsKey(TIMES_INDEX_REPLICATED)) {\n        indexCount = Integer.valueOf(props.getProperty(TIMES_INDEX_REPLICATED)) + 1;\n      }\n      StringBuffer sb = readToStringBuffer(replicationTime, props.getProperty(INDEX_REPLICATED_AT_LIST));\n      props.setProperty(INDEX_REPLICATED_AT_LIST, sb.toString());\n      props.setProperty(INDEX_REPLICATED_AT, String.valueOf(replicationTime));\n      props.setProperty(PREVIOUS_CYCLE_TIME_TAKEN, String.valueOf(replicationTimeTaken));\n      props.setProperty(TIMES_INDEX_REPLICATED, String.valueOf(indexCount));\n      if (modifiedConfFiles != null && !modifiedConfFiles.isEmpty()) {\n        props.setProperty(CONF_FILES_REPLICATED, confFiles.toString());\n        props.setProperty(CONF_FILES_REPLICATED_AT, String.valueOf(replicationTime));\n        if (props.containsKey(TIMES_CONFIG_REPLICATED)) {\n          confFilesCount = Integer.valueOf(props.getProperty(TIMES_CONFIG_REPLICATED)) + 1;\n        }\n        props.setProperty(TIMES_CONFIG_REPLICATED, String.valueOf(confFilesCount));\n      }\n\n      props.setProperty(LAST_CYCLE_BYTES_DOWNLOADED, String.valueOf(getTotalBytesDownloaded(this)));\n      if (!successfulInstall) {\n        int numFailures = 1;\n        if (props.containsKey(TIMES_FAILED)) {\n          numFailures = Integer.valueOf(props.getProperty(TIMES_FAILED)) + 1;\n        }\n        props.setProperty(TIMES_FAILED, String.valueOf(numFailures));\n        props.setProperty(REPLICATION_FAILED_AT, String.valueOf(replicationTime));\n        sb = readToStringBuffer(replicationTime, props.getProperty(REPLICATION_FAILED_AT_LIST));\n        props.setProperty(REPLICATION_FAILED_AT_LIST, sb.toString());\n      }\n      File f = new File(solrCore.getDataDir(), REPLICATION_PROPERTIES);\n      outFile = new FileOutputStream(f);\n      props.store(outFile, \"Replication details\");\n      outFile.close();\n    } catch (Exception e) {\n      LOG.warn(\"Exception while updating statistics\", e);\n    }\n    finally {\n      IOUtils.closeQuietly(outFile);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4f1a1d7f1604a41328b566b1be0c5ad6038117e8"],"4f1a1d7f1604a41328b566b1be0c5ad6038117e8":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}