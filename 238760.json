{"path":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","commits":[{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"/dev/null","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[BYTE_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    return c;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cb32d170321240dece082a7706be297fbb09adf9","date":1199699286,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[BYTE_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be","date":1204801324,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5350389bf83287111f7760b9e3db3af8e3648474","date":1216372812,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      balanceRAM();\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"60cdc0e643184821eb066795a8791cd82559f46e","date":1257941914,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = (char[]) freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","pathOld":"src/java/org/apache/lucene/index/DocumentsWriter#getCharBlock().mjava","sourceNew":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","sourceOld":"  /* Allocate another char[] from the shared pool */\n  synchronized char[] getCharBlock() {\n    final int size = freeCharBlocks.size();\n    final char[] c;\n    if (0 == size) {\n      numBytesAlloc += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n      c = new char[CHAR_BLOCK_SIZE];\n    } else\n      c = freeCharBlocks.remove(size-1);\n    // We always track allocations of char blocks, for now,\n    // because nothing that skips allocation tracking\n    // (currently only term vectors) uses its own char\n    // blocks.\n    numBytesUsed += CHAR_BLOCK_SIZE * CHAR_NUM_BYTE;\n    assert numBytesUsed <= numBytesAlloc;\n    return c;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"60cdc0e643184821eb066795a8791cd82559f46e":["5350389bf83287111f7760b9e3db3af8e3648474"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["cb32d170321240dece082a7706be297fbb09adf9"],"cb32d170321240dece082a7706be297fbb09adf9":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"5350389bf83287111f7760b9e3db3af8e3648474":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["60cdc0e643184821eb066795a8791cd82559f46e"]},"commit2Childs":{"60cdc0e643184821eb066795a8791cd82559f46e":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be":["5350389bf83287111f7760b9e3db3af8e3648474"],"cb32d170321240dece082a7706be297fbb09adf9":["a2fc4b864a5dc2c630bb1fa94091e89e69f8f8be"],"5350389bf83287111f7760b9e3db3af8e3648474":["60cdc0e643184821eb066795a8791cd82559f46e"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["cb32d170321240dece082a7706be297fbb09adf9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}