{"path":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","commits":[{"id":"d984627825732e682759c22df7a3b171a80f3812","date":1461857653,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"/dev/null","sourceNew":"    /** Translates a condition that may be an AND of other conditions. Gathers\n     * together conditions that apply to the same field. */\n    private String translateAnd(RexNode node0) {\n      List<String> ands = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(node0)) {\n        ands.add(translateMatch2(node));\n      }\n\n      return String.join(\" AND \", ands);\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90","date":1461958396,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> ands = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(node0)) {\n        ands.add(translateMatch2(node));\n      }\n\n      return String.join(\" AND \", ands);\n    }\n\n","sourceOld":"    /** Translates a condition that may be an AND of other conditions. Gathers\n     * together conditions that apply to the same field. */\n    private String translateAnd(RexNode node0) {\n      List<String> ands = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(node0)) {\n        ands.add(translateMatch2(node));\n      }\n\n      return String.join(\" AND \", ands);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for(RexNode node: ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if(nots.size() > 0) {\n        for(RexNode node: nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\"+ andString +\") NOT (\"+notString+\")\";\n      } else {\n        return andString;\n      }\n    }\n\n","sourceOld":"    private String translateAnd(RexNode node0) {\n      List<String> ands = new ArrayList<>();\n      for (RexNode node : RelOptUtil.conjunctions(node0)) {\n        ands.add(translateMatch2(node));\n      }\n\n      return String.join(\" AND \", ands);\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d5cb41f0427fb7a75b0bfefe992561738c11fd80","date":1486576891,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\" + andString + \") NOT (\" + notString + \")\";\n      } else {\n        return andString;\n      }\n    }\n\n","sourceOld":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for(RexNode node: ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if(nots.size() > 0) {\n        for(RexNode node: nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\"+ andString +\") NOT (\"+notString+\")\";\n      } else {\n        return andString;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":0,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"/dev/null","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\" + andString + \") NOT (\" + notString + \")\";\n      } else {\n        return andString;\n      }\n    }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8582f07e9350eaeb33bf6c4617b8c9895d99c839","date":1591307386,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/sql/SolrFilter.Translator#translateAnd(RexNode).mjava","sourceNew":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList<>();\n      List<String> notStrings = new ArrayList<>();\n\n      List<RexNode> ands = new ArrayList<>();\n      List<RexNode> nots = new ArrayList<>();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\" + andString + \") NOT (\" + notString + \")\";\n      } else {\n        return andString;\n      }\n    }\n\n","sourceOld":"    private String translateAnd(RexNode node0) {\n      List<String> andStrings = new ArrayList();\n      List<String> notStrings = new ArrayList();\n\n      List<RexNode> ands = new ArrayList();\n      List<RexNode> nots = new ArrayList();\n      RelOptUtil.decomposeConjunction(node0, ands, nots);\n\n\n      for (RexNode node : ands) {\n        andStrings.add(translateMatch(node));\n      }\n\n      String andString = String.join(\" AND \", andStrings);\n\n      if (nots.size() > 0) {\n        for (RexNode node : nots) {\n          notStrings.add(translateMatch(node));\n        }\n        String notString = String.join(\" NOT \", notStrings);\n        return \"(\" + andString + \") NOT (\" + notString + \")\";\n      } else {\n        return andString;\n      }\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"d984627825732e682759c22df7a3b171a80f3812":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["d984627825732e682759c22df7a3b171a80f3812"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"]},"commit2Childs":{"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["8582f07e9350eaeb33bf6c4617b8c9895d99c839"],"d5cb41f0427fb7a75b0bfefe992561738c11fd80":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["d5cb41f0427fb7a75b0bfefe992561738c11fd80"],"d984627825732e682759c22df7a3b171a80f3812":["c1bfdd692c5b78fe01e8f90339fb1edbcc887a90"],"c1bfdd692c5b78fe01e8f90339fb1edbcc887a90":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa","d984627825732e682759c22df7a3b171a80f3812"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"8582f07e9350eaeb33bf6c4617b8c9895d99c839":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}