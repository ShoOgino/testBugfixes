{"path":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String,String...).mjava","commits":[{"id":"52c5280f6286c7546ab75b72c663f7bb1dc10e96","date":1427372570,"type":1,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String,String...).mjava","pathOld":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String...).mjava","sourceNew":"  public void doFacetPrefix(String f, String local, String termSuffix, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[3][@name='B\"+termSuffix+\"'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B\"+termSuffix+\"'][.='1']\"\n            ,pre+\"/int[2][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[3][@name='BBB\"+termSuffix+\"'][.='3']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[2][@name='B\"+termSuffix+\"'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='CC\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='CC\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":"  public void doFacetPrefix(String f, String local, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String notc = \"id:[* TO *] -\"+f+\":C\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB'][.='3']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n     assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B'][.='1']\"\n            ,pre+\"/int[2][@name='BB'][.='2']\"\n            ,pre+\"/int[3][@name='BBB'][.='3']\"\n    );\n\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n            ,pre+\"/int[2][@name='B'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC'][.='3']\"\n            ,pre+\"/int[2][@name='CC'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":0,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/request/SimpleFacetsTest#doFacetPrefix(String,String,String,String...).mjava","pathOld":"/dev/null","sourceNew":"  public void doFacetPrefix(String f, String local, String termSuffix, String... params) {\n    String indent=\"on\";\n    String pre = \"//lst[@name='\"+f+\"']\";\n    String lf = local==null ? f : local+f;\n\n\n    assertQ(\"test facet.prefix middle, exact match first term\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='BBB\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[3][@name='B\"+termSuffix+\"'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, exact match first term, unsorted\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"index\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=3]\"\n            ,pre+\"/int[1][@name='B\"+termSuffix+\"'][.='1']\"\n            ,pre+\"/int[2][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[3][@name='BBB\"+termSuffix+\"'][.='3']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n            ,pre+\"/int[2][@name='B\"+termSuffix+\"'][.='1']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix middle, paging\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"B\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='BB\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"C\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='CC\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix end, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=2]\"\n            ,pre+\"/int[1][@name='CCC\"+termSuffix+\"'][.='3']\"\n            ,pre+\"/int[2][@name='CC\"+termSuffix+\"'][.='2']\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix past end\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"1\"\n                    ,\"facet.limit\",\"-1\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"X\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix at start, exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AAA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );\n    assertQ(\"test facet.prefix at Start, not exact match\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"AA\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=1]\"\n            ,pre+\"/int[1][@name='AAA\"+termSuffix+\"'][.='1']\"\n    );    \n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"0\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    assertQ(\"test facet.prefix before start\",\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"0\"\n                    ,\"facet.offset\",\"2\"\n                    ,\"facet.limit\",\"100\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"999\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n\n    // test offset beyond what is collected internally in queue\n    assertQ(\n            req(params, \"q\", \"id:[* TO *]\"\n                    ,\"indent\",indent\n                    ,\"facet\",\"true\"\n                    ,\"facet.field\", lf\n                    ,\"facet.mincount\",\"3\"\n                    ,\"facet.offset\",\"5\"\n                    ,\"facet.limit\",\"10\"\n                    ,\"facet.sort\",\"count\"\n                    ,\"facet.prefix\",\"CC\"\n            )\n            ,\"*[count(//lst[@name='facet_fields']/lst/int)=0]\"\n    );\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["52c5280f6286c7546ab75b72c663f7bb1dc10e96"]},"commit2Childs":{"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"52c5280f6286c7546ab75b72c663f7bb1dc10e96":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","52c5280f6286c7546ab75b72c663f7bb1dc10e96"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}