{"path":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldLazy(IndexInput,FieldInfo,boolean,boolean,int).mjava","commits":[{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldLazy(IndexInput,FieldInfo,boolean,boolean,int).mjava","pathOld":"/dev/null","sourceNew":"  private void addFieldLazy(IndexInput in, FieldInfo fi, boolean binary, boolean cacheResult, int numBytes) throws IOException {\n    final IndexableField f;\n    final long pointer = in.getFilePointer();\n    // Need to move the pointer ahead by toRead positions\n    in.seek(pointer+numBytes);\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.setOmitNorms(fi.omitNorms);\n    ft.setIndexOptions(fi.indexOptions);\n    ft.setLazy(true);\n    \n    if (binary) {\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    } else {\n      ft.setStoreTermVectors(fi.storeTermVector);\n      ft.setStoreTermVectorOffsets(fi.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fi.storePositionWithTermVector);\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    }\n    \n    doc.add(f);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46512daf6ac1e4e32fde76609a8009353226427a","date":1314716714,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldLazy(IndexInput,FieldInfo,boolean,boolean,int).mjava","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldLazy(IndexInput,FieldInfo,boolean,boolean,int).mjava","sourceNew":"  private void addFieldLazy(IndexInput in, FieldInfo fi, boolean binary, boolean cacheResult, int numBytes) throws IOException {\n    final IndexableField f;\n    final long pointer = in.getFilePointer();\n    // Need to move the pointer ahead by toRead positions\n    in.seek(pointer+numBytes);\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.setOmitNorms(fi.omitNorms);\n    ft.setIndexOptions(fi.indexOptions);\n    \n    if (binary) {\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    } else {\n      ft.setStoreTermVectors(fi.storeTermVector);\n      ft.setStoreTermVectorOffsets(fi.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fi.storePositionWithTermVector);\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    }\n    \n    doc.add(f);\n  }\n\n","sourceOld":"  private void addFieldLazy(IndexInput in, FieldInfo fi, boolean binary, boolean cacheResult, int numBytes) throws IOException {\n    final IndexableField f;\n    final long pointer = in.getFilePointer();\n    // Need to move the pointer ahead by toRead positions\n    in.seek(pointer+numBytes);\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.setOmitNorms(fi.omitNorms);\n    ft.setIndexOptions(fi.indexOptions);\n    ft.setLazy(true);\n    \n    if (binary) {\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    } else {\n      ft.setStoreTermVectors(fi.storeTermVector);\n      ft.setStoreTermVectorOffsets(fi.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fi.storePositionWithTermVector);\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    }\n    \n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06584e6e98d592b34e1329b384182f368d2025e8","date":1320850353,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/misc/src/java/org/apache/lucene/document/FieldSelectorVisitor#addFieldLazy(IndexInput,FieldInfo,boolean,boolean,int).mjava","sourceNew":null,"sourceOld":"  private void addFieldLazy(IndexInput in, FieldInfo fi, boolean binary, boolean cacheResult, int numBytes) throws IOException {\n    final IndexableField f;\n    final long pointer = in.getFilePointer();\n    // Need to move the pointer ahead by toRead positions\n    in.seek(pointer+numBytes);\n    FieldType ft = new FieldType();\n    ft.setStored(true);\n    ft.setOmitNorms(fi.omitNorms);\n    ft.setIndexOptions(fi.indexOptions);\n    \n    if (binary) {\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    } else {\n      ft.setStoreTermVectors(fi.storeTermVector);\n      ft.setStoreTermVectorOffsets(fi.storeOffsetWithTermVector);\n      ft.setStoreTermVectorPositions(fi.storePositionWithTermVector);\n      f = new LazyField(in, fi.name, ft, numBytes, pointer, binary, cacheResult);\n    }\n    \n    doc.add(f);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"06584e6e98d592b34e1329b384182f368d2025e8":["46512daf6ac1e4e32fde76609a8009353226427a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"46512daf6ac1e4e32fde76609a8009353226427a":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06584e6e98d592b34e1329b384182f368d2025e8"]},"commit2Childs":{"06584e6e98d592b34e1329b384182f368d2025e8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["46512daf6ac1e4e32fde76609a8009353226427a"],"46512daf6ac1e4e32fde76609a8009353226427a":["06584e6e98d592b34e1329b384182f368d2025e8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}