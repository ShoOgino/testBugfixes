{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testExplainMapResponse().mjava","commits":[{"id":"616a045c7a4c521496783e11c1ac38fea9b3cae5","date":1576007057,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testExplainMapResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExplainMapResponse() throws IOException {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleDebugResponse.xml\")) {\n          assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n          response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n\n    Map<String, Object> explainMap = qr.getExplainMap();\n    assertNotNull(explainMap);\n    assertEquals(2, explainMap.size());\n    Object[] values = explainMap.values().toArray();\n    assertTrue(values[0] instanceof SimpleOrderedMap);\n    assertTrue(values[1] instanceof SimpleOrderedMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a229cb50768e988c50a2106bdae3a92154f428bf","date":1576051038,"type":0,"author":"Dawid Weiss","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/response/QueryResponseTest#testExplainMapResponse().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testExplainMapResponse() throws IOException {\n    XMLResponseParser parser = new XMLResponseParser();\n    NamedList<Object> response;\n\n    try (SolrResourceLoader loader = new SolrResourceLoader();\n         InputStream is = loader.openResource(\"solrj/sampleDebugResponse.xml\")) {\n          assertNotNull(is);\n      try (Reader in = new InputStreamReader(is, StandardCharsets.UTF_8)) {\n          response = parser.processResponse(in);\n      }\n    }\n\n    QueryResponse qr = new QueryResponse(response, null);\n    assertNotNull(qr);\n\n    Map<String, Object> explainMap = qr.getExplainMap();\n    assertNotNull(explainMap);\n    assertEquals(2, explainMap.size());\n    Object[] values = explainMap.values().toArray();\n    assertTrue(values[0] instanceof SimpleOrderedMap);\n    assertTrue(values[1] instanceof SimpleOrderedMap);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a229cb50768e988c50a2106bdae3a92154f428bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","616a045c7a4c521496783e11c1ac38fea9b3cae5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["616a045c7a4c521496783e11c1ac38fea9b3cae5"],"616a045c7a4c521496783e11c1ac38fea9b3cae5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a229cb50768e988c50a2106bdae3a92154f428bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a229cb50768e988c50a2106bdae3a92154f428bf","616a045c7a4c521496783e11c1ac38fea9b3cae5"],"616a045c7a4c521496783e11c1ac38fea9b3cae5":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a229cb50768e988c50a2106bdae3a92154f428bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}