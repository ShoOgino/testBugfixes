{"path":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyOlderUpdates(SolrDocumentBase,SolrInputDocument,Set[String]).mjava","commits":[{"id":"415bbbe7da8065dd3c477bdc3c703c6425622998","date":1485393793,"type":0,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyOlderUpdates(SolrDocumentBase,SolrInputDocument,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add all fields from olderDoc into newerDoc if not already present in newerDoc\n   */\n  private void applyOlderUpdates(SolrDocumentBase newerDoc, SolrInputDocument olderDoc, Set<String> mergeFields) {\n    for (String fieldName : olderDoc.getFieldNames()) {\n      // if the newerDoc has this field, then this field from olderDoc can be ignored\n      if (!newerDoc.containsKey(fieldName) && (mergeFields == null || mergeFields.contains(fieldName))) {\n        for (Object val : olderDoc.getFieldValues(fieldName)) {\n          newerDoc.addField(fieldName, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"598b5d23aa7c9732bf473c21a9cd309c44599394","date":1485530378,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyOlderUpdates(SolrDocumentBase,SolrInputDocument,Set[String]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Add all fields from olderDoc into newerDoc if not already present in newerDoc\n   */\n  private void applyOlderUpdates(SolrDocumentBase newerDoc, SolrInputDocument olderDoc, Set<String> mergeFields) {\n    for (String fieldName : olderDoc.getFieldNames()) {\n      // if the newerDoc has this field, then this field from olderDoc can be ignored\n      if (!newerDoc.containsKey(fieldName) && (mergeFields == null || mergeFields.contains(fieldName))) {\n        for (Object val : olderDoc.getFieldValues(fieldName)) {\n          newerDoc.addField(fieldName, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"018a36ff4088cb91ab12cbe44f696d81d1fadd77","date":1591657414,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyOlderUpdates(SolrDocumentBase,SolrInputDocument,Set[String]).mjava","pathOld":"solr/core/src/java/org/apache/solr/update/UpdateLog#applyOlderUpdates(SolrDocumentBase,SolrInputDocument,Set[String]).mjava","sourceNew":"  /**\n   * Add all fields from olderDoc into newerDoc if not already present in newerDoc\n   */\n  private void applyOlderUpdates(@SuppressWarnings({\"rawtypes\"})SolrDocumentBase newerDoc, SolrInputDocument olderDoc, Set<String> mergeFields) {\n    for (String fieldName : olderDoc.getFieldNames()) {\n      // if the newerDoc has this field, then this field from olderDoc can be ignored\n      if (!newerDoc.containsKey(fieldName) && (mergeFields == null || mergeFields.contains(fieldName))) {\n        for (Object val : olderDoc.getFieldValues(fieldName)) {\n          newerDoc.addField(fieldName, val);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  /**\n   * Add all fields from olderDoc into newerDoc if not already present in newerDoc\n   */\n  private void applyOlderUpdates(SolrDocumentBase newerDoc, SolrInputDocument olderDoc, Set<String> mergeFields) {\n    for (String fieldName : olderDoc.getFieldNames()) {\n      // if the newerDoc has this field, then this field from olderDoc can be ignored\n      if (!newerDoc.containsKey(fieldName) && (mergeFields == null || mergeFields.contains(fieldName))) {\n        for (Object val : olderDoc.getFieldValues(fieldName)) {\n          newerDoc.addField(fieldName, val);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"598b5d23aa7c9732bf473c21a9cd309c44599394":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","415bbbe7da8065dd3c477bdc3c703c6425622998"],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["415bbbe7da8065dd3c477bdc3c703c6425622998"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["018a36ff4088cb91ab12cbe44f696d81d1fadd77"]},"commit2Childs":{"415bbbe7da8065dd3c477bdc3c703c6425622998":["598b5d23aa7c9732bf473c21a9cd309c44599394","018a36ff4088cb91ab12cbe44f696d81d1fadd77"],"598b5d23aa7c9732bf473c21a9cd309c44599394":[],"018a36ff4088cb91ab12cbe44f696d81d1fadd77":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["415bbbe7da8065dd3c477bdc3c703c6425622998","598b5d23aa7c9732bf473c21a9cd309c44599394"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["598b5d23aa7c9732bf473c21a9cd309c44599394","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}