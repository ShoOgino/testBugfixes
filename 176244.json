{"path":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","commits":[{"id":"36479872320bb00635cb97ca6757614c88562e1b","date":1444426483,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"/dev/null","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3ec71d4701edbd96cfea97384101d13611393552","date":1444686705,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"sql\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","date":1452631653,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ea75dee47a56cd5d6997df5198d96cdba08574","date":1461870891,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99c8e9b44b0cdc8162d6e058914bac3148e80da9","date":1461873164,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      /*\n      // TODO figure out what should be sort asc by default (version?)\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n      */\n\n      // Test with a predicate.\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"908656025e558a536b1b781cf8d02a84e7acb262","date":1461964320,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      /*\n      // TODO figure out what should be sort asc by default (version?)\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n      */\n\n      // Test with a predicate.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      /*\n      // TODO figure out what should be sort asc by default (version?)\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n      */\n\n      // Test with a predicate.\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","date":1462373155,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      /*\n      // TODO figure out what should be sort asc by default (version?)\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n      */\n\n      // Test with a predicate.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"826d15444ddf61716dc768c229cd54b2c2ccce1c","date":1462822652,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e66a459d38c1c4a2f97128433dab546f683a9fed","date":1462873476,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      Map params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, params);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      params = new HashMap();\n      params.put(CommonParams.QT, \"/sql\");\n      params.put(\"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, params);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"612da0a0a2d5f4409da55729b9833e799f905ac5","date":1479142562,"type":3,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"36b1ce25b5b465615c00f409ce694664abbe7bd2","date":1481836328,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      System.out.println(\"##################### testSelectDistinct()\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3f20deebda1cf327549c84cb60464135abd31c71","date":1487004368,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      System.out.println(\"##################### testSelectDistinct()\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n\n      assert(tuples.size() == 6);\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      System.out.println(\"##################### testSelectDistinct()\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"116fdd6b9e04e18a6547a5650bc0afd3fda020aa","date":1487184909,"type":3,"author":"Joel Bernstein","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      System.out.println(\"##################### testSelectDistinct()\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n\n      assert(tuples.size() == 6);\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n      \n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct 'str_s', 'field_i' from collection1 order by 'str_s' asc, 'field_i' asc\");\n\n      SolrStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      Tuple tuple = null;\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n\n      sParams = mapParams(CommonParams.QT, \"/sql\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c58a62203315881cce5089ef67ffee6b8a988a75","date":1544601986,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    System.out.println(\"##################### testSelectDistinct()\");\n\n    TupleStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n    try {\n\n      CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n      del(\"*:*\");\n\n      commit();\n\n      indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n      indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n      indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n      indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n      indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n      indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n      commit();\n\n      SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n      System.out.println(\"##################### testSelectDistinct()\");\n\n      TupleStream solrStream = new SolrStream(jetty.url, sParams);\n      List<Tuple> tuples = getTuples(solrStream);\n\n\n      assert(tuples.size() == 6);\n      Tuple tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n\n      //reverse the sort\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"myString\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"myString\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"myString\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n\n      //test with limit\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n\n      // Test without a sort. Sort should be asc by default.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 6);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n\n      tuple = tuples.get(2);\n      assert(tuple.get(\"str_s\").equals(\"b\"));\n      assert(tuple.getLong(\"field_i\") == 2);\n\n      tuple = tuples.get(3);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 30);\n\n      tuple = tuples.get(4);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 50);\n\n      tuple = tuples.get(5);\n      assert(tuple.get(\"str_s\").equals(\"c\"));\n      assert(tuple.getLong(\"field_i\") == 60);\n\n      // Test with a predicate.\n      sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n          \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n      solrStream = new SolrStream(jetty.url, sParams);\n      tuples = getTuples(solrStream);\n\n      assert(tuples.size() == 2);\n\n      tuple = tuples.get(0);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 1);\n\n      tuple = tuples.get(1);\n      assert(tuple.get(\"str_s\").equals(\"a\"));\n      assert(tuple.getLong(\"field_i\") == 20);\n    } finally {\n      delete();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"600937be95b5a041815220371fa7882e73031d56","date":1551734162,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  private void testSelectDistinct() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    System.out.println(\"##################### testSelectDistinct()\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n\n    CloudJettyRunner jetty = this.cloudJettys.get(0);\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    System.out.println(\"##################### testSelectDistinct()\");\n\n    TupleStream solrStream = new SolrStream(jetty.url, sParams);\n    List<Tuple> tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    solrStream = new SolrStream(jetty.url, sParams);\n    tuples = getTuples(solrStream);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"22191e72f6c40dec88c9b94f9bb55c7527772a47","date":1553715407,"type":5,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","sourceNew":"  @Test\n  public void testSelectDistinct() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","sourceOld":"  private void testSelectDistinct() throws Exception {\n\n    del(\"*:*\");\n\n    commit();\n\n    indexr(\"id\", \"1\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\");\n    indexr(\"id\", \"2\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"3\", \"text\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\");\n    indexr(\"id\", \"4\", \"text\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\");\n    indexr(\"id\", \"5\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"6\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\");\n    indexr(\"id\", \"7\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\");\n    indexr(\"id\", \"8\", \"text\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\");\n    commit();\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    System.out.println(\"##################### testSelectDistinct()\");\n\n    List<Tuple> tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    tuples = getTuples(sParams);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"94e31112925a65b1d36f9064772080e25b5ef373","date":1553715407,"type":1,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler#testSelectDistinct().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestSQLHandler2[TestSQLHandler]#testSelectDistinct().mjava","sourceNew":"  @Test\n  public void testSelectDistinct() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","sourceOld":"  @Test\n  public void testSelectDistinct() throws Exception {\n\n    new UpdateRequest()\n        .add(\"id\", \"1\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"1\")\n        .add(\"id\", \"2\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"3\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"a\", \"field_i\", \"20\")\n        .add(\"id\", \"4\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"b\", \"field_i\", \"2\")\n        .add(\"id\", \"5\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"6\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"30\")\n        .add(\"id\", \"7\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"50\")\n        .add(\"id\", \"8\", \"text_t\", \"XXXX XXXX\", \"str_s\", \"c\", \"field_i\", \"60\")\n        .commit(cluster.getSolrClient(), COLLECTIONORALIAS);\n\n    String baseUrl = cluster.getJettySolrRunners().get(0).getBaseUrl().toString()+\"/\"+COLLECTIONORALIAS;\n\n    SolrParams sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s asc, field_i asc\");\n\n    List<Tuple> tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n    Tuple tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // reverse the sort\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s as myString, field_i from collection1 order by myString desc, field_i desc\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"myString\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"myString\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"myString\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    // test with limit\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 order by str_s desc, field_i desc limit 2\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    // Test without a sort. Sort should be asc by default.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 6);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n    tuple = tuples.get(2);\n    assert (tuple.get(\"str_s\").equals(\"b\"));\n    assert (tuple.getLong(\"field_i\") == 2);\n\n    tuple = tuples.get(3);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 30);\n\n    tuple = tuples.get(4);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 50);\n\n    tuple = tuples.get(5);\n    assert (tuple.get(\"str_s\").equals(\"c\"));\n    assert (tuple.getLong(\"field_i\") == 60);\n\n    // Test with a predicate.\n    sParams = mapParams(CommonParams.QT, \"/sql\", \"aggregationMode\", \"map_reduce\",\n        \"stmt\", \"select distinct str_s, field_i from collection1 where str_s = 'a'\");\n\n    tuples = getTuples(sParams, baseUrl);\n\n    assert (tuples.size() == 2);\n\n    tuple = tuples.get(0);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 1);\n\n    tuple = tuples.get(1);\n    assert (tuple.get(\"str_s\").equals(\"a\"));\n    assert (tuple.getLong(\"field_i\") == 20);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["600937be95b5a041815220371fa7882e73031d56"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["3ec71d4701edbd96cfea97384101d13611393552"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["908656025e558a536b1b781cf8d02a84e7acb262"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["29ea75dee47a56cd5d6997df5198d96cdba08574"],"3ec71d4701edbd96cfea97384101d13611393552":["36479872320bb00635cb97ca6757614c88562e1b"],"36479872320bb00635cb97ca6757614c88562e1b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"908656025e558a536b1b781cf8d02a84e7acb262":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"600937be95b5a041815220371fa7882e73031d56":["c58a62203315881cce5089ef67ffee6b8a988a75"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["d470c8182e92b264680e34081b75e70a9f2b3c89","3f20deebda1cf327549c84cb60464135abd31c71"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c58a62203315881cce5089ef67ffee6b8a988a75":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"3f20deebda1cf327549c84cb60464135abd31c71":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"e66a459d38c1c4a2f97128433dab546f683a9fed":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7","826d15444ddf61716dc768c229cd54b2c2ccce1c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["94e31112925a65b1d36f9064772080e25b5ef373"],"94e31112925a65b1d36f9064772080e25b5ef373":["22191e72f6c40dec88c9b94f9bb55c7527772a47"]},"commit2Childs":{"22191e72f6c40dec88c9b94f9bb55c7527772a47":["94e31112925a65b1d36f9064772080e25b5ef373"],"612da0a0a2d5f4409da55729b9833e799f905ac5":["36b1ce25b5b465615c00f409ce694664abbe7bd2"],"36b1ce25b5b465615c00f409ce694664abbe7bd2":["3f20deebda1cf327549c84cb60464135abd31c71"],"29ea75dee47a56cd5d6997df5198d96cdba08574":["99c8e9b44b0cdc8162d6e058914bac3148e80da9"],"5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7":["29ea75dee47a56cd5d6997df5198d96cdba08574","826d15444ddf61716dc768c229cd54b2c2ccce1c","d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["612da0a0a2d5f4409da55729b9833e799f905ac5"],"826d15444ddf61716dc768c229cd54b2c2ccce1c":["d470c8182e92b264680e34081b75e70a9f2b3c89","e66a459d38c1c4a2f97128433dab546f683a9fed"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"99c8e9b44b0cdc8162d6e058914bac3148e80da9":["908656025e558a536b1b781cf8d02a84e7acb262"],"3ec71d4701edbd96cfea97384101d13611393552":["5f90f992f4e4fdedb0fe0cc2fe3925df71a5b9f7"],"908656025e558a536b1b781cf8d02a84e7acb262":["724e3cf71b4c55b1c634bb1d76caaa0d9daf26ef"],"36479872320bb00635cb97ca6757614c88562e1b":["3ec71d4701edbd96cfea97384101d13611393552"],"600937be95b5a041815220371fa7882e73031d56":["22191e72f6c40dec88c9b94f9bb55c7527772a47"],"116fdd6b9e04e18a6547a5650bc0afd3fda020aa":["c58a62203315881cce5089ef67ffee6b8a988a75"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36479872320bb00635cb97ca6757614c88562e1b"],"c58a62203315881cce5089ef67ffee6b8a988a75":["600937be95b5a041815220371fa7882e73031d56"],"3f20deebda1cf327549c84cb60464135abd31c71":["116fdd6b9e04e18a6547a5650bc0afd3fda020aa"],"e66a459d38c1c4a2f97128433dab546f683a9fed":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"94e31112925a65b1d36f9064772080e25b5ef373":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e66a459d38c1c4a2f97128433dab546f683a9fed","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}