{"path":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(MergeState,boolean).mjava","commits":[{"id":"55eeb2534cd53d2a985669829df942468ebf5314","date":1354409119,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(MergeState,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(MergeState).mjava","sourceNew":"  // nocommit bogus forceNorms:\n  // dead simple impl: codec can optimize\n  protected void mergeNumericField(MergeState mergeState, boolean forceNorms) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      //System.out.println(\"merge field=\" + mergeState.fieldInfo.name);\n      NumericDocValues docValues = forceNorms ? reader.simpleNormValues(mergeState.fieldInfo.name) : reader.getNumericDocValues(mergeState.fieldInfo.name);\n      if (docValues == null) {\n        // nocommit this isn't correct i think?  ie this one\n        // segment may have no docs containing this\n        // field... and that doesn't mean norms are omitted ...\n        //assert !forceNorms;\n        docValues = new NumericDocValues.EMPTY(maxDoc);\n      }\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = docValues.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(mergeState.fieldInfo, minValue, maxValue);\n    field.merge(mergeState, forceNorms);\n  }\n\n","sourceOld":"  // dead simple impl: codec can optimize\n  protected void mergeNumericField(MergeState mergeState) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      //System.out.println(\"merge field=\" + mergeState.fieldInfo.name);\n      NumericDocValues docValues = reader.getNumericDocValues(mergeState.fieldInfo.name);\n      if (docValues == null) {\n        docValues = new NumericDocValues.EMPTY(maxDoc);\n      }\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = docValues.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(mergeState.fieldInfo, minValue, maxValue);\n    field.merge(mergeState);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b53a9a930ee01857178a1b512fbab24642f3fa8","date":1354471097,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(FieldInfo,MergeState,List[NumericDocValues]).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/SimpleDVConsumer#mergeNumericField(MergeState,boolean).mjava","sourceNew":"  // dead simple impl: codec can optimize\n  public void mergeNumericField(FieldInfo fieldInfo, MergeState mergeState, List<NumericDocValues> toMerge) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (int readerIDX=0;readerIDX<toMerge.size();readerIDX++) {\n      AtomicReader reader = mergeState.readers.get(readerIDX);\n      int maxDoc = reader.maxDoc();\n      Bits liveDocs = reader.getLiveDocs();\n      NumericDocValues values = toMerge.get(readerIDX);\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = values.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(fieldInfo, minValue, maxValue);\n    field.merge(mergeState, toMerge);\n  }\n\n","sourceOld":"  // nocommit bogus forceNorms:\n  // dead simple impl: codec can optimize\n  protected void mergeNumericField(MergeState mergeState, boolean forceNorms) throws IOException {\n    // first compute min and max value of live ones to be merged.\n    long minValue = Long.MAX_VALUE;\n    long maxValue = Long.MIN_VALUE;\n    for (AtomicReader reader : mergeState.readers) {\n      final int maxDoc = reader.maxDoc();\n      final Bits liveDocs = reader.getLiveDocs();\n      //System.out.println(\"merge field=\" + mergeState.fieldInfo.name);\n      NumericDocValues docValues = forceNorms ? reader.simpleNormValues(mergeState.fieldInfo.name) : reader.getNumericDocValues(mergeState.fieldInfo.name);\n      if (docValues == null) {\n        // nocommit this isn't correct i think?  ie this one\n        // segment may have no docs containing this\n        // field... and that doesn't mean norms are omitted ...\n        //assert !forceNorms;\n        docValues = new NumericDocValues.EMPTY(maxDoc);\n      }\n      for (int i = 0; i < maxDoc; i++) {\n        if (liveDocs == null || liveDocs.get(i)) {\n          long val = docValues.get(i);\n          minValue = Math.min(val, minValue);\n          maxValue = Math.max(val, maxValue);\n        }\n        mergeState.checkAbort.work(300);\n      }\n    }\n    // now we can merge\n    NumericDocValuesConsumer field = addNumericField(mergeState.fieldInfo, minValue, maxValue);\n    field.merge(mergeState, forceNorms);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4b53a9a930ee01857178a1b512fbab24642f3fa8":["55eeb2534cd53d2a985669829df942468ebf5314"],"55eeb2534cd53d2a985669829df942468ebf5314":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["55eeb2534cd53d2a985669829df942468ebf5314","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4b53a9a930ee01857178a1b512fbab24642f3fa8":[],"55eeb2534cd53d2a985669829df942468ebf5314":["4b53a9a930ee01857178a1b512fbab24642f3fa8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4b53a9a930ee01857178a1b512fbab24642f3fa8","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}