{"path":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","commits":[{"id":"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37","date":1362545433,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<Object>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,String> arg : args.entrySet()) {\n        String key = arg.getKey();\n        String value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          properties.add(key, StrUtils.parseBool(value, false));\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"08970e5b8411182a29412c177eff67ec1110095b","date":1366640815,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<Object>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<Object>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,String> arg : args.entrySet()) {\n        String key = arg.getKey();\n        String value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          properties.add(key, StrUtils.parseBool(value, false));\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<Object>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a76608e7f735dce831f49f9b0c6bc13f10adc5a6","date":1427421698,"type":3,"author":"David Wayne Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bdac0dff04219451c7511d62225080a93a0181ea","date":1451212020,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c72f74fee61b05f6d94932ae11ec3fbf97243b9f","date":1492549327,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      properties.add(getPropertyName(LARGE_FIELD), isLarge());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54ca69905c5d9d1529286f06ab1d12c68f6c13cb","date":1492683554,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      properties.add(getPropertyName(LARGE_FIELD), isLarge());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e","date":1541777404,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/SchemaField#getNamedPropertyValues(boolean).mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      properties.add(getPropertyName(LARGE_FIELD), isLarge());\n      properties.add(getPropertyName(UNINVERTIBLE), isUninvertible());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for this field.  If showDefaults is true,\n   * include default properties (those inherited from the declared property type and\n   * not overridden in the field declaration).\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues(boolean showDefaults) {\n    SimpleOrderedMap<Object> properties = new SimpleOrderedMap<>();\n    properties.add(FIELD_NAME, getName());\n    properties.add(TYPE_NAME, getType().getTypeName());\n    if (showDefaults) {\n      if (null != getDefaultValue()) {\n        properties.add(DEFAULT_VALUE, getDefaultValue());\n      }\n      properties.add(getPropertyName(INDEXED), indexed());\n      properties.add(getPropertyName(STORED), stored());\n      properties.add(getPropertyName(DOC_VALUES), hasDocValues());\n      properties.add(getPropertyName(STORE_TERMVECTORS), storeTermVector());\n      properties.add(getPropertyName(STORE_TERMPOSITIONS), storeTermPositions());\n      properties.add(getPropertyName(STORE_TERMOFFSETS), storeTermOffsets());\n      properties.add(getPropertyName(STORE_TERMPAYLOADS), storeTermPayloads());\n      properties.add(getPropertyName(OMIT_NORMS), omitNorms());\n      properties.add(getPropertyName(OMIT_TF_POSITIONS), omitTermFreqAndPositions());\n      properties.add(getPropertyName(OMIT_POSITIONS), omitPositions());\n      properties.add(getPropertyName(STORE_OFFSETS), storeOffsetsWithPositions());\n      properties.add(getPropertyName(MULTIVALUED), multiValued());\n      properties.add(getPropertyName(LARGE_FIELD), isLarge());\n      if (sortMissingFirst()) {\n        properties.add(getPropertyName(SORT_MISSING_FIRST), sortMissingFirst());\n      } else if (sortMissingLast()) {\n        properties.add(getPropertyName(SORT_MISSING_LAST), sortMissingLast());\n      }\n      properties.add(getPropertyName(REQUIRED), isRequired());\n      properties.add(getPropertyName(TOKENIZED), isTokenized());\n      properties.add(getPropertyName(USE_DOCVALUES_AS_STORED), useDocValuesAsStored());\n      // The BINARY property is always false\n      // properties.add(getPropertyName(BINARY), isBinary());\n    } else {\n      for (Map.Entry<String,?> arg : args.entrySet()) {\n        String key = arg.getKey();\n        Object value = arg.getValue();\n        if (key.equals(DEFAULT_VALUE)) {\n          properties.add(key, value);\n        } else {\n          boolean boolVal = value instanceof Boolean ? (Boolean)value : Boolean.parseBoolean(value.toString());\n          properties.add(key, boolVal);\n        }\n      }\n    }\n    return properties;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":["bdac0dff04219451c7511d62225080a93a0181ea"],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["08970e5b8411182a29412c177eff67ec1110095b"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"c72f74fee61b05f6d94932ae11ec3fbf97243b9f":["bdac0dff04219451c7511d62225080a93a0181ea"],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bdac0dff04219451c7511d62225080a93a0181ea":["a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["c72f74fee61b05f6d94932ae11ec3fbf97243b9f"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"08970e5b8411182a29412c177eff67ec1110095b":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"]},"commit2Childs":{"54ca69905c5d9d1529286f06ab1d12c68f6c13cb":[],"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"a76608e7f735dce831f49f9b0c6bc13f10adc5a6":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","bdac0dff04219451c7511d62225080a93a0181ea"],"c72f74fee61b05f6d94932ae11ec3fbf97243b9f":["0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["054c04cf724f73ebdd3b16e3a86ce802c0ba5e37"],"bdac0dff04219451c7511d62225080a93a0181ea":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","c72f74fee61b05f6d94932ae11ec3fbf97243b9f"],"054c04cf724f73ebdd3b16e3a86ce802c0ba5e37":["08970e5b8411182a29412c177eff67ec1110095b"],"0d0da5c396448d1d4e5ffbd66baa3df981d3dd5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","a76608e7f735dce831f49f9b0c6bc13f10adc5a6"],"08970e5b8411182a29412c177eff67ec1110095b":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["54ca69905c5d9d1529286f06ab1d12c68f6c13cb","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}