{"path":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","commits":[{"id":"0419348a50da02b5384f4a8510a1b20b80b1c42c","date":1410826889,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","pathOld":"/dev/null","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"81220b46d5c5e6263123603452e529484114fd01","date":1530284828,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/analyzing/TestSuggestStopFilterFactory#testInform().mjava","sourceNew":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(EnglishAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","sourceOld":"  public void testInform() throws Exception {\n    ResourceLoader loader = new ClasspathResourceLoader(getClass());\n    assertTrue(\"loader is null and it shouldn't be\", loader != null);\n    SuggestStopFilterFactory factory = createFactory(\n        \"words\", \"stop-1.txt\",\n        \"ignoreCase\", \"true\");\n    CharArraySet words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 2, words.size() == 2);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-1.txt, stop-2.txt\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertTrue(\"words is null and it shouldn't be\", words != null);\n    assertTrue(\"words Size: \" + words.size() + \" is not: \" + 4, words.size() == 4);\n    assertTrue(factory.isIgnoreCase() + \" does not equal: \" + true, factory.isIgnoreCase() == true);\n\n    factory = createFactory(\"words\", \"stop-snowball.txt\",\n        \"format\", \"snowball\",\n        \"ignoreCase\", \"true\");\n    words = factory.getStopWords();\n    assertEquals(8, words.size());\n    assertTrue(words.contains(\"he\"));\n    assertTrue(words.contains(\"him\"));\n    assertTrue(words.contains(\"his\"));\n    assertTrue(words.contains(\"himself\"));\n    assertTrue(words.contains(\"she\"));\n    assertTrue(words.contains(\"her\"));\n    assertTrue(words.contains(\"hers\"));\n    assertTrue(words.contains(\"herself\"));\n\n    // defaults\n    factory = createFactory();\n    assertEquals(StopAnalyzer.ENGLISH_STOP_WORDS_SET, factory.getStopWords());\n    assertEquals(false, factory.isIgnoreCase());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["0419348a50da02b5384f4a8510a1b20b80b1c42c","81220b46d5c5e6263123603452e529484114fd01"],"81220b46d5c5e6263123603452e529484114fd01":["0419348a50da02b5384f4a8510a1b20b80b1c42c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"0419348a50da02b5384f4a8510a1b20b80b1c42c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["81220b46d5c5e6263123603452e529484114fd01"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["0419348a50da02b5384f4a8510a1b20b80b1c42c","81220b46d5c5e6263123603452e529484114fd01"]},"commit2Childs":{"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"81220b46d5c5e6263123603452e529484114fd01":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0419348a50da02b5384f4a8510a1b20b80b1c42c"],"0419348a50da02b5384f4a8510a1b20b80b1c42c":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","81220b46d5c5e6263123603452e529484114fd01","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}