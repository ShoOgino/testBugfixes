{"path":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","commits":[{"id":"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","date":1330500722,"type":0,"author":"Ryan McKinley","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"/dev/null","sourceNew":"  protected void queryPartialResults(final List<String> upShards, List<SolrServer> upClients, Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["b901ee313d0407b4f51858260654828f76a64e02"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":0,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"/dev/null","sourceNew":"  protected void queryPartialResults(final List<String> upShards, List<SolrServer> upClients, Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b901ee313d0407b4f51858260654828f76a64e02","date":1334008154,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, List<SolrServer> upClients, Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"bugIntro":["0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5a238fc456663f685a9db1ed8d680e348bb45171","date":1334173266,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, List<SolrServer> upClients, Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(clients.size());\n              SolrServer client = clients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","date":1376375609,"type":3,"author":"Han Jiang","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe","date":1385910402,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":["b901ee313d0407b4f51858260654828f76a64e02"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards, \n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"27a378e6b8e355f1bfb7240ecf1e8749ca1c8574","date":1392701502,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    // if time.allowed is specified then even a control response can return a partialResults header\n    if (params.get(CommonParams.TIME_ALLOWED) == null)  {\n      validateControlData(controlRsp);\n    }\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    validateControlData(controlRsp);\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":5,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrClient],Object...).mjava","pathOld":"solr/core/src/test/org/apache/solr/TestDistributedSearch#queryPartialResults(List[String],List[SolrServer],Object...).mjava","sourceNew":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrClient> upClients,\n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    // if time.allowed is specified then even a control response can return a partialResults header\n    if (params.get(CommonParams.TIME_ALLOWED) == null)  {\n      validateControlData(controlRsp);\n    }\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrClient client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","sourceOld":"  protected void queryPartialResults(final List<String> upShards,\n                                     final List<SolrServer> upClients, \n                                     Object... q) throws Exception {\n    \n    final ModifiableSolrParams params = new ModifiableSolrParams();\n\n    for (int i = 0; i < q.length; i += 2) {\n      params.add(q[i].toString(), q[i + 1].toString());\n    }\n    // TODO: look into why passing true causes fails\n    params.set(\"distrib\", \"false\");\n    final QueryResponse controlRsp = controlClient.query(params);\n    // if time.allowed is specified then even a control response can return a partialResults header\n    if (params.get(CommonParams.TIME_ALLOWED) == null)  {\n      validateControlData(controlRsp);\n    }\n\n    params.remove(\"distrib\");\n    setDistributedParams(params);\n\n    QueryResponse rsp = queryRandomUpServer(params,upClients);\n\n    comparePartialResponses(rsp, controlRsp, upShards);\n\n    if (stress > 0) {\n      log.info(\"starting stress...\");\n      Thread[] threads = new Thread[nThreads];\n      for (int i = 0; i < threads.length; i++) {\n        threads[i] = new Thread() {\n          @Override\n          public void run() {\n            for (int j = 0; j < stress; j++) {\n              int which = r.nextInt(upClients.size());\n              SolrServer client = upClients.get(which);\n              try {\n                QueryResponse rsp = client.query(new ModifiableSolrParams(params));\n                if (verifyStress) {\n                  comparePartialResponses(rsp, controlRsp, upShards);\n                }\n              } catch (SolrServerException e) {\n                throw new RuntimeException(e);\n              }\n            }\n          }\n        };\n        threads[i].start();\n      }\n\n      for (Thread thread : threads) {\n        thread.join();\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe":["19275ba31e621f6da1b83bf13af75233876fd3d4"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":["b901ee313d0407b4f51858260654828f76a64e02","19275ba31e621f6da1b83bf13af75233876fd3d4"],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5a238fc456663f685a9db1ed8d680e348bb45171":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","b901ee313d0407b4f51858260654828f76a64e02"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b901ee313d0407b4f51858260654828f76a64e02":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["19275ba31e621f6da1b83bf13af75233876fd3d4","0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe"],"bafca15d8e408346a67f4282ad1143b88023893b":["27a378e6b8e355f1bfb7240ecf1e8749ca1c8574"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["b901ee313d0407b4f51858260654828f76a64e02"],"27a378e6b8e355f1bfb7240ecf1e8749ca1c8574":["0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["bafca15d8e408346a67f4282ad1143b88023893b"]},"commit2Childs":{"0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","27a378e6b8e355f1bfb7240ecf1e8749ca1c8574"],"716d18f3a9b0993bc679d7fa7abdc9bfb03411ec":[],"e6dd476b943b132ecfa6b3ffc72e439eb2d9e061":["5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","b901ee313d0407b4f51858260654828f76a64e02"],"5a238fc456663f685a9db1ed8d680e348bb45171":[],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e6dd476b943b132ecfa6b3ffc72e439eb2d9e061","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab"],"b901ee313d0407b4f51858260654828f76a64e02":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5a238fc456663f685a9db1ed8d680e348bb45171","19275ba31e621f6da1b83bf13af75233876fd3d4"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"19275ba31e621f6da1b83bf13af75233876fd3d4":["0d9835c6ddd23dd02eefd5adfc0e5d1e89075fbe","716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"bafca15d8e408346a67f4282ad1143b88023893b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"27a378e6b8e355f1bfb7240ecf1e8749ca1c8574":["bafca15d8e408346a67f4282ad1143b88023893b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["716d18f3a9b0993bc679d7fa7abdc9bfb03411ec","5a238fc456663f685a9db1ed8d680e348bb45171","9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}