{"path":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"629c38c4ae4e303d0617e05fbfe508140b32f0a3","date":1334500904,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random, new RAMDirectory(dir, newIOContext(random)));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"19275ba31e621f6da1b83bf13af75233876fd3d4","date":1374846698,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","date":1376366778,"type":3,"author":"Han Jiang","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"302be0cc5e6a28ebcebcac98aa81a92be2e94370","date":1423848654,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), new RAMDirectory(dir, newIOContext(random())));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4208ed8e426ae5f75a41d8b4ae53f4587e413061","date":1580475454,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestAddIndexes.RunAddIndexesThreads#launchThreads(int).mjava","sourceNew":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<threads.length;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for (Thread thread : threads) {\n        thread.start();\n      }\n    }\n\n","sourceOld":"    void launchThreads(final int numIter) {\n\n      for(int i=0;i<NUM_THREADS;i++) {\n        threads[i] = new Thread() {\n            @Override\n            public void run() {\n              try {\n\n                final Directory[] dirs = new Directory[NUM_COPY];\n                for(int k=0;k<NUM_COPY;k++)\n                  dirs[k] = new MockDirectoryWrapper(random(), TestUtil.ramCopyOf(dir));\n\n                int j=0;\n\n                while(true) {\n                  // System.out.println(Thread.currentThread().getName() + \": iter j=\" + j);\n                  if (numIter > 0 && j == numIter)\n                    break;\n                  doBody(j++, dirs);\n                }\n              } catch (Throwable t) {\n                handle(t);\n              }\n            }\n          };\n      }\n\n      for(int i=0;i<NUM_THREADS;i++)\n        threads[i].start();\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["19275ba31e621f6da1b83bf13af75233876fd3d4"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["629c38c4ae4e303d0617e05fbfe508140b32f0a3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee":[],"4208ed8e426ae5f75a41d8b4ae53f4587e413061":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"19275ba31e621f6da1b83bf13af75233876fd3d4":["302be0cc5e6a28ebcebcac98aa81a92be2e94370"],"629c38c4ae4e303d0617e05fbfe508140b32f0a3":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","19275ba31e621f6da1b83bf13af75233876fd3d4"],"302be0cc5e6a28ebcebcac98aa81a92be2e94370":["4208ed8e426ae5f75a41d8b4ae53f4587e413061"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8989a9672fc1bb2d9a549a4f9005a7d0b0d728ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}