{"path":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","commits":[{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4750614f6dd69a084ba692ac13eac93df7e36b83","date":1467144700,"type":3,"author":"Tomas Fernandez Lobbe","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    if (usually()) {\n      // This is set by the SolrDispatchFilter, used in Http calls but not Embedded\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n    }\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    if (usually()) {\n      // This is set by the SolrDispatchFilter, used in Http calls but not Embedded\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n    }\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n    \n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4bb519c79b76e52145e37b6681a7012525ed5f4b","date":1544694716,"type":3,"author":"Jan HÃ¸ydahl","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","pathOld":"solr/core/src/test/org/apache/solr/core/TestQuerySenderListener#beforeClass().mjava","sourceNew":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n\n  }\n\n","sourceOld":"  @BeforeClass\n  public static void beforeClass() throws Exception {\n    // record current value prior to core initialization\n    // so we can verify the correct number of instances later\n    // NOTE: this won't work properly if concurrent tests run\n    // in the same VM\n    preInitMockListenerCount = MockEventListener.getCreateCount();\n\n    if (usually()) {\n      // This is set by the SolrDispatchFilter, used in Http calls but not Embedded\n      ExecutorUtil.addThreadLocalProvider(SolrRequestInfo.getInheritableThreadLocalProvider());\n    }\n    initCore(\"solrconfig-querysender.xml\",\"schema.xml\");\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["4750614f6dd69a084ba692ac13eac93df7e36b83"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a258fbb26824fd104ed795e5d9033d2d040049ee":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c26f00b574427b55127e869b935845554afde1fa","4750614f6dd69a084ba692ac13eac93df7e36b83"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4bb519c79b76e52145e37b6681a7012525ed5f4b"],"4750614f6dd69a084ba692ac13eac93df7e36b83":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"4bb519c79b76e52145e37b6681a7012525ed5f4b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","4750614f6dd69a084ba692ac13eac93df7e36b83"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c903c3d15906a3da96b8c0c2fb704491005fdbdb","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"4750614f6dd69a084ba692ac13eac93df7e36b83":["4bb519c79b76e52145e37b6681a7012525ed5f4b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a258fbb26824fd104ed795e5d9033d2d040049ee","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}