{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.BYTES_VAR_STRAIGHT : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.BYTES_VAR_STRAIGHT : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"dfb4fa9625aa6890405c24c1eec47db1b0c15441","date":1331479109,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.BYTES_VAR_STRAIGHT : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.BYTES_VAR_STRAIGHT : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","date":1337136355,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new ReadOnlyFieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new ReadOnlyFieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new ReadOnlyFieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a851824c09818632c94eba41e60ef5e72e323c8e","date":1337355760,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new ReadOnlyFieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0f42e0639920b2e917c9ece35fb68ad83021e38","date":1337629438,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f00f0f8c602950d28e2cb62039b72f51f5d5c44c","date":1337861286,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, Collections.<String,String>emptyMap());\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, Collections.<String,String>emptyMap());\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n\n    boolean hasVectors = false;\n    boolean hasFreq = false;\n    boolean hasProx = false;\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        hasVectors |= storeTermVector;\n        hasProx |= isIndexed && indexOptions == IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        hasFreq |= isIndexed && indexOptions != IndexOptions.DOCS_ONLY;\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null);\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos, hasFreq, hasProx, hasVectors);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"83ede60c0b5bb96ad193414bbd663193b56689b3","date":1338331478,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, Collections.<String,String>emptyMap());\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, Collections.<String,String>emptyMap());\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":["9e8d5a6ffbfa3405d234a87c833741eabed98d13"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"57ae3024996ccdb3c36c42cb890e1efb37df4ce8","date":1338343651,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene3x/Lucene3xFieldInfosReader#read(Directory,String,IOContext).mjava","sourceNew":null,"sourceOld":"  @Override\n  public FieldInfos read(Directory directory, String segmentName, IOContext iocontext) throws IOException {\n    final String fileName = IndexFileNames.segmentFileName(segmentName, \"\", FIELD_INFOS_EXTENSION);\n    IndexInput input = directory.openInput(fileName, iocontext);\n    \n    try {\n      final int format = input.readVInt();\n\n      if (format > FORMAT_MINIMUM) {\n        throw new IndexFormatTooOldException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n      if (format < FORMAT_CURRENT) {\n        throw new IndexFormatTooNewException(input, format, FORMAT_MINIMUM, FORMAT_CURRENT);\n      }\n\n      final int size = input.readVInt(); //read in the size\n      FieldInfo infos[] = new FieldInfo[size];\n\n      for (int i = 0; i < size; i++) {\n        String name = input.readString();\n        final int fieldNumber = i;\n        byte bits = input.readByte();\n        boolean isIndexed = (bits & IS_INDEXED) != 0;\n        boolean storeTermVector = (bits & STORE_TERMVECTOR) != 0;\n        boolean omitNorms = (bits & OMIT_NORMS) != 0;\n        boolean storePayloads = (bits & STORE_PAYLOADS) != 0;\n        final IndexOptions indexOptions;\n        if (!isIndexed) {\n          indexOptions = null;\n        } else if ((bits & OMIT_TERM_FREQ_AND_POSITIONS) != 0) {\n          indexOptions = IndexOptions.DOCS_ONLY;\n        } else if ((bits & OMIT_POSITIONS) != 0) {\n          if (format <= FORMAT_OMIT_POSITIONS) {\n            indexOptions = IndexOptions.DOCS_AND_FREQS;\n          } else {\n            throw new CorruptIndexException(\"Corrupt fieldinfos, OMIT_POSITIONS set but format=\" + format + \" (resource: \" + input + \")\");\n          }\n        } else {\n          indexOptions = IndexOptions.DOCS_AND_FREQS_AND_POSITIONS;\n        }\n\n        // LUCENE-3027: past indices were able to write\n        // storePayloads=true when omitTFAP is also true,\n        // which is invalid.  We correct that, here:\n        if (indexOptions != IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) {\n          storePayloads = false;\n        }\n        infos[i] = new FieldInfo(name, isIndexed, fieldNumber, storeTermVector, \n          omitNorms, storePayloads, indexOptions, null, isIndexed && !omitNorms? Type.FIXED_INTS_8 : null, Collections.<String,String>emptyMap());\n      }\n\n      if (input.getFilePointer() != input.length()) {\n        throw new CorruptIndexException(\"did not read all bytes from file \\\"\" + fileName + \"\\\": read \" + input.getFilePointer() + \" vs size \" + input.length() + \" (resource: \" + input + \")\");\n      }\n      return new FieldInfos(infos);\n    } finally {\n      input.close();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","dfb4fa9625aa6890405c24c1eec47db1b0c15441"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["a851824c09818632c94eba41e60ef5e72e323c8e"],"a851824c09818632c94eba41e60ef5e72e323c8e":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["dfb4fa9625aa6890405c24c1eec47db1b0c15441"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["dfb4fa9625aa6890405c24c1eec47db1b0c15441","f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"dfb4fa9625aa6890405c24c1eec47db1b0c15441":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","dfb4fa9625aa6890405c24c1eec47db1b0c15441"],"83ede60c0b5bb96ad193414bbd663193b56689b3":["57ae3024996ccdb3c36c42cb890e1efb37df4ce8"],"a0f42e0639920b2e917c9ece35fb68ad83021e38":["f00f0f8c602950d28e2cb62039b72f51f5d5c44c"],"a851824c09818632c94eba41e60ef5e72e323c8e":["a0f42e0639920b2e917c9ece35fb68ad83021e38"],"f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b":["76923f6a33f2c4bec7f584e3f251261afe7ea276"],"76923f6a33f2c4bec7f584e3f251261afe7ea276":["a851824c09818632c94eba41e60ef5e72e323c8e"],"57ae3024996ccdb3c36c42cb890e1efb37df4ce8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["83ede60c0b5bb96ad193414bbd663193b56689b3"],"f00f0f8c602950d28e2cb62039b72f51f5d5c44c":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"dfb4fa9625aa6890405c24c1eec47db1b0c15441":["38e3b736c7ca086d61b7dbb841c905ee115490da","f6eee1e5a8555d83dd8f2f2e3c0a4ccec8e7cf9b","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}