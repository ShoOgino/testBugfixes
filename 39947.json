{"path":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","commits":[{"id":"773a737806859660d4756f710adc0ad53e05f9d5","date":1432140757,"type":0,"author":"Timothy Potter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","pathOld":"/dev/null","sourceNew":"  protected long getVersionFromIndex(Replica replica, String docId) throws IOException, SolrServerException {\n    Long vers = null;\n    String queryStr = (docId != null) ? \"id:\" + docId : \"_version_:[0 TO *]\";\n    SolrQuery query = new SolrQuery(queryStr);\n    query.setRows(1);\n    query.setFields(\"id\", \"_version_\");\n    query.addSort(new SolrQuery.SortClause(\"_version_\", SolrQuery.ORDER.desc));\n    query.setParam(\"distrib\", false);\n\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      QueryResponse qr = client.query(query);\n      SolrDocumentList hits = qr.getResults();\n      if (hits.isEmpty())\n        fail(\"No results returned from query: \"+query);\n\n      vers = (Long) hits.get(0).getFirstValue(\"_version_\");\n    }\n\n    if (vers == null)\n      fail(\"Failed to get version using query \" + query + \" from \" + replica.getCoreUrl());\n\n    return vers.longValue();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","date":1460069869,"type":3,"author":"Anshum Gupta","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","sourceNew":"  protected long getVersionFromIndex(Replica replica, String docId) throws IOException, SolrServerException {\n    Long vers = null;\n    String queryStr = (docId != null) ? \"id:\" + docId : \"_version_:[0 TO *]\";\n    SolrQuery query = new SolrQuery(queryStr);\n    query.setRows(1);\n    query.setFields(\"id\", \"_version_\");\n    query.addSort(new SolrQuery.SortClause(\"_version_\", SolrQuery.ORDER.desc));\n    query.setParam(\"distrib\", false);\n\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      QueryResponse qr = client.query(query);\n      SolrDocumentList hits = qr.getResults();\n      if (hits.isEmpty())\n        fail(\"No results returned from query: \"+query);\n\n      vers = (Long) hits.get(0).getFirstValue(\"_version_\");\n    }\n\n    if (vers == null)\n      fail(\"Failed to get version using query \" + query + \" from \" + replica.getCoreUrl());\n\n    return vers.longValue();\n  }\n\n","sourceOld":"  protected long getVersionFromIndex(Replica replica, String docId) throws IOException, SolrServerException {\n    Long vers = null;\n    String queryStr = (docId != null) ? \"id:\" + docId : \"_version_:[0 TO *]\";\n    SolrQuery query = new SolrQuery(queryStr);\n    query.setRows(1);\n    query.setFields(\"id\", \"_version_\");\n    query.addSort(new SolrQuery.SortClause(\"_version_\", SolrQuery.ORDER.desc));\n    query.setParam(\"distrib\", false);\n\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      QueryResponse qr = client.query(query);\n      SolrDocumentList hits = qr.getResults();\n      if (hits.isEmpty())\n        fail(\"No results returned from query: \"+query);\n\n      vers = (Long) hits.get(0).getFirstValue(\"_version_\");\n    }\n\n    if (vers == null)\n      fail(\"Failed to get version using query \" + query + \" from \" + replica.getCoreUrl());\n\n    return vers.longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b","date":1460110033,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/DistributedVersionInfoTest#getVersionFromIndex(Replica,String).mjava","sourceNew":"  protected long getVersionFromIndex(Replica replica, String docId) throws IOException, SolrServerException {\n    Long vers = null;\n    String queryStr = (docId != null) ? \"id:\" + docId : \"_version_:[0 TO *]\";\n    SolrQuery query = new SolrQuery(queryStr);\n    query.setRows(1);\n    query.setFields(\"id\", \"_version_\");\n    query.addSort(new SolrQuery.SortClause(\"_version_\", SolrQuery.ORDER.desc));\n    query.setParam(\"distrib\", false);\n\n    try (SolrClient client = getHttpSolrClient(replica.getCoreUrl())) {\n      QueryResponse qr = client.query(query);\n      SolrDocumentList hits = qr.getResults();\n      if (hits.isEmpty())\n        fail(\"No results returned from query: \"+query);\n\n      vers = (Long) hits.get(0).getFirstValue(\"_version_\");\n    }\n\n    if (vers == null)\n      fail(\"Failed to get version using query \" + query + \" from \" + replica.getCoreUrl());\n\n    return vers.longValue();\n  }\n\n","sourceOld":"  protected long getVersionFromIndex(Replica replica, String docId) throws IOException, SolrServerException {\n    Long vers = null;\n    String queryStr = (docId != null) ? \"id:\" + docId : \"_version_:[0 TO *]\";\n    SolrQuery query = new SolrQuery(queryStr);\n    query.setRows(1);\n    query.setFields(\"id\", \"_version_\");\n    query.addSort(new SolrQuery.SortClause(\"_version_\", SolrQuery.ORDER.desc));\n    query.setParam(\"distrib\", false);\n\n    try (SolrClient client = new HttpSolrClient(replica.getCoreUrl())) {\n      QueryResponse qr = client.query(query);\n      SolrDocumentList hits = qr.getResults();\n      if (hits.isEmpty())\n        fail(\"No results returned from query: \"+query);\n\n      vers = (Long) hits.get(0).getFirstValue(\"_version_\");\n    }\n\n    if (vers == null)\n      fail(\"Failed to get version using query \" + query + \" from \" + replica.getCoreUrl());\n\n    return vers.longValue();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"773a737806859660d4756f710adc0ad53e05f9d5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["773a737806859660d4756f710adc0ad53e05f9d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["773a737806859660d4756f710adc0ad53e05f9d5","e3c94a8b8bf47db4f968d9ae510ec8bbe1372088"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"]},"commit2Childs":{"773a737806859660d4756f710adc0ad53e05f9d5":["e3c94a8b8bf47db4f968d9ae510ec8bbe1372088","5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"e3c94a8b8bf47db4f968d9ae510ec8bbe1372088":["5bdaf2cee03ff78b0a0cbf23df0095a3590b493b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["773a737806859660d4756f710adc0ad53e05f9d5"],"5bdaf2cee03ff78b0a0cbf23df0095a3590b493b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}