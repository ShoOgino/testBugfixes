{"path":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testWithSynonym().mjava","commits":[{"id":"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5","date":1476105151,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testWithSynonym().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSynonym() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field(\"field\", \"the quick brown fox\", type ));\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n\n    // query1: simple synonym query\n    SynonymQuery synQuery = new SynonymQuery(new Term(\"field\", \"quick\"), new Term(\"field\", \"fast\"));\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(synQuery, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown fox\", bestFragments[0]);\n\n    // query2: boolean query with synonym query\n    BooleanQuery.Builder bq =\n        new BooleanQuery.Builder()\n            .add(new BooleanClause(synQuery, Occur.MUST))\n            .add(new BooleanClause(new TermQuery(new Term(\"field\", \"fox\")), Occur.MUST));\n    fieldQuery  = highlighter.getFieldQuery(bq.build(), reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown <b>fox</b>\", bestFragments[0]);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testWithSynonym().mjava","pathOld":"/dev/null","sourceNew":"  public void testWithSynonym() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field(\"field\", \"the quick brown fox\", type ));\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n\n    // query1: simple synonym query\n    SynonymQuery synQuery = new SynonymQuery(new Term(\"field\", \"quick\"), new Term(\"field\", \"fast\"));\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(synQuery, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown fox\", bestFragments[0]);\n\n    // query2: boolean query with synonym query\n    BooleanQuery.Builder bq =\n        new BooleanQuery.Builder()\n            .add(new BooleanClause(synQuery, Occur.MUST))\n            .add(new BooleanClause(new TermQuery(new Term(\"field\", \"fox\")), Occur.MUST));\n    fieldQuery  = highlighter.getFieldQuery(bq.build(), reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown <b>fox</b>\", bestFragments[0]);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"df25592b82060bc1c800e87bf019444bf0ddf9d4","date":1552296011,"type":3,"author":"jimczi","isMerge":false,"pathNew":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testWithSynonym().mjava","pathOld":"lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/FastVectorHighlighterTest#testWithSynonym().mjava","sourceNew":"  public void testWithSynonym() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field(\"field\", \"the quick brown fox\", type ));\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n\n    // query1: simple synonym query\n    SynonymQuery synQuery = new SynonymQuery.Builder(\"field\")\n        .addTerm(new Term(\"field\", \"quick\"))\n        .addTerm(new Term(\"field\", \"fast\"))\n        .build();\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(synQuery, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown fox\", bestFragments[0]);\n\n    // query2: boolean query with synonym query\n    BooleanQuery.Builder bq =\n        new BooleanQuery.Builder()\n            .add(new BooleanClause(synQuery, Occur.MUST))\n            .add(new BooleanClause(new TermQuery(new Term(\"field\", \"fox\")), Occur.MUST));\n    fieldQuery  = highlighter.getFieldQuery(bq.build(), reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown <b>fox</b>\", bestFragments[0]);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testWithSynonym() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriter writer = new IndexWriter(dir, newIndexWriterConfig(new MockAnalyzer(random())));\n    FieldType type = new FieldType(TextField.TYPE_STORED);\n    type.setStoreTermVectorOffsets(true);\n    type.setStoreTermVectorPositions(true);\n    type.setStoreTermVectors(true);\n    type.freeze();\n\n    Document doc = new Document();\n    doc.add( new Field(\"field\", \"the quick brown fox\", type ));\n    writer.addDocument(doc);\n    FastVectorHighlighter highlighter = new FastVectorHighlighter();\n\n    IndexReader reader = DirectoryReader.open(writer);\n    int docId = 0;\n\n    // query1: simple synonym query\n    SynonymQuery synQuery = new SynonymQuery(new Term(\"field\", \"quick\"), new Term(\"field\", \"fast\"));\n    FieldQuery fieldQuery  = highlighter.getFieldQuery(synQuery, reader);\n    String[] bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown fox\", bestFragments[0]);\n\n    // query2: boolean query with synonym query\n    BooleanQuery.Builder bq =\n        new BooleanQuery.Builder()\n            .add(new BooleanClause(synQuery, Occur.MUST))\n            .add(new BooleanClause(new TermQuery(new Term(\"field\", \"fox\")), Occur.MUST));\n    fieldQuery  = highlighter.getFieldQuery(bq.build(), reader);\n    bestFragments = highlighter.getBestFragments(fieldQuery, reader, docId, \"field\", 54, 1);\n    assertEquals(\"the <b>quick</b> brown <b>fox</b>\", bestFragments[0]);\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["f3f5826dd60c20d0818a0c1c325637fd8aab4bd5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","f3f5826dd60c20d0818a0c1c325637fd8aab4bd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["df25592b82060bc1c800e87bf019444bf0ddf9d4"]},"commit2Childs":{"f3f5826dd60c20d0818a0c1c325637fd8aab4bd5":["df25592b82060bc1c800e87bf019444bf0ddf9d4","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["f3f5826dd60c20d0818a0c1c325637fd8aab4bd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"df25592b82060bc1c800e87bf019444bf0ddf9d4":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}