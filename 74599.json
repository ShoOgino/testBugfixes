{"path":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","commits":[{"id":"39dabfd19b49b248d63cedbb01ea144ee5ad071c","date":1566241238,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdateRuntimeLib(ApiInfo).mjava","sourceNew":"  private static boolean addUpdatePackage(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(CommonParams.PACKAGE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_PACKAGE.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if (Objects.equals(existing.get(SHA512), op.getDataMap().get(SHA512))) {\n        op.addError(\"Trying to update a jar with the same sha512\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","sourceOld":"  private static boolean addUpdateRuntimeLib(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(RuntimeLib.TYPE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_RUNTIME_LIB.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if(Objects.equals( existing.get(SHA512) , op.getDataMap().get(SHA512))){\n        op.addError(\"Trying to update a jar with the same sha512\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"99d6782cf9de8c5ffeb8d0b0f103b578205af068","date":1566878682,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","sourceNew":"  private static boolean addUpdatePackage(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(CommonParams.PACKAGE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_PACKAGE.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if (Objects.equals(existing.get(SHA256), op.getDataMap().get(SHA256))) {\n        op.addError(\"Trying to update a jar with the same sha256\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","sourceOld":"  private static boolean addUpdatePackage(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(CommonParams.PACKAGE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_PACKAGE.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if (Objects.equals(existing.get(SHA512), op.getDataMap().get(SHA512))) {\n        op.addError(\"Trying to update a jar with the same sha512\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c44cc06c26e456fe9c215072b79fce30babe3975","date":1570365040,"type":4,"author":"Ishan Chattopadhyaya","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","sourceNew":null,"sourceOld":"  private static boolean addUpdatePackage(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(CommonParams.PACKAGE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_PACKAGE.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if (Objects.equals(existing.get(SHA256), op.getDataMap().get(SHA256))) {\n        op.addError(\"Trying to update a jar with the same sha256\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b0b597c65628ca9e73913a07e81691f8229bae35","date":1571224353,"type":4,"author":"jimczi","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/handler/admin/CollectionHandlerApi#addUpdatePackage(ApiInfo).mjava","sourceNew":null,"sourceOld":"  private static boolean addUpdatePackage(ApiInfo params) throws Exception {\n    if (!RuntimeLib.isEnabled()) {\n      params.op.addError(\"node not started with enable.runtime.lib=true\");\n      return false;\n    }\n\n    CollectionHandlerApi handler = (CollectionHandlerApi) params.apiHandler;\n    RuntimeLib lib = new RuntimeLib(handler.handler.coreContainer);\n    CommandOperation op = params.op;\n    String name = op.getStr(\"name\");\n    ClusterProperties clusterProperties = new ClusterProperties(((CollectionHandlerApi) params.apiHandler).handler.coreContainer.getZkController().getZkClient());\n    Map<String, Object> props = clusterProperties.getClusterProperties();\n    List<String> pathToLib = asList(CommonParams.PACKAGE, name);\n    Map existing = (Map) Utils.getObjectByPath(props, false, pathToLib);\n    if (Meta.ADD_PACKAGE.commandName.equals(op.name)) {\n      if (existing != null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' already exists \", name));\n        return false;\n      }\n    } else {\n      if (existing == null) {\n        op.addError(StrUtils.formatString(\"The jar with a name ''{0}'' does not exist\", name));\n        return false;\n      }\n      if (Objects.equals(existing.get(SHA256), op.getDataMap().get(SHA256))) {\n        op.addError(\"Trying to update a jar with the same sha256\");\n        return false;\n      }\n    }\n    try {\n      lib.init(new PluginInfo(SolrRequestHandler.TYPE, op.getDataMap()));\n    } catch (SolrException e) {\n      log.error(\"Error loading runtimelib \", e);\n      op.addError(e.getMessage());\n      return false;\n    }\n\n    Map delta = new LinkedHashMap();\n    Utils.setObjectByPath(delta, pathToLib, op.getDataMap(), true);\n    clusterProperties.setClusterProperties(delta);\n    return true;\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c44cc06c26e456fe9c215072b79fce30babe3975":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c44cc06c26e456fe9c215072b79fce30babe3975"],"b0b597c65628ca9e73913a07e81691f8229bae35":["99d6782cf9de8c5ffeb8d0b0f103b578205af068","c44cc06c26e456fe9c215072b79fce30babe3975"]},"commit2Childs":{"39dabfd19b49b248d63cedbb01ea144ee5ad071c":["99d6782cf9de8c5ffeb8d0b0f103b578205af068"],"99d6782cf9de8c5ffeb8d0b0f103b578205af068":["c44cc06c26e456fe9c215072b79fce30babe3975","b0b597c65628ca9e73913a07e81691f8229bae35"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["39dabfd19b49b248d63cedbb01ea144ee5ad071c"],"c44cc06c26e456fe9c215072b79fce30babe3975":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"b0b597c65628ca9e73913a07e81691f8229bae35":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817","b0b597c65628ca9e73913a07e81691f8229bae35"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}