{"path":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","commits":[{"id":"da8b6cfd1b67b932db9907356935046c4d40d033","date":1479958221,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","pathOld":"/dev/null","sourceNew":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map<String, Object> map = parser.next();\n    assertEquals(\"2\", map.get(\"id\"));\n    map = parser.next();\n    assertEquals(\"3\", map.get(\"id\"));\n    System.out.println();\n    map = parser.next();\n    assertNull(map);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"727bb765ff2542275f6d31f67be18d7104bae148","date":1480353976,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","pathOld":"/dev/null","sourceNew":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map<String, Object> map = parser.next();\n    assertEquals(\"2\", map.get(\"id\"));\n    map = parser.next();\n    assertEquals(\"3\", map.get(\"id\"));\n    System.out.println();\n    map = parser.next();\n    assertNull(map);\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f15af35d55d70c34451f9df5edeaeff6b31f8cbe","date":1519625627,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","sourceNew":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    try (JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true)) {\n      Map<String, Object> map = parser.next();\n      assertEquals(\"2\", map.get(\"id\"));\n      map = parser.next();\n      assertEquals(\"3\", map.get(\"id\"));\n      System.out.println();\n      map = parser.next();\n      assertNull(map);\n    }\n\n  }\n\n","sourceOld":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true);\n    Map<String, Object> map = parser.next();\n    assertEquals(\"2\", map.get(\"id\"));\n    map = parser.next();\n    assertEquals(\"3\", map.get(\"id\"));\n    System.out.println();\n    map = parser.next();\n    assertNull(map);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","pathOld":"solr/core/src/test/org/apache/solr/response/TestJavabinTupleStreamParser#testKnown().mjava","sourceNew":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    @SuppressWarnings({\"rawtypes\"})\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    try (JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true)) {\n      Map<String, Object> map = parser.next();\n      assertEquals(\"2\", map.get(\"id\"));\n      map = parser.next();\n      assertEquals(\"3\", map.get(\"id\"));\n      System.out.println();\n      map = parser.next();\n      assertNull(map);\n    }\n\n  }\n\n","sourceOld":"  public void testKnown() throws IOException {\n    String payload = \"{\\n\" +\n        \"  \\\"responseHeader\\\":{\\n\" +\n        \"    \\\"zkConnected\\\":true,\\n\" +\n        \"    \\\"status\\\":0,\\n\" +\n        \"    \\\"QTime\\\":46},\\n\" +\n        \"  \\\"response\\\":{\\n\" +\n        \"    \\\"numFound\\\":2,\\n\" +\n        \"    \\\"start\\\":0,\\n\" +\n        \"    \\\"docs\\\":[\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"2\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello2\\\",\\n\" +\n        \"        \\\"a_i\\\":2,\\n\" +\n        \"        \\\"a_f\\\":0.0},\\n\" +\n        \"      {\\n\" +\n        \"        \\\"id\\\":\\\"3\\\",\\n\" +\n        \"        \\\"a_s\\\":\\\"hello3\\\",\\n\" +\n        \"        \\\"a_i\\\":3,\\n\" +\n        \"        \\\"a_f\\\":3.0}]}}\";\n    SimpleOrderedMap nl = convert2OrderedMap((Map) Utils.fromJSONString(payload));\n\n    byte[] bytes = serialize(nl);\n\n    try (JavabinTupleStreamParser parser = new JavabinTupleStreamParser(new ByteArrayInputStream(bytes), true)) {\n      Map<String, Object> map = parser.next();\n      assertEquals(\"2\", map.get(\"id\"));\n      map = parser.next();\n      assertEquals(\"3\", map.get(\"id\"));\n      System.out.println();\n      map = parser.next();\n      assertNull(map);\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"da8b6cfd1b67b932db9907356935046c4d40d033":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"727bb765ff2542275f6d31f67be18d7104bae148":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","da8b6cfd1b67b932db9907356935046c4d40d033"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["da8b6cfd1b67b932db9907356935046c4d40d033"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e98520789adb1d5ad05afb4956eca0944a929688"],"e98520789adb1d5ad05afb4956eca0944a929688":["f15af35d55d70c34451f9df5edeaeff6b31f8cbe"]},"commit2Childs":{"da8b6cfd1b67b932db9907356935046c4d40d033":["727bb765ff2542275f6d31f67be18d7104bae148","f15af35d55d70c34451f9df5edeaeff6b31f8cbe"],"727bb765ff2542275f6d31f67be18d7104bae148":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["da8b6cfd1b67b932db9907356935046c4d40d033","727bb765ff2542275f6d31f67be18d7104bae148"],"f15af35d55d70c34451f9df5edeaeff6b31f8cbe":["e98520789adb1d5ad05afb4956eca0944a929688"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"e98520789adb1d5ad05afb4956eca0944a929688":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["727bb765ff2542275f6d31f67be18d7104bae148","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}