{"path":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#checkStatement(Connection,Statement).mjava","commits":[{"id":"9d6d4d8974630b55c3dc0a5284a40650588bffa2","date":1461181703,"type":0,"author":"Kevin Risden","isMerge":false,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#checkStatement(Connection,Statement).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStatement(Connection con, Statement statement) throws Exception {\n    assertEquals(con, statement.getConnection());\n\n    assertNull(statement.getWarnings());\n    statement.clearWarnings();\n    assertNull(statement.getWarnings());\n\n    assertEquals(ResultSet.TYPE_FORWARD_ONLY, statement.getResultSetType());\n    assertEquals(ResultSet.CONCUR_READ_ONLY, statement.getResultSetConcurrency());\n\n    assertEquals(ResultSet.FETCH_FORWARD, statement.getFetchDirection());\n    statement.setFetchDirection(ResultSet.FETCH_FORWARD);\n    assertEquals(ResultSet.FETCH_FORWARD, statement.getFetchDirection());\n\n    assertEquals(0, statement.getFetchSize());\n    statement.setFetchSize(0);\n    assertEquals(0, statement.getFetchSize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9b701e0fcef214f86bab1daf107adce0b0131212","date":1461241874,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/test/org/apache/solr/client/solrj/io/sql/JdbcTest#checkStatement(Connection,Statement).mjava","pathOld":"/dev/null","sourceNew":"  private void checkStatement(Connection con, Statement statement) throws Exception {\n    assertEquals(con, statement.getConnection());\n\n    assertNull(statement.getWarnings());\n    statement.clearWarnings();\n    assertNull(statement.getWarnings());\n\n    assertEquals(ResultSet.TYPE_FORWARD_ONLY, statement.getResultSetType());\n    assertEquals(ResultSet.CONCUR_READ_ONLY, statement.getResultSetConcurrency());\n\n    assertEquals(ResultSet.FETCH_FORWARD, statement.getFetchDirection());\n    statement.setFetchDirection(ResultSet.FETCH_FORWARD);\n    assertEquals(ResultSet.FETCH_FORWARD, statement.getFetchDirection());\n\n    assertEquals(0, statement.getFetchSize());\n    statement.setFetchSize(0);\n    assertEquals(0, statement.getFetchSize());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"9b701e0fcef214f86bab1daf107adce0b0131212":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","9d6d4d8974630b55c3dc0a5284a40650588bffa2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9d6d4d8974630b55c3dc0a5284a40650588bffa2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9b701e0fcef214f86bab1daf107adce0b0131212"]},"commit2Childs":{"9b701e0fcef214f86bab1daf107adce0b0131212":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9b701e0fcef214f86bab1daf107adce0b0131212","9d6d4d8974630b55c3dc0a5284a40650588bffa2"],"9d6d4d8974630b55c3dc0a5284a40650588bffa2":["9b701e0fcef214f86bab1daf107adce0b0131212"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}