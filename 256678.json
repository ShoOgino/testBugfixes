{"path":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","commits":[{"id":"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72","date":1434509375,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","pathOld":"/dev/null","sourceNew":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      try {\n        CodecUtil.readCRC(input);\n        fail(\"didn't get expected exception\");\n      } catch (CorruptIndexException expected) {\n        // expected\n      }\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["05fe562aa248790944d43cdd478f512572835ba0"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"05fe562aa248790944d43cdd478f512572835ba0","date":1455901667,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","sourceNew":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      expectThrows(CorruptIndexException.class, () -> {\n        CodecUtil.readCRC(input);\n      });\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","sourceOld":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      try {\n        CodecUtil.readCRC(input);\n        fail(\"didn't get expected exception\");\n      } catch (CorruptIndexException expected) {\n        // expected\n      }\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","bugFix":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71488d7f5786ae87541276121ecb69705a11a295","date":1465498138,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testReadBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","sourceNew":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      expectThrows(CorruptIndexException.class, () -> {\n        CodecUtil.readCRC(input);\n      });\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","sourceOld":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      expectThrows(CorruptIndexException.class, () -> {\n        CodecUtil.readCRC(input);\n      });\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":5,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/codecs/TestCodecUtil#testReadBogusCRC().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestCodecUtil#testReadBogusCRC().mjava","sourceNew":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      expectThrows(CorruptIndexException.class, () -> {\n        CodecUtil.readCRC(input);\n      });\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","sourceOld":"  public void testReadBogusCRC() throws Exception {\n    RAMFile file = new RAMFile();\n    IndexOutput output = new RAMOutputStream(file, false);\n    output.writeLong(-1L); // bad\n    output.writeLong(1L << 32); // bad\n    output.writeLong(-(1L << 32)); // bad\n    output.writeLong((1L << 32) - 1); // ok\n    output.close();\n    IndexInput input = new RAMInputStream(\"file\", file);\n    // read 3 bogus values\n    for (int i = 0; i < 3; i++) {\n      expectThrows(CorruptIndexException.class, () -> {\n        CodecUtil.readCRC(input);\n      });\n    }\n    // good value\n    CodecUtil.readCRC(input);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"05fe562aa248790944d43cdd478f512572835ba0":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"71488d7f5786ae87541276121ecb69705a11a295":["05fe562aa248790944d43cdd478f512572835ba0"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["05fe562aa248790944d43cdd478f512572835ba0","71488d7f5786ae87541276121ecb69705a11a295"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71488d7f5786ae87541276121ecb69705a11a295"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72"],"05fe562aa248790944d43cdd478f512572835ba0":["71488d7f5786ae87541276121ecb69705a11a295","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"83dbd35bcc0f6436f58fb7e47b8b3e1ba7600c72":["05fe562aa248790944d43cdd478f512572835ba0"],"71488d7f5786ae87541276121ecb69705a11a295":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}