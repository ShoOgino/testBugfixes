{"path":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","commits":[{"id":"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","date":1306767085,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","sourceNew":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":1,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","pathOld":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","sourceNew":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"68b2523bf6d81a99aa007384dc8a69a71fec1cce","date":1477560907,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","sourceNew":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<>(),\n          new Stack<>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"80d0e6d59ae23f4a6f30eaf40bfb40742300287f","date":1477598926,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","sourceNew":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<>(),\n          new Stack<>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","sourceOld":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<String, Object>(),\n              new Stack<Set<String>>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","date":1598712724,"type":4,"author":"Alexandre Rafalovitch","isMerge":false,"pathNew":"/dev/null","pathOld":"solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/XPathRecordReader#streamRecords(Reader,Handler).mjava","sourceNew":null,"sourceOld":"  /** \n   * Creates an XML stream reader on top of whatever reader has been\n   * configured. Then calls parse() with a handler which is\n   * invoked forEach record emitted.\n   *\n   * @param r the stream reader\n   * @param handler The callback instance\n   */\n  public void streamRecords(Reader r, Handler handler) {\n    try {\n      XMLStreamReader parser = factory.createXMLStreamReader(r);\n      rootNode.parse(parser, handler, new HashMap<>(),\n          new Stack<>(), false);\n    } catch (Exception e) {\n      throw new RuntimeException(e);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["68b2523bf6d81a99aa007384dc8a69a71fec1cce"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c26f00b574427b55127e869b935845554afde1fa":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","5128b7b3b73fedff05fdc5ea2e6be53c1020bb91"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":["c26f00b574427b55127e869b935845554afde1fa","68b2523bf6d81a99aa007384dc8a69a71fec1cce"],"68b2523bf6d81a99aa007384dc8a69a71fec1cce":["c26f00b574427b55127e869b935845554afde1fa"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b"]},"commit2Childs":{"d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5128b7b3b73fedff05fdc5ea2e6be53c1020bb91":["c26f00b574427b55127e869b935845554afde1fa"],"c26f00b574427b55127e869b935845554afde1fa":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","68b2523bf6d81a99aa007384dc8a69a71fec1cce"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5128b7b3b73fedff05fdc5ea2e6be53c1020bb91","c26f00b574427b55127e869b935845554afde1fa"],"80d0e6d59ae23f4a6f30eaf40bfb40742300287f":[],"68b2523bf6d81a99aa007384dc8a69a71fec1cce":["d2c8f5c46c2501b61e2f55eb7ee59e6c5372290b","80d0e6d59ae23f4a6f30eaf40bfb40742300287f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["80d0e6d59ae23f4a6f30eaf40bfb40742300287f","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}