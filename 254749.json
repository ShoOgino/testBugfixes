{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","commits":[{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":1,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Overseer.Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Overseer.Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"67e503ef0f418bc92404ff5d55694087c23d48eb","date":1509025368,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"30572b5bb51001316f9a67e632d09750dc627a53","date":1511445746,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af3e10d8a1fbcc5c79b22f7477e79de467dd326c","date":1515178406,"type":3,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ROUTEDALIAS_CREATECOLL, new RoutedAliasCreateCollectionCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ROUTEDALIAS_CREATECOLL, new RoutedAliasCreateCollectionCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(ROUTEDALIAS_CREATECOLL, new RoutedAliasCreateCollectionCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":4,"author":"Karl Wright","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#OverseerCollectionMessageHandler(ZkStateReader,String,ShardHandlerFactory,String,Stats,Overseer,OverseerNodePrioritizer).mjava","sourceNew":null,"sourceOld":"  public OverseerCollectionMessageHandler(ZkStateReader zkStateReader, String myId,\n                                        final ShardHandlerFactory shardHandlerFactory,\n                                        String adminPath,\n                                        Stats stats,\n                                        Overseer overseer,\n                                        OverseerNodePrioritizer overseerPrioritizer) {\n    this.zkStateReader = zkStateReader;\n    this.shardHandlerFactory = shardHandlerFactory;\n    this.adminPath = adminPath;\n    this.myId = myId;\n    this.stats = stats;\n    this.overseer = overseer;\n    this.cloudManager = overseer.getSolrCloudManager();\n    this.timeSource = cloudManager.getTimeSource();\n    this.isClosed = false;\n    commandMap = new ImmutableMap.Builder<CollectionAction, Cmd>()\n        .put(REPLACENODE, new ReplaceNodeCmd(this))\n        .put(DELETENODE, new DeleteNodeCmd(this))\n        .put(BACKUP, new BackupCmd(this))\n        .put(RESTORE, new RestoreCmd(this))\n        .put(CREATESNAPSHOT, new CreateSnapshotCmd(this))\n        .put(DELETESNAPSHOT, new DeleteSnapshotCmd(this))\n        .put(SPLITSHARD, new SplitShardCmd(this))\n        .put(ADDROLE, new OverseerRoleCmd(this, ADDROLE, overseerPrioritizer))\n        .put(REMOVEROLE, new OverseerRoleCmd(this, REMOVEROLE, overseerPrioritizer))\n        .put(MOCK_COLL_TASK, this::mockOperation)\n        .put(MOCK_SHARD_TASK, this::mockOperation)\n        .put(MOCK_REPLICA_TASK, this::mockOperation)\n        .put(MIGRATESTATEFORMAT, this::migrateStateFormat)\n        .put(CREATESHARD, new CreateShardCmd(this))\n        .put(MIGRATE, new MigrateCmd(this))\n        .put(CREATE, new CreateCollectionCmd(this))\n        .put(MODIFYCOLLECTION, this::modifyCollection)\n        .put(ADDREPLICAPROP, this::processReplicaAddPropertyCommand)\n        .put(DELETEREPLICAPROP, this::processReplicaDeletePropertyCommand)\n        .put(BALANCESHARDUNIQUE, this::balanceProperty)\n        .put(REBALANCELEADERS, this::processRebalanceLeaders)\n        .put(RELOAD, this::reloadCollection)\n        .put(DELETE, new DeleteCollectionCmd(this))\n        .put(CREATEALIAS, new CreateAliasCmd(this))\n        .put(DELETEALIAS, new DeleteAliasCmd(this))\n        .put(OVERSEERSTATUS, new OverseerStatusCmd(this))\n        .put(DELETESHARD, new DeleteShardCmd(this))\n        .put(DELETEREPLICA, new DeleteReplicaCmd(this))\n        .put(ADDREPLICA, new AddReplicaCmd(this))\n        .put(MOVEREPLICA, new MoveReplicaCmd(this))\n        .put(UTILIZENODE, new UtilizeNodeCmd(this))\n        .build()\n    ;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"30572b5bb51001316f9a67e632d09750dc627a53":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["30572b5bb51001316f9a67e632d09750dc627a53"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"af3e10d8a1fbcc5c79b22f7477e79de467dd326c":["6146c07c0dee1ae1e42926167acd127fed5ef59d"],"67e503ef0f418bc92404ff5d55694087c23d48eb":["30572b5bb51001316f9a67e632d09750dc627a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["67e503ef0f418bc92404ff5d55694087c23d48eb"],"30572b5bb51001316f9a67e632d09750dc627a53":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["b94236357aaa22b76c10629851fe4e376e0cea82","af3e10d8a1fbcc5c79b22f7477e79de467dd326c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}