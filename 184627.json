{"path":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new IOException(\"read past EOF\");\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new IOException(\"read past EOF\");\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e5090f41e198d9dd9374e99981f940b111973af2","date":1325969785,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new IOException(\"read past EOF\");\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","pathOld":"lucene/src/java/org/apache/lucene/store/BufferedIndexInput#refill().mjava","sourceNew":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","sourceOld":"  private void refill() throws IOException {\n    long start = bufferStart + bufferPosition;\n    long end = start + bufferSize;\n    if (end > length())\t\t\t\t  // don't read past EOF\n      end = length();\n    int newLength = (int)(end - start);\n    if (newLength <= 0)\n      throw new EOFException(\"read past EOF: \" + this);\n\n    if (buffer == null) {\n      newBuffer(new byte[bufferSize]);  // allocate buffer lazily\n      seekInternal(bufferStart);\n    }\n    readInternal(buffer, 0, newLength);\n    bufferLength = newLength;\n    bufferStart = start;\n    bufferPosition = 0;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["e5090f41e198d9dd9374e99981f940b111973af2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e5090f41e198d9dd9374e99981f940b111973af2":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"e5090f41e198d9dd9374e99981f940b111973af2":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["e5090f41e198d9dd9374e99981f940b111973af2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}