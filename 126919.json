{"path":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","commits":[{"id":"36d13f271b6649357e07f71f7e46559479f69b5b","date":1523888226,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","pathOld":"/dev/null","sourceNew":"  public void testQueryCacheSoftUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    IndexWriter w = new IndexWriter(dir, iwc);\n    LRUQueryCache queryCache = new LRUQueryCache(10, 1000 * 1000, ctx -> true);\n    IndexSearcher.setDefaultQueryCache(queryCache);\n    IndexSearcher.setDefaultQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    SearcherManager sm = new SearcherManager(w, new SearcherFactory());\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    sm.maybeRefreshBlocking();\n\n    IndexSearcher searcher = sm.acquire();\n    Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.FILTER).build();\n    assertEquals(1, searcher.count(query));\n    assertEquals(1, queryCache.getCacheSize());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    boolean softDelete = true;\n    if (softDelete) {\n      Document tombstone = new Document();\n      tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"2\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    } else {\n      w.deleteDocuments(new Term(\"id\", \"1\"));\n      w.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n    sm.maybeRefreshBlocking();\n    // All docs in the first segment are deleted - we should drop it with the default merge policy.\n    sm.release(searcher);\n    assertEquals(0, queryCache.getCacheSize());\n    assertEquals(1, queryCache.getEvictionCount());\n    sm.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6c9d00c591703058371b3dc36f4957a6f24ca302","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","sourceNew":"  public void testQueryCacheSoftUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    IndexWriter w = new IndexWriter(dir, iwc);\n    LRUQueryCache queryCache = new LRUQueryCache(10, 1000 * 1000, ctx -> true);\n    IndexSearcher.setDefaultQueryCache(queryCache);\n    IndexSearcher.setDefaultQueryCachingPolicy(ALWAYS_CACHE);\n\n    SearcherManager sm = new SearcherManager(w, new SearcherFactory());\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    sm.maybeRefreshBlocking();\n\n    IndexSearcher searcher = sm.acquire();\n    Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.FILTER).build();\n    assertEquals(1, searcher.count(query));\n    assertEquals(1, queryCache.getCacheSize());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    boolean softDelete = true;\n    if (softDelete) {\n      Document tombstone = new Document();\n      tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"2\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    } else {\n      w.deleteDocuments(new Term(\"id\", \"1\"));\n      w.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n    sm.maybeRefreshBlocking();\n    // All docs in the first segment are deleted - we should drop it with the default merge policy.\n    sm.release(searcher);\n    assertEquals(0, queryCache.getCacheSize());\n    assertEquals(1, queryCache.getEvictionCount());\n    sm.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQueryCacheSoftUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    IndexWriter w = new IndexWriter(dir, iwc);\n    LRUQueryCache queryCache = new LRUQueryCache(10, 1000 * 1000, ctx -> true);\n    IndexSearcher.setDefaultQueryCache(queryCache);\n    IndexSearcher.setDefaultQueryCachingPolicy(QueryCachingPolicy.ALWAYS_CACHE);\n\n    SearcherManager sm = new SearcherManager(w, new SearcherFactory());\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    sm.maybeRefreshBlocking();\n\n    IndexSearcher searcher = sm.acquire();\n    Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.FILTER).build();\n    assertEquals(1, searcher.count(query));\n    assertEquals(1, queryCache.getCacheSize());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    boolean softDelete = true;\n    if (softDelete) {\n      Document tombstone = new Document();\n      tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"2\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    } else {\n      w.deleteDocuments(new Term(\"id\", \"1\"));\n      w.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n    sm.maybeRefreshBlocking();\n    // All docs in the first segment are deleted - we should drop it with the default merge policy.\n    sm.release(searcher);\n    assertEquals(0, queryCache.getCacheSize());\n    assertEquals(1, queryCache.getEvictionCount());\n    sm.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b5754bd6f04f13b67e9575f8b226a0303c31c7d5","date":1573506453,"type":3,"author":"ginger","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/search/TestLRUQueryCache#testQueryCacheSoftUpdate().mjava","sourceNew":"  public void testQueryCacheSoftUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    IndexWriter w = new IndexWriter(dir, iwc);\n    LRUQueryCache queryCache = new LRUQueryCache(10, 1000 * 1000, ctx -> true, Float.POSITIVE_INFINITY);\n    IndexSearcher.setDefaultQueryCache(queryCache);\n    IndexSearcher.setDefaultQueryCachingPolicy(ALWAYS_CACHE);\n\n    SearcherManager sm = new SearcherManager(w, new SearcherFactory());\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    sm.maybeRefreshBlocking();\n\n    IndexSearcher searcher = sm.acquire();\n    Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.FILTER).build();\n    assertEquals(1, searcher.count(query));\n    assertEquals(1, queryCache.getCacheSize());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    boolean softDelete = true;\n    if (softDelete) {\n      Document tombstone = new Document();\n      tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"2\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    } else {\n      w.deleteDocuments(new Term(\"id\", \"1\"));\n      w.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n    sm.maybeRefreshBlocking();\n    // All docs in the first segment are deleted - we should drop it with the default merge policy.\n    sm.release(searcher);\n    assertEquals(0, queryCache.getCacheSize());\n    assertEquals(1, queryCache.getEvictionCount());\n    sm.close();\n    w.close();\n    dir.close();\n  }\n\n","sourceOld":"  public void testQueryCacheSoftUpdate() throws IOException {\n    Directory dir = newDirectory();\n    IndexWriterConfig iwc = newIndexWriterConfig().setSoftDeletesField(\"soft_delete\");\n    IndexWriter w = new IndexWriter(dir, iwc);\n    LRUQueryCache queryCache = new LRUQueryCache(10, 1000 * 1000, ctx -> true);\n    IndexSearcher.setDefaultQueryCache(queryCache);\n    IndexSearcher.setDefaultQueryCachingPolicy(ALWAYS_CACHE);\n\n    SearcherManager sm = new SearcherManager(w, new SearcherFactory());\n\n    Document doc = new Document();\n    doc.add(new StringField(\"id\", \"1\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    doc = new Document();\n    doc.add(new StringField(\"id\", \"2\", org.apache.lucene.document.Field.Store.YES));\n    w.addDocument(doc);\n\n    sm.maybeRefreshBlocking();\n\n    IndexSearcher searcher = sm.acquire();\n    Query query = new BooleanQuery.Builder().add(new TermQuery(new Term(\"id\", \"1\")), BooleanClause.Occur.FILTER).build();\n    assertEquals(1, searcher.count(query));\n    assertEquals(1, queryCache.getCacheSize());\n    assertEquals(0, queryCache.getEvictionCount());\n\n    boolean softDelete = true;\n    if (softDelete) {\n      Document tombstone = new Document();\n      tombstone.add(new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"1\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n      w.softUpdateDocument(new Term(\"id\", \"2\"), tombstone, new NumericDocValuesField(\"soft_delete\", 1));\n    } else {\n      w.deleteDocuments(new Term(\"id\", \"1\"));\n      w.deleteDocuments(new Term(\"id\", \"2\"));\n    }\n    sm.maybeRefreshBlocking();\n    // All docs in the first segment are deleted - we should drop it with the default merge policy.\n    sm.release(searcher);\n    assertEquals(0, queryCache.getCacheSize());\n    assertEquals(1, queryCache.getEvictionCount());\n    sm.close();\n    w.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c9d00c591703058371b3dc36f4957a6f24ca302":["36d13f271b6649357e07f71f7e46559479f69b5b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"36d13f271b6649357e07f71f7e46559479f69b5b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"]},"commit2Childs":{"6c9d00c591703058371b3dc36f4957a6f24ca302":["b5754bd6f04f13b67e9575f8b226a0303c31c7d5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["36d13f271b6649357e07f71f7e46559479f69b5b"],"36d13f271b6649357e07f71f7e46559479f69b5b":["6c9d00c591703058371b3dc36f4957a6f24ca302"],"b5754bd6f04f13b67e9575f8b226a0303c31c7d5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}