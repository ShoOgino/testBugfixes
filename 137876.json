{"path":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","commits":[{"id":"ceaef6cfc68c8ab22a684192e469a8280f9e6e70","date":1462354657,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3d33e731a93d4b57e662ff094f64f94a745422d4","date":1463128289,"type":0,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0ad30c6a479e764150a3316e57263319775f1df2","date":1463395403,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d470c8182e92b264680e34081b75e70a9f2b3c89","date":1463985353,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e065cebbdee472a02bde38052717a8cd7ee8ab3b","date":1479244971,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a1ef55e1fff7ff44354432770ad8bc19be1fcc75","date":1479266056,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortField.getType()) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65233715955663909ad948e05aa3fed614f4a57b","date":1481324713,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map((s) -> s.getField()).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d52354bcbccb95521096f3afee5e0680ce75ce39","date":1481326513,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map((s) -> s.getField()).collect(Collectors.toSet());\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24854cb14e00a478808eed0fb033712bd9d23368","date":1490980227,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8c376339ef46af81aef86236bc133af14cce9b44","date":1491045405,"type":3,"author":"Christine Poerschke","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use when merging segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.  Note that newly flushed segments will remain unsorted.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e4b5661206a4f500a03cb4680fbe647b46069879","date":1511391678,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use for all (flushed and merged) segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use when merging segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"773bf150032d3ef6c95997a154fb914b82875cb8","date":1590150786,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/IndexWriterConfig#setIndexSort(Sort).mjava","sourceNew":"  /**\n   * Set the {@link Sort} order to use for all (flushed and merged) segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for (SortField sortField : sort.getSort()) {\n      if (sortField.getIndexSorter() == null) {\n        throw new IllegalArgumentException(\"Cannot sort index with sort field \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","sourceOld":"  /**\n   * Set the {@link Sort} order to use for all (flushed and merged) segments.\n   */\n  public IndexWriterConfig setIndexSort(Sort sort) {\n    for(SortField sortField : sort.getSort()) {\n      final SortField.Type sortType = Sorter.getSortFieldType(sortField);\n      if (ALLOWED_INDEX_SORT_TYPES.contains(sortType) == false) {\n        throw new IllegalArgumentException(\"invalid SortField type: must be one of \" + ALLOWED_INDEX_SORT_TYPES + \" but got: \" + sortField);\n      }\n    }\n    this.indexSort = sort;\n    this.indexSortFields = Arrays.stream(sort.getSort()).map(SortField::getField).collect(Collectors.toSet());\n    return this;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"65233715955663909ad948e05aa3fed614f4a57b":["e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"0ad30c6a479e764150a3316e57263319775f1df2":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3d33e731a93d4b57e662ff094f64f94a745422d4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","d470c8182e92b264680e34081b75e70a9f2b3c89"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0ad30c6a479e764150a3316e57263319775f1df2"],"24854cb14e00a478808eed0fb033712bd9d23368":["d52354bcbccb95521096f3afee5e0680ce75ce39"],"8c376339ef46af81aef86236bc133af14cce9b44":["d52354bcbccb95521096f3afee5e0680ce75ce39"],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"773bf150032d3ef6c95997a154fb914b82875cb8":["e4b5661206a4f500a03cb4680fbe647b46069879"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","e065cebbdee472a02bde38052717a8cd7ee8ab3b"],"e4b5661206a4f500a03cb4680fbe647b46069879":["24854cb14e00a478808eed0fb033712bd9d23368"],"9856095f7afb5a607bf5e65077615ed91273508c":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75","d52354bcbccb95521096f3afee5e0680ce75ce39"],"d52354bcbccb95521096f3afee5e0680ce75ce39":["65233715955663909ad948e05aa3fed614f4a57b"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ceaef6cfc68c8ab22a684192e469a8280f9e6e70"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["773bf150032d3ef6c95997a154fb914b82875cb8"]},"commit2Childs":{"65233715955663909ad948e05aa3fed614f4a57b":["d52354bcbccb95521096f3afee5e0680ce75ce39"],"e065cebbdee472a02bde38052717a8cd7ee8ab3b":["65233715955663909ad948e05aa3fed614f4a57b","a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"0ad30c6a479e764150a3316e57263319775f1df2":["d470c8182e92b264680e34081b75e70a9f2b3c89"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a1ef55e1fff7ff44354432770ad8bc19be1fcc75"],"d470c8182e92b264680e34081b75e70a9f2b3c89":["e065cebbdee472a02bde38052717a8cd7ee8ab3b","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"24854cb14e00a478808eed0fb033712bd9d23368":["e4b5661206a4f500a03cb4680fbe647b46069879"],"8c376339ef46af81aef86236bc133af14cce9b44":[],"ceaef6cfc68c8ab22a684192e469a8280f9e6e70":["3d33e731a93d4b57e662ff094f64f94a745422d4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0ad30c6a479e764150a3316e57263319775f1df2","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","d470c8182e92b264680e34081b75e70a9f2b3c89","ceaef6cfc68c8ab22a684192e469a8280f9e6e70","3d33e731a93d4b57e662ff094f64f94a745422d4"],"773bf150032d3ef6c95997a154fb914b82875cb8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a1ef55e1fff7ff44354432770ad8bc19be1fcc75":["9856095f7afb5a607bf5e65077615ed91273508c"],"e4b5661206a4f500a03cb4680fbe647b46069879":["773bf150032d3ef6c95997a154fb914b82875cb8"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"d52354bcbccb95521096f3afee5e0680ce75ce39":["24854cb14e00a478808eed0fb033712bd9d23368","8c376339ef46af81aef86236bc133af14cce9b44","9856095f7afb5a607bf5e65077615ed91273508c"],"3d33e731a93d4b57e662ff094f64f94a745422d4":["0ad30c6a479e764150a3316e57263319775f1df2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8c376339ef46af81aef86236bc133af14cce9b44","9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}