{"path":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","commits":[{"id":"1f4c469c57215784dc7d6a6417ca2529ba84525b","date":1499266417,"type":0,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e73d8d559120669b47658108d818b637df5456ea","date":1499401413,"type":1,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/FieldValueQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"706a7a3396c030cc66dda92a0492eb492131c4c0","date":1509705614,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d523b8189b211dd1630166aa77b8c88bb48b3fcc","date":1510144168,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"da1460d7a5dea2658e7b8e4f6e632e53ade440ac","date":1510316270,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public IndexReader.CacheHelper getCacheHelper(LeafReaderContext context) {\n        return getDocValuesCacheHelper(field, context);\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9fc47cb7b4346802411bb432f501ed0673d7119e","date":1512640179,"type":5,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"417142ff08fda9cf0b72d5133e63097a166c6458","date":1512729693,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/search/DocValuesFieldExistsQuery#createWeight(IndexSearcher,boolean,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, boolean needsScores, float boost) throws IOException {\n    return new ConstantScoreWeight(this, boost) {\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        FieldInfos fieldInfos = context.reader().getFieldInfos();\n        FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n        if (fieldInfo == null) {\n          return null;\n        }\n        DocValuesType dvType = fieldInfo.getDocValuesType();\n        LeafReader reader = context.reader();\n        DocIdSetIterator iterator;\n        switch(dvType) {\n        case NONE:\n          return null;\n        case NUMERIC:\n          iterator = reader.getNumericDocValues(field);\n          break;\n        case BINARY:\n          iterator = reader.getBinaryDocValues(field);\n          break;\n        case SORTED:\n          iterator = reader.getSortedDocValues(field);\n          break;\n        case SORTED_NUMERIC:\n          iterator = reader.getSortedNumericDocValues(field);\n          break;\n        case SORTED_SET:\n          iterator = reader.getSortedSetDocValues(field);\n          break;\n        default:\n          throw new AssertionError();\n        }\n\n        return new ConstantScoreScorer(this, score(), iterator);\n      }\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return DocValues.isCacheable(ctx, field);\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["1f4c469c57215784dc7d6a6417ca2529ba84525b"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["1f4c469c57215784dc7d6a6417ca2529ba84525b","706a7a3396c030cc66dda92a0492eb492131c4c0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e73d8d559120669b47658108d818b637df5456ea":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","1f4c469c57215784dc7d6a6417ca2529ba84525b"],"9fc47cb7b4346802411bb432f501ed0673d7119e":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["417142ff08fda9cf0b72d5133e63097a166c6458"],"1f4c469c57215784dc7d6a6417ca2529ba84525b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"417142ff08fda9cf0b72d5133e63097a166c6458":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac","9fc47cb7b4346802411bb432f501ed0673d7119e"]},"commit2Childs":{"706a7a3396c030cc66dda92a0492eb492131c4c0":["d523b8189b211dd1630166aa77b8c88bb48b3fcc"],"da1460d7a5dea2658e7b8e4f6e632e53ade440ac":["9fc47cb7b4346802411bb432f501ed0673d7119e","417142ff08fda9cf0b72d5133e63097a166c6458"],"d523b8189b211dd1630166aa77b8c88bb48b3fcc":["da1460d7a5dea2658e7b8e4f6e632e53ade440ac"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e73d8d559120669b47658108d818b637df5456ea","1f4c469c57215784dc7d6a6417ca2529ba84525b"],"e73d8d559120669b47658108d818b637df5456ea":[],"9fc47cb7b4346802411bb432f501ed0673d7119e":["417142ff08fda9cf0b72d5133e63097a166c6458"],"1f4c469c57215784dc7d6a6417ca2529ba84525b":["706a7a3396c030cc66dda92a0492eb492131c4c0","d523b8189b211dd1630166aa77b8c88bb48b3fcc","e73d8d559120669b47658108d818b637df5456ea"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"417142ff08fda9cf0b72d5133e63097a166c6458":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["e73d8d559120669b47658108d818b637df5456ea","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}