{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","commits":[{"id":"b1777912fb613f51063554d81f71c1b70d6bcd77","date":1470897768,"type":1,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","sourceOld":"  private void addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node not provided, Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(), ZkStateReader.COLLECTION_PROP,\n            collection, ZkStateReader.SHARD_ID_PROP, shard, ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(), ZkStateReader.BASE_URL_PROP,\n            zkStateReader.getBaseUrlForNodeName(node), ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n\n    waitForCoreNodeName(collection, node, coreName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n    log.info(\"addReplica() : {}\", Utils.toJSONString(message));\n    String collection = message.getStr(COLLECTION_PROP);\n    String node = message.getStr(CoreAdminParams.NODE);\n    String shard = message.getStr(SHARD_ID_PROP);\n    String coreName = message.getStr(CoreAdminParams.NAME);\n    boolean parallel = message.getBool(\"parallel\", false);\n    if (StringUtils.isBlank(coreName)) {\n      coreName = message.getStr(CoreAdminParams.PROPERTY_PREFIX + CoreAdminParams.NAME);\n    }\n    \n    final String asyncId = message.getStr(ASYNC);\n    \n    DocCollection coll = clusterState.getCollection(collection);\n    if (coll == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collection + \" does not exist\");\n    }\n    if (coll.getSlice(shard) == null) {\n      throw new SolrException(ErrorCode.BAD_REQUEST,\n          \"Collection: \" + collection + \" shard: \" + shard + \" does not exist\");\n    }\n    ShardHandler shardHandler = shardHandlerFactory.getShardHandler();\n    boolean skipCreateReplicaInClusterState = message.getBool(SKIP_CREATE_REPLICA_IN_CLUSTER_STATE, false);\n\n    // Kind of unnecessary, but it does put the logic of whether to override maxShardsPerNode in one place.\n    if (!skipCreateReplicaInClusterState) {\n      node = getNodesForNewReplicas(clusterState, collection, shard, 1, node,\n          overseer.getZkController().getCoreContainer()).get(0).nodeName;\n    }\n    log.info(\"Node Identified {} for creating new replica\", node);\n\n    if (!clusterState.liveNodesContain(node)) {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Node: \" + node + \" is not live\");\n    }\n    if (coreName == null) {\n      coreName = Assign.buildCoreName(coll, shard);\n    } else if (!skipCreateReplicaInClusterState) {\n      //Validate that the core name is unique in that collection\n      for (Slice slice : coll.getSlices()) {\n        for (Replica replica : slice.getReplicas()) {\n          String replicaCoreName = replica.getStr(CORE_NAME_PROP);\n          if (coreName.equals(replicaCoreName)) {\n            throw new SolrException(ErrorCode.BAD_REQUEST, \"Another replica with the same core name already exists\" +\n                \" for this collection\");\n          }\n        }\n      }\n    }\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    \n    if (!Overseer.isLegacy(zkStateReader)) {\n      if (!skipCreateReplicaInClusterState) {\n        ZkNodeProps props = new ZkNodeProps(\n            Overseer.QUEUE_OPERATION, ADDREPLICA.toLower(),\n            ZkStateReader.COLLECTION_PROP, collection,\n            ZkStateReader.SHARD_ID_PROP, shard,\n            ZkStateReader.CORE_NAME_PROP, coreName,\n            ZkStateReader.STATE_PROP, Replica.State.DOWN.toString(),\n            ZkStateReader.BASE_URL_PROP, zkStateReader.getBaseUrlForNodeName(node),\n            ZkStateReader.NODE_NAME_PROP, node);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(props));\n      }\n      params.set(CoreAdminParams.CORE_NODE_NAME,\n          waitToSeeReplicasInState(collection, Collections.singletonList(coreName)).get(coreName).getName());\n    }\n    \n    String configName = zkStateReader.readConfigName(collection);\n    String routeKey = message.getStr(ShardParams._ROUTE_);\n    String dataDir = message.getStr(CoreAdminParams.DATA_DIR);\n    String instanceDir = message.getStr(CoreAdminParams.INSTANCE_DIR);\n    \n    params.set(CoreAdminParams.ACTION, CoreAdminAction.CREATE.toString());\n    params.set(CoreAdminParams.NAME, coreName);\n    params.set(COLL_CONF, configName);\n    params.set(CoreAdminParams.COLLECTION, collection);\n    if (shard != null) {\n      params.set(CoreAdminParams.SHARD, shard);\n    } else if (routeKey != null) {\n      Collection<Slice> slices = coll.getRouter().getSearchSlicesSingle(routeKey, null, coll);\n      if (slices.isEmpty()) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"No active shard serving _route_=\" + routeKey + \" found\");\n      } else {\n        params.set(CoreAdminParams.SHARD, slices.iterator().next().getName());\n      }\n    } else {\n      throw new SolrException(ErrorCode.BAD_REQUEST, \"Specify either 'shard' or _route_ param\");\n    }\n    if (dataDir != null) {\n      params.set(CoreAdminParams.DATA_DIR, dataDir);\n    }\n    if (instanceDir != null) {\n      params.set(CoreAdminParams.INSTANCE_DIR, instanceDir);\n    }\n    addPropertyParams(message, params);\n    \n    // For tracking async calls.\n    Map<String,String> requestMap = new HashMap<>();\n    sendShardRequest(node, params, shardHandler, asyncId, requestMap);\n\n    final String fnode = node;\n    final String fcoreName = coreName;\n\n    Runnable runnable = () -> {\n      processResponses(results, shardHandler, true, \"ADDREPLICA failed to create replica\", asyncId, requestMap);\n      waitForCoreNodeName(collection, fnode, fcoreName);\n      if (onComplete != null) onComplete.run();\n    };\n\n    if (!parallel) {\n      runnable.run();\n    } else {\n      tpe.submit(runnable);\n    }\n\n\n    return new ZkNodeProps(\n        ZkStateReader.COLLECTION_PROP, collection,\n        ZkStateReader.SHARD_ID_PROP, shard,\n        ZkStateReader.CORE_NAME_PROP, coreName,\n        ZkStateReader.NODE_NAME_PROP, node\n    );\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"/dev/null","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"/dev/null","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","date":1503580177,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b869898f50ca80263bac2e3ae0949f7700e5c977","date":1503580229,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"85212dad4ed576c7f7e6c165ee19e597b7b4efc8","date":1507997740,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws KeeperException, InterruptedException {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6146c07c0dee1ae1e42926167acd127fed5ef59d","date":1516129420,"type":5,"author":"Varun Thacker","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b94236357aaa22b76c10629851fe4e376e0cea82","date":1516710914,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#addReplica(ClusterState,ZkNodeProps,NamedList,Runnable).mjava","sourceNew":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","sourceOld":"  ZkNodeProps addReplica(ClusterState clusterState, ZkNodeProps message, NamedList results, Runnable onComplete)\n      throws Exception {\n\n    return ((AddReplicaCmd) commandMap.get(ADDREPLICA)).addReplica(clusterState, message, results, onComplete);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b94236357aaa22b76c10629851fe4e376e0cea82":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["b1777912fb613f51063554d81f71c1b70d6bcd77"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["85212dad4ed576c7f7e6c165ee19e597b7b4efc8"],"b869898f50ca80263bac2e3ae0949f7700e5c977":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac"],"b1777912fb613f51063554d81f71c1b70d6bcd77":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b94236357aaa22b76c10629851fe4e376e0cea82"]},"commit2Childs":{"b94236357aaa22b76c10629851fe4e376e0cea82":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac","85212dad4ed576c7f7e6c165ee19e597b7b4efc8","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"c7ff8a6fbdc9c2d84bc6e9e71e1c738e49c441ac":["b869898f50ca80263bac2e3ae0949f7700e5c977"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["403d05f7f8d69b65659157eff1bc1d2717f04c66","b1777912fb613f51063554d81f71c1b70d6bcd77","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"85212dad4ed576c7f7e6c165ee19e597b7b4efc8":["b94236357aaa22b76c10629851fe4e376e0cea82","6146c07c0dee1ae1e42926167acd127fed5ef59d"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"6146c07c0dee1ae1e42926167acd127fed5ef59d":["b94236357aaa22b76c10629851fe4e376e0cea82"],"b869898f50ca80263bac2e3ae0949f7700e5c977":[],"b1777912fb613f51063554d81f71c1b70d6bcd77":["66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b869898f50ca80263bac2e3ae0949f7700e5c977","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}