{"path":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":2,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","pathOld":"backwards/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","sourceNew":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final byte[][] getBinaryValues(String name) {\n    List<byte[]> result = new ArrayList<byte[]>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        result.add(field.getBinaryValue());\n    }\n  \n    if (result.size() == 0)\n      return NO_BYTES;\n  \n    return result.toArray(new byte[result.size()][]);\n  }\n\n","sourceOld":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final byte[][] getBinaryValues(String name) {\n    List<byte[]> result = new ArrayList<byte[]>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        result.add(field.getBinaryValue());\n    }\n  \n    if (result.size() == 0)\n      return NO_BYTES;\n  \n    return result.toArray(new byte[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1509f151d7692d84fae414b2b799ac06ba60fcb4","date":1314451621,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","sourceNew":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final BytesRef[] getBinaryValues(String name) {\n    final List<BytesRef> result = new ArrayList<BytesRef>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          result.add(bytes);\n        }\n      }\n    }\n  \n    return result.toArray(new BytesRef[result.size()]);\n  }\n\n","sourceOld":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final byte[][] getBinaryValues(String name) {\n    List<byte[]> result = new ArrayList<byte[]>();\n    for (Fieldable field : fields) {\n      if (field.name().equals(name) && (field.isBinary()))\n        result.add(field.getBinaryValue());\n    }\n  \n    if (result.size() == 0)\n      return NO_BYTES;\n  \n    return result.toArray(new byte[result.size()][]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","pathOld":"lucene/src/java/org/apache/lucene/document/Document#getBinaryValues(String).mjava","sourceNew":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final BytesRef[] getBinaryValues(String name) {\n    final List<BytesRef> result = new ArrayList<BytesRef>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          result.add(bytes);\n        }\n      }\n    }\n  \n    return result.toArray(new BytesRef[result.size()]);\n  }\n\n","sourceOld":"  /**\n  * Returns an array of byte arrays for of the fields that have the name specified\n  * as the method parameter.  This method returns an empty\n  * array when there are no matching fields.  It never\n  * returns null.\n  *\n  * @param name the name of the field\n  * @return a <code>byte[][]</code> of binary field values\n  */\n  public final BytesRef[] getBinaryValues(String name) {\n    final List<BytesRef> result = new ArrayList<BytesRef>();\n    for (IndexableField field : fields) {\n      if (field.name().equals(name)) {\n        final BytesRef bytes = field.binaryValue();\n        if (bytes != null) {\n          result.add(bytes);\n        }\n      }\n    }\n  \n    return result.toArray(new BytesRef[result.size()]);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"1509f151d7692d84fae414b2b799ac06ba60fcb4":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["1509f151d7692d84fae414b2b799ac06ba60fcb4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}