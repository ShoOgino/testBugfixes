{"path":"src/java/org/apache/solr/schema/IndexSchema#registerCopyField(String,String,int).mjava","commits":[{"id":"55883d09343e80968c5e44b9c14da13238544a0a","date":1228020380,"type":0,"author":"Koji Sekiguchi","isMerge":false,"pathNew":"src/java/org/apache/solr/schema/IndexSchema#registerCopyField(String,String,int).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   * \n   * @see SolrCoreAware\n   */\n  public void registerCopyField( String source, String dest, int maxChars )\n  {\n    boolean sourceIsPattern = isWildCard(source);\n    boolean destIsPattern   = isWildCard(dest);\n\n    log.debug(\"copyField source='\"+source+\"' dest='\"+dest+\"' maxChars='\"+maxChars);\n    SchemaField d = getFieldOrNull(dest);\n    if(d == null){\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField destination :'\"+dest+\"' does not exist\" );\n    }\n\n    if(sourceIsPattern) {\n      if( destIsPattern ) {\n        DynamicField df = null;\n        for( DynamicField dd : dynamicFields ) {\n          if( dd.regex.equals( dest ) ) {\n            df = dd;\n            break;\n          }\n        }\n        if( df == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField dynamic destination must match a dynamicField.\" );\n        }\n        registerDynamicCopyField(new DynamicDestCopy(source, df, maxChars ));\n      }\n      else {\n        registerDynamicCopyField(new DynamicCopy(source, d, maxChars));\n      }\n    } \n    else if( destIsPattern ) {\n      String msg =  \"copyField only supports a dynamic destination if the source is also dynamic\" ;\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );\n    }\n    else {\n      // retrieve the field to force an exception if it doesn't exist\n      SchemaField f = getField(source);\n\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList == null) {\n        copyFieldList = new ArrayList<CopyField>();\n        copyFieldsMap.put(source, copyFieldList);\n      }\n      copyFieldList.add(new CopyField(f, d, maxChars));\n\n      copyFieldTargetCounts.put(d, (copyFieldTargetCounts.containsKey(d) ? copyFieldTargetCounts.get(d) + 1 : 1));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/schema/IndexSchema#registerCopyField(String,String,int).mjava","pathOld":"src/java/org/apache/solr/schema/IndexSchema#registerCopyField(String,String,int).mjava","sourceNew":"  /**\n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   * \n   * @see SolrCoreAware\n   */\n  public void registerCopyField( String source, String dest, int maxChars )\n  {\n    boolean sourceIsPattern = isWildCard(source);\n    boolean destIsPattern   = isWildCard(dest);\n\n    log.debug(\"copyField source='\"+source+\"' dest='\"+dest+\"' maxChars='\"+maxChars);\n    SchemaField d = getFieldOrNull(dest);\n    if(d == null){\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField destination :'\"+dest+\"' does not exist\" );\n    }\n\n    if(sourceIsPattern) {\n      if( destIsPattern ) {\n        DynamicField df = null;\n        for( DynamicField dd : dynamicFields ) {\n          if( dd.regex.equals( dest ) ) {\n            df = dd;\n            break;\n          }\n        }\n        if( df == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField dynamic destination must match a dynamicField.\" );\n        }\n        registerDynamicCopyField(new DynamicDestCopy(source, df, maxChars ));\n      }\n      else {\n        registerDynamicCopyField(new DynamicCopy(source, d, maxChars));\n      }\n    } \n    else if( destIsPattern ) {\n      String msg =  \"copyField only supports a dynamic destination if the source is also dynamic\" ;\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );\n    }\n    else {\n      // retrieve the field to force an exception if it doesn't exist\n      SchemaField f = getField(source);\n\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList == null) {\n        copyFieldList = new ArrayList<CopyField>();\n        copyFieldsMap.put(source, copyFieldList);\n      }\n      copyFieldList.add(new CopyField(f, d, maxChars));\n\n      copyFieldTargetCounts.put(d, (copyFieldTargetCounts.containsKey(d) ? copyFieldTargetCounts.get(d) + 1 : 1));\n    }\n  }\n\n","sourceOld":"  /**\n   * <p>\n   * NOTE: this function is not thread safe.  However, it is safe to use within the standard\n   * <code>inform( SolrCore core )</code> function for <code>SolrCoreAware</code> classes.\n   * Outside <code>inform</code>, this could potentially throw a ConcurrentModificationException\n   * </p>\n   * \n   * @see SolrCoreAware\n   */\n  public void registerCopyField( String source, String dest, int maxChars )\n  {\n    boolean sourceIsPattern = isWildCard(source);\n    boolean destIsPattern   = isWildCard(dest);\n\n    log.debug(\"copyField source='\"+source+\"' dest='\"+dest+\"' maxChars='\"+maxChars);\n    SchemaField d = getFieldOrNull(dest);\n    if(d == null){\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField destination :'\"+dest+\"' does not exist\" );\n    }\n\n    if(sourceIsPattern) {\n      if( destIsPattern ) {\n        DynamicField df = null;\n        for( DynamicField dd : dynamicFields ) {\n          if( dd.regex.equals( dest ) ) {\n            df = dd;\n            break;\n          }\n        }\n        if( df == null ) {\n          throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"copyField dynamic destination must match a dynamicField.\" );\n        }\n        registerDynamicCopyField(new DynamicDestCopy(source, df, maxChars ));\n      }\n      else {\n        registerDynamicCopyField(new DynamicCopy(source, d, maxChars));\n      }\n    } \n    else if( destIsPattern ) {\n      String msg =  \"copyField only supports a dynamic destination if the source is also dynamic\" ;\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, msg );\n    }\n    else {\n      // retrieve the field to force an exception if it doesn't exist\n      SchemaField f = getField(source);\n\n      List<CopyField> copyFieldList = copyFieldsMap.get(source);\n      if (copyFieldList == null) {\n        copyFieldList = new ArrayList<CopyField>();\n        copyFieldsMap.put(source, copyFieldList);\n      }\n      copyFieldList.add(new CopyField(f, d, maxChars));\n\n      copyFieldTargetCounts.put(d, (copyFieldTargetCounts.containsKey(d) ? copyFieldTargetCounts.get(d) + 1 : 1));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["55883d09343e80968c5e44b9c14da13238544a0a"],"55883d09343e80968c5e44b9c14da13238544a0a":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["55883d09343e80968c5e44b9c14da13238544a0a"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"55883d09343e80968c5e44b9c14da13238544a0a":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}