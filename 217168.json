{"path":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#withinTriangle(int,int,boolean,int,int,boolean,int,int,boolean).mjava","commits":[{"id":"09c1e6d465800c73af60624bf9d4459a19f7940c","date":1579293280,"type":1,"author":"Nicholas Knize","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#withinTriangle(int,int,boolean,int,int,boolean,int,int,boolean).mjava","pathOld":"lucene/sandbox/src/java/org/apache/lucene/geo/Rectangle2D#withinTriangle(int,int,boolean,int,int,boolean,int,int,boolean).mjava","sourceNew":"  /** Returns the Within relation to the provided triangle */\n  public Component2D.WithinRelation withinTriangle(int ax, int ay, boolean ab, int bx, int by, boolean bc, int cx, int cy, boolean ca) {\n    if (this.crossesDateline() == true) {\n      throw new IllegalArgumentException(\"withinTriangle is not supported for rectangles crossing the date line\");\n    }\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n    int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n    int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n    int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n    // Bounding boxes disjoint?\n    if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(cx, cy, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    Component2D.WithinRelation relation = Component2D.WithinRelation.DISJOINT;\n    if (edgeIntersectsBox(ax, ay, bx, by, minX, maxX, minY, maxY) == true) {\n      if (ab == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgeIntersectsBox(bx, by, cx, cy, minX, maxX, minY, maxY) == true) {\n      if (bc == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgeIntersectsBox(cx, cy, ax, ay, minX, maxX, minY, maxY) == true) {\n      if (ca == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == Component2D.WithinRelation.CANDIDATE) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Tessellator.pointInTriangle(minX, minY, ax, ay, bx, by, cx, cy)) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","sourceOld":"  /** Returns the Within relation to the provided triangle */\n  public Component2D.WithinRelation withinTriangle(int ax, int ay, boolean ab, int bx, int by, boolean bc, int cx, int cy, boolean ca) {\n    if (this.crossesDateline() == true) {\n      throw new IllegalArgumentException(\"withinTriangle is not supported for rectangles crossing the date line\");\n    }\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n    int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n    int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n    int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n    // Bounding boxes disjoint?\n    if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(cx, cy, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    Component2D.WithinRelation relation = Component2D.WithinRelation.DISJOINT;\n    if (edgeIntersectsBox(ax, ay, bx, by, minX, maxX, minY, maxY) == true) {\n      if (ab == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgeIntersectsBox(bx, by, cx, cy, minX, maxX, minY, maxY) == true) {\n      if (bc == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgeIntersectsBox(cx, cy, ax, ay, minX, maxX, minY, maxY) == true) {\n      if (ca == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == Component2D.WithinRelation.CANDIDATE) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Tessellator.pointInTriangle(minX, minY, ax, ay, bx, by, cx, cy)) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"56c42be8d779573d0c86ba775117e17360dbf5a6","date":1583217404,"type":4,"author":"Ignacio Vera","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/geo/Rectangle2D#withinTriangle(int,int,boolean,int,int,boolean,int,int,boolean).mjava","sourceNew":null,"sourceOld":"  /** Returns the Within relation to the provided triangle */\n  public Component2D.WithinRelation withinTriangle(int ax, int ay, boolean ab, int bx, int by, boolean bc, int cx, int cy, boolean ca) {\n    if (this.crossesDateline() == true) {\n      throw new IllegalArgumentException(\"withinTriangle is not supported for rectangles crossing the date line\");\n    }\n    // Short cut, lines and points cannot contain a bbox\n    if ((ax == bx && ay == by) || (ax == cx && ay == cy) || (bx == cx && by == cy)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Compute bounding box of triangle\n    int tMinX = StrictMath.min(StrictMath.min(ax, bx), cx);\n    int tMaxX = StrictMath.max(StrictMath.max(ax, bx), cx);\n    int tMinY = StrictMath.min(StrictMath.min(ay, by), cy);\n    int tMaxY = StrictMath.max(StrictMath.max(ay, by), cy);\n    // Bounding boxes disjoint?\n    if (boxesAreDisjoint(tMinX, tMaxX, tMinY, tMaxY, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.DISJOINT;\n    }\n    // Points belong to the shape so if points are inside the rectangle then it cannot be within.\n    if (bboxContainsPoint(ax, ay, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(bx, by, minX, maxX, minY, maxY) ||\n        bboxContainsPoint(cx, cy, minX, maxX, minY, maxY)) {\n      return Component2D.WithinRelation.NOTWITHIN;\n    }\n    // If any of the edges intersects an edge belonging to the shape then it cannot be within.\n    Component2D.WithinRelation relation = Component2D.WithinRelation.DISJOINT;\n    if (edgeIntersectsBox(ax, ay, bx, by, minX, maxX, minY, maxY) == true) {\n      if (ab == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    if (edgeIntersectsBox(bx, by, cx, cy, minX, maxX, minY, maxY) == true) {\n      if (bc == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n\n    if (edgeIntersectsBox(cx, cy, ax, ay, minX, maxX, minY, maxY) == true) {\n      if (ca == true) {\n        return Component2D.WithinRelation.NOTWITHIN;\n      } else {\n        relation = Component2D.WithinRelation.CANDIDATE;\n      }\n    }\n    // If any of the rectangle edges crosses a triangle edge that does not belong to the shape\n    // then it is a candidate for within\n    if (relation == Component2D.WithinRelation.CANDIDATE) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    // Check if shape is within the triangle\n    if (Tessellator.pointInTriangle(minX, minY, ax, ay, bx, by, cx, cy)) {\n      return Component2D.WithinRelation.CANDIDATE;\n    }\n    return relation;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"09c1e6d465800c73af60624bf9d4459a19f7940c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["56c42be8d779573d0c86ba775117e17360dbf5a6"]},"commit2Childs":{"56c42be8d779573d0c86ba775117e17360dbf5a6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["09c1e6d465800c73af60624bf9d4459a19f7940c"],"09c1e6d465800c73af60624bf9d4459a19f7940c":["56c42be8d779573d0c86ba775117e17360dbf5a6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}