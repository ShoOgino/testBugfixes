{"path":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"/dev/null","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n      termsConsumer.merge(mergeState, fieldsEnum.terms());\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0e28c49f1fb6215a550fdadcf3805aa629b63ec0","date":1288081775,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      \n      DocValues docValues = fieldsEnum.docValues();   // fix this - does not work due to multi fields\n      if(docValues != null) {\n      // TODO we need some kind of compatibility notation for values such\n      // that two slighly different segments can be merged eg. fixed vs.\n      // variable byte len or float32 vs. float64\n        int docBase = 0;\n        final List<Writer.MergeState> mergeStates = new ArrayList<Writer.MergeState>();\n        for (IndexReader reader : mergeState.readers) {\n          DocValues r = reader.docValues(mergeState.fieldInfo.name);\n          if (r != null) {\n            mergeStates.add(new Writer.MergeState(r, docBase, reader\n                .maxDoc(), reader.getDeletedDocs()));\n          }\n          docBase += reader.numDocs();\n        }\n        if (mergeStates.isEmpty()) {\n          continue;\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        docValuesConsumer.merge(mergeStates);\n        docValuesConsumer.finish(mergeState.mergedDocCount);\n      }\n      \n      // merge doc values\n//   \n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n      termsConsumer.merge(mergeState, fieldsEnum.terms());\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"39f3757037aa8f710c0cbf9a76a332de735f58b0","date":1288384416,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        assert docValues != null : \"DocValues are null for \" + mergeState.fieldInfo.getDocValues();\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      \n      DocValues docValues = fieldsEnum.docValues();   // fix this - does not work due to multi fields\n      if(docValues != null) {\n      // TODO we need some kind of compatibility notation for values such\n      // that two slighly different segments can be merged eg. fixed vs.\n      // variable byte len or float32 vs. float64\n        int docBase = 0;\n        final List<Writer.MergeState> mergeStates = new ArrayList<Writer.MergeState>();\n        for (IndexReader reader : mergeState.readers) {\n          DocValues r = reader.docValues(mergeState.fieldInfo.name);\n          if (r != null) {\n            mergeStates.add(new Writer.MergeState(r, docBase, reader\n                .maxDoc(), reader.getDeletedDocs()));\n          }\n          docBase += reader.numDocs();\n        }\n        if (mergeStates.isEmpty()) {\n          continue;\n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        docValuesConsumer.merge(mergeStates);\n        docValuesConsumer.finish(mergeState.mergedDocCount);\n      }\n      \n      // merge doc values\n//   \n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0637f89202e27b25802435a9cf789fc0890c8a67","date":1288436161,"type":3,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        // TODO: is this assert values and if so when?\n//        assert docValues != null : \"DocValues are null for \" + mergeState.fieldInfo.getDocValues();\n        if(docValues == null) { // for now just continue\n          continue; \n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        assert docValues != null : \"DocValues are null for \" + mergeState.fieldInfo.getDocValues();\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ab5cb6a74aefb78aa0569857970b9151dfe2e787","date":1292842407,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        if(docValues == null) { \n          /* It is actually possible that a fieldInfo has a values type but no values are actually available.\n           * this can happen if there are already segments without values around.\n           */\n          continue; \n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        // TODO: is this assert values and if so when?\n//        assert docValues != null : \"DocValues are null for \" + mergeState.fieldInfo.getDocValues();\n        if(docValues == null) { // for now just continue\n          continue; \n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"135621f3a0670a9394eb563224a3b76cc4dddc0f","date":1304344257,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n      if (mergeState.fieldInfo.hasDocValues()) {\n        final DocValues docValues = fieldsEnum.docValues();\n        if(docValues == null) { \n          /* It is actually possible that a fieldInfo has a values type but no values are actually available.\n           * this can happen if there are already segments without values around.\n           */\n          continue; \n        }\n        final DocValuesConsumer docValuesConsumer = addValuesField(mergeState.fieldInfo);\n        assert docValuesConsumer != null;\n        docValuesConsumer.merge(mergeState, docValues);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0150c6e116b24d66f02d63fcb0758f336e8791e2","date":1307283797,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if(terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2e8d7ba2175f47e280231533f7d3016249cea88b","date":1307711934,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n      termsConsumer.merge(mergeState, fieldsEnum.terms());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","date":1307729864,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n      termsConsumer.merge(mergeState, fieldsEnum.terms());\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3cc749c053615f5871f3b95715fe292f34e70a53","date":1321470575,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      TermsEnum terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4","d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0ae5e3ed1232483b7b8a014f175a5fe43595982","date":1324062192,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","pathOld":"lucene/src/java/org/apache/lucene/index/codecs/FieldsConsumer#merge(MergeState,Fields).mjava","sourceNew":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","sourceOld":"  public void merge(MergeState mergeState, Fields fields) throws IOException {\n    FieldsEnum fieldsEnum = fields.iterator();\n    assert fieldsEnum != null;\n    String field;\n    while((field = fieldsEnum.next()) != null) {\n      mergeState.fieldInfo = mergeState.fieldInfos.fieldInfo(field);\n      assert mergeState.fieldInfo != null : \"FieldInfo for field is null: \"+ field;\n      Terms terms = fieldsEnum.terms();\n      if (terms != null) {\n        final TermsConsumer termsConsumer = addField(mergeState.fieldInfo);\n        termsConsumer.merge(mergeState, terms.iterator(null));\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","2e8d7ba2175f47e280231533f7d3016249cea88b"],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["ab5cb6a74aefb78aa0569857970b9151dfe2e787","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"3cc749c053615f5871f3b95715fe292f34e70a53":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["0637f89202e27b25802435a9cf789fc0890c8a67","955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","0150c6e116b24d66f02d63fcb0758f336e8791e2"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["3cc749c053615f5871f3b95715fe292f34e70a53"],"0637f89202e27b25802435a9cf789fc0890c8a67":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"]},"commit2Childs":{"a02058e0eaba4bbd5d05e6b06b9522c0acfd1655":[],"39f3757037aa8f710c0cbf9a76a332de735f58b0":["0637f89202e27b25802435a9cf789fc0890c8a67"],"0150c6e116b24d66f02d63fcb0758f336e8791e2":["2e8d7ba2175f47e280231533f7d3016249cea88b"],"135621f3a0670a9394eb563224a3b76cc4dddc0f":["0150c6e116b24d66f02d63fcb0758f336e8791e2"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","135621f3a0670a9394eb563224a3b76cc4dddc0f","ab5cb6a74aefb78aa0569857970b9151dfe2e787","2e8d7ba2175f47e280231533f7d3016249cea88b","0e28c49f1fb6215a550fdadcf3805aa629b63ec0"],"ab5cb6a74aefb78aa0569857970b9151dfe2e787":["135621f3a0670a9394eb563224a3b76cc4dddc0f"],"3cc749c053615f5871f3b95715fe292f34e70a53":["a0ae5e3ed1232483b7b8a014f175a5fe43595982"],"2e8d7ba2175f47e280231533f7d3016249cea88b":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","3cc749c053615f5871f3b95715fe292f34e70a53"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"0e28c49f1fb6215a550fdadcf3805aa629b63ec0":["39f3757037aa8f710c0cbf9a76a332de735f58b0"],"0637f89202e27b25802435a9cf789fc0890c8a67":["ab5cb6a74aefb78aa0569857970b9151dfe2e787"],"a0ae5e3ed1232483b7b8a014f175a5fe43595982":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["a02058e0eaba4bbd5d05e6b06b9522c0acfd1655","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}