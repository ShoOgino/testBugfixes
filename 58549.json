{"path":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","commits":[{"id":"be29e0e2cef1fd569147732e48caf8538790339b","date":1250443738,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e00b39c28013c732c5d678a32c3d63519499b390","date":1261041546,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","pathOld":"src/java/org/apache/solr/analysis/CapitalizationFilter[CapitalizationFilterFactory]#incrementToken().mjava","sourceNew":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","sourceOld":"  @Override\n  public boolean incrementToken() throws IOException {\n    if (!input.incrementToken()) return false;\n\n    char[] termBuffer = termAtt.termBuffer();\n    int termBufferLength = termAtt.termLength();\n    char[] backup = null;\n    if (factory.maxWordCount < CapitalizationFilterFactory.DEFAULT_MAX_WORD_COUNT) {\n      //make a backup in case we exceed the word count\n      backup = new char[termBufferLength];\n      System.arraycopy(termBuffer, 0, backup, 0, termBufferLength);\n    }\n    if (termBufferLength < factory.maxTokenLength) {\n      int wordCount = 0;\n\n      int lastWordStart = 0;\n      for (int i = 0; i < termBufferLength; i++) {\n        char c = termBuffer[i];\n        if (c <= ' ' || c == '.') {\n          int len = i - lastWordStart;\n          if (len > 0) {\n            factory.processWord(termBuffer, lastWordStart, len, wordCount++);\n            lastWordStart = i + 1;\n            i++;\n          }\n        }\n      }\n\n      // process the last word\n      if (lastWordStart < termBufferLength) {\n        factory.processWord(termBuffer, lastWordStart, termBufferLength - lastWordStart, wordCount++);\n      }\n\n      if (wordCount > factory.maxWordCount) {\n        termAtt.setTermBuffer(backup, 0, termBufferLength);\n      }\n    }\n\n    return true;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e00b39c28013c732c5d678a32c3d63519499b390":["be29e0e2cef1fd569147732e48caf8538790339b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"be29e0e2cef1fd569147732e48caf8538790339b":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"ad94625fb8d088209f46650c8097196fec67f00c":["e00b39c28013c732c5d678a32c3d63519499b390"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"e00b39c28013c732c5d678a32c3d63519499b390":["ad94625fb8d088209f46650c8097196fec67f00c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["be29e0e2cef1fd569147732e48caf8538790339b"],"be29e0e2cef1fd569147732e48caf8538790339b":["e00b39c28013c732c5d678a32c3d63519499b390"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"pathCommit":null}