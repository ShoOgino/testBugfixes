{"path":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#updateDocument(Iterable[#-extends-IndexableField],Analyzer,DocumentsWriterDeleteQueue.Node[#],DocumentsWriter.FlushNotifications).mjava","commits":[{"id":"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7","date":1524496660,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#updateDocument(Iterable[#-extends-IndexableField],Analyzer,DocumentsWriterDeleteQueue.Node[#],DocumentsWriter.FlushNotifications).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#updateDocument(Iterable[#-extends-IndexableField],Analyzer,DocumentsWriterDeleteQueue.Node[#]).mjava","sourceNew":"  public long updateDocument(Iterable<? extends IndexableField> doc, Analyzer analyzer, DocumentsWriterDeleteQueue.Node<?> deleteNode, DocumentsWriter.FlushNotifications flushNotifications) throws IOException {\n    try {\n      assert hasHitAbortingException() == false: \"DWPT has hit aborting exception but is still indexing\";\n      testPoint(\"DocumentsWriterPerThread addDocument start\");\n      assert deleteQueue != null;\n      reserveOneDoc();\n      docState.doc = doc;\n      docState.analyzer = analyzer;\n      docState.docID = numDocsInRAM;\n      if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" update delTerm=\" + deleteNode + \" docID=\" + docState.docID + \" seg=\" + segmentInfo.name);\n      }\n      // Even on exception, the document is still added (but marked\n      // deleted), so we don't need to un-reserve at that point.\n      // Aborting exceptions will actually \"lose\" more than one\n      // document, so the counter will be \"wrong\" in that case, but\n      // it's very hard to fix (we can't easily distinguish aborting\n      // vs non-aborting exceptions):\n      boolean success = false;\n      try {\n        try {\n          consumer.processDocument();\n        } finally {\n          docState.clear();\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // mark document as deleted\n          deleteDocID(docState.docID);\n          numDocsInRAM++;\n        }\n      }\n\n      return finishDocument(deleteNode);\n    } finally {\n      maybeAbort(\"updateDocument\", flushNotifications);\n    }\n  }\n\n","sourceOld":"  public long updateDocument(Iterable<? extends IndexableField> doc, Analyzer analyzer, DocumentsWriterDeleteQueue.Node<?> deleteNode) throws IOException {\n    try {\n      assert hasHitAbortingException() == false: \"DWPT has hit aborting exception but is still indexing\";\n      testPoint(\"DocumentsWriterPerThread addDocument start\");\n      assert deleteQueue != null;\n      reserveOneDoc();\n      docState.doc = doc;\n      docState.analyzer = analyzer;\n      docState.docID = numDocsInRAM;\n      if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" update delTerm=\" + deleteNode + \" docID=\" + docState.docID + \" seg=\" + segmentInfo.name);\n      }\n      // Even on exception, the document is still added (but marked\n      // deleted), so we don't need to un-reserve at that point.\n      // Aborting exceptions will actually \"lose\" more than one\n      // document, so the counter will be \"wrong\" in that case, but\n      // it's very hard to fix (we can't easily distinguish aborting\n      // vs non-aborting exceptions):\n      boolean success = false;\n      try {\n        try {\n          consumer.processDocument();\n        } finally {\n          docState.clear();\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // mark document as deleted\n          deleteDocID(docState.docID);\n          numDocsInRAM++;\n        }\n      }\n\n      return finishDocument(deleteNode);\n    } finally {\n      maybeAbort(\"updateDocument\");\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c","date":1584127995,"type":4,"author":"Simon Willnauer","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/DocumentsWriterPerThread#updateDocument(Iterable[#-extends-IndexableField],Analyzer,DocumentsWriterDeleteQueue.Node[#],DocumentsWriter.FlushNotifications).mjava","sourceNew":null,"sourceOld":"  public long updateDocument(Iterable<? extends IndexableField> doc, Analyzer analyzer, DocumentsWriterDeleteQueue.Node<?> deleteNode, DocumentsWriter.FlushNotifications flushNotifications) throws IOException {\n    try {\n      assert hasHitAbortingException() == false: \"DWPT has hit aborting exception but is still indexing\";\n      testPoint(\"DocumentsWriterPerThread addDocument start\");\n      assert deleteQueue != null;\n      reserveOneDoc();\n      docState.doc = doc;\n      docState.analyzer = analyzer;\n      docState.docID = numDocsInRAM;\n      if (INFO_VERBOSE && infoStream.isEnabled(\"DWPT\")) {\n        infoStream.message(\"DWPT\", Thread.currentThread().getName() + \" update delTerm=\" + deleteNode + \" docID=\" + docState.docID + \" seg=\" + segmentInfo.name);\n      }\n      // Even on exception, the document is still added (but marked\n      // deleted), so we don't need to un-reserve at that point.\n      // Aborting exceptions will actually \"lose\" more than one\n      // document, so the counter will be \"wrong\" in that case, but\n      // it's very hard to fix (we can't easily distinguish aborting\n      // vs non-aborting exceptions):\n      boolean success = false;\n      try {\n        try {\n          consumer.processDocument();\n        } finally {\n          docState.clear();\n        }\n        success = true;\n      } finally {\n        if (!success) {\n          // mark document as deleted\n          deleteDocID(docState.docID);\n          numDocsInRAM++;\n        }\n      }\n\n      return finishDocument(deleteNode);\n    } finally {\n      maybeAbort(\"updateDocument\", flushNotifications);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["142f99d1da3d720b5094f5b47b0e57f8ef6ab03c"]},"commit2Childs":{"86a2e8a56b368d37ef3ba7180541fa317d6fd6c7":["142f99d1da3d720b5094f5b47b0e57f8ef6ab03c"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["86a2e8a56b368d37ef3ba7180541fa317d6fd6c7"],"142f99d1da3d720b5094f5b47b0e57f8ef6ab03c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}