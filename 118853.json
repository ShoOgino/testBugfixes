{"path":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#calculateNumReducers(Options,int).mjava","commits":[{"id":"d6e604e9030fb0cabf0c5a85ae6039921a81419c","date":1386009743,"type":0,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#calculateNumReducers(Options,int).mjava","pathOld":"/dev/null","sourceNew":"  private void calculateNumReducers(Options options, int realMappers) throws IOException {\n    if (options.shards <= 0) {\n      throw new IllegalStateException(\"Illegal number of shards: \" + options.shards);\n    }\n    if (options.fanout <= 1) {\n      throw new IllegalStateException(\"Illegal fanout: \" + options.fanout);\n    }\n    if (realMappers <= 0) {\n      throw new IllegalStateException(\"Illegal realMappers: \" + realMappers);\n    }\n    \n\n    int reducers = new JobClient(job.getConfiguration()).getClusterStatus().getMaxReduceTasks(); // MR1\n    //reducers = job.getCluster().getClusterStatus().getReduceSlotCapacity(); // Yarn only      \n    LOG.info(\"Cluster reports {} reduce slots\", reducers);\n\n    if (options.reducers == 0) {\n      reducers = options.shards;\n    } else if (options.reducers == -1) {\n      reducers = Math.min(reducers, realMappers); // no need to use many reducers when using few mappers\n    } else {\n      reducers = options.reducers;\n    }\n    reducers = Math.max(reducers, options.shards);\n    \n    if (reducers != options.shards) {\n      // Ensure fanout isn't misconfigured. fanout can't meaningfully be larger than what would be \n      // required to merge all leaf shards in one single tree merge iteration into root shards\n      options.fanout = Math.min(options.fanout, (int) ceilDivide(reducers, options.shards));\n      \n      // Ensure invariant reducers == options.shards * (fanout ^ N) where N is an integer >= 1.\n      // N is the number of mtree merge iterations.\n      // This helps to evenly spread docs among root shards and simplifies the impl of the mtree merge algorithm.\n      int s = options.shards;\n      while (s < reducers) { \n        s = s * options.fanout;\n      }\n      reducers = s;\n      assert reducers % options.fanout == 0;\n    }\n    options.reducers = reducers;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70f91c8322fbffe3a3a897ef20ea19119cac10cd","date":1386170124,"type":5,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#calculateNumReducers(Options,int).mjava","pathOld":"solr/contrib/solr-mr/src/java/org/apache/solr/hadoop/MapReduceIndexerTool#calculateNumReducers(Options,int).mjava","sourceNew":"  private void calculateNumReducers(Options options, int realMappers) throws IOException {\n    if (options.shards <= 0) {\n      throw new IllegalStateException(\"Illegal number of shards: \" + options.shards);\n    }\n    if (options.fanout <= 1) {\n      throw new IllegalStateException(\"Illegal fanout: \" + options.fanout);\n    }\n    if (realMappers <= 0) {\n      throw new IllegalStateException(\"Illegal realMappers: \" + realMappers);\n    }\n    \n\n    int reducers = new JobClient(job.getConfiguration()).getClusterStatus().getMaxReduceTasks(); // MR1\n    //reducers = job.getCluster().getClusterStatus().getReduceSlotCapacity(); // Yarn only      \n    LOG.info(\"Cluster reports {} reduce slots\", reducers);\n\n    if (options.reducers == 0) {\n      reducers = options.shards;\n    } else if (options.reducers == -1) {\n      reducers = Math.min(reducers, realMappers); // no need to use many reducers when using few mappers\n    } else {\n      reducers = options.reducers;\n    }\n    reducers = Math.max(reducers, options.shards);\n    \n    if (reducers != options.shards) {\n      // Ensure fanout isn't misconfigured. fanout can't meaningfully be larger than what would be \n      // required to merge all leaf shards in one single tree merge iteration into root shards\n      options.fanout = Math.min(options.fanout, (int) ceilDivide(reducers, options.shards));\n      \n      // Ensure invariant reducers == options.shards * (fanout ^ N) where N is an integer >= 1.\n      // N is the number of mtree merge iterations.\n      // This helps to evenly spread docs among root shards and simplifies the impl of the mtree merge algorithm.\n      int s = options.shards;\n      while (s < reducers) { \n        s = s * options.fanout;\n      }\n      reducers = s;\n      assert reducers % options.fanout == 0;\n    }\n    options.reducers = reducers;\n  }\n\n","sourceOld":"  private void calculateNumReducers(Options options, int realMappers) throws IOException {\n    if (options.shards <= 0) {\n      throw new IllegalStateException(\"Illegal number of shards: \" + options.shards);\n    }\n    if (options.fanout <= 1) {\n      throw new IllegalStateException(\"Illegal fanout: \" + options.fanout);\n    }\n    if (realMappers <= 0) {\n      throw new IllegalStateException(\"Illegal realMappers: \" + realMappers);\n    }\n    \n\n    int reducers = new JobClient(job.getConfiguration()).getClusterStatus().getMaxReduceTasks(); // MR1\n    //reducers = job.getCluster().getClusterStatus().getReduceSlotCapacity(); // Yarn only      \n    LOG.info(\"Cluster reports {} reduce slots\", reducers);\n\n    if (options.reducers == 0) {\n      reducers = options.shards;\n    } else if (options.reducers == -1) {\n      reducers = Math.min(reducers, realMappers); // no need to use many reducers when using few mappers\n    } else {\n      reducers = options.reducers;\n    }\n    reducers = Math.max(reducers, options.shards);\n    \n    if (reducers != options.shards) {\n      // Ensure fanout isn't misconfigured. fanout can't meaningfully be larger than what would be \n      // required to merge all leaf shards in one single tree merge iteration into root shards\n      options.fanout = Math.min(options.fanout, (int) ceilDivide(reducers, options.shards));\n      \n      // Ensure invariant reducers == options.shards * (fanout ^ N) where N is an integer >= 1.\n      // N is the number of mtree merge iterations.\n      // This helps to evenly spread docs among root shards and simplifies the impl of the mtree merge algorithm.\n      int s = options.shards;\n      while (s < reducers) { \n        s = s * options.fanout;\n      }\n      reducers = s;\n      assert reducers % options.fanout == 0;\n    }\n    options.reducers = reducers;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"]},"commit2Childs":{"70f91c8322fbffe3a3a897ef20ea19119cac10cd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d6e604e9030fb0cabf0c5a85ae6039921a81419c":["70f91c8322fbffe3a3a897ef20ea19119cac10cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d6e604e9030fb0cabf0c5a85ae6039921a81419c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}