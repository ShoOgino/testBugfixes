{"path":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","commits":[{"id":"7f2e96099703c24c0c63d27806ba7020626b649b","date":1385214372,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    SolrSuggester suggester = getSuggester(params);\n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); \n      SuggesterResult suggesterResult = suggester.getSuggestions(options);\n      \n      NamedList response = new SimpleOrderedMap();\n      NamedList<NamedList> namedListResult = toNamedList(suggesterResult);\n      response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bf2ccf302186b563c9549824a4d45db1e8cf8a0d","date":1387322051,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    SolrSuggester suggester = getSuggester(params);\n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); \n      SuggesterResult suggesterResult = suggester.getSuggestions(options);\n      \n      NamedList<NamedList<Object>> namedListResult = toNamedList(suggesterResult);\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"Suggester process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    SolrSuggester suggester = getSuggester(params);\n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); \n      SuggesterResult suggesterResult = suggester.getSuggestions(options);\n      \n      NamedList response = new SimpleOrderedMap();\n      NamedList<NamedList> namedListResult = toNamedList(suggesterResult);\n      response.add(SuggesterResultLabels.SUGGESTIONS, namedListResult);\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, response);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"74f45af4339b0daf7a95c820ab88c1aea74fbce0","date":1387475327,"type":0,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"/dev/null","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    SolrSuggester suggester = getSuggester(params);\n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); \n      SuggesterResult suggesterResult = suggester.getSuggestions(options);\n      \n      NamedList<NamedList<Object>> namedListResult = toNamedList(suggesterResult);\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"214b8610690edbe7e294594a7bc58a978ef1863c","date":1389376762,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(IllegalArgumentException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<SolrSuggester>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<String, SimpleOrderedMap<NamedList<Object>>>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    SolrSuggester suggester = getSuggester(params);\n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count); \n      SuggesterResult suggesterResult = suggester.getSuggestions(options);\n      \n      NamedList<NamedList<Object>> namedListResult = toNamedList(suggesterResult);\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResult);\n    }\n  }\n\n","bugFix":null,"bugIntro":["3e9dd7374b2f7a29ce2b050356c08ed04656f7df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(IllegalArgumentException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(IllegalArgumentException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<SolrSuggester>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<String, SimpleOrderedMap<NamedList<Object>>>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"3e9dd7374b2f7a29ce2b050356c08ed04656f7df","date":1404804570,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(IllegalArgumentException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","bugFix":["214b8610690edbe7e294594a7bc58a978ef1863c"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"de1635ba58109b4c7c7da50f4dad433333258904","date":1444503719,"type":3,"author":"Jan Høydahl","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n\n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      boolean highlight = params.getBool(SUGGEST_HIGHLIGHT, false);\n      boolean allTermsRequired = params.getBool(SUGGEST_ALL_TERMS_REQUIRED, true);\n      String contextFilter = params.get(SUGGEST_CONTEXT_FILTER_QUERY);\n      if (contextFilter != null) {\n        contextFilter = contextFilter.trim();\n        if (contextFilter.length() == 0) {\n          contextFilter = null;\n        }\n      }\n\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count, contextFilter, allTermsRequired, highlight);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults =\n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n    \n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults = \n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd","date":1534976797,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n\n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      boolean highlight = params.getBool(SUGGEST_HIGHLIGHT, false);\n      boolean allTermsRequired = params.getBool(SUGGEST_ALL_TERMS_REQUIRED, true);\n      String contextFilter = params.get(SUGGEST_CONTEXT_FILTER_QUERY);\n      if (contextFilter != null) {\n        contextFilter = contextFilter.trim();\n        if (contextFilter.length() == 0) {\n          contextFilter = null;\n        }\n      }\n\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count, contextFilter, allTermsRequired, highlight);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults =\n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    LOG.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n\n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      boolean highlight = params.getBool(SUGGEST_HIGHLIGHT, false);\n      boolean allTermsRequired = params.getBool(SUGGEST_ALL_TERMS_REQUIRED, true);\n      String contextFilter = params.get(SUGGEST_CONTEXT_FILTER_QUERY);\n      if (contextFilter != null) {\n        contextFilter = contextFilter.trim();\n        if (contextFilter.length() == 0) {\n          contextFilter = null;\n        }\n      }\n\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count, contextFilter, allTermsRequired, highlight);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults =\n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"575e66bd4b2349209027f6801184da7fc3cba13f","date":1587609169,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","pathOld":"solr/core/src/java/org/apache/solr/handler/component/SuggestComponent#process(ResponseBuilder).mjava","sourceNew":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent process with : {}\", params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n\n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      boolean highlight = params.getBool(SUGGEST_HIGHLIGHT, false);\n      boolean allTermsRequired = params.getBool(SUGGEST_ALL_TERMS_REQUIRED, true);\n      String contextFilter = params.get(SUGGEST_CONTEXT_FILTER_QUERY);\n      if (contextFilter != null) {\n        contextFilter = contextFilter.trim();\n        if (contextFilter.length() == 0) {\n          contextFilter = null;\n        }\n      }\n\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count, contextFilter, allTermsRequired, highlight);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults =\n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","sourceOld":"  /** \n   * Responsible for using the specified suggester to get the suggestions \n   * for the query and write the results \n   * */\n  @Override\n  public void process(ResponseBuilder rb) throws IOException {\n    SolrParams params = rb.req.getParams();\n    log.info(\"SuggestComponent process with : \" + params);\n    if (!params.getBool(COMPONENT_NAME, false) || suggesters.isEmpty()) {\n      return;\n    }\n    \n    boolean buildAll = params.getBool(SUGGEST_BUILD_ALL, false);\n    boolean reloadAll = params.getBool(SUGGEST_RELOAD_ALL, false);\n    Set<SolrSuggester> querySuggesters;\n    try {\n      querySuggesters = getSuggesters(params);\n    } catch(SolrException ex) {\n      if (!buildAll && !reloadAll) {\n        throw ex;\n      } else {\n        querySuggesters = new HashSet<>();\n      }\n    }\n    \n    String query = params.get(SUGGEST_Q);\n    if (query == null) {\n      query = rb.getQueryString();\n      if (query == null) {\n        query = params.get(CommonParams.Q);\n      }\n    }\n\n    if (query != null) {\n      int count = params.getInt(SUGGEST_COUNT, 1);\n      boolean highlight = params.getBool(SUGGEST_HIGHLIGHT, false);\n      boolean allTermsRequired = params.getBool(SUGGEST_ALL_TERMS_REQUIRED, true);\n      String contextFilter = params.get(SUGGEST_CONTEXT_FILTER_QUERY);\n      if (contextFilter != null) {\n        contextFilter = contextFilter.trim();\n        if (contextFilter.length() == 0) {\n          contextFilter = null;\n        }\n      }\n\n      SuggesterOptions options = new SuggesterOptions(new CharsRef(query), count, contextFilter, allTermsRequired, highlight);\n      Map<String, SimpleOrderedMap<NamedList<Object>>> namedListResults =\n          new HashMap<>();\n      for (SolrSuggester suggester : querySuggesters) {\n        SuggesterResult suggesterResult = suggester.getSuggestions(options);\n        toNamedList(suggesterResult, namedListResults);\n      }\n      rb.rsp.add(SuggesterResultLabels.SUGGEST, namedListResults);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["214b8610690edbe7e294594a7bc58a978ef1863c"],"de1635ba58109b4c7c7da50f4dad433333258904":["3e9dd7374b2f7a29ce2b050356c08ed04656f7df"],"7f2e96099703c24c0c63d27806ba7020626b649b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"214b8610690edbe7e294594a7bc58a978ef1863c":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"575e66bd4b2349209027f6801184da7fc3cba13f":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"3e9dd7374b2f7a29ce2b050356c08ed04656f7df":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["7f2e96099703c24c0c63d27806ba7020626b649b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["575e66bd4b2349209027f6801184da7fc3cba13f"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["de1635ba58109b4c7c7da50f4dad433333258904"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["3e9dd7374b2f7a29ce2b050356c08ed04656f7df"],"de1635ba58109b4c7c7da50f4dad433333258904":["e9c81f7e703d7ccca5bc78beb61253f0a8a22afd"],"7f2e96099703c24c0c63d27806ba7020626b649b":["bf2ccf302186b563c9549824a4d45db1e8cf8a0d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["7f2e96099703c24c0c63d27806ba7020626b649b","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"214b8610690edbe7e294594a7bc58a978ef1863c":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"74f45af4339b0daf7a95c820ab88c1aea74fbce0":[],"3e9dd7374b2f7a29ce2b050356c08ed04656f7df":["de1635ba58109b4c7c7da50f4dad433333258904"],"575e66bd4b2349209027f6801184da7fc3cba13f":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bf2ccf302186b563c9549824a4d45db1e8cf8a0d":["214b8610690edbe7e294594a7bc58a978ef1863c","74f45af4339b0daf7a95c820ab88c1aea74fbce0"],"e9c81f7e703d7ccca5bc78beb61253f0a8a22afd":["575e66bd4b2349209027f6801184da7fc3cba13f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["74f45af4339b0daf7a95c820ab88c1aea74fbce0","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}