{"path":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","commits":[{"id":"4cc45c615dbb82bf79d5f9550286098367874fbf","date":1409571423,"type":1,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2daae254c28b627693692fbf8f14d2f36c3591c1","date":1409582110,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"402ad3ddc9da7b70da1b167667a60ece6a1381fb","date":1409656478,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"71387d8cb6923eb831b17a8b734608ba2e21c653","date":1414126093,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backward-codecs/src/test/org/apache/lucene/codecs/lucene40/Lucene40DocValuesWriter#addSortedField(FieldInfo,Iterable[BytesRef],Iterable[Number]).mjava","sourceNew":null,"sourceOld":"  @Override\n  public void addSortedField(FieldInfo field, Iterable<BytesRef> values, Iterable<Number> docToOrd) throws IOException {\n    if (field.getDocValuesGen() != -1) {\n      throw new UnsupportedOperationException(\"4.0 does not support dv updates\");\n    }\n    // examine the values to determine best type to use\n    int minLength = Integer.MAX_VALUE;\n    int maxLength = Integer.MIN_VALUE;\n    for (BytesRef b : values) {\n      minLength = Math.min(minLength, b.length);\n      maxLength = Math.max(maxLength, b.length);\n    }\n    \n    // but dont use fixed if there are missing values (we are simulating how lucene40 wrote dv...)\n    boolean anyMissing = false;\n    for (Number n : docToOrd) {\n      if (n.longValue() == -1) {\n        anyMissing = true;\n        break;\n      }\n    }\n    \n    boolean success = false;\n    IndexOutput data = null;\n    IndexOutput index = null;\n    String dataName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"dat\");\n    String indexName = IndexFileNames.segmentFileName(state.segmentInfo.name + \"_\" + Integer.toString(field.number), segmentSuffix, \"idx\");\n    \n    try {\n      data = dir.createOutput(dataName, state.context);\n      index = dir.createOutput(indexName, state.context);\n      if (minLength == maxLength && !anyMissing) {\n        // fixed byte[]\n        addFixedSortedBytesField(field, data, index, values, docToOrd, minLength);\n      } else {\n        // var byte[]\n        // three cases for simulating the old writer:\n        // 1. no missing\n        // 2. missing (and empty string in use): remap ord=-1 -> ord=0\n        // 3. missing (and empty string not in use): remap all ords +1, insert empty string into values\n        if (!anyMissing) {\n          addVarSortedBytesField(field, data, index, values, docToOrd);\n        } else if (minLength == 0) {\n          addVarSortedBytesField(field, data, index, values, MissingOrdRemapper.mapMissingToOrd0(docToOrd));\n        } else {\n          addVarSortedBytesField(field, data, index, MissingOrdRemapper.insertEmptyValue(values), MissingOrdRemapper.mapAllOrds(docToOrd));\n        }\n      }\n      success = true;\n    } finally {\n      if (success) {\n        IOUtils.close(data, index);\n      } else {\n        IOUtils.closeWhileHandlingException(data, index);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4cc45c615dbb82bf79d5f9550286098367874fbf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","2daae254c28b627693692fbf8f14d2f36c3591c1"],"2daae254c28b627693692fbf8f14d2f36c3591c1":["4cc45c615dbb82bf79d5f9550286098367874fbf"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["4cc45c615dbb82bf79d5f9550286098367874fbf","402ad3ddc9da7b70da1b167667a60ece6a1381fb"],"4cc45c615dbb82bf79d5f9550286098367874fbf":["2daae254c28b627693692fbf8f14d2f36c3591c1"],"71387d8cb6923eb831b17a8b734608ba2e21c653":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"402ad3ddc9da7b70da1b167667a60ece6a1381fb":["71387d8cb6923eb831b17a8b734608ba2e21c653"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"2daae254c28b627693692fbf8f14d2f36c3591c1":["402ad3ddc9da7b70da1b167667a60ece6a1381fb"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}