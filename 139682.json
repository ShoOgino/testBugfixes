{"path":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","commits":[{"id":"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","date":1288192616,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","date":1288424244,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":0,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"20bec0dc801c18dfd87add05a02af34d5f2177b4","date":1301137613,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"97e30c53fd81463c6ccd52402c91a6548cf42acb","date":1309296018,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    //System.out.println(\"SORT: \" + (toIndex-fromIndex));\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":3,"author":"Steven Rowe","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    //System.out.println(\"SORT: \" + (toIndex-fromIndex));\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    //System.out.println(\"SORT: \" + (toIndex-fromIndex));\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/ArrayUtil#[T]_mergeSort(T[],int,int,Comparator[#-super-T]).mjava","sourceNew":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    //System.out.println(\"SORT: \" + (toIndex-fromIndex));\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","sourceOld":"  /**\n   * Sorts the given array slice using the {@link Comparator}. This method uses the merge sort\n   * algorithm, but falls back to insertion sort for small arrays.\n   * @param fromIndex start index (inclusive)\n   * @param toIndex end index (exclusive)\n   */\n  public static <T> void mergeSort(T[] a, int fromIndex, int toIndex, Comparator<? super T> comp) {\n    if (toIndex-fromIndex <= 1) return;\n    //System.out.println(\"SORT: \" + (toIndex-fromIndex));\n    getSorter(a, comp).mergeSort(fromIndex, toIndex-1);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["20bec0dc801c18dfd87add05a02af34d5f2177b4"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["ca0ffea399542e8aac8ed7608f34f8ec4cb8904d","20bec0dc801c18dfd87add05a02af34d5f2177b4"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["97e30c53fd81463c6ccd52402c91a6548cf42acb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["20bec0dc801c18dfd87add05a02af34d5f2177b4","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["20bec0dc801c18dfd87add05a02af34d5f2177b4","97e30c53fd81463c6ccd52402c91a6548cf42acb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"97e30c53fd81463c6ccd52402c91a6548cf42acb":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b":["20bec0dc801c18dfd87add05a02af34d5f2177b4","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ae7aa98ce0c64f3b2b81087d14ff9ae992b4903b","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ca0ffea399542e8aac8ed7608f34f8ec4cb8904d"],"20bec0dc801c18dfd87add05a02af34d5f2177b4":["97e30c53fd81463c6ccd52402c91a6548cf42acb","c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df"],"ca0ffea399542e8aac8ed7608f34f8ec4cb8904d":["d619839baa8ce5503e496b94a9e42ad6f079293f"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}