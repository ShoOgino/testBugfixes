{"path":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollectionAndMultipleShards().mjava","commits":[{"id":"3f8bf184cb0ae7013c446f68cc56a9843098366e","date":1518522879,"type":0,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollectionAndMultipleShards().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusWithCollectionAndMultipleShards() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      final CollectionAdminRequest.ClusterStatus request = new CollectionAdminRequest.ClusterStatus();\n      request.setCollectionName(COLLECTION_NAME);\n      request.setShardName(SHARD1 + \",\" + SHARD2);\n\n      NamedList<Object> rsp = request.process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(2, shardStatus.size());\n      Map<String, Object> firstSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD1);\n      assertNotNull(firstSelectedShardStatus);\n      Map<String, Object> secondSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(secondSelectedShardStatus);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bfcdec9fcf0409223f35c5ec3bc14094314941b4","date":1518533599,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollectionAndMultipleShards().mjava","pathOld":"/dev/null","sourceNew":"  private void clusterStatusWithCollectionAndMultipleShards() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      final CollectionAdminRequest.ClusterStatus request = new CollectionAdminRequest.ClusterStatus();\n      request.setCollectionName(COLLECTION_NAME);\n      request.setShardName(SHARD1 + \",\" + SHARD2);\n\n      NamedList<Object> rsp = request.process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(2, shardStatus.size());\n      Map<String, Object> firstSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD1);\n      assertNotNull(firstSelectedShardStatus);\n      Map<String, Object> secondSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(secondSelectedShardStatus);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aa2585c33d5d66a1c837c312221eb55ddb3c4300","date":1592493170,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollectionAndMultipleShards().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/api/collections/TestCollectionAPI#clusterStatusWithCollectionAndMultipleShards().mjava","sourceNew":"  private void clusterStatusWithCollectionAndMultipleShards() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      final CollectionAdminRequest.ClusterStatus request = new CollectionAdminRequest.ClusterStatus();\n      request.setCollectionName(COLLECTION_NAME);\n      request.setShardName(SHARD1 + \",\" + SHARD2);\n\n      NamedList<Object> rsp = request.process(client).getResponse();\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      @SuppressWarnings({\"unchecked\"})\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(2, shardStatus.size());\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> firstSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD1);\n      assertNotNull(firstSelectedShardStatus);\n      @SuppressWarnings({\"unchecked\"})\n      Map<String, Object> secondSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(secondSelectedShardStatus);\n    }\n  }\n\n","sourceOld":"  private void clusterStatusWithCollectionAndMultipleShards() throws IOException, SolrServerException {\n    try (CloudSolrClient client = createCloudClient(null)) {\n      final CollectionAdminRequest.ClusterStatus request = new CollectionAdminRequest.ClusterStatus();\n      request.setCollectionName(COLLECTION_NAME);\n      request.setShardName(SHARD1 + \",\" + SHARD2);\n\n      NamedList<Object> rsp = request.process(client).getResponse();\n      NamedList<Object> cluster = (NamedList<Object>) rsp.get(\"cluster\");\n      assertNotNull(\"Cluster state should not be null\", cluster);\n      NamedList<Object> collections = (NamedList<Object>) cluster.get(\"collections\");\n      assertNotNull(\"Collections should not be null in cluster state\", collections);\n      assertNotNull(collections.get(COLLECTION_NAME));\n      assertEquals(1, collections.size());\n      Map<String, Object> collection = (Map<String, Object>) collections.get(COLLECTION_NAME);\n      Map<String, Object> shardStatus = (Map<String, Object>) collection.get(\"shards\");\n      assertEquals(2, shardStatus.size());\n      Map<String, Object> firstSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD1);\n      assertNotNull(firstSelectedShardStatus);\n      Map<String, Object> secondSelectedShardStatus = (Map<String, Object>) shardStatus.get(SHARD2);\n      assertNotNull(secondSelectedShardStatus);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3f8bf184cb0ae7013c446f68cc56a9843098366e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f8bf184cb0ae7013c446f68cc56a9843098366e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"aa2585c33d5d66a1c837c312221eb55ddb3c4300":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["bfcdec9fcf0409223f35c5ec3bc14094314941b4","3f8bf184cb0ae7013c446f68cc56a9843098366e"],"bfcdec9fcf0409223f35c5ec3bc14094314941b4":["aa2585c33d5d66a1c837c312221eb55ddb3c4300"],"3f8bf184cb0ae7013c446f68cc56a9843098366e":["bfcdec9fcf0409223f35c5ec3bc14094314941b4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}