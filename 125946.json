{"path":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","pathOld":"backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6","date":1272983566,"type":4,"author":"Uwe Schindler","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/backwards/src/test/org/apache/lucene/queryParser/TestQueryParser#testQPA().mjava","sourceNew":null,"sourceOld":"  public void testQPA() throws Exception {\n    assertQueryEquals(\"term term^3.0 term\", qpAnalyzer, \"term term^3.0 term\");\n    assertQueryEquals(\"term stop^3.0 term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"term term term\", qpAnalyzer, \"term term term\");\n    assertQueryEquals(\"term +stop term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -stop term\", qpAnalyzer, \"term term\");\n\n    assertQueryEquals(\"drop AND (stop) AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term +(stop) term\", qpAnalyzer, \"term term\");\n    assertQueryEquals(\"term -(stop) term\", qpAnalyzer, \"term term\");\n    \n    assertQueryEquals(\"drop AND stop AND roll\", qpAnalyzer, \"+drop +roll\");\n    assertQueryEquals(\"term phrase term\", qpAnalyzer,\n                      \"term \\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"term AND NOT phrase term\", qpAnalyzer,\n                      \"+term -\\\"phrase1 phrase2\\\" term\");\n    assertQueryEquals(\"stop^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"stop\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))^3\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop)^3)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"(stop)\", qpAnalyzer, \"\");\n    assertQueryEquals(\"((stop))\", qpAnalyzer, \"\");\n    assertTrue(getQuery(\"term term term\", qpAnalyzer) instanceof BooleanQuery);\n    assertTrue(getQuery(\"term +stop\", qpAnalyzer) instanceof TermQuery);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["90eca6fcb6635ca73ea4fdbe2f57d2033b66d3b6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}