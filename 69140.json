{"path":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","commits":[{"id":"89f15687f60bd49cd3d9de427e85c17fd9397d61","date":1309381327,"type":0,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    tmpFile.delete();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7a4df66e06e0c3b520d7d5941e1c043076f06f17","date":1309454196,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.closeSafely(false, dirs[0]);\n    tmpFile.delete();\n  }\n\n","sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"817d8435e9135b756f08ce6710ab0baac51bdf88","date":1309986993,"type":0,"author":"Steven Rowe","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.closeSafely(false, dirs[0]);\n    tmpFile.delete();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d083e83f225b11e5fdd900e83d26ddb385b6955c","date":1310029438,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"/dev/null","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.closeSafely(false, dirs[0]);\n    tmpFile.delete();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"24230fe54121f9be9d85f2c2067536296785e421","date":1314462346,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.close(dirs[0]);\n    tmpFile.delete();\n  }\n\n","sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.closeSafely(false, dirs[0]);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b89678825b68eccaf09e6ab71675fc0b0af1e099","date":1334669779,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","pathOld":"modules/facet/src/test/org/apache/lucene/facet/search/TestTotalFacetCounts#doTestWriteRead(int).mjava","sourceNew":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.close(dirs[0]);\n    tmpFile.delete();\n  }\n\n","sourceOld":"  private void doTestWriteRead(final int partitionSize) throws IOException {\n    initCache(1);\n\n    // Create temporary RAMDirectories\n    Directory[][] dirs = FacetTestUtils.createIndexTaxonomyDirs(1);\n    // Create our index/taxonomy writers\n    IndexTaxonomyWriterPair[] writers = FacetTestUtils\n    .createIndexTaxonomyWriterPair(dirs);\n    DefaultFacetIndexingParams iParams = new DefaultFacetIndexingParams() {\n      @Override\n      protected int fixedPartitionSize() {\n        return partitionSize;\n      }\n    };\n    // The counts that the TotalFacetCountsArray should have after adding\n    // the below facets to the index.\n    int[] expectedCounts = new int[] { 0, 3, 1, 3, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1 };\n    \n    // Add a facet to the index\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"b\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"e\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"a\", \"d\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"g\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"c\", \"z\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"a\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"1\", \"2\");\n    TestTotalFacetCountsCache.addFacets(iParams, writers[0].indexWriter, writers[0].taxWriter, \"b\", \"c\");\n\n    // Commit Changes\n    writers[0].commit();\n    writers[0].close();\n\n    IndexTaxonomyReaderPair[] readers = \n      FacetTestUtils.createIndexTaxonomyReaderPair(dirs);\n    \n    int[] intArray = new int[iParams.getPartitionSize()];\n\n    TotalFacetCountsCache tfcc = TotalFacetCountsCache.getSingleton();\n    File tmpFile = _TestUtil.createTempFile(\"test\", \"tmp\", TEMP_DIR);\n    tfcc.store(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams, null);\n    tfcc.clear(); // not really required because TFCC overrides on load(), but in the test we need not rely on this.\n    tfcc.load(tmpFile, readers[0].indexReader, readers[0].taxReader, iParams);\n    \n    // now retrieve the one just loaded\n    TotalFacetCounts totalCounts = \n      tfcc.getTotalCounts(readers[0].indexReader, readers[0].taxReader, iParams, null);\n\n    int partition = 0;\n    for (int i=0; i<expectedCounts.length; i+=partitionSize) {\n      totalCounts.fillTotalCountsForPartition(intArray, partition);\n      int[] partitionExpectedCounts = new int[partitionSize];\n      int nToCopy = Math.min(partitionSize,expectedCounts.length-i);\n      System.arraycopy(expectedCounts, i, partitionExpectedCounts, 0, nToCopy);\n      assertTrue(\"Wrong counts! for partition \"+partition+\n          \"\\nExpected:\\n\" + Arrays.toString(partitionExpectedCounts)+\n          \"\\nActual:\\n\" + Arrays.toString(intArray),\n          Arrays.equals(partitionExpectedCounts, intArray));\n      ++partition;\n    }\n    readers[0].close();\n    IOUtils.close(dirs[0]);\n    tmpFile.delete();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"24230fe54121f9be9d85f2c2067536296785e421":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["24230fe54121f9be9d85f2c2067536296785e421"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["89f15687f60bd49cd3d9de427e85c17fd9397d61"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"817d8435e9135b756f08ce6710ab0baac51bdf88":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["b89678825b68eccaf09e6ab71675fc0b0af1e099"]},"commit2Childs":{"24230fe54121f9be9d85f2c2067536296785e421":["b89678825b68eccaf09e6ab71675fc0b0af1e099"],"b89678825b68eccaf09e6ab71675fc0b0af1e099":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d083e83f225b11e5fdd900e83d26ddb385b6955c","89f15687f60bd49cd3d9de427e85c17fd9397d61","817d8435e9135b756f08ce6710ab0baac51bdf88"],"7a4df66e06e0c3b520d7d5941e1c043076f06f17":["24230fe54121f9be9d85f2c2067536296785e421","d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88"],"d083e83f225b11e5fdd900e83d26ddb385b6955c":[],"89f15687f60bd49cd3d9de427e85c17fd9397d61":["7a4df66e06e0c3b520d7d5941e1c043076f06f17"],"817d8435e9135b756f08ce6710ab0baac51bdf88":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d083e83f225b11e5fdd900e83d26ddb385b6955c","817d8435e9135b756f08ce6710ab0baac51bdf88","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}