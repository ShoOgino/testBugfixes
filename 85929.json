{"path":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","commits":[{"id":"77acd2f9cb064d2d25e6492f125b58e2d4f856f1","date":1299683536,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d619839baa8ce5503e496b94a9e42ad6f079293f","date":1301309428,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c0ef0193974807e4bddf5432a6b0287fe4d6c9df","date":1301476645,"type":0,"author":"Simon Willnauer","isMerge":true,"pathNew":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"/dev/null","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c903c3d15906a3da96b8c0c2fb704491005fdbdb","date":1453508227,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a258fbb26824fd104ed795e5d9033d2d040049ee","date":1453508252,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c26f00b574427b55127e869b935845554afde1fa","date":1310252513,"type":5,"author":"Steven Rowe","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","pathOld":"solr/src/test/org/apache/solr/search/TestFastLRUCache#testRandom().mjava","sourceNew":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","sourceOld":"  // enough randomness to exercise all of the different cache purging phases\n  public void testRandom() {\n    int sz = random.nextInt(100)+5;\n    int lowWaterMark = random.nextInt(sz-3)+1;\n    int keyrange = random.nextInt(sz*3)+1;\n    ConcurrentLRUCache<Integer, String> cache = new ConcurrentLRUCache<Integer, String>(sz, lowWaterMark);\n    for (int i=0; i<10000; i++) {\n      cache.put(random.nextInt(keyrange), \"\");\n      cache.get(random.nextInt(keyrange));\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77acd2f9cb064d2d25e6492f125b58e2d4f856f1"],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["77acd2f9cb064d2d25e6492f125b58e2d4f856f1"],"d619839baa8ce5503e496b94a9e42ad6f079293f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","77acd2f9cb064d2d25e6492f125b58e2d4f856f1"],"c26f00b574427b55127e869b935845554afde1fa":["77acd2f9cb064d2d25e6492f125b58e2d4f856f1","c903c3d15906a3da96b8c0c2fb704491005fdbdb"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"77acd2f9cb064d2d25e6492f125b58e2d4f856f1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a258fbb26824fd104ed795e5d9033d2d040049ee":["77acd2f9cb064d2d25e6492f125b58e2d4f856f1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c26f00b574427b55127e869b935845554afde1fa"]},"commit2Childs":{"c0ef0193974807e4bddf5432a6b0287fe4d6c9df":[],"c903c3d15906a3da96b8c0c2fb704491005fdbdb":["c26f00b574427b55127e869b935845554afde1fa"],"d619839baa8ce5503e496b94a9e42ad6f079293f":[],"c26f00b574427b55127e869b935845554afde1fa":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","77acd2f9cb064d2d25e6492f125b58e2d4f856f1"],"77acd2f9cb064d2d25e6492f125b58e2d4f856f1":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","c903c3d15906a3da96b8c0c2fb704491005fdbdb","d619839baa8ce5503e496b94a9e42ad6f079293f","c26f00b574427b55127e869b935845554afde1fa","a258fbb26824fd104ed795e5d9033d2d040049ee"],"a258fbb26824fd104ed795e5d9033d2d040049ee":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["c0ef0193974807e4bddf5432a6b0287fe4d6c9df","d619839baa8ce5503e496b94a9e42ad6f079293f","a258fbb26824fd104ed795e5d9033d2d040049ee","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}