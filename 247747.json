{"path":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","commits":[{"id":"1072b8e47b50f1c4fb039e1f54a736f381d6f809","date":1438956441,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","pathOld":"/dev/null","sourceNew":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    // wait for a while until the state format changes\n    long now = System.nanoTime();\n    long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    boolean firstLoop = true;\n    while (System.nanoTime() < timeout) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bcf9886c8ff537aafde14de48ebf744f5673f08b","date":1439041198,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    // wait for a while until the state format changes\n    long now = System.nanoTime();\n    long timeout = now + TimeUnit.NANOSECONDS.convert(30, TimeUnit.SECONDS);\n    boolean firstLoop = true;\n    while (System.nanoTime() < timeout) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"19498030e0adab22f604f935cae3c03dcf0952a6","date":1456558851,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f","bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"af2638813028b254a88b418ebeafb541afb49653","date":1456804822,"type":3,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getInQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","date":1471585465,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"403d05f7f8d69b65659157eff1bc1d2717f04c66","date":1471692961,"type":5,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ClusterState,ZkNodeProps,NamedList).mjava","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":"  //TODO should we not remove in the next release ?\n  private void migrateStateFormat(ClusterState state, ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":4,"author":"Kevin Risden","isMerge":true,"pathNew":"/dev/null","pathOld":"solr/core/src/java/org/apache/solr/cloud/OverseerCollectionMessageHandler#migrateStateFormat(ZkNodeProps,NamedList).mjava","sourceNew":null,"sourceOld":"  private void migrateStateFormat(ZkNodeProps message, NamedList results)\n      throws KeeperException, InterruptedException {\n    final String collectionName = message.getStr(COLLECTION_PROP);\n\n    boolean firstLoop = true;\n    // wait for a while until the state format changes\n    TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n    while (! timeout.hasTimedOut()) {\n      DocCollection collection = zkStateReader.getClusterState().getCollection(collectionName);\n      if (collection == null) {\n        throw new SolrException(ErrorCode.BAD_REQUEST, \"Collection: \" + collectionName + \" not found\");\n      }\n      if (collection.getStateFormat() == 2) {\n        // Done.\n        results.add(\"success\", new SimpleOrderedMap<>());\n        return;\n      }\n\n      if (firstLoop) {\n        // Actually queue the migration command.\n        firstLoop = false;\n        ZkNodeProps m = new ZkNodeProps(Overseer.QUEUE_OPERATION, MIGRATESTATEFORMAT.toLower(), COLLECTION_PROP, collectionName);\n        Overseer.getStateUpdateQueue(zkStateReader.getZkClient()).offer(Utils.toJSON(m));\n      }\n      Thread.sleep(100);\n    }\n    throw new SolrException(ErrorCode.SERVER_ERROR, \"Could not migrate state format for collection: \" + collectionName);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"af2638813028b254a88b418ebeafb541afb49653":["bcf9886c8ff537aafde14de48ebf744f5673f08b","19498030e0adab22f604f935cae3c03dcf0952a6"],"19498030e0adab22f604f935cae3c03dcf0952a6":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["af2638813028b254a88b418ebeafb541afb49653","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["af2638813028b254a88b418ebeafb541afb49653"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["af2638813028b254a88b418ebeafb541afb49653","403d05f7f8d69b65659157eff1bc1d2717f04c66"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"af2638813028b254a88b418ebeafb541afb49653":["403d05f7f8d69b65659157eff1bc1d2717f04c66","66e0b82bd39567aa2bf534e5282d05fb4a4a2c76","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"19498030e0adab22f604f935cae3c03dcf0952a6":["af2638813028b254a88b418ebeafb541afb49653"],"403d05f7f8d69b65659157eff1bc1d2717f04c66":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1072b8e47b50f1c4fb039e1f54a736f381d6f809"],"66e0b82bd39567aa2bf534e5282d05fb4a4a2c76":["403d05f7f8d69b65659157eff1bc1d2717f04c66"],"bcf9886c8ff537aafde14de48ebf744f5673f08b":["af2638813028b254a88b418ebeafb541afb49653","19498030e0adab22f604f935cae3c03dcf0952a6"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"1072b8e47b50f1c4fb039e1f54a736f381d6f809":["bcf9886c8ff537aafde14de48ebf744f5673f08b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}