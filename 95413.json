{"path":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#maybeAddPassage(PriorityQueue[Passage],PassageScorer,Passage,int).mjava","commits":[{"id":"8764ca7bb74ee716c839b9545a93ec4a578c2005","date":1517564468,"type":0,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/highlighter/src/java/org/apache/lucene/search/uhighlight/FieldHighlighter#maybeAddPassage(PriorityQueue[Passage],PassageScorer,Passage,int).mjava","pathOld":"/dev/null","sourceNew":"  private Passage maybeAddPassage(PriorityQueue<Passage> passageQueue, PassageScorer scorer, Passage passage, int contentLength) {\n    if (passage.getStartOffset() == -1) {\n      // empty passage, we can ignore it\n      return passage;\n    }\n    passage.setScore(scorer.score(passage, contentLength));\n    // new sentence: first add 'passage' to queue\n    if (passageQueue.size() == maxPassages && passage.getScore() < passageQueue.peek().getScore()) {\n      passage.reset(); // can't compete, just reset it\n    } else {\n      passageQueue.offer(passage);\n      if (passageQueue.size() > maxPassages) {\n        passage = passageQueue.poll();\n        passage.reset();\n      } else {\n        passage = new Passage();\n      }\n    }\n    return passage;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["8764ca7bb74ee716c839b9545a93ec4a578c2005"]},"commit2Childs":{"8764ca7bb74ee716c839b9545a93ec4a578c2005":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8764ca7bb74ee716c839b9545a93ec4a578c2005"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}