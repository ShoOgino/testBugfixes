{"path":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(AtomicReader,PrintStream,boolean,boolean,boolean).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(AtomicReader,PrintStream,boolean,boolean,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(AtomicReader,PrintStream,boolean,boolean).mjava","sourceNew":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(AtomicReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      DocsEnum docs = null;\n      DocsAndPositionsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      DocsEnum postingsDocs = null;\n      DocsAndPositionsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.fields();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull/visit (but don't count in\n        // stats) deleted documents to make sure they too\n        // are not corrupt:\n        Fields tfv = reader.getTermVectors(j);\n\n        // TODO: can we make a IS(FIR) that searches just\n        // this term vector... to pass for searcher?\n\n        if (tfv != null) {\n          // First run with no deletions:\n          checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Again, with the one doc deleted:\n          checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Only agg stats if the doc is live:\n          final boolean doStats = liveDocs == null || liveDocs.get(j);\n\n          if (doStats) {\n            status.docCount++;\n          }\n\n          for(String field : tfv) {\n            if (doStats) {\n              status.totVectors++;\n            }\n\n            // Make sure FieldInfo thinks this field is vector'd:\n            final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n            if (!fieldInfo.hasVectors()) {\n              throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n            }\n\n            if (crossCheckTermVectors) {\n              Terms terms = tfv.terms(field);\n              termsEnum = terms.iterator(termsEnum);\n              final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n              final boolean postingsHasPayload = fieldInfo.hasPayloads();\n              final boolean vectorsHasPayload = terms.hasPayloads();\n\n              Terms postingsTerms = postingsFields.terms(field);\n              if (postingsTerms == null) {\n                throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n              }\n              postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n              \n              final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n              BytesRef term = null;\n              while ((term = termsEnum.next()) != null) {\n\n                if (hasProx) {\n                  postings = termsEnum.docsAndPositions(null, postings);\n                  assert postings != null;\n                  docs = null;\n                } else {\n                  docs = termsEnum.docs(null, docs);\n                  assert docs != null;\n                  postings = null;\n                }\n\n                final DocsEnum docs2;\n                if (hasProx) {\n                  assert postings != null;\n                  docs2 = postings;\n                } else {\n                  assert docs != null;\n                  docs2 = docs;\n                }\n\n                final DocsEnum postingsDocs2;\n                if (!postingsTermsEnum.seekExact(term)) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsPostings = postingsTermsEnum.docsAndPositions(null, postingsPostings);\n                if (postingsPostings == null) {\n                  // Term vectors were indexed w/ pos but postings were not\n                  postingsDocs = postingsTermsEnum.docs(null, postingsDocs);\n                  if (postingsDocs == null) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                }\n\n                if (postingsPostings != null) {\n                  postingsDocs2 = postingsPostings;\n                } else {\n                  postingsDocs2 = postingsDocs;\n                }\n                  \n                final int advanceDoc = postingsDocs2.advance(j);\n                if (advanceDoc != j) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                }\n\n                final int doc = docs2.nextDoc();\n                  \n                if (doc != 0) {\n                  throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                }\n\n                if (postingsHasFreq) {\n                  final int tf = docs2.freq();\n                  if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                  }\n                \n                  if (hasProx) {\n                    for (int i = 0; i < tf; i++) {\n                      int pos = postings.nextPosition();\n                      if (postingsPostings != null) {\n                        int postingsPos = postingsPostings.nextPosition();\n                        if (terms.hasPositions() && pos != postingsPos) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                        }\n                      }\n\n                      // Call the methods to at least make\n                      // sure they don't throw exc:\n                      final int startOffset = postings.startOffset();\n                      final int endOffset = postings.endOffset();\n                      // TODO: these are too anal...?\n                      /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                      */\n\n                      if (postingsPostings != null) {\n                        final int postingsStartOffset = postingsPostings.startOffset();\n\n                        final int postingsEndOffset = postingsPostings.endOffset();\n                        if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                        }\n                        if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                        }\n                      }\n                      \n                      BytesRef payload = postings.getPayload();\n           \n                      if (payload != null) {\n                        assert vectorsHasPayload;\n                      }\n                      \n                      if (postingsHasPayload && vectorsHasPayload) {\n                        assert postingsPostings != null;\n                        \n                        if (payload == null) {\n                          // we have payloads, but not at this position. \n                          // postings has payloads too, it should not have one at this position\n                          if (postingsPostings.getPayload() != null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                          }\n                        } else {\n                          // we have payloads, and one at this position\n                          // postings should also have one at this position, with the same bytes.\n                          if (postingsPostings.getPayload() == null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                          }\n                          BytesRef postingsPayload = postingsPostings.getPayload();\n                          if (!payload.equals(postingsPayload)) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, \"OK [\" + status.totVectors + \" total vector count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format(vectorAvg) + \" term/freq vector fields per doc]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(AtomicReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors) {\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      DocsEnum docs = null;\n      DocsAndPositionsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      DocsEnum postingsDocs = null;\n      DocsAndPositionsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.fields();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull/visit (but don't count in\n        // stats) deleted documents to make sure they too\n        // are not corrupt:\n        Fields tfv = reader.getTermVectors(j);\n\n        // TODO: can we make a IS(FIR) that searches just\n        // this term vector... to pass for searcher?\n\n        if (tfv != null) {\n          // First run with no deletions:\n          checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Again, with the one doc deleted:\n          checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Only agg stats if the doc is live:\n          final boolean doStats = liveDocs == null || liveDocs.get(j);\n\n          if (doStats) {\n            status.docCount++;\n          }\n\n          for(String field : tfv) {\n            if (doStats) {\n              status.totVectors++;\n            }\n\n            // Make sure FieldInfo thinks this field is vector'd:\n            final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n            if (!fieldInfo.hasVectors()) {\n              throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n            }\n\n            if (crossCheckTermVectors) {\n              Terms terms = tfv.terms(field);\n              termsEnum = terms.iterator(termsEnum);\n              final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n              final boolean postingsHasPayload = fieldInfo.hasPayloads();\n              final boolean vectorsHasPayload = terms.hasPayloads();\n\n              Terms postingsTerms = postingsFields.terms(field);\n              if (postingsTerms == null) {\n                throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n              }\n              postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n              \n              final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n              BytesRef term = null;\n              while ((term = termsEnum.next()) != null) {\n\n                if (hasProx) {\n                  postings = termsEnum.docsAndPositions(null, postings);\n                  assert postings != null;\n                  docs = null;\n                } else {\n                  docs = termsEnum.docs(null, docs);\n                  assert docs != null;\n                  postings = null;\n                }\n\n                final DocsEnum docs2;\n                if (hasProx) {\n                  assert postings != null;\n                  docs2 = postings;\n                } else {\n                  assert docs != null;\n                  docs2 = docs;\n                }\n\n                final DocsEnum postingsDocs2;\n                if (!postingsTermsEnum.seekExact(term)) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsPostings = postingsTermsEnum.docsAndPositions(null, postingsPostings);\n                if (postingsPostings == null) {\n                  // Term vectors were indexed w/ pos but postings were not\n                  postingsDocs = postingsTermsEnum.docs(null, postingsDocs);\n                  if (postingsDocs == null) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                }\n\n                if (postingsPostings != null) {\n                  postingsDocs2 = postingsPostings;\n                } else {\n                  postingsDocs2 = postingsDocs;\n                }\n                  \n                final int advanceDoc = postingsDocs2.advance(j);\n                if (advanceDoc != j) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                }\n\n                final int doc = docs2.nextDoc();\n                  \n                if (doc != 0) {\n                  throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                }\n\n                if (postingsHasFreq) {\n                  final int tf = docs2.freq();\n                  if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                  }\n                \n                  if (hasProx) {\n                    for (int i = 0; i < tf; i++) {\n                      int pos = postings.nextPosition();\n                      if (postingsPostings != null) {\n                        int postingsPos = postingsPostings.nextPosition();\n                        if (terms.hasPositions() && pos != postingsPos) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                        }\n                      }\n\n                      // Call the methods to at least make\n                      // sure they don't throw exc:\n                      final int startOffset = postings.startOffset();\n                      final int endOffset = postings.endOffset();\n                      // TODO: these are too anal...?\n                      /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                      */\n\n                      if (postingsPostings != null) {\n                        final int postingsStartOffset = postingsPostings.startOffset();\n\n                        final int postingsEndOffset = postingsPostings.endOffset();\n                        if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                        }\n                        if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                        }\n                      }\n                      \n                      BytesRef payload = postings.getPayload();\n           \n                      if (payload != null) {\n                        assert vectorsHasPayload;\n                      }\n                      \n                      if (postingsHasPayload && vectorsHasPayload) {\n                        assert postingsPostings != null;\n                        \n                        if (payload == null) {\n                          // we have payloads, but not at this position. \n                          // postings has payloads too, it should not have one at this position\n                          if (postingsPostings.getPayload() != null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                          }\n                        } else {\n                          // we have payloads, and one at this position\n                          // postings should also have one at this position, with the same bytes.\n                          if (postingsPostings.getPayload() == null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                          }\n                          BytesRef postingsPayload = postingsPostings.getPayload();\n                          if (!payload.equals(postingsPayload)) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, \"OK [\" + status.totVectors + \" total vector count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format(vectorAvg) + \" term/freq vector fields per doc]\");\n    } catch (Throwable e) {\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/index/CheckIndex#testTermVectors(AtomicReader,PrintStream,boolean,boolean,boolean).mjava","sourceNew":null,"sourceOld":"  /**\n   * Test term vectors.\n   * @lucene.experimental\n   */\n  public static Status.TermVectorStatus testTermVectors(AtomicReader reader, PrintStream infoStream, boolean verbose, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    final Status.TermVectorStatus status = new Status.TermVectorStatus();\n    final FieldInfos fieldInfos = reader.getFieldInfos();\n    final Bits onlyDocIsDeleted = new FixedBitSet(1);\n    \n    try {\n      if (infoStream != null) {\n        infoStream.print(\"    test: term vectors........\");\n      }\n\n      DocsEnum docs = null;\n      DocsAndPositionsEnum postings = null;\n\n      // Only used if crossCheckTermVectors is true:\n      DocsEnum postingsDocs = null;\n      DocsAndPositionsEnum postingsPostings = null;\n\n      final Bits liveDocs = reader.getLiveDocs();\n\n      final Fields postingsFields;\n      // TODO: testTermsIndex\n      if (crossCheckTermVectors) {\n        postingsFields = reader.fields();\n      } else {\n        postingsFields = null;\n      }\n\n      TermsEnum termsEnum = null;\n      TermsEnum postingsTermsEnum = null;\n\n      for (int j = 0; j < reader.maxDoc(); ++j) {\n        // Intentionally pull/visit (but don't count in\n        // stats) deleted documents to make sure they too\n        // are not corrupt:\n        Fields tfv = reader.getTermVectors(j);\n\n        // TODO: can we make a IS(FIR) that searches just\n        // this term vector... to pass for searcher?\n\n        if (tfv != null) {\n          // First run with no deletions:\n          checkFields(tfv, null, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Again, with the one doc deleted:\n          checkFields(tfv, onlyDocIsDeleted, 1, fieldInfos, false, true, infoStream, verbose);\n\n          // Only agg stats if the doc is live:\n          final boolean doStats = liveDocs == null || liveDocs.get(j);\n\n          if (doStats) {\n            status.docCount++;\n          }\n\n          for(String field : tfv) {\n            if (doStats) {\n              status.totVectors++;\n            }\n\n            // Make sure FieldInfo thinks this field is vector'd:\n            final FieldInfo fieldInfo = fieldInfos.fieldInfo(field);\n            if (!fieldInfo.hasVectors()) {\n              throw new RuntimeException(\"docID=\" + j + \" has term vectors for field=\" + field + \" but FieldInfo has storeTermVector=false\");\n            }\n\n            if (crossCheckTermVectors) {\n              Terms terms = tfv.terms(field);\n              termsEnum = terms.iterator(termsEnum);\n              final boolean postingsHasFreq = fieldInfo.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS) >= 0;\n              final boolean postingsHasPayload = fieldInfo.hasPayloads();\n              final boolean vectorsHasPayload = terms.hasPayloads();\n\n              Terms postingsTerms = postingsFields.terms(field);\n              if (postingsTerms == null) {\n                throw new RuntimeException(\"vector field=\" + field + \" does not exist in postings; doc=\" + j);\n              }\n              postingsTermsEnum = postingsTerms.iterator(postingsTermsEnum);\n              \n              final boolean hasProx = terms.hasOffsets() || terms.hasPositions();\n              BytesRef term = null;\n              while ((term = termsEnum.next()) != null) {\n\n                if (hasProx) {\n                  postings = termsEnum.docsAndPositions(null, postings);\n                  assert postings != null;\n                  docs = null;\n                } else {\n                  docs = termsEnum.docs(null, docs);\n                  assert docs != null;\n                  postings = null;\n                }\n\n                final DocsEnum docs2;\n                if (hasProx) {\n                  assert postings != null;\n                  docs2 = postings;\n                } else {\n                  assert docs != null;\n                  docs2 = docs;\n                }\n\n                final DocsEnum postingsDocs2;\n                if (!postingsTermsEnum.seekExact(term)) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                }\n                postingsPostings = postingsTermsEnum.docsAndPositions(null, postingsPostings);\n                if (postingsPostings == null) {\n                  // Term vectors were indexed w/ pos but postings were not\n                  postingsDocs = postingsTermsEnum.docs(null, postingsDocs);\n                  if (postingsDocs == null) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" does not exist in postings; doc=\" + j);\n                  }\n                }\n\n                if (postingsPostings != null) {\n                  postingsDocs2 = postingsPostings;\n                } else {\n                  postingsDocs2 = postingsDocs;\n                }\n                  \n                final int advanceDoc = postingsDocs2.advance(j);\n                if (advanceDoc != j) {\n                  throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \": doc=\" + j + \" was not found in postings (got: \" + advanceDoc + \")\");\n                }\n\n                final int doc = docs2.nextDoc();\n                  \n                if (doc != 0) {\n                  throw new RuntimeException(\"vector for doc \" + j + \" didn't return docID=0: got docID=\" + doc);\n                }\n\n                if (postingsHasFreq) {\n                  final int tf = docs2.freq();\n                  if (postingsHasFreq && postingsDocs2.freq() != tf) {\n                    throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": freq=\" + tf + \" differs from postings freq=\" + postingsDocs2.freq());\n                  }\n                \n                  if (hasProx) {\n                    for (int i = 0; i < tf; i++) {\n                      int pos = postings.nextPosition();\n                      if (postingsPostings != null) {\n                        int postingsPos = postingsPostings.nextPosition();\n                        if (terms.hasPositions() && pos != postingsPos) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": pos=\" + pos + \" differs from postings pos=\" + postingsPos);\n                        }\n                      }\n\n                      // Call the methods to at least make\n                      // sure they don't throw exc:\n                      final int startOffset = postings.startOffset();\n                      final int endOffset = postings.endOffset();\n                      // TODO: these are too anal...?\n                      /*\n                        if (endOffset < startOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is > endOffset=\" + endOffset);\n                        }\n                        if (startOffset < lastStartOffset) {\n                        throw new RuntimeException(\"vector startOffset=\" + startOffset + \" is < prior startOffset=\" + lastStartOffset);\n                        }\n                        lastStartOffset = startOffset;\n                      */\n\n                      if (postingsPostings != null) {\n                        final int postingsStartOffset = postingsPostings.startOffset();\n\n                        final int postingsEndOffset = postingsPostings.endOffset();\n                        if (startOffset != -1 && postingsStartOffset != -1 && startOffset != postingsStartOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": startOffset=\" + startOffset + \" differs from postings startOffset=\" + postingsStartOffset);\n                        }\n                        if (endOffset != -1 && postingsEndOffset != -1 && endOffset != postingsEndOffset) {\n                          throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \": endOffset=\" + endOffset + \" differs from postings endOffset=\" + postingsEndOffset);\n                        }\n                      }\n                      \n                      BytesRef payload = postings.getPayload();\n           \n                      if (payload != null) {\n                        assert vectorsHasPayload;\n                      }\n                      \n                      if (postingsHasPayload && vectorsHasPayload) {\n                        assert postingsPostings != null;\n                        \n                        if (payload == null) {\n                          // we have payloads, but not at this position. \n                          // postings has payloads too, it should not have one at this position\n                          if (postingsPostings.getPayload() != null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has no payload but postings does: \" + postingsPostings.getPayload());\n                          }\n                        } else {\n                          // we have payloads, and one at this position\n                          // postings should also have one at this position, with the same bytes.\n                          if (postingsPostings.getPayload() == null) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but postings does not.\");\n                          }\n                          BytesRef postingsPayload = postingsPostings.getPayload();\n                          if (!payload.equals(postingsPayload)) {\n                            throw new RuntimeException(\"vector term=\" + term + \" field=\" + field + \" doc=\" + j + \" has payload=\" + payload + \" but differs from postings payload=\" + postingsPayload);\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      float vectorAvg = status.docCount == 0 ? 0 : status.totVectors / (float)status.docCount;\n      msg(infoStream, \"OK [\" + status.totVectors + \" total vector count; avg \" + \n          NumberFormat.getInstance(Locale.ROOT).format(vectorAvg) + \" term/freq vector fields per doc]\");\n    } catch (Throwable e) {\n      if (failFast) {\n        IOUtils.reThrow(e);\n      }\n      msg(infoStream, \"ERROR [\" + String.valueOf(e.getMessage()) + \"]\");\n      status.error = e;\n      if (infoStream != null) {\n        e.printStackTrace(infoStream);\n      }\n    }\n    \n    return status;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}