{"path":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","commits":[{"id":"8a093d23e938d132b81b5f2de3d6b168afe3608e","date":1455076308,"type":1,"author":"nknize","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ec996bf2daff09d61a876319e8fae4aebbea58e3","date":1458661946,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLats, final double[] polyLons) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLons = polyLons;\n    this.polyLats = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLons, final double[] polyLats) {\n    super(field, termEncoding, bbox.minLon, bbox.minLat, bbox.maxLon, bbox.maxLat);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.x = polyLons;\n    this.y = polyLats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ad0d09e969f4763b0df4230f8e3f74357872a4e4","date":1459188769,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","sourceNew":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLats, final double[] polyLons) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    GeoUtils.checkPolygon(polyLats,  polyLons);\n    this.polyLons = polyLons;\n    this.polyLats = polyLats;\n  }\n\n","sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLats, final double[] polyLons) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    if (polyLats.length != polyLons.length) {\n      throw new IllegalArgumentException(\"polyLats and polyLons must be equal length\");\n    }\n    if (polyLats.length < 4) {\n      throw new IllegalArgumentException(\"at least 4 polygon points required\");\n    }\n    if (polyLats[0] != polyLats[polyLats.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLats[0]=\" + polyLats[0] + \" polyLats[\" + (polyLats.length-1) + \"]=\" + polyLats[polyLats.length-1]);\n    }\n    if (polyLons[0] != polyLons[polyLons.length-1]) {\n      throw new IllegalArgumentException(\"first and last points of the polygon must be the same (it must close itself): polyLons[0]=\" + polyLons[0] + \" polyLons[\" + (polyLons.length-1) + \"]=\" + polyLons[polyLons.length-1]);\n    }\n\n    this.polyLons = polyLons;\n    this.polyLats = polyLats;\n  }\n\n","bugFix":["e91b7d9f5000faefb0e81b98e76ad5b9463283e8"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"95ddcac9ac08381985af6eac8f8b77ba881d4ad8","date":1459477726,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointInPolygonQuery#GeoPointInPolygonQuery(String,TermEncoding,GeoRect,double[],double[]).mjava","sourceNew":null,"sourceOld":"  /** Common constructor, used only internally. */\n  private GeoPointInPolygonQuery(final String field, TermEncoding termEncoding, GeoRect bbox, final double[] polyLats, final double[] polyLons) {\n    super(field, termEncoding, bbox.minLat, bbox.maxLat, bbox.minLon, bbox.maxLon);\n    GeoUtils.checkPolygon(polyLats,  polyLons);\n    this.polyLons = polyLons;\n    this.polyLats = polyLats;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"]},"commit2Childs":{"95ddcac9ac08381985af6eac8f8b77ba881d4ad8":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ec996bf2daff09d61a876319e8fae4aebbea58e3":["ad0d09e969f4763b0df4230f8e3f74357872a4e4"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["8a093d23e938d132b81b5f2de3d6b168afe3608e"],"ad0d09e969f4763b0df4230f8e3f74357872a4e4":["95ddcac9ac08381985af6eac8f8b77ba881d4ad8"],"8a093d23e938d132b81b5f2de3d6b168afe3608e":["ec996bf2daff09d61a876319e8fae4aebbea58e3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}