{"path":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    metricManager.moveMetrics(oldRegistryName, registryName, null);\n    // old registry is no longer used - we have moved the metrics\n    metricManager.removeRegistry(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    metricManager.moveMetrics(oldRegistryName, registryName, null);\n    // old registry is no longer used - we have moved the metrics\n    metricManager.removeRegistry(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a30bfa174128ad6cb3bcf568080886729e347fe9","date":1485967817,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    metricManager.moveMetrics(oldRegistryName, registryName, null);\n    // old registry is no longer used - we have moved the metrics\n    metricManager.removeRegistry(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":["0265144286422ad99682a00904cc2536b79c8535"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c3523a0ab04c3002eee3896c75ea5f10f388bcc","date":1485968422,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    metricManager.moveMetrics(oldRegistryName, registryName, null);\n    // old registry is no longer used - we have moved the metrics\n    metricManager.removeRegistry(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"073f1aa70444ec64f3e216816af2a3b43fa38fe7","date":1488920481,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    registryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, tag);\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, tag);\n    }\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    registryName = createRegistryName(core.getCoreDescriptor().getCollectionName(), core.getName());\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa","date":1571411704,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = solrMetricsContext.registry;\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    String newRegistryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(newRegistryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, solrMetricsContext.tag);\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, solrMetricsContext.tag);\n    }\n    solrMetricsContext = new SolrMetricsContext(metricManager, newRegistryName, solrMetricsContext.tag);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = registryName;\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    registryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(registryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, tag);\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, tag);\n    }\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c2af5a711bd6e2d33e0221ced0f47ac596ed275","date":1572877903,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = solrMetricsContext.getRegistryName();\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    String newRegistryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(newRegistryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, solrMetricsContext.getTag());\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, solrMetricsContext.getTag());\n    }\n    solrMetricsContext = new SolrMetricsContext(metricManager, newRegistryName, solrMetricsContext.getTag());\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = solrMetricsContext.registry;\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    String newRegistryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(newRegistryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, solrMetricsContext.tag);\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, solrMetricsContext.tag);\n    }\n    solrMetricsContext = new SolrMetricsContext(metricManager, newRegistryName, solrMetricsContext.tag);\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e80876f1ee57780ad756fa083e88c95d7c1d0c0b","date":1595653703,"type":5,"author":"David Smiley","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreRename().mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrCoreMetricManager#afterCoreSetName().mjava","sourceNew":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreRename() {\n    assert core.getCoreDescriptor().getCloudDescriptor() == null;\n    String oldRegistryName = solrMetricsContext.getRegistryName();\n    String oldLeaderRegistryName = leaderRegistryName;\n    String newRegistryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(newRegistryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, solrMetricsContext.getTag());\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, solrMetricsContext.getTag());\n    }\n    solrMetricsContext = new SolrMetricsContext(metricManager, newRegistryName, solrMetricsContext.getTag());\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","sourceOld":"  /**\n   * Make sure that metrics already collected that correspond to the old core name\n   * are carried over and will be used under the new core name.\n   * This method also reloads reporters so that they use the new core name.\n   */\n  public void afterCoreSetName() {\n    String oldRegistryName = solrMetricsContext.getRegistryName();\n    String oldLeaderRegistryName = leaderRegistryName;\n    initCloudMode();\n    String newRegistryName = createRegistryName(cloudMode, collectionName, shardName, replicaName, core.getName());\n    leaderRegistryName = createLeaderRegistryName(cloudMode, collectionName, shardName);\n    if (oldRegistryName.equals(newRegistryName)) {\n      return;\n    }\n    // close old reporters\n    metricManager.closeReporters(oldRegistryName, solrMetricsContext.getTag());\n    if (oldLeaderRegistryName != null) {\n      metricManager.closeReporters(oldLeaderRegistryName, solrMetricsContext.getTag());\n    }\n    solrMetricsContext = new SolrMetricsContext(metricManager, newRegistryName, solrMetricsContext.getTag());\n    // load reporters again, using the new core name\n    loadReporters();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["0265144286422ad99682a00904cc2536b79c8535"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","a30bfa174128ad6cb3bcf568080886729e347fe9"],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["a30bfa174128ad6cb3bcf568080886729e347fe9"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["a30bfa174128ad6cb3bcf568080886729e347fe9","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"a30bfa174128ad6cb3bcf568080886729e347fe9":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","073f1aa70444ec64f3e216816af2a3b43fa38fe7"],"7c2af5a711bd6e2d33e0221ced0f47ac596ed275":["e80876f1ee57780ad756fa083e88c95d7c1d0c0b"],"c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa":["7c2af5a711bd6e2d33e0221ced0f47ac596ed275"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"7c3523a0ab04c3002eee3896c75ea5f10f388bcc":[],"073f1aa70444ec64f3e216816af2a3b43fa38fe7":["c959a64c5b52cc12eb8daa17f4f0ed9cf2dfcaaa"],"e80876f1ee57780ad756fa083e88c95d7c1d0c0b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["7c3523a0ab04c3002eee3896c75ea5f10f388bcc","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}