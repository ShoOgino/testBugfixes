{"path":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","commits":[{"id":"9905adab7913dc4e059260c31a65cdfbd94afea9","date":1388944941,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","sourceNew":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b1eb427f2c6beed80d1724555fc1db003ccf3030","date":1417137397,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","sourceNew":"  /** Subclass and override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":"  /** Subclass & override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9663a4b4e19155fda5b6709ab4d61e249ef6914b","date":1595426224,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","pathOld":"lucene/facet/src/java/org/apache/lucene/facet/taxonomy/DocValuesOrdinalsReader#decode(BytesRef,IntsRef).mjava","sourceNew":" /** \n   * Subclass and override if you change the encoding. \n   * The method is marked 'public' to allow decoding of binary payload containing ordinals\n   * without instantiating an {@link org.apache.lucene.facet.taxonomy.OrdinalsReader.OrdinalsSegmentReader}.\n   *  \n   * This takes care of use cases where an application instantiates {@link org.apache.lucene.index.BinaryDocValues} \n   * reader for a facet field outside this class, reads the binary payload for a document and decodes the ordinals\n   * in the payload.\n   *\n   * @param buf binary payload containing encoded ordinals\n   * @param ordinals buffer for decoded ordinals\n   */\n  public void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","sourceOld":"  /** Subclass and override if you change the encoding. */\n  protected void decode(BytesRef buf, IntsRef ordinals) {\n\n    // grow the buffer up front, even if by a large number of values (buf.length)\n    // that saves the need to check inside the loop for every decoded value if\n    // the buffer needs to grow.\n    if (ordinals.ints.length < buf.length) {\n      ordinals.ints = ArrayUtil.grow(ordinals.ints, buf.length);\n    }\n\n    ordinals.offset = 0;\n    ordinals.length = 0;\n\n    // it is better if the decoding is inlined like so, and not e.g.\n    // in a utility method\n    int upto = buf.offset + buf.length;\n    int value = 0;\n    int offset = buf.offset;\n    int prev = 0;\n    while (offset < upto) {\n      byte b = buf.bytes[offset++];\n      if (b >= 0) {\n        ordinals.ints[ordinals.length] = ((value << 7) | b) + prev;\n        value = 0;\n        prev = ordinals.ints[ordinals.length];\n        ordinals.length++;\n      } else {\n        value = (value << 7) | (b & 0x7F);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["9905adab7913dc4e059260c31a65cdfbd94afea9"],"9905adab7913dc4e059260c31a65cdfbd94afea9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9663a4b4e19155fda5b6709ab4d61e249ef6914b":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9663a4b4e19155fda5b6709ab4d61e249ef6914b"]},"commit2Childs":{"b1eb427f2c6beed80d1724555fc1db003ccf3030":["9663a4b4e19155fda5b6709ab4d61e249ef6914b"],"9905adab7913dc4e059260c31a65cdfbd94afea9":["b1eb427f2c6beed80d1724555fc1db003ccf3030"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9905adab7913dc4e059260c31a65cdfbd94afea9"],"9663a4b4e19155fda5b6709ab4d61e249ef6914b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}