{"path":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","commits":[{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":1,"author":"Mike McCandless","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser,boolean).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser, boolean setDocsWithField) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      // Not cached here by FieldCacheImpl (cached instead\n      // per-thread by SegmentReader):\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n      return (NumericDocValues) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser), setDocsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"367f57e2ee85b7f7e28cfe73370a22cf67624f65","date":1476778467,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues();\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size(field) == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size(field) != values.getDocCount(field)) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size(field) + \",numDocs=\" + values.getDocCount(field));\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9c066767cf781550d3a8f94fff30ed80464bc0ad","date":1481239747,"type":3,"author":"yonik","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9856095f7afb5a607bf5e65077615ed91273508c","date":1481837697,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      Bits docsWithField = getDocsWithField(reader, field, parser);\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator(docsWithField);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f6652c943595e92c187ee904c382863013eae28f","date":1539042663,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDataDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDataDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDataDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"59ed8c026ba85e3c42fb89605b2032dc6f9cc241","date":1581113294,"type":3,"author":"Nicholas Knize","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","pathOld":"solr/core/src/java/org/apache/solr/uninverting/FieldCacheImpl#getNumerics(LeafReader,String,Parser).mjava","sourceNew":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","sourceOld":"  @Override\n  public NumericDocValues getNumerics(LeafReader reader, String field, Parser parser) throws IOException {\n    if (parser == null) {\n      throw new NullPointerException();\n    }\n    final NumericDocValues valuesIn = reader.getNumericDocValues(field);\n    if (valuesIn != null) {\n      return valuesIn;\n    } else {\n      final FieldInfo info = reader.getFieldInfos().fieldInfo(field);\n      if (info == null) {\n        return DocValues.emptyNumeric();\n      } else if (info.getDocValuesType() != DocValuesType.NONE) {\n        throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed as \" + info.getDocValuesType());\n      }\n      \n      if (parser instanceof PointParser) {\n        // points case\n        // no points in this segment\n        if (info.getPointDataDimensionCount() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        if (info.getPointDataDimensionCount() != 1) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with dimensions=\" + info.getPointDataDimensionCount());\n        }\n        PointValues values = reader.getPointValues(field);\n        // no actual points for this field (e.g. all points deleted)\n        if (values == null || values.size() == 0) {\n          return DocValues.emptyNumeric();\n        }\n        // not single-valued\n        if (values.size() != values.getDocCount()) {\n          throw new IllegalStateException(\"Type mismatch: \" + field + \" was indexed with multiple values, numValues=\" + values.size() + \",numDocs=\" + values.getDocCount());\n        }\n      } else {\n        // postings case \n        // not indexed\n        if (info.getIndexOptions() == IndexOptions.NONE) {\n          return DocValues.emptyNumeric();\n        }\n      }\n\n      return ((LongsFromArray) caches.get(Long.TYPE).get(reader, new CacheKey(field, parser))).iterator();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["f6652c943595e92c187ee904c382863013eae28f"],"f6652c943595e92c187ee904c382863013eae28f":["9c066767cf781550d3a8f94fff30ed80464bc0ad"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"9856095f7afb5a607bf5e65077615ed91273508c":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","9c066767cf781550d3a8f94fff30ed80464bc0ad"],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"]},"commit2Childs":{"59ed8c026ba85e3c42fb89605b2032dc6f9cc241":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f6652c943595e92c187ee904c382863013eae28f":["59ed8c026ba85e3c42fb89605b2032dc6f9cc241"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["367f57e2ee85b7f7e28cfe73370a22cf67624f65"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"367f57e2ee85b7f7e28cfe73370a22cf67624f65":["9c066767cf781550d3a8f94fff30ed80464bc0ad","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"9856095f7afb5a607bf5e65077615ed91273508c":[],"9c066767cf781550d3a8f94fff30ed80464bc0ad":["f6652c943595e92c187ee904c382863013eae28f","9856095f7afb5a607bf5e65077615ed91273508c"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["9856095f7afb5a607bf5e65077615ed91273508c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9856095f7afb5a607bf5e65077615ed91273508c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}