{"path":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSFailoverTest#testOldReplicaIsDeletedInRaceCondition().mjava","commits":[{"id":"717e5ceb2acae36d422ec75e5a4ce9fac40506e1","date":1501239603,"type":0,"author":"Cao Manh Dat","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSFailoverTest#testOldReplicaIsDeletedInRaceCondition().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOldReplicaIsDeletedInRaceCondition() throws Exception {\n    String coll = \"movereplicatest_coll4\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(coll, 100);\n    Replica replica = getCollectionState(coll).getReplicas().iterator().next();\n\n    cluster.getJettySolrRunners().get(0).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    // move replica from node0 -> node1\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).start();\n    // node0 will delete it replica because of CloudUtil.checkSharedFSFailoverReplaced()\n    cluster.getJettySolrRunners().get(0).start();\n    Thread.sleep(5000);\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    assertEquals(1, getCollectionState(coll).getReplicas().size());\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    CollectionAdminRequest.deleteCollection(coll).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c304e97e7c1d472bc70e801b35ee78583916c6cd","date":1507105431,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSFailoverTest#testOldReplicaIsDeletedInRaceCondition().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOldReplicaIsDeletedInRaceCondition() throws Exception {\n    String coll = \"movereplicatest_coll4\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(coll, 100);\n    Replica replica = getCollectionState(coll).getReplicas().iterator().next();\n\n    cluster.getJettySolrRunners().get(0).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    // move replica from node0 -> node1\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).start();\n    // node0 will delete it replica because of CloudUtil.checkSharedFSFailoverReplaced()\n    cluster.getJettySolrRunners().get(0).start();\n    Thread.sleep(5000);\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    assertEquals(1, getCollectionState(coll).getReplicas().size());\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    CollectionAdminRequest.deleteCollection(coll).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"560c18d71dad43d675158783c3840f8c80d6d39c","date":1507105532,"type":0,"author":"Cao Manh Dat","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/MoveReplicaHDFSFailoverTest#testOldReplicaIsDeletedInRaceCondition().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testOldReplicaIsDeletedInRaceCondition() throws Exception {\n    String coll = \"movereplicatest_coll4\";\n    CollectionAdminRequest.createCollection(coll, \"conf1\", 1, 1)\n        .setCreateNodeSet(cluster.getJettySolrRunner(0).getNodeName())\n        .process(cluster.getSolrClient());\n    addDocs(coll, 100);\n    Replica replica = getCollectionState(coll).getReplicas().iterator().next();\n\n    cluster.getJettySolrRunners().get(0).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    // move replica from node0 -> node1\n    new CollectionAdminRequest.MoveReplica(coll, replica.getName(), cluster.getJettySolrRunner(1).getNodeName())\n        .process(cluster.getSolrClient());\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).stop();\n    assertTrue(ClusterStateUtil.waitForAllReplicasNotLive(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    cluster.getJettySolrRunners().get(1).start();\n    // node0 will delete it replica because of CloudUtil.checkSharedFSFailoverReplaced()\n    cluster.getJettySolrRunners().get(0).start();\n    Thread.sleep(5000);\n    assertTrue(ClusterStateUtil.waitForAllActiveAndLiveReplicas(cluster.getSolrClient().getZkStateReader(), 20000));\n\n    assertEquals(1, getCollectionState(coll).getReplicas().size());\n    assertEquals(100, cluster.getSolrClient().query(coll, new SolrQuery(\"*:*\")).getResults().getNumFound());\n    CollectionAdminRequest.deleteCollection(coll).process(cluster.getSolrClient());\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","717e5ceb2acae36d422ec75e5a4ce9fac40506e1"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"560c18d71dad43d675158783c3840f8c80d6d39c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","c304e97e7c1d472bc70e801b35ee78583916c6cd"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["560c18d71dad43d675158783c3840f8c80d6d39c"]},"commit2Childs":{"c304e97e7c1d472bc70e801b35ee78583916c6cd":["560c18d71dad43d675158783c3840f8c80d6d39c"],"717e5ceb2acae36d422ec75e5a4ce9fac40506e1":["c304e97e7c1d472bc70e801b35ee78583916c6cd"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["c304e97e7c1d472bc70e801b35ee78583916c6cd","717e5ceb2acae36d422ec75e5a4ce9fac40506e1","560c18d71dad43d675158783c3840f8c80d6d39c"],"560c18d71dad43d675158783c3840f8c80d6d39c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}