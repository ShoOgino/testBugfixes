{"path":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","commits":[{"id":"a36e5fc6b39329bd08caaf6065552fe3535ae743","date":1011235762,"type":0,"author":"Brian Goetz","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"/dev/null","sourceNew":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer();\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5742a13bc31248b37eec58aaf19da9d165a48d82","date":1026669113,"type":3,"author":"Otis Gospodnetic","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","sourceNew":"    public void testNumber() throws Exception {\n\t// The numbers go away because SimpleAnalzyer ignores them\n\tassertQueryEquals(\"3\", null, \"\");\n\tassertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\tassertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n\tAnalyzer a = new StandardAnalyzer();\n\tassertQueryEquals(\"3\", a, \"3\");\n\tassertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n\tassertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n    }\n\n","sourceOld":"  public void testNumber() throws Exception {\n    // The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer();\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"105b8c63d8ae43de76f14005b62a5657a4b8d9ce","date":1064896862,"type":3,"author":"Erik Hatcher","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer();\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"    public void testNumber() throws Exception {\n\t// The numbers go away because SimpleAnalzyer ignores them\n\tassertQueryEquals(\"3\", null, \"\");\n\tassertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n\tassertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n\tAnalyzer a = new StandardAnalyzer();\n\tassertQueryEquals(\"3\", a, \"3\");\n\tassertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n\tassertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n    }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9","date":1256127131,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer();\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6","date":1265808957,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer(org.apache.lucene.util.Version.LUCENE_CURRENT);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","pathOld":"src/test/org/apache/lucene/queryParser/TestQueryParser#testNumber().mjava","sourceNew":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","sourceOld":"  public void testNumber() throws Exception {\n// The numbers go away because SimpleAnalzyer ignores them\n    assertQueryEquals(\"3\", null, \"\");\n    assertQueryEquals(\"term 1.0 1 2\", null, \"term\");\n    assertQueryEquals(\"term term1 term2\", null, \"term term term\");\n\n    Analyzer a = new StandardAnalyzer(TEST_VERSION_CURRENT);\n    assertQueryEquals(\"3\", a, \"3\");\n    assertQueryEquals(\"term 1.0 1 2\", a, \"term 1.0 1 2\");\n    assertQueryEquals(\"term term1 term2\", a, \"term term1 term2\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"]},"commit2Childs":{"55f083e91bb056b57de136da1dfc3b9b6ecc4ef6":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["a36e5fc6b39329bd08caaf6065552fe3535ae743"],"105b8c63d8ae43de76f14005b62a5657a4b8d9ce":["4b41b991de69ba7b72d5e90cfcee25699a1a7fc9"],"4b41b991de69ba7b72d5e90cfcee25699a1a7fc9":["55f083e91bb056b57de136da1dfc3b9b6ecc4ef6"],"a36e5fc6b39329bd08caaf6065552fe3535ae743":["5742a13bc31248b37eec58aaf19da9d165a48d82"],"5742a13bc31248b37eec58aaf19da9d165a48d82":["105b8c63d8ae43de76f14005b62a5657a4b8d9ce"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}