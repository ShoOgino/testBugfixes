{"path":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"46818a810eab72123f0e37e6ec5f2d426bd47be1","date":1331482161,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"38e3b736c7ca086d61b7dbb841c905ee115490da","date":1331657018,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.hasNorms(f.name()), !f.fieldType().omitNorms());\n        assertEquals(reader.hasNorms(f.name()), !DocHelper.noNorms.containsKey(f.name()));\n        if (!reader.hasNorms(f.name())) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad7de846867bd14c63f9dd19df082f72c5ea9c54","date":1355517454,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0837ab0472feecb3a54260729d845f839e1cbd72","date":1358283639,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.simpleNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.simpleNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.simpleNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ddadc5a8439c906a65bfba5ce15166b5d5b58d82","date":1358287870,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.simpleNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.simpleNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.simpleNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    Assume.assumeTrue(_TestUtil.canUseSimpleNorms());\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.simpleNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.simpleNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.simpleNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200","date":1358521790,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.simpleNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.simpleNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.simpleNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiSimpleDocValues.simpleNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d4d69c535930b5cce125cff868d40f6373dc27d4","date":1360270101,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n        // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.normValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.normValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.normValues(f.name()) == null) {\n          // test for norms of null\n          DocValues norms = MultiDocValues.getNormDocValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":["0f4b223b56d0c7927ae8baced5e1b1dd4c693b1d","46818a810eab72123f0e37e6ec5f2d426bd47be1","d189bc0061161fcd0242e1056416ace0bd3a4da7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":4,"author":"Ryan Ernst","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestSegmentReader#checkNorms(AtomicReader).mjava","sourceNew":null,"sourceOld":"  public static void checkNorms(AtomicReader reader) throws IOException {\n    // test omit norms\n    for (int i=0; i<DocHelper.fields.length; i++) {\n      IndexableField f = DocHelper.fields[i];\n      if (f.fieldType().indexed()) {\n        assertEquals(reader.getNormValues(f.name()) != null, !f.fieldType().omitNorms());\n        assertEquals(reader.getNormValues(f.name()) != null, !DocHelper.noNorms.containsKey(f.name()));\n        if (reader.getNormValues(f.name()) == null) {\n          // test for norms of null\n          NumericDocValues norms = MultiDocValues.getNormValues(reader, f.name());\n          assertNull(norms);\n        }\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"38e3b736c7ca086d61b7dbb841c905ee115490da":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","46818a810eab72123f0e37e6ec5f2d426bd47be1"],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["46818a810eab72123f0e37e6ec5f2d426bd47be1","b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["46818a810eab72123f0e37e6ec5f2d426bd47be1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"0837ab0472feecb3a54260729d845f839e1cbd72":["ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["0837ab0472feecb3a54260729d845f839e1cbd72"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c9fb5f46e264daf5ba3860defe623a89d202dd87"]},"commit2Childs":{"38e3b736c7ca086d61b7dbb841c905ee115490da":[],"b8acf0807ca5f38beda8e0f7d5ab46ff39f81200":["d4d69c535930b5cce125cff868d40f6373dc27d4"],"d4d69c535930b5cce125cff868d40f6373dc27d4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["38e3b736c7ca086d61b7dbb841c905ee115490da","46818a810eab72123f0e37e6ec5f2d426bd47be1"],"ad7de846867bd14c63f9dd19df082f72c5ea9c54":["0837ab0472feecb3a54260729d845f839e1cbd72"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"46818a810eab72123f0e37e6ec5f2d426bd47be1":["38e3b736c7ca086d61b7dbb841c905ee115490da","d4d69c535930b5cce125cff868d40f6373dc27d4","ad7de846867bd14c63f9dd19df082f72c5ea9c54"],"0837ab0472feecb3a54260729d845f839e1cbd72":["ddadc5a8439c906a65bfba5ce15166b5d5b58d82"],"ddadc5a8439c906a65bfba5ce15166b5d5b58d82":["b8acf0807ca5f38beda8e0f7d5ab46ff39f81200"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["38e3b736c7ca086d61b7dbb841c905ee115490da","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}