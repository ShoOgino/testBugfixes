{"path":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","commits":[{"id":"48180ea0d6210cab36e06798b916a39e0607713b","date":1367051483,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","pathOld":"/dev/null","sourceNew":"  // closeSubreaders=true\n  public void testReaderClosedListener2() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(AtomicReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(new ReaderClosedListener() {\n          @Override\n          public void onClose(IndexReader reader) {\n            listenerClosedCount[0]++;\n          }\n        });\n    }\n    pr.close();\n    assertEquals(3, listenerClosedCount[0]);\n    dir1.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["5f6279d779b4584858af04f499e8aac0ae132c29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","sourceNew":"  // closeSubreaders=true\n  public void testReaderClosedListener2() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(LeafReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(new ReaderClosedListener() {\n          @Override\n          public void onClose(IndexReader reader) {\n            listenerClosedCount[0]++;\n          }\n        });\n    }\n    pr.close();\n    assertEquals(3, listenerClosedCount[0]);\n    dir1.close();\n  }\n\n","sourceOld":"  // closeSubreaders=true\n  public void testReaderClosedListener2() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(AtomicReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(new ReaderClosedListener() {\n          @Override\n          public void onClose(IndexReader reader) {\n            listenerClosedCount[0]++;\n          }\n        });\n    }\n    pr.close();\n    assertEquals(3, listenerClosedCount[0]);\n    dir1.close();\n  }\n\n","bugFix":null,"bugIntro":["5f6279d779b4584858af04f499e8aac0ae132c29"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"5f6279d779b4584858af04f499e8aac0ae132c29","date":1432729989,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","sourceNew":"  public void testReaderClosedListener2() throws Exception {\n    testReaderClosedListener(true, 0);\n  }\n\n","sourceOld":"  // closeSubreaders=true\n  public void testReaderClosedListener2() throws Exception {\n    Directory dir1 = getDir1(random());\n    CompositeReader ir1 = DirectoryReader.open(dir1);\n    \n    // with overlapping\n    ParallelCompositeReader pr = new ParallelCompositeReader(true,\n     new CompositeReader[] {ir1},\n     new CompositeReader[] {ir1});\n\n    final int[] listenerClosedCount = new int[1];\n\n    assertEquals(3, pr.leaves().size());\n\n    for(LeafReaderContext cxt : pr.leaves()) {\n      cxt.reader().addReaderClosedListener(new ReaderClosedListener() {\n          @Override\n          public void onClose(IndexReader reader) {\n            listenerClosedCount[0]++;\n          }\n        });\n    }\n    pr.close();\n    assertEquals(3, listenerClosedCount[0]);\n    dir1.close();\n  }\n\n","bugFix":["c9fb5f46e264daf5ba3860defe623a89d202dd87","48180ea0d6210cab36e06798b916a39e0607713b"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d211216c83f01894810543d1c107160a9ae3650b","date":1488289605,"type":4,"author":"Adrien Grand","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestParallelCompositeReader#testReaderClosedListener2().mjava","sourceNew":null,"sourceOld":"  public void testReaderClosedListener2() throws Exception {\n    testReaderClosedListener(true, 0);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"48180ea0d6210cab36e06798b916a39e0607713b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"d211216c83f01894810543d1c107160a9ae3650b":["5f6279d779b4584858af04f499e8aac0ae132c29"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5f6279d779b4584858af04f499e8aac0ae132c29":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["48180ea0d6210cab36e06798b916a39e0607713b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["d211216c83f01894810543d1c107160a9ae3650b"]},"commit2Childs":{"48180ea0d6210cab36e06798b916a39e0607713b":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["48180ea0d6210cab36e06798b916a39e0607713b"],"d211216c83f01894810543d1c107160a9ae3650b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5f6279d779b4584858af04f499e8aac0ae132c29":["d211216c83f01894810543d1c107160a9ae3650b"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["5f6279d779b4584858af04f499e8aac0ae132c29"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}