{"path":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86PointsReader#Lucene86PointsReader(SegmentReadState).mjava","commits":[{"id":"78e689a3b60e84c75dc6dd7b181a71fc19ef8482","date":1591689554,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86PointsReader#Lucene86PointsReader(SegmentReadState).mjava","pathOld":"/dev/null","sourceNew":"  /** Sole constructor */\n  public Lucene86PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n    String metaFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.META_EXTENSION);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.INDEX_EXTENSION);\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.DATA_EXTENSION);\n\n    boolean success = false;\n    try {\n      indexIn = readState.directory.openInput(indexFileName, readState.context);\n      CodecUtil.checkIndexHeader(indexIn,\n          Lucene86PointsFormat.INDEX_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n      CodecUtil.retrieveChecksum(indexIn);\n\n      dataIn = readState.directory.openInput(dataFileName, readState.context);\n      CodecUtil.checkIndexHeader(dataIn,\n          Lucene86PointsFormat.DATA_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n      CodecUtil.retrieveChecksum(dataIn);\n\n      try (ChecksumIndexInput metaIn = readState.directory.openChecksumInput(metaFileName, readState.context)) {\n        Throwable priorE = null;\n        try {\n          CodecUtil.checkIndexHeader(metaIn,\n              Lucene86PointsFormat.META_CODEC_NAME,\n              Lucene86PointsFormat.VERSION_START,\n              Lucene86PointsFormat.VERSION_CURRENT,\n              readState.segmentInfo.getId(),\n              readState.segmentSuffix);\n\n          while (true) {\n            int fieldNumber = metaIn.readInt();\n            if (fieldNumber == -1) {\n              break;\n            } else if (fieldNumber < 0) {\n              throw new CorruptIndexException(\"Illegal field number: \" + fieldNumber, metaIn);\n            }\n            BKDReader reader = new BKDReader(metaIn, indexIn, dataIn);\n            readers.put(fieldNumber, reader);\n          }\n        } catch (Throwable t) {\n          priorE = t;\n        } finally {\n          CodecUtil.checkFooter(metaIn, priorE);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a42ec09a7fba21c060922e499bb1ee9f741b6dfc","date":1592301881,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86PointsReader#Lucene86PointsReader(SegmentReadState).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/lucene86/Lucene86PointsReader#Lucene86PointsReader(SegmentReadState).mjava","sourceNew":"  /** Sole constructor */\n  public Lucene86PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n    String metaFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.META_EXTENSION);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.INDEX_EXTENSION);\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.DATA_EXTENSION);\n\n    boolean success = false;\n    try {\n      indexIn = readState.directory.openInput(indexFileName, readState.context);\n      CodecUtil.checkIndexHeader(indexIn,\n          Lucene86PointsFormat.INDEX_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n\n      dataIn = readState.directory.openInput(dataFileName, readState.context);\n      CodecUtil.checkIndexHeader(dataIn,\n          Lucene86PointsFormat.DATA_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n\n      long indexLength = -1, dataLength = -1;\n      try (ChecksumIndexInput metaIn = readState.directory.openChecksumInput(metaFileName, readState.context)) {\n        Throwable priorE = null;\n        try {\n          CodecUtil.checkIndexHeader(metaIn,\n              Lucene86PointsFormat.META_CODEC_NAME,\n              Lucene86PointsFormat.VERSION_START,\n              Lucene86PointsFormat.VERSION_CURRENT,\n              readState.segmentInfo.getId(),\n              readState.segmentSuffix);\n\n          while (true) {\n            int fieldNumber = metaIn.readInt();\n            if (fieldNumber == -1) {\n              break;\n            } else if (fieldNumber < 0) {\n              throw new CorruptIndexException(\"Illegal field number: \" + fieldNumber, metaIn);\n            }\n            BKDReader reader = new BKDReader(metaIn, indexIn, dataIn);\n            readers.put(fieldNumber, reader);\n          }\n          indexLength = metaIn.readLong();\n          dataLength = metaIn.readLong();\n        } catch (Throwable t) {\n          priorE = t;\n        } finally {\n          CodecUtil.checkFooter(metaIn, priorE);\n        }\n      }\n      // At this point, checksums of the meta file have been validated so we\n      // know that indexLength and dataLength are very likely correct.\n      CodecUtil.retrieveChecksum(indexIn, indexLength);\n      CodecUtil.retrieveChecksum(dataIn, dataLength);\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n\n  }\n\n","sourceOld":"  /** Sole constructor */\n  public Lucene86PointsReader(SegmentReadState readState) throws IOException {\n    this.readState = readState;\n\n    String metaFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.META_EXTENSION);\n    String indexFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.INDEX_EXTENSION);\n    String dataFileName = IndexFileNames.segmentFileName(readState.segmentInfo.name,\n        readState.segmentSuffix,\n        Lucene86PointsFormat.DATA_EXTENSION);\n\n    boolean success = false;\n    try {\n      indexIn = readState.directory.openInput(indexFileName, readState.context);\n      CodecUtil.checkIndexHeader(indexIn,\n          Lucene86PointsFormat.INDEX_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n      CodecUtil.retrieveChecksum(indexIn);\n\n      dataIn = readState.directory.openInput(dataFileName, readState.context);\n      CodecUtil.checkIndexHeader(dataIn,\n          Lucene86PointsFormat.DATA_CODEC_NAME,\n          Lucene86PointsFormat.VERSION_START,\n          Lucene86PointsFormat.VERSION_CURRENT,\n          readState.segmentInfo.getId(),\n          readState.segmentSuffix);\n      CodecUtil.retrieveChecksum(dataIn);\n\n      try (ChecksumIndexInput metaIn = readState.directory.openChecksumInput(metaFileName, readState.context)) {\n        Throwable priorE = null;\n        try {\n          CodecUtil.checkIndexHeader(metaIn,\n              Lucene86PointsFormat.META_CODEC_NAME,\n              Lucene86PointsFormat.VERSION_START,\n              Lucene86PointsFormat.VERSION_CURRENT,\n              readState.segmentInfo.getId(),\n              readState.segmentSuffix);\n\n          while (true) {\n            int fieldNumber = metaIn.readInt();\n            if (fieldNumber == -1) {\n              break;\n            } else if (fieldNumber < 0) {\n              throw new CorruptIndexException(\"Illegal field number: \" + fieldNumber, metaIn);\n            }\n            BKDReader reader = new BKDReader(metaIn, indexIn, dataIn);\n            readers.put(fieldNumber, reader);\n          }\n        } catch (Throwable t) {\n          priorE = t;\n        } finally {\n          CodecUtil.checkFooter(metaIn, priorE);\n        }\n      }\n      success = true;\n    } finally {\n      if (success == false) {\n        IOUtils.closeWhileHandlingException(this);\n      }\n    }\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a42ec09a7fba21c060922e499bb1ee9f741b6dfc":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a42ec09a7fba21c060922e499bb1ee9f741b6dfc"]},"commit2Childs":{"a42ec09a7fba21c060922e499bb1ee9f741b6dfc":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["78e689a3b60e84c75dc6dd7b181a71fc19ef8482"],"78e689a3b60e84c75dc6dd7b181a71fc19ef8482":["a42ec09a7fba21c060922e499bb1ee9f741b6dfc"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}