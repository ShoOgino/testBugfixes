{"path":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","commits":[{"id":"966dd6f2a1942842f7efe2bdcc7537ea6597a290","date":1521543449,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(scorer, PostingsEnum.FREQS);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impacts.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impacts.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","date":1521731438,"type":0,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(scorer, PostingsEnum.FREQS);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impacts.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impacts.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6a692be6c8e120ef6dbfcd5dde3de42815813cd2","date":1525265372,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(scorer, PostingsEnum.FREQS);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impacts.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impacts.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302","date":1526484586,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {}\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6ea90bc076fbe82be472db33fc80b00eb0bff44f","date":1526486036,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(fieldName, boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"2f2c13220a828a78007cedb364e22dd8986ed650","date":1527233410,"type":3,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        final SimScorer scorer = function.scorer(boost);\n        final ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        final ImpactsDISI impactsDisi = new ImpactsDISI(impacts, impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impactsDisi;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impactsDisi.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impactsDisi.getMaxScore(upTo);\n          }\n\n          @Override\n          public void setMinCompetitiveScore(float minScore) {\n            impactsDisi.setMinCompetitiveScore(minScore);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        SimScorer scorer = function.scorer(boost);\n        ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        MaxScoreCache maxScoreCache = new MaxScoreCache(impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impacts;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return maxScoreCache.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return maxScoreCache.getMaxScore(upTo);\n          }\n\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7","date":1552575873,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/document/FeatureQuery#createWeight(IndexSearcher,ScoreMode,float).mjava","sourceNew":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        final SimScorer scorer = function.scorer(boost);\n        final ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        final ImpactsDISI impactsDisi = new ImpactsDISI(impacts, impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impactsDisi;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impactsDisi.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impactsDisi.getMaxScore(upTo);\n          }\n\n          @Override\n          public void setMinCompetitiveScore(float minScore) {\n            impactsDisi.setMinCompetitiveScore(minScore);\n          }\n        };\n      }\n\n    };\n  }\n\n","sourceOld":"  @Override\n  public Weight createWeight(IndexSearcher searcher, ScoreMode scoreMode, float boost) throws IOException {\n    return new Weight(this) {\n\n      @Override\n      public boolean isCacheable(LeafReaderContext ctx) {\n        return false;\n      }\n\n      @Override\n      public void extractTerms(Set<Term> terms) {\n        if (scoreMode.needsScores() == false) {\n          // features are irrelevant to highlighting, skip\n        } else {\n          // extracting the term here will help get better scoring with\n          // distributed term statistics if the saturation function is used\n          // and the pivot value is computed automatically\n          terms.add(new Term(fieldName, featureName));\n        }\n      }\n\n      @Override\n      public Explanation explain(LeafReaderContext context, int doc) throws IOException {\n        String desc = \"weight(\" + getQuery() + \" in \" + doc + \") [\" + function + \"]\";\n\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return Explanation.noMatch(desc + \". Field \" + fieldName + \" doesn't exist.\");\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" doesn't exist.\");\n        }\n\n        PostingsEnum postings = termsEnum.postings(null, PostingsEnum.FREQS);\n        if (postings.advance(doc) != doc) {\n          return Explanation.noMatch(desc + \". Feature \" + featureName + \" isn't set.\");\n        }\n\n        return function.explain(fieldName, featureName, boost, postings.freq());\n      }\n\n      @Override\n      public Scorer scorer(LeafReaderContext context) throws IOException {\n        Terms terms = context.reader().terms(fieldName);\n        if (terms == null) {\n          return null;\n        }\n        TermsEnum termsEnum = terms.iterator();\n        if (termsEnum.seekExact(new BytesRef(featureName)) == false) {\n          return null;\n        }\n\n        final SimScorer scorer = function.scorer(boost);\n        final ImpactsEnum impacts = termsEnum.impacts(PostingsEnum.FREQS);\n        final ImpactsDISI impactsDisi = new ImpactsDISI(impacts, impacts, scorer);\n\n        return new Scorer(this) {\n\n          @Override\n          public int docID() {\n            return impacts.docID();\n          }\n\n          @Override\n          public float score() throws IOException {\n            return scorer.score(impacts.freq(), 1L);\n          }\n\n          @Override\n          public DocIdSetIterator iterator() {\n            return impactsDisi;\n          }\n\n          @Override\n          public int advanceShallow(int target) throws IOException {\n            return impactsDisi.advanceShallow(target);\n          }\n\n          @Override\n          public float getMaxScore(int upTo) throws IOException {\n            return impactsDisi.getMaxScore(upTo);\n          }\n\n          @Override\n          public void setMinCompetitiveScore(float minScore) {\n            impactsDisi.setMinCompetitiveScore(minScore);\n          }\n        };\n      }\n\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"2f2c13220a828a78007cedb364e22dd8986ed650":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["2f2c13220a828a78007cedb364e22dd8986ed650"]},"commit2Childs":{"6815b5b5d6334b2245dd7be2f8b6cca949bf7f43":["6a692be6c8e120ef6dbfcd5dde3de42815813cd2"],"966dd6f2a1942842f7efe2bdcc7537ea6597a290":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6815b5b5d6334b2245dd7be2f8b6cca949bf7f43","966dd6f2a1942842f7efe2bdcc7537ea6597a290"],"6a692be6c8e120ef6dbfcd5dde3de42815813cd2":["808f86d4b1e5fa52de29b80a5e44b1dcc79ea302"],"808f86d4b1e5fa52de29b80a5e44b1dcc79ea302":["6ea90bc076fbe82be472db33fc80b00eb0bff44f"],"6ea90bc076fbe82be472db33fc80b00eb0bff44f":["2f2c13220a828a78007cedb364e22dd8986ed650"],"2f2c13220a828a78007cedb364e22dd8986ed650":["5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"5b9ffb60dc4bdc972b1403ad2ab2f5b4d9ce4cf7":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}