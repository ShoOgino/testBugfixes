{"path":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#pause(long).mjava","commits":[{"id":"5faf65b6692f15cca0f87bf8666c87899afc619f","date":1420468108,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#pause(long).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public long pause(long bytes) throws MergePolicy.MergeAbortedException {\n\n    totalBytesWritten += bytes;\n\n    long startNS = System.nanoTime();\n    long curNS = startNS;\n\n    // While loop because 1) Thread.wait doesn't always sleep long\n    // enough, and 2) we wake up and check again when our rate limit\n    // is changed while we were pausing:\n    long pausedNS = 0;\n    while (true) {\n      PauseResult result = maybePause(bytes, curNS);\n      if (result == PauseResult.NO) {\n        // Set to curNS, not targetNS, to enforce the instant rate, not\n        // the \"averaaged over all history\" rate:\n        lastNS = curNS;\n        break;\n      }\n      curNS = System.nanoTime();\n      long ns = curNS - startNS;\n      startNS = curNS;\n\n      // Separately track when merge was stopped vs rate limited:\n      if (result == PauseResult.STOPPED) {\n        totalStoppedNS += ns;\n      } else {\n        assert result == PauseResult.PAUSED;\n        totalPausedNS += ns;\n      }\n      pausedNS += ns;\n    }\n\n    return pausedNS;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c1ee9437ba5a8297220428d48a6bb823d1fcd57b","date":1489137809,"type":3,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#pause(long).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/MergeRateLimiter#pause(long).mjava","sourceNew":"  @Override\n  public long pause(long bytes) throws MergePolicy.MergeAbortedException {\n    totalBytesWritten.addAndGet(bytes);\n\n    // While loop because we may wake up and check again when our rate limit\n    // is changed while we were pausing:\n    long paused = 0;\n    long delta;\n    while ((delta = maybePause(bytes, System.nanoTime())) >= 0) {\n      // Keep waiting.\n      paused += delta;\n    }\n\n    return paused;\n  }\n\n","sourceOld":"  @Override\n  public long pause(long bytes) throws MergePolicy.MergeAbortedException {\n\n    totalBytesWritten += bytes;\n\n    long startNS = System.nanoTime();\n    long curNS = startNS;\n\n    // While loop because 1) Thread.wait doesn't always sleep long\n    // enough, and 2) we wake up and check again when our rate limit\n    // is changed while we were pausing:\n    long pausedNS = 0;\n    while (true) {\n      PauseResult result = maybePause(bytes, curNS);\n      if (result == PauseResult.NO) {\n        // Set to curNS, not targetNS, to enforce the instant rate, not\n        // the \"averaaged over all history\" rate:\n        lastNS = curNS;\n        break;\n      }\n      curNS = System.nanoTime();\n      long ns = curNS - startNS;\n      startNS = curNS;\n\n      // Separately track when merge was stopped vs rate limited:\n      if (result == PauseResult.STOPPED) {\n        totalStoppedNS += ns;\n      } else {\n        assert result == PauseResult.PAUSED;\n        totalPausedNS += ns;\n      }\n      pausedNS += ns;\n    }\n\n    return pausedNS;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["5faf65b6692f15cca0f87bf8666c87899afc619f"],"c1ee9437ba5a8297220428d48a6bb823d1fcd57b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5faf65b6692f15cca0f87bf8666c87899afc619f":["c1ee9437ba5a8297220428d48a6bb823d1fcd57b"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}