{"path":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","commits":[{"id":"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd","date":1364185773,"type":0,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Get a map of property name -> value for this field.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<Object>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<Object>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<String,FieldType>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedSet<String> fieldNames = new TreeSet<String>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9cf81bc8c6e4078e236f0e38b3a2d0271854f207","date":1364832963,"type":3,"author":"Steven Rowe","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -> value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<Object>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<Object>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<String,FieldType>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedSet<String> fieldNames = new TreeSet<String>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for this field.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<Object>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<Object>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<String,FieldType>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedSet<String> fieldNames = new TreeSet<String>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":null,"bugIntro":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"634f330c54fd3f9f491d52036dc3f40b4f4d8934","date":1394635157,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -> value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<Object>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<Object>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<String,FieldType>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    SortedSet<String> fieldNames = new TreeSet<String>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<SimpleOrderedMap<Object>>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1","date":1423508552,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -> value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f494bc636a1302995e4930fdccd371eeda452f87","date":1457370876,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    return getNamedPropertyValues(new MapSolrParams(Collections.EMPTY_MAP));\n\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    SimpleOrderedMap<Object> topLevel = new SimpleOrderedMap<>();\n    topLevel.add(NAME, getSchemaName());\n    topLevel.add(VERSION, getVersion());\n    if (null != uniqueKeyFieldName) {\n      topLevel.add(UNIQUE_KEY, uniqueKeyFieldName);\n    }\n    if (null != defaultSearchFieldName) {\n      topLevel.add(DEFAULT_SEARCH_FIELD, defaultSearchFieldName);\n    }\n    if (isExplicitQueryParserDefaultOperator) {\n      SimpleOrderedMap<Object> solrQueryParserProperties = new SimpleOrderedMap<>();\n      solrQueryParserProperties.add(DEFAULT_OPERATOR, queryParserDefaultOperator);\n      topLevel.add(SOLR_QUERY_PARSER, solrQueryParserProperties);\n    }\n    if (isExplicitSimilarity) {\n      topLevel.add(SIMILARITY, similarityFactory.getNamedPropertyValues());\n    }\n    List<SimpleOrderedMap<Object>> fieldTypeProperties = new ArrayList<>();\n    SortedMap<String,FieldType> sortedFieldTypes = new TreeMap<>(fieldTypes);\n    for (FieldType fieldType : sortedFieldTypes.values()) {\n      fieldTypeProperties.add(fieldType.getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELD_TYPES, fieldTypeProperties);  \n    List<SimpleOrderedMap<Object>> fieldProperties = new ArrayList<>();\n    SortedSet<String> fieldNames = new TreeSet<>(fields.keySet());\n    for (String fieldName : fieldNames) {\n      fieldProperties.add(fields.get(fieldName).getNamedPropertyValues(false));\n    }\n    topLevel.add(FIELDS, fieldProperties);\n    List<SimpleOrderedMap<Object>> dynamicFieldProperties = new ArrayList<>();\n    for (IndexSchema.DynamicField dynamicField : dynamicFields) {\n      if ( ! dynamicField.getRegex().startsWith(INTERNAL_POLY_FIELD_PREFIX)) { // omit internal polyfields\n        dynamicFieldProperties.add(dynamicField.getPrototype().getNamedPropertyValues(false));\n      }\n    }\n    topLevel.add(DYNAMIC_FIELDS, dynamicFieldProperties);\n    topLevel.add(COPY_FIELDS, getCopyFieldProperties(false, null, null));\n    return topLevel;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"83ed5fbd2aab9f605f08774c9293e521ec99f0a1","date":1461251300,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public Map getNamedPropertyValues() {\n    return getNamedPropertyValues(null, new MapSolrParams(Collections.EMPTY_MAP));\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public SimpleOrderedMap<Object> getNamedPropertyValues() {\n    return getNamedPropertyValues(new MapSolrParams(Collections.EMPTY_MAP));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06a8891f085f71282bb3ece1b1732b68f07813a3","date":1591912889,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","pathOld":"solr/core/src/java/org/apache/solr/schema/IndexSchema#getNamedPropertyValues().mjava","sourceNew":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n  public Map getNamedPropertyValues() {\n    return getNamedPropertyValues(null, new MapSolrParams(Collections.EMPTY_MAP));\n  }\n\n","sourceOld":"  /**\n   * Get a map of property name -&gt; value for the whole schema.\n   */\n  public Map getNamedPropertyValues() {\n    return getNamedPropertyValues(null, new MapSolrParams(Collections.EMPTY_MAP));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"f494bc636a1302995e4930fdccd371eeda452f87":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"06a8891f085f71282bb3ece1b1732b68f07813a3":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["f494bc636a1302995e4930fdccd371eeda452f87"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["06a8891f085f71282bb3ece1b1732b68f07813a3"]},"commit2Childs":{"634f330c54fd3f9f491d52036dc3f40b4f4d8934":["1e210ae1e604402eb4eeff2a52e56d189cd4f2f1"],"9cf81bc8c6e4078e236f0e38b3a2d0271854f207":["634f330c54fd3f9f491d52036dc3f40b4f4d8934"],"d2fa053a06c9c158f82d8e8b53b9a95031f43ebd":["9cf81bc8c6e4078e236f0e38b3a2d0271854f207"],"f494bc636a1302995e4930fdccd371eeda452f87":["83ed5fbd2aab9f605f08774c9293e521ec99f0a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2fa053a06c9c158f82d8e8b53b9a95031f43ebd"],"06a8891f085f71282bb3ece1b1732b68f07813a3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"83ed5fbd2aab9f605f08774c9293e521ec99f0a1":["06a8891f085f71282bb3ece1b1732b68f07813a3"],"1e210ae1e604402eb4eeff2a52e56d189cd4f2f1":["f494bc636a1302995e4930fdccd371eeda452f87"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}