{"path":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","commits":[{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":1,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4d7a70709df2f3ba961939504c75098e92da8b99","date":1286120517,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":["4e1ce9be74263e9659aad8a6ee1f213193710b71"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","date":1292920096,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = (HashMap<String, QRelJudgement>) judgements.clone();\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecc11368dc265bfdad90214f8bf5da99016ab1e2","date":1294144090,"type":5,"author":"Robert Muir","isMerge":false,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"70ad682703b8585f5d0a637efec044d57ec05efb","date":1294259117,"type":5,"author":"Simon Willnauer","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"868da859b43505d9d2a023bfeae6dd0c795f5295","date":1294948401,"type":5,"author":"Michael Busch","isMerge":true,"pathNew":"modules/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","pathOld":"lucene/contrib/benchmark/src/java/org/apache/lucene/benchmark/quality/trec/TrecJudge#validateData(QualityQuery[],PrintWriter).mjava","sourceNew":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","sourceOld":"  // inherit javadocs\n  public boolean validateData(QualityQuery[] qq, PrintWriter logger) {\n    HashMap<String,QRelJudgement> missingQueries = new HashMap<String, QRelJudgement>(judgements);\n    ArrayList<String> missingJudgements = new ArrayList<String>();\n    for (int i=0; i<qq.length; i++) {\n      String id = qq[i].getQueryID();\n      if (missingQueries.containsKey(id)) {\n        missingQueries.remove(id);\n      } else {\n        missingJudgements.add(id);\n      }\n    }\n    boolean isValid = true;\n    if (missingJudgements.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingJudgements.size()+\" queries have no judgments! - \");\n        for (int i=0; i<missingJudgements.size(); i++) {\n          logger.println(\"   \"+ missingJudgements.get(i));\n        }\n      }\n    }\n    if (missingQueries.size()>0) {\n      isValid = false;\n      if (logger!=null) {\n        logger.println(\"WARNING: \"+missingQueries.size()+\" judgments match no query! - \");\n        for (final String id : missingQueries.keySet()) {\n          logger.println(\"   \"+id);\n        }\n      }\n    }\n    return isValid;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"70ad682703b8585f5d0a637efec044d57ec05efb":["4d7a70709df2f3ba961939504c75098e92da8b99","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["4d7a70709df2f3ba961939504c75098e92da8b99"],"4d7a70709df2f3ba961939504c75098e92da8b99":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["9454a6510e2db155fb01faa5c049b06ece95fab9","4d7a70709df2f3ba961939504c75098e92da8b99"],"868da859b43505d9d2a023bfeae6dd0c795f5295":["7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a","ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecc11368dc265bfdad90214f8bf5da99016ab1e2"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"70ad682703b8585f5d0a637efec044d57ec05efb":[],"ecc11368dc265bfdad90214f8bf5da99016ab1e2":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4d7a70709df2f3ba961939504c75098e92da8b99":["70ad682703b8585f5d0a637efec044d57ec05efb","ecc11368dc265bfdad90214f8bf5da99016ab1e2","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a":["868da859b43505d9d2a023bfeae6dd0c795f5295"],"868da859b43505d9d2a023bfeae6dd0c795f5295":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["4d7a70709df2f3ba961939504c75098e92da8b99","7c65bc241a96282ca59ae736b4ffb5b7e5eeb23a"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["70ad682703b8585f5d0a637efec044d57ec05efb","868da859b43505d9d2a023bfeae6dd0c795f5295","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}