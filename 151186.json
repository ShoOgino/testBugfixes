{"path":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#clearMetrics(String,String...).mjava","commits":[{"id":"0265144286422ad99682a00904cc2536b79c8535","date":1482222684,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#clearMetrics(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove some metrics from a named registry\n   * @param registry registry name\n   * @param metricPath (optional) top-most metric name path elements. If empty then\n   *        this is equivalent to calling {@link #clearRegistry(String)},\n   *        otherwise non-empty elements will be joined using dotted notation\n   *        to form a fully-qualified prefix. Metrics with names that start\n   *        with the prefix will be removed.\n   * @return set of metrics names that have been removed.\n   */\n  public Set<String> clearMetrics(String registry, String... metricPath) {\n    PrefixFilter filter;\n    if (metricPath == null || metricPath.length == 0) {\n      filter = new PrefixFilter(\"\");\n    } else {\n      String prefix = MetricRegistry.name(\"\", metricPath);\n      filter = new PrefixFilter(prefix);\n    }\n    registry(registry).removeMatching(filter);\n    return filter.getMatched();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","date":1482251961,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#clearMetrics(String,String...).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Remove some metrics from a named registry\n   * @param registry registry name\n   * @param metricPath (optional) top-most metric name path elements. If empty then\n   *        this is equivalent to calling {@link #clearRegistry(String)},\n   *        otherwise non-empty elements will be joined using dotted notation\n   *        to form a fully-qualified prefix. Metrics with names that start\n   *        with the prefix will be removed.\n   * @return set of metrics names that have been removed.\n   */\n  public Set<String> clearMetrics(String registry, String... metricPath) {\n    PrefixFilter filter;\n    if (metricPath == null || metricPath.length == 0) {\n      filter = new PrefixFilter(\"\");\n    } else {\n      String prefix = MetricRegistry.name(\"\", metricPath);\n      filter = new PrefixFilter(prefix);\n    }\n    registry(registry).removeMatching(filter);\n    return filter.getMatched();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6224f40fcf60b05c62a88f50925c1bbae324bdfd","date":1565402430,"type":3,"author":"noble","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#clearMetrics(String,String...).mjava","pathOld":"solr/core/src/java/org/apache/solr/metrics/SolrMetricManager#clearMetrics(String,String...).mjava","sourceNew":"  /**\n   * Remove some metrics from a named registry\n   *\n   * @param registry   registry name\n   * @param metricPath (optional) top-most metric name path elements. If empty then\n   *                   this is equivalent to calling {@link #clearRegistry(String)},\n   *                   otherwise non-empty elements will be joined using dotted notation\n   *                   to form a fully-qualified prefix. Metrics with names that start\n   *                   with the prefix will be removed.\n   * @return set of metrics names that have been removed.\n   */\n  public Set<String> clearMetrics(String registry, String... metricPath) {\n    PrefixFilter filter;\n    if (metricPath == null || metricPath.length == 0) {\n      filter = new PrefixFilter(\"\");\n    } else {\n      String prefix = MetricRegistry.name(\"\", metricPath);\n      filter = new PrefixFilter(prefix);\n    }\n    registry(registry).removeMatching(filter);\n    return filter.getMatched();\n  }\n\n","sourceOld":"  /**\n   * Remove some metrics from a named registry\n   * @param registry registry name\n   * @param metricPath (optional) top-most metric name path elements. If empty then\n   *        this is equivalent to calling {@link #clearRegistry(String)},\n   *        otherwise non-empty elements will be joined using dotted notation\n   *        to form a fully-qualified prefix. Metrics with names that start\n   *        with the prefix will be removed.\n   * @return set of metrics names that have been removed.\n   */\n  public Set<String> clearMetrics(String registry, String... metricPath) {\n    PrefixFilter filter;\n    if (metricPath == null || metricPath.length == 0) {\n      filter = new PrefixFilter(\"\");\n    } else {\n      String prefix = MetricRegistry.name(\"\", metricPath);\n      filter = new PrefixFilter(prefix);\n    }\n    registry(registry).removeMatching(filter);\n    return filter.getMatched();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"0265144286422ad99682a00904cc2536b79c8535":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","0265144286422ad99682a00904cc2536b79c8535"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["0265144286422ad99682a00904cc2536b79c8535"]},"commit2Childs":{"0265144286422ad99682a00904cc2536b79c8535":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","6224f40fcf60b05c62a88f50925c1bbae324bdfd"],"5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0265144286422ad99682a00904cc2536b79c8535","5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"6224f40fcf60b05c62a88f50925c1bbae324bdfd":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["5acd68c5f07f7ee604c2eeffe801f4a2d7a1a5bf","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}