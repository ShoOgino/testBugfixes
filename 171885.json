{"path":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#_testIndexing().mjava","commits":[{"id":"6c18273ea5b3974d2f30117f46f1ae416c28f727","date":1279708040,"type":1,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#_testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","sourceNew":"  // nocommit\n  public void _testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5ef87af8c7bd0f8429622b83aa74202383f2e757","date":1280262785,"type":5,"author":"Michael Busch","isMerge":false,"pathNew":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#testIndexing().mjava","pathOld":"lucene/src/test/org/apache/lucene/index/TestNRTReaderWithThreads#_testIndexing().mjava","sourceNew":"  public void testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","sourceOld":"  // nocommit\n  public void _testIndexing() throws Exception {\n    Directory mainDir = new MockRAMDirectory();\n    IndexWriter writer = new IndexWriter(mainDir, new IndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer()).setMaxBufferedDocs(10));\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setMergeFactor(2);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundFile(false);\n    ((LogMergePolicy) writer.getConfig().getMergePolicy()).setUseCompoundDocStore(false);\n    IndexReader reader = writer.getReader(); // start pooling readers\n    reader.close();\n    RunThread[] indexThreads = new RunThread[4];\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x] = new RunThread(x % 2, writer);\n      indexThreads[x].setName(\"Thread \" + x);\n      indexThreads[x].start();\n    }    \n    long startTime = System.currentTimeMillis();\n    long duration = 1000;\n    while ((System.currentTimeMillis() - startTime) < duration) {\n      Thread.sleep(100);\n    }\n    int delCount = 0;\n    int addCount = 0;\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].run = false;\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n      addCount += indexThreads[x].addCount;\n      delCount += indexThreads[x].delCount;\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      indexThreads[x].join();\n    }\n    for (int x=0; x < indexThreads.length; x++) {\n      assertNull(\"Exception thrown: \"+indexThreads[x].ex, indexThreads[x].ex);\n    }\n    //System.out.println(\"addCount:\"+addCount);\n    //System.out.println(\"delCount:\"+delCount);\n    writer.close();\n    mainDir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"5ef87af8c7bd0f8429622b83aa74202383f2e757":["6c18273ea5b3974d2f30117f46f1ae416c28f727"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"6c18273ea5b3974d2f30117f46f1ae416c28f727":["5ef87af8c7bd0f8429622b83aa74202383f2e757"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["6c18273ea5b3974d2f30117f46f1ae416c28f727","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"5ef87af8c7bd0f8429622b83aa74202383f2e757":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["5ef87af8c7bd0f8429622b83aa74202383f2e757","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}