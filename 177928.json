{"path":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testBasicsMultiDims().mjava","commits":[{"id":"b5125dbd3878ae934da6ff9243253c2f88b7b6c5","date":1463994309,"type":0,"author":"Adrien Grand","isMerge":false,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testBasicsMultiDims().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single multi-dimensional value and search for it */\n  public void testBasicsMultiDims() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with two dimensions\n    Document document = new Document();\n    document.add(new HalfFloatPoint(\"field\", 1.25f, -2f));\n    writer.addDocument(document);\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, -5}, new float[]{1.25f, -1})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, 0}, new float[]{2, 2})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{-10, -10}, new float[]{1, 2})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","date":1464066565,"type":0,"author":"Noble Paul","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testBasicsMultiDims().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single multi-dimensional value and search for it */\n  public void testBasicsMultiDims() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with two dimensions\n    Document document = new Document();\n    document.add(new HalfFloatPoint(\"field\", 1.25f, -2f));\n    writer.addDocument(document);\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, -5}, new float[]{1.25f, -1})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, 0}, new float[]{2, 2})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{-10, -10}, new float[]{1, 2})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":0,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/sandbox/src/test/org/apache/lucene/document/TestHalfFloatPoint#testBasicsMultiDims().mjava","pathOld":"/dev/null","sourceNew":"  /** Add a single multi-dimensional value and search for it */\n  public void testBasicsMultiDims() throws Exception {\n    Directory dir = newDirectory();\n    RandomIndexWriter writer = new RandomIndexWriter(random(), dir);\n\n    // add a doc with two dimensions\n    Document document = new Document();\n    document.add(new HalfFloatPoint(\"field\", 1.25f, -2f));\n    writer.addDocument(document);\n\n    // search and verify we found our doc\n    IndexReader reader = writer.getReader();\n    IndexSearcher searcher = newSearcher(reader);\n    assertEquals(1, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, -5}, new float[]{1.25f, -1})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{0, 0}, new float[]{2, 2})));\n    assertEquals(0, searcher.count(HalfFloatPoint.newRangeQuery(\"field\",\n        new float[]{-10, -10}, new float[]{1, 2})));\n\n    reader.close();\n    writer.close();\n    dir.close();\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","b5125dbd3878ae934da6ff9243253c2f88b7b6c5"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"]},"commit2Childs":{"b5125dbd3878ae934da6ff9243253c2f88b7b6c5":["e616cfbf284ecbd0f40b4b9e4196daa27e92abd5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["b5125dbd3878ae934da6ff9243253c2f88b7b6c5","e616cfbf284ecbd0f40b4b9e4196daa27e92abd5","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"e616cfbf284ecbd0f40b4b9e4196daa27e92abd5":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}