{"path":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","commits":[{"id":"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103","date":1217446558,"type":0,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","pathOld":"/dev/null","sourceNew":"  static Transformer wrapTransformer(final Transformer t) {\n    if (DocBuilder.INSTANCE.get() != null\n            && DocBuilder.INSTANCE.get().verboseDebug) {\n      return new Transformer() {\n        public Object transformRow(Map<String, Object> row, Context context) {\n          DocBuilder.INSTANCE.get().writer.log(SolrWriter.PRE_TRANSFORMER_ROW,\n                  null, row);\n          String tName = getTransformerName(t);\n          Object result = null;\n          try {\n            result = t.transformRow(row, context);\n            DocBuilder.INSTANCE.get().writer.log(SolrWriter.TRANSFORMED_ROW,\n                    tName, result);\n          } catch (DataImportHandlerException de) {\n            DocBuilder.INSTANCE.get().writer.log(\n                    SolrWriter.TRANSFORMER_EXCEPTION, tName, de);\n            de.debugged = true;\n            throw de;\n          } catch (Exception e) {\n            DocBuilder.INSTANCE.get().writer.log(\n                    SolrWriter.TRANSFORMER_EXCEPTION, tName, e);\n            DataImportHandlerException de = new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, \"\", e);\n            de.debugged = true;\n            throw de;\n          }\n          return result;\n        }\n      };\n    } else {\n      return t;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"758fdd153bb361b47f22db79ace6af6f6b7b9330","date":1240213015,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","sourceNew":"  Transformer wrapTransformer(final Transformer t) {\n    return new Transformer() {\n      public Object transformRow(Map<String, Object> row, Context context) {\n        writer.log(SolrWriter.PRE_TRANSFORMER_ROW, null, row);\n        String tName = getTransformerName(t);\n        Object result = null;\n        try {\n          result = t.transformRow(row, context);\n          writer.log(SolrWriter.TRANSFORMED_ROW, tName, result);\n        } catch (DataImportHandlerException de) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, de);\n          de.debugged = true;\n          throw de;\n        } catch (Exception e) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, e);\n          DataImportHandlerException de = new DataImportHandlerException(DataImportHandlerException.SEVERE, \"\", e);\n          de.debugged = true;\n          throw de;\n        }\n        return result;\n      }\n    };\n  }\n\n","sourceOld":"  static Transformer wrapTransformer(final Transformer t) {\n    if (DocBuilder.INSTANCE.get() != null\n            && DocBuilder.INSTANCE.get().verboseDebug) {\n      return new Transformer() {\n        public Object transformRow(Map<String, Object> row, Context context) {\n          DocBuilder.INSTANCE.get().writer.log(SolrWriter.PRE_TRANSFORMER_ROW,\n                  null, row);\n          String tName = getTransformerName(t);\n          Object result = null;\n          try {\n            result = t.transformRow(row, context);\n            DocBuilder.INSTANCE.get().writer.log(SolrWriter.TRANSFORMED_ROW,\n                    tName, result);\n          } catch (DataImportHandlerException de) {\n            DocBuilder.INSTANCE.get().writer.log(\n                    SolrWriter.TRANSFORMER_EXCEPTION, tName, de);\n            de.debugged = true;\n            throw de;\n          } catch (Exception e) {\n            DocBuilder.INSTANCE.get().writer.log(\n                    SolrWriter.TRANSFORMER_EXCEPTION, tName, e);\n            DataImportHandlerException de = new DataImportHandlerException(\n                    DataImportHandlerException.SEVERE, \"\", e);\n            de.debugged = true;\n            throw de;\n          }\n          return result;\n        }\n      };\n    } else {\n      return t;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","pathOld":"contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/DebugLogger#wrapTransformer(Transformer).mjava","sourceNew":"  Transformer wrapTransformer(final Transformer t) {\n    return new Transformer() {\n      public Object transformRow(Map<String, Object> row, Context context) {\n        writer.log(SolrWriter.PRE_TRANSFORMER_ROW, null, row);\n        String tName = getTransformerName(t);\n        Object result = null;\n        try {\n          result = t.transformRow(row, context);\n          writer.log(SolrWriter.TRANSFORMED_ROW, tName, result);\n        } catch (DataImportHandlerException de) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, de);\n          de.debugged = true;\n          throw de;\n        } catch (Exception e) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, e);\n          DataImportHandlerException de = new DataImportHandlerException(DataImportHandlerException.SEVERE, \"\", e);\n          de.debugged = true;\n          throw de;\n        }\n        return result;\n      }\n    };\n  }\n\n","sourceOld":"  Transformer wrapTransformer(final Transformer t) {\n    return new Transformer() {\n      public Object transformRow(Map<String, Object> row, Context context) {\n        writer.log(SolrWriter.PRE_TRANSFORMER_ROW, null, row);\n        String tName = getTransformerName(t);\n        Object result = null;\n        try {\n          result = t.transformRow(row, context);\n          writer.log(SolrWriter.TRANSFORMED_ROW, tName, result);\n        } catch (DataImportHandlerException de) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, de);\n          de.debugged = true;\n          throw de;\n        } catch (Exception e) {\n          writer.log(SolrWriter.TRANSFORMER_EXCEPTION, tName, e);\n          DataImportHandlerException de = new DataImportHandlerException(DataImportHandlerException.SEVERE, \"\", e);\n          de.debugged = true;\n          throw de;\n        }\n        return result;\n      }\n    };\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"ad94625fb8d088209f46650c8097196fec67f00c":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"4d4f1b2c5601680b01c4bb95a43fe6fb73f03103":["758fdd153bb361b47f22db79ace6af6f6b7b9330"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["4d4f1b2c5601680b01c4bb95a43fe6fb73f03103"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"758fdd153bb361b47f22db79ace6af6f6b7b9330":["ad94625fb8d088209f46650c8097196fec67f00c"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}