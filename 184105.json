{"path":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","commits":[{"id":"1bf853f0385a540ee0fb220fd272f2c362432294","date":1311520789,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#testIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  @Test\n  public void testIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f08557cdb6c60ac7b88a9342c983a20cd236e74f","date":1330954480,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","date":1331075828,"type":3,"author":"Ryan McKinley","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = TestDistributedSearch.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8340fdefff3ad1d7f19748004520a8820704ec88","date":1347565723,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(masterXsltDir.mkdir());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n  }\n\n","bugFix":null,"bugIntro":["1432a0acddbd504d67af13ed2d8cf80e43abf049"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d9405f486872f1e416304dfe389741f4ee2f8a4d","date":1351276739,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(masterXsltDir.mkdir());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f2126b84bd093fa3d921582a109a0ee578c28126","date":1351522501,"type":3,"author":"Michael McCandless","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(masterXsltDir.mkdir());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"a59489bd57cb6434aab4e536a03b260fec1d47f3","date":1361571364,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","sourceOld":"  private void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1432a0acddbd504d67af13ed2d8cf80e43abf049","date":1361579532,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    // revert the schema\n    master.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n\n  }\n\n","bugFix":["8340fdefff3ad1d7f19748004520a8820704ec88"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cda6a2714625c1cee18ab59784a620962891d028","date":1361629589,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    // revert the schema\n    master.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    slave.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    // revert the schema\n    master.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"0821fb2632567b97517fef4d350c09297f996615","date":1361720082,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    // revert the schema\n    master.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    masterJetty.stop();\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n    \n    slave.copyConfigFile(CONF_DIR + \"schema-replication1.xml\", \"schema.xml\");\n    slaveJetty.stop();\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"35b85bcb9f4029b10b1fcd20934d760755940bb2","date":1363925237,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"058801f8673d53a5abac8088204860ec29a40f0d","date":1364178882,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n  }\n\n","bugFix":null,"bugIntro":["ad28156288ac00b91352582904d97e6653205757","436eff77c0517cdabffce79a0738ab69d524d9fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"25bbd8e76cd29f2d4b262a24d6a42c754706b143","date":1365910543,"type":3,"author":"Chris M. Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, masterQueryResult.getNumFound());\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, slaveQueryResult.getNumFound());\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    NamedList masterQueryRsp2 = rQuery(1, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult2 = (SolrDocumentList) masterQueryRsp2.get(\"response\");\n    assertEquals(1, masterQueryResult2.getNumFound());\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4c7856260bc28f285ae7bfefa99b28db4dca6daf","date":1395253500,"type":3,"author":"Mark Robert Miller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"d58b638618e5a5d439ec7c38392c3b73cc9c048a","date":1404765453,"type":3,"author":"Shalin Shekhar Mangar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    assertVersions(masterClient, slaveClient);\n\n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bafca15d8e408346a67f4282ad1143b88023893b","date":1420034748,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrServer(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrServer(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"cc3b13b430571c2e169f98fe38e1e7666f88522d","date":1422446157,"type":3,"author":"Alan Woodward","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.shutdown();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.shutdown();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"20f6b7cff3771384f27af0f059795d7e64aff6b9","date":1425498309,"type":3,"author":"Ramkumar Aiyengar","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","date":1427779360,"type":3,"author":"Ryan Ernst","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger snappull from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad28156288ac00b91352582904d97e6653205757","date":1486850922,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty);\n    \n  }\n\n","bugFix":["058801f8673d53a5abac8088204860ec29a40f0d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"ff5e25fb60ccc8574bcbd65396786ae9163f0149","date":1519706112,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"21701a7f6f134096dbc873f6d4c29fe079b951aa","date":1520755255,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-11673\")\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\")\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","bugFix":null,"bugIntro":["436eff77c0517cdabffce79a0738ab69d524d9fb"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"436eff77c0517cdabffce79a0738ab69d524d9fb","date":1522590443,"type":3,"author":"Mikhail Khludnev","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","sourceOld":"  @Test\n  @BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-11673\")\n  public void doTestIndexAndConfigReplication() throws Exception {\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n    \n  }\n\n","bugFix":["efab8c7286516f937e01cc69275841cfb09d90b9","21701a7f6f134096dbc873f6d4c29fe079b951aa","058801f8673d53a5abac8088204860ec29a40f0d"],"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"bb222a3f9d9421d5c95afce73013fbd8de07ea1f","date":1543514331,"type":3,"author":"markrmiller","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","bugFix":["efab8c7286516f937e01cc69275841cfb09d90b9"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e98520789adb1d5ad05afb4956eca0944a929688","date":1592430701,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e","date":1596664368,"type":3,"author":"Marcus","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","pathOld":"solr/core/src/test/org/apache/solr/handler/TestReplicationHandler#doTestIndexAndConfigReplication().mjava","sourceNew":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeFollowerCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(leaderClient, \"id\", i, \"name\", \"name = \" + i);\n\n    leaderClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList leaderQueryRsp = rQuery(nDocs, \"*:*\", leaderClient);\n    SolrDocumentList leaderQueryResult = (SolrDocumentList) leaderQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(leaderQueryRsp));\n\n    //get docs from follower and check if number is equal to leader\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList followerQueryRsp = rQuery(nDocs, \"*:*\", followerClient);\n    SolrDocumentList followerQueryResult = (SolrDocumentList) followerQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(followerQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(leaderQueryResult, followerQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(leaderClient, followerClient);\n\n    //start config files replication test\n    leaderClient.deleteByQuery(\"*:*\");\n    leaderClient.commit();\n\n    //change the schema on leader\n    leader.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    leaderJetty.stop();\n\n    leaderJetty = createAndStartJetty(leader);\n    leaderClient.close();\n    leaderClient = createNewSolrClient(leaderJetty.getLocalPort());\n\n    follower.setTestPort(leaderJetty.getLocalPort());\n    follower.copyConfigFile(follower.getSolrConfigFile(), \"solrconfig.xml\");\n\n    followerJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File leaderXsltDir = new File(leader.getConfDir() + File.separator + \"xslt\");\n    File leaderXsl = new File(leaderXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + leaderXsltDir, leaderXsltDir.mkdirs());\n    assertTrue(leaderXsl.createNewFile());\n\n    File followerXsltDir = new File(follower.getConfDir() + File.separator + \"xslt\");\n    File followerXsl = new File(followerXsltDir, \"dummy.xsl\");\n    assertFalse(followerXsltDir.exists());\n\n    followerJetty = createAndStartJetty(follower);\n    followerClient.close();\n    followerClient = createNewSolrClient(followerJetty.getLocalPort());\n    //add a doc with new field and commit on leader to trigger index fetch from follower.\n    index(leaderClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    leaderClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", leaderClient)));\n    \n    followerQueryRsp = rQuery(1, \"*:*\", followerClient);\n    assertVersions(leaderClient, followerClient);\n    SolrDocument d = ((SolrDocumentList) followerQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(followerXsltDir.isDirectory());\n    assertTrue(followerXsl.exists());\n    \n    checkForSingleIndex(leaderJetty);\n    checkForSingleIndex(followerJetty, true);\n  }\n\n","sourceOld":"  @Test\n  public void doTestIndexAndConfigReplication() throws Exception {\n\n    TestInjection.delayBeforeSlaveCommitRefresh = random().nextInt(10);\n\n    clearIndexWithReplication();\n\n    nDocs--;\n    for (int i = 0; i < nDocs; i++)\n      index(masterClient, \"id\", i, \"name\", \"name = \" + i);\n\n    masterClient.commit();\n\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList masterQueryRsp = rQuery(nDocs, \"*:*\", masterClient);\n    SolrDocumentList masterQueryResult = (SolrDocumentList) masterQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(masterQueryRsp));\n\n    //get docs from slave and check if number is equal to master\n    @SuppressWarnings({\"rawtypes\"})\n    NamedList slaveQueryRsp = rQuery(nDocs, \"*:*\", slaveClient);\n    SolrDocumentList slaveQueryResult = (SolrDocumentList) slaveQueryRsp.get(\"response\");\n    assertEquals(nDocs, numFound(slaveQueryRsp));\n\n    //compare results\n    String cmp = BaseDistributedSearchTestCase.compare(masterQueryResult, slaveQueryResult, 0, null);\n    assertEquals(null, cmp);\n    \n    assertVersions(masterClient, slaveClient);\n\n    //start config files replication test\n    masterClient.deleteByQuery(\"*:*\");\n    masterClient.commit();\n\n    //change the schema on master\n    master.copyConfigFile(CONF_DIR + \"schema-replication2.xml\", \"schema.xml\");\n\n    masterJetty.stop();\n\n    masterJetty = createAndStartJetty(master);\n    masterClient.close();\n    masterClient = createNewSolrClient(masterJetty.getLocalPort());\n\n    slave.setTestPort(masterJetty.getLocalPort());\n    slave.copyConfigFile(slave.getSolrConfigFile(), \"solrconfig.xml\");\n\n    slaveJetty.stop();\n\n    // setup an xslt dir to force subdir file replication\n    File masterXsltDir = new File(master.getConfDir() + File.separator + \"xslt\");\n    File masterXsl = new File(masterXsltDir, \"dummy.xsl\");\n    assertTrue(\"could not make dir \" + masterXsltDir, masterXsltDir.mkdirs());\n    assertTrue(masterXsl.createNewFile());\n\n    File slaveXsltDir = new File(slave.getConfDir() + File.separator + \"xslt\");\n    File slaveXsl = new File(slaveXsltDir, \"dummy.xsl\");\n    assertFalse(slaveXsltDir.exists());\n\n    slaveJetty = createAndStartJetty(slave);\n    slaveClient.close();\n    slaveClient = createNewSolrClient(slaveJetty.getLocalPort());\n    //add a doc with new field and commit on master to trigger index fetch from slave.\n    index(masterClient, \"id\", \"2000\", \"name\", \"name = \" + 2000, \"newname\", \"newname = \" + 2000);\n    masterClient.commit();\n\n    assertEquals(1, numFound( rQuery(1, \"*:*\", masterClient)));\n    \n    slaveQueryRsp = rQuery(1, \"*:*\", slaveClient);\n    assertVersions(masterClient, slaveClient);\n    SolrDocument d = ((SolrDocumentList) slaveQueryRsp.get(\"response\")).get(0);\n    assertEquals(\"newname = 2000\", (String) d.getFieldValue(\"newname\"));\n\n    assertTrue(slaveXsltDir.isDirectory());\n    assertTrue(slaveXsl.exists());\n    \n    checkForSingleIndex(masterJetty);\n    checkForSingleIndex(slaveJetty, true);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ad28156288ac00b91352582904d97e6653205757":["20f6b7cff3771384f27af0f059795d7e64aff6b9"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["ad28156288ac00b91352582904d97e6653205757"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":["1bf853f0385a540ee0fb220fd272f2c362432294","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["436eff77c0517cdabffce79a0738ab69d524d9fb"],"bafca15d8e408346a67f4282ad1143b88023893b":["d58b638618e5a5d439ec7c38392c3b73cc9c048a"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["8340fdefff3ad1d7f19748004520a8820704ec88"],"cda6a2714625c1cee18ab59784a620962891d028":["1432a0acddbd504d67af13ed2d8cf80e43abf049"],"e98520789adb1d5ad05afb4956eca0944a929688":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":["cc3b13b430571c2e169f98fe38e1e7666f88522d","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"8340fdefff3ad1d7f19748004520a8820704ec88":["f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["bafca15d8e408346a67f4282ad1143b88023893b"],"f2126b84bd093fa3d921582a109a0ee578c28126":["8340fdefff3ad1d7f19748004520a8820704ec88","d9405f486872f1e416304dfe389741f4ee2f8a4d"],"0821fb2632567b97517fef4d350c09297f996615":["cda6a2714625c1cee18ab59784a620962891d028"],"d58b638618e5a5d439ec7c38392c3b73cc9c048a":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"1bf853f0385a540ee0fb220fd272f2c362432294":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["e98520789adb1d5ad05afb4956eca0944a929688"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["1bf853f0385a540ee0fb220fd272f2c362432294"],"35b85bcb9f4029b10b1fcd20934d760755940bb2":["0821fb2632567b97517fef4d350c09297f996615"],"058801f8673d53a5abac8088204860ec29a40f0d":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["058801f8673d53a5abac8088204860ec29a40f0d"],"436eff77c0517cdabffce79a0738ab69d524d9fb":["21701a7f6f134096dbc873f6d4c29fe079b951aa"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["d9405f486872f1e416304dfe389741f4ee2f8a4d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"21701a7f6f134096dbc873f6d4c29fe079b951aa":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"1432a0acddbd504d67af13ed2d8cf80e43abf049":["a59489bd57cb6434aab4e536a03b260fec1d47f3"]},"commit2Childs":{"ad28156288ac00b91352582904d97e6653205757":["ff5e25fb60ccc8574bcbd65396786ae9163f0149"],"ff5e25fb60ccc8574bcbd65396786ae9163f0149":["21701a7f6f134096dbc873f6d4c29fe079b951aa"],"9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab":[],"bb222a3f9d9421d5c95afce73013fbd8de07ea1f":["e98520789adb1d5ad05afb4956eca0944a929688"],"bafca15d8e408346a67f4282ad1143b88023893b":["cc3b13b430571c2e169f98fe38e1e7666f88522d"],"d9405f486872f1e416304dfe389741f4ee2f8a4d":["f2126b84bd093fa3d921582a109a0ee578c28126","a59489bd57cb6434aab4e536a03b260fec1d47f3"],"cda6a2714625c1cee18ab59784a620962891d028":["0821fb2632567b97517fef4d350c09297f996615"],"e98520789adb1d5ad05afb4956eca0944a929688":["65a5d87a40f9143cd55be76eb1dde1b32a8dae5e"],"a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae":[],"20f6b7cff3771384f27af0f059795d7e64aff6b9":["ad28156288ac00b91352582904d97e6653205757","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae"],"8340fdefff3ad1d7f19748004520a8820704ec88":["d9405f486872f1e416304dfe389741f4ee2f8a4d","f2126b84bd093fa3d921582a109a0ee578c28126"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1bf853f0385a540ee0fb220fd272f2c362432294"],"cc3b13b430571c2e169f98fe38e1e7666f88522d":["a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","20f6b7cff3771384f27af0f059795d7e64aff6b9"],"f2126b84bd093fa3d921582a109a0ee578c28126":[],"0821fb2632567b97517fef4d350c09297f996615":["35b85bcb9f4029b10b1fcd20934d760755940bb2"],"d58b638618e5a5d439ec7c38392c3b73cc9c048a":["bafca15d8e408346a67f4282ad1143b88023893b"],"1bf853f0385a540ee0fb220fd272f2c362432294":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","f08557cdb6c60ac7b88a9342c983a20cd236e74f"],"65a5d87a40f9143cd55be76eb1dde1b32a8dae5e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f08557cdb6c60ac7b88a9342c983a20cd236e74f":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","8340fdefff3ad1d7f19748004520a8820704ec88"],"35b85bcb9f4029b10b1fcd20934d760755940bb2":["058801f8673d53a5abac8088204860ec29a40f0d"],"058801f8673d53a5abac8088204860ec29a40f0d":["25bbd8e76cd29f2d4b262a24d6a42c754706b143"],"4c7856260bc28f285ae7bfefa99b28db4dca6daf":["d58b638618e5a5d439ec7c38392c3b73cc9c048a"],"25bbd8e76cd29f2d4b262a24d6a42c754706b143":["4c7856260bc28f285ae7bfefa99b28db4dca6daf"],"436eff77c0517cdabffce79a0738ab69d524d9fb":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"a59489bd57cb6434aab4e536a03b260fec1d47f3":["1432a0acddbd504d67af13ed2d8cf80e43abf049"],"1432a0acddbd504d67af13ed2d8cf80e43abf049":["cda6a2714625c1cee18ab59784a620962891d028"],"21701a7f6f134096dbc873f6d4c29fe079b951aa":["436eff77c0517cdabffce79a0738ab69d524d9fb"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["9946ea6d8ddf0b8c20b2ca6a816b7168b023a6ab","a0d1e2aaf870d9d4f740ed0aaaf5824ccd9394ae","f2126b84bd093fa3d921582a109a0ee578c28126","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}