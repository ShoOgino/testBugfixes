{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","commits":[{"id":"fc18bc8ea2e2c1e308757ff50671c774438e9f3e","date":1538052583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","pathOld":"/dev/null","sourceNew":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    Map<String, Map<String, Object>> stats = new TreeMap<>();\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n          activeReplicas += s.getReplicas().size();\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"69aaade9ac9734b0ef8436313fe8ab4e14d14e25","date":1544808107,"type":3,"author":"Jason Gerlowski","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","sourceNew":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    Map<String, Map<String, Object>> stats = new TreeMap<>();\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n\n          for (Replica r : s.getReplicas()) {\n            if (r.getState() == Replica.State.ACTIVE) {\n              activeReplicas++;\n            }\n          }\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    Map<String, Map<String, Object>> stats = new TreeMap<>();\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n          activeReplicas += s.getReplicas().size();\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"66b87d86427dfa19b2ef36b66de83aa9655cea33","date":1552627668,"type":3,"author":"Chris Hostetter","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","sourceNew":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      final Map<String, Map<String, Object>> stats = new TreeMap<>();\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n\n          for (Replica r : s.getReplicas()) {\n            if (r.getState() == Replica.State.ACTIVE) {\n              activeReplicas++;\n            }\n          }\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    Map<String, Map<String, Object>> stats = new TreeMap<>();\n    lock.lockInterruptibly();\n    try {\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n\n          for (Replica r : s.getReplicas()) {\n            if (r.getState() == Replica.State.ACTIVE) {\n              activeReplicas++;\n            }\n          }\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5","date":1556572478,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/java/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/SimClusterStateProvider#simGetCollectionStats().mjava","sourceNew":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      final Map<String, Map<String, Object>> stats = new TreeMap<>();\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(Type.CORE_IDX.metricsAttribute);\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n\n          for (Replica r : s.getReplicas()) {\n            if (r.getState() == Replica.State.ACTIVE) {\n              activeReplicas++;\n            }\n          }\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(Type.CORE_IDX.metricsAttribute);\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","sourceOld":"  public Map<String, Map<String, Object>> simGetCollectionStats() throws IOException, InterruptedException {\n    lock.lockInterruptibly();\n    try {\n      final Map<String, Map<String, Object>> stats = new TreeMap<>();\n      collectionsStatesRef.set(null);\n      ClusterState state = getClusterState();\n      state.forEachCollection(coll -> {\n        Map<String, Object> perColl = new LinkedHashMap<>();\n        stats.put(coll.getName(), perColl);\n        perColl.put(\"shardsTotal\", coll.getSlices().size());\n        Map<String, AtomicInteger> shardState = new TreeMap<>();\n        int noLeader = 0;\n\n        SummaryStatistics docs = new SummaryStatistics();\n        SummaryStatistics bytes = new SummaryStatistics();\n        SummaryStatistics inactiveDocs = new SummaryStatistics();\n        SummaryStatistics inactiveBytes = new SummaryStatistics();\n\n        long deletedDocs = 0;\n        long bufferedDocs = 0;\n        int totalReplicas = 0;\n        int activeReplicas = 0;\n\n        for (Slice s : coll.getSlices()) {\n          shardState.computeIfAbsent(s.getState().toString(), st -> new AtomicInteger())\n              .incrementAndGet();\n          totalReplicas += s.getReplicas().size();\n          if (s.getState() != Slice.State.ACTIVE) {\n            if (!s.getReplicas().isEmpty()) {\n              ReplicaInfo ri = getReplicaInfo(s.getReplicas().iterator().next());\n              if (ri != null) {\n                Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n                Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n                if (numDocs != null) {\n                  inactiveDocs.addValue(numDocs.doubleValue());\n                }\n                if (numBytes != null) {\n                  inactiveBytes.addValue(numBytes.doubleValue());\n                }\n              }\n            }\n            continue;\n          }\n          AtomicLong buffered = (AtomicLong)sliceProperties.get(coll.getName()).get(s.getName()).get(BUFFERED_UPDATES);\n          if (buffered != null) {\n            bufferedDocs += buffered.get();\n          }\n\n          for (Replica r : s.getReplicas()) {\n            if (r.getState() == Replica.State.ACTIVE) {\n              activeReplicas++;\n            }\n          }\n          Replica leader = s.getLeader();\n          if (leader == null) {\n            noLeader++;\n            if (!s.getReplicas().isEmpty()) {\n              leader = s.getReplicas().iterator().next();\n            }\n          }\n          ReplicaInfo ri = null;\n          if (leader != null) {\n            ri = getReplicaInfo(leader);\n            if (ri == null) {\n              log.warn(\"Unknown ReplicaInfo for {}\", leader);\n            }\n          }\n          if (ri != null) {\n            Number numDocs = (Number)ri.getVariable(\"SEARCHER.searcher.numDocs\");\n            Number delDocs = (Number)ri.getVariable(\"SEARCHER.searcher.deleteDocs\");\n            Number numBytes = (Number)ri.getVariable(\"INDEX.sizeInBytes\");\n            if (numDocs != null) {\n              docs.addValue(numDocs.doubleValue());\n            }\n            if (delDocs != null) {\n              deletedDocs += delDocs.longValue();\n            }\n            if (numBytes != null) {\n              bytes.addValue(numBytes.doubleValue());\n            }\n          }\n        }\n        perColl.put(\"shardsState\", shardState);\n        perColl.put(\"  shardsWithoutLeader\", noLeader);\n        perColl.put(\"totalReplicas\", totalReplicas);\n        perColl.put(\"  activeReplicas\", activeReplicas);\n        perColl.put(\"  inactiveReplicas\", totalReplicas - activeReplicas);\n        long totalDocs = (long)docs.getSum() + bufferedDocs;\n        perColl.put(\"totalActiveDocs\", String.format(Locale.ROOT, \"%,d\", totalDocs));\n        perColl.put(\"  bufferedDocs\", String.format(Locale.ROOT, \"%,d\", bufferedDocs));\n        perColl.put(\"  maxActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMax()));\n        perColl.put(\"  minActiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)docs.getMin()));\n        perColl.put(\"  avgActiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", docs.getMean()));\n        perColl.put(\"totalInactiveDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getSum()));\n        perColl.put(\"  maxInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMax()));\n        perColl.put(\"  minInactiveSliceDocs\", String.format(Locale.ROOT, \"%,d\", (long)inactiveDocs.getMin()));\n        perColl.put(\"  avgInactiveSliceDocs\", String.format(Locale.ROOT, \"%,.0f\", inactiveDocs.getMean()));\n        perColl.put(\"totalActiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getSum()));\n        perColl.put(\"  maxActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMax()));\n        perColl.put(\"  minActiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)bytes.getMin()));\n        perColl.put(\"  avgActiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", bytes.getMean()));\n        perColl.put(\"totalInactiveBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getSum()));\n        perColl.put(\"  maxInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMax()));\n        perColl.put(\"  minInactiveSliceBytes\", String.format(Locale.ROOT, \"%,d\", (long)inactiveBytes.getMin()));\n        perColl.put(\"  avgInactiveSliceBytes\", String.format(Locale.ROOT, \"%,.0f\", inactiveBytes.getMean()));\n        perColl.put(\"totalActiveDeletedDocs\", String.format(Locale.ROOT, \"%,d\", deletedDocs));\n      });\n      return stats;\n    } finally {\n      lock.unlock();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"69aaade9ac9734b0ef8436313fe8ab4e14d14e25":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["69aaade9ac9734b0ef8436313fe8ab4e14d14e25"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"]},"commit2Childs":{"fc18bc8ea2e2c1e308757ff50671c774438e9f3e":["69aaade9ac9734b0ef8436313fe8ab4e14d14e25"],"69aaade9ac9734b0ef8436313fe8ab4e14d14e25":["66b87d86427dfa19b2ef36b66de83aa9655cea33"],"66b87d86427dfa19b2ef36b66de83aa9655cea33":["9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["fc18bc8ea2e2c1e308757ff50671c774438e9f3e"],"9ef8d00dbfbeb534eba8a219a5df9d99b2de6ab5":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}