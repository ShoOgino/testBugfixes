{"path":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","commits":[{"id":"d7052f725a053aa55424f966831826f61b798bf1","date":1158258681,"type":0,"author":"Yonik Seeley","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","pathOld":"/dev/null","sourceNew":"  private final void maybeFlushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() >= minMergeDocs) {\n      flushRamSegments();\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6b772434f9f358356f8eedc2e017b9ddfb2615ec","date":1170327312,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","sourceNew":"  protected final void maybeFlushRamSegments() throws IOException {\n    if (timeToFlushRam()) {\n      flushRamSegments();\n    }\n  }\n\n","sourceOld":"  private final void maybeFlushRamSegments() throws IOException {\n    if (ramSegmentInfos.size() >= minMergeDocs) {\n      flushRamSegments();\n    }\n  }\n\n","bugFix":["d7052f725a053aa55424f966831826f61b798bf1"],"bugIntro":["1b54a9bc667895a2095a886184bf69a3179e63df"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"42a18cb0bca2c4ac9747f31c7a74fac90c661f39","date":1171363388,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","sourceNew":"  protected final void maybeFlushRamSegments() throws IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","sourceOld":"  protected final void maybeFlushRamSegments() throws IOException {\n    if (timeToFlushRam()) {\n      flushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1b54a9bc667895a2095a886184bf69a3179e63df","date":1172088096,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","sourceNew":"  protected final void maybeFlushRamSegments() throws CorruptIndexException, IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","sourceOld":"  protected final void maybeFlushRamSegments() throws IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","bugFix":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bb367f748b51e8956a0a9ad2d907a423a83cb22a","date":1181399468,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","pathOld":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","sourceNew":"  /**\n   * Used internally to trigger a flush if the number of\n   * buffered added documents or buffered deleted terms are\n   * large enough.\n   */\n  protected final void maybeFlushRamSegments() throws CorruptIndexException, IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","sourceOld":"  protected final void maybeFlushRamSegments() throws CorruptIndexException, IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4350b17bd363cd13a95171b8df1ca62ea4c3e71c","date":1183562198,"type":4,"author":"Michael McCandless","isMerge":false,"pathNew":"/dev/null","pathOld":"src/java/org/apache/lucene/index/IndexWriter#maybeFlushRamSegments().mjava","sourceNew":null,"sourceOld":"  /**\n   * Used internally to trigger a flush if the number of\n   * buffered added documents or buffered deleted terms are\n   * large enough.\n   */\n  protected final void maybeFlushRamSegments() throws CorruptIndexException, IOException {\n    // A flush is triggered if enough new documents are buffered or\n    // if enough delete terms are buffered\n    if (ramSegmentInfos.size() >= minMergeDocs || numBufferedDeleteTerms >= maxBufferedDeleteTerms) {\n      flushRamSegments();\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"d7052f725a053aa55424f966831826f61b798bf1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"1b54a9bc667895a2095a886184bf69a3179e63df":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["bb367f748b51e8956a0a9ad2d907a423a83cb22a"],"bb367f748b51e8956a0a9ad2d907a423a83cb22a":["1b54a9bc667895a2095a886184bf69a3179e63df"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["d7052f725a053aa55424f966831826f61b798bf1"]},"commit2Childs":{"d7052f725a053aa55424f966831826f61b798bf1":["6b772434f9f358356f8eedc2e017b9ddfb2615ec"],"42a18cb0bca2c4ac9747f31c7a74fac90c661f39":["1b54a9bc667895a2095a886184bf69a3179e63df"],"1b54a9bc667895a2095a886184bf69a3179e63df":["bb367f748b51e8956a0a9ad2d907a423a83cb22a"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d7052f725a053aa55424f966831826f61b798bf1"],"4350b17bd363cd13a95171b8df1ca62ea4c3e71c":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"bb367f748b51e8956a0a9ad2d907a423a83cb22a":["4350b17bd363cd13a95171b8df1ca62ea4c3e71c"],"6b772434f9f358356f8eedc2e017b9ddfb2615ec":["42a18cb0bca2c4ac9747f31c7a74fac90c661f39"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}