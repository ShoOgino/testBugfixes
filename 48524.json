{"path":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","commits":[{"id":"36f5a8c57e16c0f801006a52f87c75378427852e","date":1393256707,"type":1,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","sourceOld":"  @Test\n  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), Sort.MAX_TEMPFILES), \n        generateRandom((int)Sort.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ba791bce8103c79e38f957e9c5a53a75871bd918","date":1393539206,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/suggest/src/test/org/apache/lucene/search/suggest/fst/TestSort#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","sourceOld":"  @Test\n  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new Sort(Sort.DEFAULT_COMPARATOR, BufferSize.megabytes(1), Sort.defaultTempDir(), Sort.MAX_TEMPFILES), \n        generateRandom((int)Sort.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2","date":1443129829,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.getDefaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.defaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"867e3d9153fb761456b54a9dcce566e1545c5ef6","date":1444903098,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    SortInfo sortInfo = checkSort(new OfflineSorter(OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.getDefaultTempDir(), OfflineSorter.MAX_TEMPFILES), \n        generateRandom((int)OfflineSorter.MB * 20));\n    assertEquals(1, sortInfo.mergeRounds);\n  }\n\n","bugFix":null,"bugIntro":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectoryNoVirusScanner()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"2b84d416bbd661ae4b2a28d103bdfccb851e00de","date":1458041762,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(1, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ee52259641568741fbc6ecc51284431e2a36475c","date":1459331525,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7dcb0432bcb41451b41e9aaaabe99f5d208258fe","date":1493203108,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","date":1579652839,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  @Slow\n  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b","date":1583461779,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/util/TestOfflineSorter#testSmallRandom().mjava","sourceNew":"  @Slow\n  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newFSDirectory(createTempDir())) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","sourceOld":"  @Slow\n  public void testSmallRandom() throws Exception {\n    // Sort 20 mb worth of data with 1mb buffer.\n    try (Directory dir = newDirectory()) {\n      ExecutorService exec = randomExecutorServiceOrNull();\n      SortInfo sortInfo = checkSort(dir, new OfflineSorter(dir, \"foo\", OfflineSorter.DEFAULT_COMPARATOR, BufferSize.megabytes(1), OfflineSorter.MAX_TEMPFILES, -1, exec, TestUtil.nextInt(random(), 1, 4)),\n                                    generateRandom((int)OfflineSorter.MB * 20));\n      if (exec != null) {\n        exec.shutdownNow();\n      }\n      assertEquals(3, sortInfo.mergeRounds);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"5a207d19eac354d649c3f0e2cce070017c78125e":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["867e3d9153fb761456b54a9dcce566e1545c5ef6","b470f36a9372c97283360b1304eacbde22df6c0d"],"2b84d416bbd661ae4b2a28d103bdfccb851e00de":["5a207d19eac354d649c3f0e2cce070017c78125e"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["ee52259641568741fbc6ecc51284431e2a36475c"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"e9017cf144952056066919f1ebc7897ff9bd71b1":["ee52259641568741fbc6ecc51284431e2a36475c","7dcb0432bcb41451b41e9aaaabe99f5d208258fe"],"ba791bce8103c79e38f957e9c5a53a75871bd918":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","36f5a8c57e16c0f801006a52f87c75378427852e"],"36f5a8c57e16c0f801006a52f87c75378427852e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"b470f36a9372c97283360b1304eacbde22df6c0d":["867e3d9153fb761456b54a9dcce566e1545c5ef6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"ee52259641568741fbc6ecc51284431e2a36475c":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"]},"commit2Childs":{"fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f":["5acb8730dbbbb0f88bb8db80769aa6e9b29d817b"],"5a207d19eac354d649c3f0e2cce070017c78125e":["2b84d416bbd661ae4b2a28d103bdfccb851e00de"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"2b84d416bbd661ae4b2a28d103bdfccb851e00de":["ee52259641568741fbc6ecc51284431e2a36475c"],"7dcb0432bcb41451b41e9aaaabe99f5d208258fe":["fc1e9ddca40a3ddf8b097f2cf1fe2547fe8e384f","e9017cf144952056066919f1ebc7897ff9bd71b1"],"8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2":["867e3d9153fb761456b54a9dcce566e1545c5ef6"],"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"ba791bce8103c79e38f957e9c5a53a75871bd918":["8ccfbb043f2ebf23df8782dd32a68ff1b399c3d2"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"36f5a8c57e16c0f801006a52f87c75378427852e":["ba791bce8103c79e38f957e9c5a53a75871bd918"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["ba791bce8103c79e38f957e9c5a53a75871bd918","36f5a8c57e16c0f801006a52f87c75378427852e"],"ee52259641568741fbc6ecc51284431e2a36475c":["7dcb0432bcb41451b41e9aaaabe99f5d208258fe","e9017cf144952056066919f1ebc7897ff9bd71b1"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"5acb8730dbbbb0f88bb8db80769aa6e9b29d817b":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"867e3d9153fb761456b54a9dcce566e1545c5ef6":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3","b470f36a9372c97283360b1304eacbde22df6c0d","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","e9017cf144952056066919f1ebc7897ff9bd71b1","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}