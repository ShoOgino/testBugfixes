{"path":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","commits":[{"id":"e072d0b1fc19e0533d8ce432eed245196bca6fde","date":1379265112,"type":0,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"/dev/null","sourceNew":"  @Test\r\n  public void testMultipleDocValuesTypes() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setMaxBufferedDocs(10); // prevent merges\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    for (int i = 0; i < 4; i++) {\r\n      Document doc = new Document();\r\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", i));\r\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\r\n      writer.addDocument(doc);\r\n    }\r\n    writer.commit();\r\n    \r\n    // update all docs' ndv field\r\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\r\n    writer.close();\r\n    \r\n    final DirectoryReader reader = DirectoryReader.open(dir);\r\n    AtomicReader r = reader.leaves().get(0).reader();\r\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\r\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\r\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\r\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\r\n    BytesRef scratch = new BytesRef();\r\n    for (int i = 0; i < r.maxDoc(); i++) {\r\n      assertEquals(17, ndv.get(0));\r\n      bdv.get(i, scratch);\r\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\r\n      sdv.get(i, scratch);\r\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\r\n      ssdv.setDocument(i);\r\n      long ord = ssdv.nextOrd();\r\n      ssdv.lookupOrd(ord, scratch);\r\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\r\n      if (i != 0) {\r\n        ord = ssdv.nextOrd();\r\n        ssdv.lookupOrd(ord, scratch);\r\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\r\n      }\r\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\r\n    }\r\n    \r\n    reader.close();\r\n    dir.close();\r\n  }\r\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4962e8a1c440950d757f5e295b4f6106ba2ab420","date":1379271654,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(0));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\r\n  public void testMultipleDocValuesTypes() throws Exception {\r\n    Directory dir = newDirectory();\r\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\r\n    conf.setMaxBufferedDocs(10); // prevent merges\r\n    IndexWriter writer = new IndexWriter(dir, conf);\r\n    \r\n    for (int i = 0; i < 4; i++) {\r\n      Document doc = new Document();\r\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\r\n      doc.add(new NumericDocValuesField(\"ndv\", i));\r\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\r\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\r\n      writer.addDocument(doc);\r\n    }\r\n    writer.commit();\r\n    \r\n    // update all docs' ndv field\r\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\r\n    writer.close();\r\n    \r\n    final DirectoryReader reader = DirectoryReader.open(dir);\r\n    AtomicReader r = reader.leaves().get(0).reader();\r\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\r\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\r\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\r\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\r\n    BytesRef scratch = new BytesRef();\r\n    for (int i = 0; i < r.maxDoc(); i++) {\r\n      assertEquals(17, ndv.get(0));\r\n      bdv.get(i, scratch);\r\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\r\n      sdv.get(i, scratch);\r\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\r\n      ssdv.setDocument(i);\r\n      long ord = ssdv.nextOrd();\r\n      ssdv.lookupOrd(ord, scratch);\r\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\r\n      if (i != 0) {\r\n        ord = ssdv.nextOrd();\r\n        ssdv.lookupOrd(ord, scratch);\r\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\r\n      }\r\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\r\n    }\r\n    \r\n    reader.close();\r\n    dir.close();\r\n  }\r\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"06805da26538ed636bd89b10c2699cc3834032ae","date":1395132972,"type":3,"author":"Shai Erera","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(0));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ae14298f4eec6d5faee6a149f88ba57d14a6f21a","date":1396971290,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf","date":1401983689,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    BytesRef scratch = new BytesRef();\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      bdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      sdv.get(i, scratch);\n      assertEquals(new BytesRef(Integer.toString(i)), scratch);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      ssdv.lookupOrd(ord, scratch);\n      assertEquals(i, Integer.parseInt(scratch.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        ssdv.lookupOrd(ord, scratch);\n        assertEquals(i * 2, Integer.parseInt(scratch.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e","date":1406737224,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d0ef034a4f10871667ae75181537775ddcf8ade4","date":1407610475,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.shutdown();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c9fb5f46e264daf5ba3860defe623a89d202dd87","date":1411516315,"type":3,"author":"Ryan Ernst","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    AtomicReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6652c74b2358a0b13223817a6a793bf1c9d0749d","date":1474465301,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"17e5da53e4e5bd659e22add9bba1cfa222e7e30d","date":1475435902,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"4cce5816ef15a48a0bc11e5d400497ee4301dd3b","date":1476991456,"type":3,"author":"Kevin Risden","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(17, ndv.get(i));\n      BytesRef term = bdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      term = sdv.get(i);\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      ssdv.setDocument(i);\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"f4363cd33f6eff7fb4753574a441e2d18c1022a4","date":1498067235,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7dfa64bc2074fb87d0ca70095a644c1ead107e1","date":1498356339,"type":3,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"28288370235ed02234a64753cdbf0c6ec096304a","date":1498726817,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","pathOld":"lucene/core/src/test/org/apache/lucene/index/TestNumericDocValuesUpdates#testMultipleDocValuesTypes().mjava","sourceNew":"  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","sourceOld":"  @Test\n  public void testMultipleDocValuesTypes() throws Exception {\n    Directory dir = newDirectory();\n    IndexWriterConfig conf = newIndexWriterConfig(new MockAnalyzer(random()));\n    conf.setMaxBufferedDocs(10); // prevent merges\n    IndexWriter writer = new IndexWriter(dir, conf);\n    \n    for (int i = 0; i < 4; i++) {\n      Document doc = new Document();\n      doc.add(new StringField(\"dvUpdateKey\", \"dv\", Store.NO));\n      doc.add(new NumericDocValuesField(\"ndv\", i));\n      doc.add(new BinaryDocValuesField(\"bdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedDocValuesField(\"sdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i))));\n      doc.add(new SortedSetDocValuesField(\"ssdv\", new BytesRef(Integer.toString(i * 2))));\n      writer.addDocument(doc);\n    }\n    writer.commit();\n    \n    // update all docs' ndv field\n    writer.updateNumericDocValue(new Term(\"dvUpdateKey\", \"dv\"), \"ndv\", 17L);\n    writer.close();\n    \n    final DirectoryReader reader = DirectoryReader.open(dir);\n    LeafReader r = reader.leaves().get(0).reader();\n    NumericDocValues ndv = r.getNumericDocValues(\"ndv\");\n    BinaryDocValues bdv = r.getBinaryDocValues(\"bdv\");\n    SortedDocValues sdv = r.getSortedDocValues(\"sdv\");\n    SortedSetDocValues ssdv = r.getSortedSetDocValues(\"ssdv\");\n    for (int i = 0; i < r.maxDoc(); i++) {\n      assertEquals(i, ndv.nextDoc());\n      assertEquals(17, ndv.longValue());\n      assertEquals(i, bdv.nextDoc());\n      BytesRef term = bdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, sdv.nextDoc());\n      term = sdv.binaryValue();\n      assertEquals(new BytesRef(Integer.toString(i)), term);\n      assertEquals(i, ssdv.nextDoc());\n\n      long ord = ssdv.nextOrd();\n      term = ssdv.lookupOrd(ord);\n      assertEquals(i, Integer.parseInt(term.utf8ToString()));\n      if (i != 0) {\n        ord = ssdv.nextOrd();\n        term = ssdv.lookupOrd(ord);\n        assertEquals(i * 2, Integer.parseInt(term.utf8ToString()));\n      }\n      assertEquals(SortedSetDocValues.NO_MORE_ORDS, ssdv.nextOrd());\n    }\n    \n    reader.close();\n    dir.close();\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"06805da26538ed636bd89b10c2699cc3834032ae":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"28288370235ed02234a64753cdbf0c6ec096304a":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d","f4363cd33f6eff7fb4753574a441e2d18c1022a4"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":["c9fb5f46e264daf5ba3860defe623a89d202dd87","17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["c9fb5f46e264daf5ba3860defe623a89d202dd87","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["06805da26538ed636bd89b10c2699cc3834032ae"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["28288370235ed02234a64753cdbf0c6ec096304a"]},"commit2Childs":{"e072d0b1fc19e0533d8ce432eed245196bca6fde":["4962e8a1c440950d757f5e295b4f6106ba2ab420"],"54a6bea0b991120a99ad0e2f72ae853fd5ecae0e":["d0ef034a4f10871667ae75181537775ddcf8ade4"],"53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf":["54a6bea0b991120a99ad0e2f72ae853fd5ecae0e"],"f4363cd33f6eff7fb4753574a441e2d18c1022a4":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a"],"06805da26538ed636bd89b10c2699cc3834032ae":["ae14298f4eec6d5faee6a149f88ba57d14a6f21a"],"b7dfa64bc2074fb87d0ca70095a644c1ead107e1":[],"c9fb5f46e264daf5ba3860defe623a89d202dd87":["4cce5816ef15a48a0bc11e5d400497ee4301dd3b","17e5da53e4e5bd659e22add9bba1cfa222e7e30d","6652c74b2358a0b13223817a6a793bf1c9d0749d"],"28288370235ed02234a64753cdbf0c6ec096304a":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"4cce5816ef15a48a0bc11e5d400497ee4301dd3b":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e072d0b1fc19e0533d8ce432eed245196bca6fde"],"17e5da53e4e5bd659e22add9bba1cfa222e7e30d":["f4363cd33f6eff7fb4753574a441e2d18c1022a4","b7dfa64bc2074fb87d0ca70095a644c1ead107e1","28288370235ed02234a64753cdbf0c6ec096304a","4cce5816ef15a48a0bc11e5d400497ee4301dd3b"],"6652c74b2358a0b13223817a6a793bf1c9d0749d":["17e5da53e4e5bd659e22add9bba1cfa222e7e30d"],"d0ef034a4f10871667ae75181537775ddcf8ade4":["c9fb5f46e264daf5ba3860defe623a89d202dd87"],"ae14298f4eec6d5faee6a149f88ba57d14a6f21a":["53fc2f4c5ce4f2053be3d5f5d14d79129ebb4bbf"],"4962e8a1c440950d757f5e295b4f6106ba2ab420":["06805da26538ed636bd89b10c2699cc3834032ae"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7dfa64bc2074fb87d0ca70095a644c1ead107e1","4cce5816ef15a48a0bc11e5d400497ee4301dd3b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}