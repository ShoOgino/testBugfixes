{"path":"solr/solrj/src/java/org/apache/solr/recipe/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","commits":[{"id":"e12a337a9a98e388c3a5bca9c8256d21c13781f9","date":1492093671,"type":0,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","pathOld":"/dev/null","sourceNew":"  public static Map<String, Object> mergePolicies(String coll,\n                                                  Map<String, Object> collPolicy,\n                                                  Map<String, Object> defaultPolicy) {\n    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap(\"conditions\", collPolicy), 4, true);\n    insertColl(coll, conditions);\n    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());\n    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap(\"preferences\", collPolicy), 4, true);\n    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());\n    if (defaultPolicy != null) {\n      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap(\"conditions\", defaultPolicy), 4, true);\n      insertColl(coll,defaultConditions);\n      defaultConditions.forEach(e -> {\n        Clause clause = new Clause(e);\n        for (Clause c : parsedConditions) {\n          if (c.collection.equals(clause.collection) &&\n              c.tag.name.equals(clause.tag.name) ) return;\n        }\n        conditions.add(e);\n      });\n      Collection<Map<String,Object>> defaultPreferences = getDeepCopy(getListOfMap(\"preferences\", defaultPolicy), 4, true);\n      defaultPreferences.forEach(e -> {\n        Preference preference = new Preference(e);\n        for (Preference p : parsedPreferences) {\n          if(p.name == preference.name) return;\n        }\n        preferences.add(e);\n\n      });\n  }\n    return Utils.makeMap(\"conditions\", conditions, \"preferences\", preferences );\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b59075a857a3d25d834f6f408491b40845b8ced0","date":1492433183,"type":3,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/recipe/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","sourceNew":"  public static Map<String, Object> mergePolicies(String coll,\n                                                  Map<String, Object> collPolicy,\n                                                  Map<String, Object> defaultPolicy) {\n    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap(\"conditions\", collPolicy), 4, true);\n    insertColl(coll, conditions);\n    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());\n    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap(\"preferences\", collPolicy), 4, true);\n    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());\n    if (defaultPolicy != null) {\n      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap(\"conditions\", defaultPolicy), 4, true);\n      insertColl(coll, defaultConditions);\n      defaultConditions.forEach(e -> {\n        Clause clause = new Clause(e);\n        for (Clause c : parsedConditions) {\n          if (c.collection.equals(clause.collection) &&\n              c.tag.name.equals(clause.tag.name)) return;\n        }\n        conditions.add(e);\n      });\n      Collection<Map<String, Object>> defaultPreferences = getDeepCopy(getListOfMap(\"preferences\", defaultPolicy), 4, true);\n      defaultPreferences.forEach(e -> {\n        Preference preference = new Preference(e);\n        for (Preference p : parsedPreferences) {\n          if (p.name == preference.name) return;\n        }\n        preferences.add(e);\n\n      });\n    }\n    return Utils.makeMap(\"conditions\", conditions, \"preferences\", preferences);\n\n  }\n\n","sourceOld":"  public static Map<String, Object> mergePolicies(String coll,\n                                                  Map<String, Object> collPolicy,\n                                                  Map<String, Object> defaultPolicy) {\n    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap(\"conditions\", collPolicy), 4, true);\n    insertColl(coll, conditions);\n    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());\n    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap(\"preferences\", collPolicy), 4, true);\n    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());\n    if (defaultPolicy != null) {\n      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap(\"conditions\", defaultPolicy), 4, true);\n      insertColl(coll,defaultConditions);\n      defaultConditions.forEach(e -> {\n        Clause clause = new Clause(e);\n        for (Clause c : parsedConditions) {\n          if (c.collection.equals(clause.collection) &&\n              c.tag.name.equals(clause.tag.name) ) return;\n        }\n        conditions.add(e);\n      });\n      Collection<Map<String,Object>> defaultPreferences = getDeepCopy(getListOfMap(\"preferences\", defaultPolicy), 4, true);\n      defaultPreferences.forEach(e -> {\n        Preference preference = new Preference(e);\n        for (Preference p : parsedPreferences) {\n          if(p.name == preference.name) return;\n        }\n        preferences.add(e);\n\n      });\n  }\n    return Utils.makeMap(\"conditions\", conditions, \"preferences\", preferences );\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"653c1ca305e0065ee988a09e59c8316b8cde02fd","date":1492506780,"type":5,"author":"Noble Paul","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/cloud/autoscaling/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/recipe/Policy#mergePolicies(String,Map[String,Object],Map[String,Object]).mjava","sourceNew":"  public static Map<String, Object> mergePolicies(String coll,\n                                                  Map<String, Object> collPolicy,\n                                                  Map<String, Object> defaultPolicy) {\n    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap(\"conditions\", collPolicy), 4, true);\n    insertColl(coll, conditions);\n    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());\n    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap(\"preferences\", collPolicy), 4, true);\n    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());\n    if (defaultPolicy != null) {\n      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap(\"conditions\", defaultPolicy), 4, true);\n      insertColl(coll, defaultConditions);\n      defaultConditions.forEach(e -> {\n        Clause clause = new Clause(e);\n        for (Clause c : parsedConditions) {\n          if (c.collection.equals(clause.collection) &&\n              c.tag.name.equals(clause.tag.name)) return;\n        }\n        conditions.add(e);\n      });\n      Collection<Map<String, Object>> defaultPreferences = getDeepCopy(getListOfMap(\"preferences\", defaultPolicy), 4, true);\n      defaultPreferences.forEach(e -> {\n        Preference preference = new Preference(e);\n        for (Preference p : parsedPreferences) {\n          if (p.name == preference.name) return;\n        }\n        preferences.add(e);\n\n      });\n    }\n    return Utils.makeMap(\"conditions\", conditions, \"preferences\", preferences);\n\n  }\n\n","sourceOld":"  public static Map<String, Object> mergePolicies(String coll,\n                                                  Map<String, Object> collPolicy,\n                                                  Map<String, Object> defaultPolicy) {\n    Collection<Map<String, Object>> conditions = getDeepCopy(getListOfMap(\"conditions\", collPolicy), 4, true);\n    insertColl(coll, conditions);\n    List<Clause> parsedConditions = conditions.stream().map(Clause::new).collect(toList());\n    Collection<Map<String, Object>> preferences = getDeepCopy(getListOfMap(\"preferences\", collPolicy), 4, true);\n    List<Preference> parsedPreferences = preferences.stream().map(Preference::new).collect(toList());\n    if (defaultPolicy != null) {\n      Collection<Map<String, Object>> defaultConditions = getDeepCopy(getListOfMap(\"conditions\", defaultPolicy), 4, true);\n      insertColl(coll, defaultConditions);\n      defaultConditions.forEach(e -> {\n        Clause clause = new Clause(e);\n        for (Clause c : parsedConditions) {\n          if (c.collection.equals(clause.collection) &&\n              c.tag.name.equals(clause.tag.name)) return;\n        }\n        conditions.add(e);\n      });\n      Collection<Map<String, Object>> defaultPreferences = getDeepCopy(getListOfMap(\"preferences\", defaultPolicy), 4, true);\n      defaultPreferences.forEach(e -> {\n        Preference preference = new Preference(e);\n        for (Preference p : parsedPreferences) {\n          if (p.name == preference.name) return;\n        }\n        preferences.add(e);\n\n      });\n    }\n    return Utils.makeMap(\"conditions\", conditions, \"preferences\", preferences);\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b59075a857a3d25d834f6f408491b40845b8ced0":["e12a337a9a98e388c3a5bca9c8256d21c13781f9"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":["b59075a857a3d25d834f6f408491b40845b8ced0"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e12a337a9a98e388c3a5bca9c8256d21c13781f9","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b59075a857a3d25d834f6f408491b40845b8ced0":["653c1ca305e0065ee988a09e59c8316b8cde02fd"],"e12a337a9a98e388c3a5bca9c8256d21c13781f9":["b59075a857a3d25d834f6f408491b40845b8ced0"],"653c1ca305e0065ee988a09e59c8316b8cde02fd":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["653c1ca305e0065ee988a09e59c8316b8cde02fd","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}