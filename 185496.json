{"path":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","commits":[{"id":"0cdf9cc6702d60334a616bd7db3ae91501d1dce7","date":1405858112,"type":0,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","pathOld":"/dev/null","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setCrossCheckTermVectors(crossCheckTermVectors);\n    checker.setFailFast(failFast);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n    CheckIndex.Status indexStatus = checker.checkIndex(null);\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n      return indexStatus;\n    }\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"f7523916a1350712e1ae710affd4e88ccd7c431d","date":1412161942,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's lock factory, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.getNoLockFactory().makeLock(\"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setCrossCheckTermVectors(crossCheckTermVectors);\n    checker.setFailFast(failFast);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n    CheckIndex.Status indexStatus = checker.checkIndex(null);\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n      return indexStatus;\n    }\n  }\n\n","bugFix":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d9a47902d6207303f5ed3e7aaca62ca33433af66","date":1412435312,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's lock factory, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.getNoLockFactory().makeLock(\"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    CheckIndex checker = new CheckIndex(dir);\n    checker.setCrossCheckTermVectors(crossCheckTermVectors);\n    checker.setFailFast(failFast);\n    checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n    CheckIndex.Status indexStatus = checker.checkIndex(null);\n    if (indexStatus == null || indexStatus.clean == false) {\n      System.out.println(\"CheckIndex failed\");\n      System.out.println(bos.toString(IOUtils.UTF_8));\n      throw new RuntimeException(\"CheckIndex failed\");\n    } else {\n      if (LuceneTestCase.INFOSTREAM) {\n        System.out.println(bos.toString(IOUtils.UTF_8));\n      }\n      return indexStatus;\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"285cdc737de75b7cc7c284a156b20214deb67bca","date":1415535483,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.makeLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's lock factory, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.getNoLockFactory().makeLock(\"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"618635065f043788c9e034f96ca5cd5cea1b4592","date":1433442044,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.makeLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab","date":1457539417,"type":5,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean,ByteArrayOutputStream).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/util/TestUtil#checkIndex(Directory,boolean,boolean).mjava","sourceNew":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast, ByteArrayOutputStream output) throws IOException {\n    if (output == null) {\n      output = new ByteArrayOutputStream(1024);\n    }\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(output, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(output.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(output.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","sourceOld":"  /** If failFast is true, then throw the first exception when index corruption is hit, instead of moving on to other fields/segments to\n   *  look for any other corruption.  */\n  public static CheckIndex.Status checkIndex(Directory dir, boolean crossCheckTermVectors, boolean failFast) throws IOException {\n    ByteArrayOutputStream bos = new ByteArrayOutputStream(1024);\n    // TODO: actually use the dir's locking, unless test uses a special method?\n    // some tests e.g. exception tests become much more complicated if they have to close the writer\n    try (CheckIndex checker = new CheckIndex(dir, NoLockFactory.INSTANCE.obtainLock(dir, \"bogus\"))) {\n      checker.setCrossCheckTermVectors(crossCheckTermVectors);\n      checker.setFailFast(failFast);\n      checker.setInfoStream(new PrintStream(bos, false, IOUtils.UTF_8), false);\n      CheckIndex.Status indexStatus = checker.checkIndex(null);\n      \n      if (indexStatus == null || indexStatus.clean == false) {\n        System.out.println(\"CheckIndex failed\");\n        System.out.println(bos.toString(IOUtils.UTF_8));\n        throw new RuntimeException(\"CheckIndex failed\");\n      } else {\n        if (LuceneTestCase.INFOSTREAM) {\n          System.out.println(bos.toString(IOUtils.UTF_8));\n        }\n        return indexStatus;\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"618635065f043788c9e034f96ca5cd5cea1b4592":["285cdc737de75b7cc7c284a156b20214deb67bca"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["618635065f043788c9e034f96ca5cd5cea1b4592"],"285cdc737de75b7cc7c284a156b20214deb67bca":["f7523916a1350712e1ae710affd4e88ccd7c431d"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"f7523916a1350712e1ae710affd4e88ccd7c431d":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7","f7523916a1350712e1ae710affd4e88ccd7c431d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"]},"commit2Childs":{"618635065f043788c9e034f96ca5cd5cea1b4592":["aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab"],"0cdf9cc6702d60334a616bd7db3ae91501d1dce7":["f7523916a1350712e1ae710affd4e88ccd7c431d","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"285cdc737de75b7cc7c284a156b20214deb67bca":["618635065f043788c9e034f96ca5cd5cea1b4592"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["0cdf9cc6702d60334a616bd7db3ae91501d1dce7"],"aefe9c6efcbd9c785fd98f1379b8ba0b7aefebab":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"f7523916a1350712e1ae710affd4e88ccd7c431d":["285cdc737de75b7cc7c284a156b20214deb67bca","d9a47902d6207303f5ed3e7aaca62ca33433af66"],"d9a47902d6207303f5ed3e7aaca62ca33433af66":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["d9a47902d6207303f5ed3e7aaca62ca33433af66","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}