{"path":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRegexpQuery(String,String).mjava","commits":[{"id":"d94d6afa51157e490fc169e192a154ffc4cdad0b","date":1283184289,"type":0,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRegexpQuery(String,String).mjava","pathOld":"/dev/null","sourceNew":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains a regular expression\n   * query.\n   *<p>\n   * Depending on settings, pattern term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with regular expression templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * regular expression queries, which may be necessary due to missing analyzer \n   * calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains a regular expression\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRegexpQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    final Term regexp = new Term(field, termStr);\n    final RegexpQuery query = new RegexpQuery(regexp);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ecaea79e307d83311c31273b0ea89b9fdb0c5a32","date":1287584790,"type":4,"author":"Robert Muir","isMerge":false,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRegexpQuery(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains a regular expression\n   * query.\n   *<p>\n   * Depending on settings, pattern term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with regular expression templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * regular expression queries, which may be necessary due to missing analyzer \n   * calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains a regular expression\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRegexpQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    final Term regexp = new Term(field, termStr);\n    final RegexpQuery query = new RegexpQuery(regexp);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8017ab6544f30f93b106e419e7298173bad77f69","date":1287608126,"type":4,"author":"Simon Willnauer","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/contrib/queryparser/src/java/org/apache/lucene/queryParser/precedence/PrecedenceQueryParser#getRegexpQuery(String,String).mjava","sourceNew":null,"sourceOld":"  /**\n   * Factory method for generating a query. Called when parser\n   * parses an input term token that contains a regular expression\n   * query.\n   *<p>\n   * Depending on settings, pattern term may be lower-cased\n   * automatically. It will not go through the default Analyzer,\n   * however, since normal Analyzers are unlikely to work properly\n   * with regular expression templates.\n   *<p>\n   * Can be overridden by extending classes, to provide custom handling for\n   * regular expression queries, which may be necessary due to missing analyzer \n   * calls.\n   *\n   * @param field Name of the field query will use.\n   * @param termStr Term token that contains a regular expression\n   *\n   * @return Resulting {@link Query} built for the term\n   * @exception ParseException throw in overridden method to disallow\n   */\n  protected Query getRegexpQuery(String field, String termStr) throws ParseException\n  {\n    if (lowercaseExpandedTerms) {\n      termStr = termStr.toLowerCase();\n    }\n    final Term regexp = new Term(field, termStr);\n    final RegexpQuery query = new RegexpQuery(regexp);\n    query.setRewriteMethod(multiTermRewriteMethod);\n    return query;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"8017ab6544f30f93b106e419e7298173bad77f69":["d94d6afa51157e490fc169e192a154ffc4cdad0b","ecaea79e307d83311c31273b0ea89b9fdb0c5a32"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32"]},"commit2Childs":{"ecaea79e307d83311c31273b0ea89b9fdb0c5a32":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d94d6afa51157e490fc169e192a154ffc4cdad0b":["ecaea79e307d83311c31273b0ea89b9fdb0c5a32","8017ab6544f30f93b106e419e7298173bad77f69"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d94d6afa51157e490fc169e192a154ffc4cdad0b"],"8017ab6544f30f93b106e419e7298173bad77f69":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["8017ab6544f30f93b106e419e7298173bad77f69","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}