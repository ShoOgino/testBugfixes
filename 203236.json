{"path":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,int,UTF8Result).mjava","commits":[{"id":"480d01e5b0ef8efb136d51670fec297ae5ae2c9c","date":1268821447,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,int,UTF8Result).mjava","pathOld":"/dev/null","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns the number of bytes\n   *  written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, final int length, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.result;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        byte[] newOut = new byte[2*out.length];\n        assert newOut.length >= upto+4;\n        System.arraycopy(out, 0, newOut, 0, upto);\n        result.result = out = newOut;\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,int,UTF8Result).mjava","pathOld":"backwards/src/java/org/apache/lucene/util/UnicodeUtil#UTF16toUTF8(char[],int,int,UTF8Result).mjava","sourceNew":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns the number of bytes\n   *  written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, final int length, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.result;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        byte[] newOut = new byte[2*out.length];\n        assert newOut.length >= upto+4;\n        System.arraycopy(out, 0, newOut, 0, upto);\n        result.result = out = newOut;\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","sourceOld":"  /** Encode characters from a char[] source, starting at\n   *  offset for length chars.  Returns the number of bytes\n   *  written to bytesOut. */\n  public static void UTF16toUTF8(final char[] source, final int offset, final int length, UTF8Result result) {\n\n    int upto = 0;\n    int i = offset;\n    final int end = offset + length;\n    byte[] out = result.result;\n\n    while(i < end) {\n      \n      final int code = (int) source[i++];\n\n      if (upto+4 > out.length) {\n        byte[] newOut = new byte[2*out.length];\n        assert newOut.length >= upto+4;\n        System.arraycopy(out, 0, newOut, 0, upto);\n        result.result = out = newOut;\n      }\n      if (code < 0x80)\n        out[upto++] = (byte) code;\n      else if (code < 0x800) {\n        out[upto++] = (byte) (0xC0 | (code >> 6));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else if (code < 0xD800 || code > 0xDFFF) {\n        out[upto++] = (byte)(0xE0 | (code >> 12));\n        out[upto++] = (byte)(0x80 | ((code >> 6) & 0x3F));\n        out[upto++] = (byte)(0x80 | (code & 0x3F));\n      } else {\n        // surrogate pair\n        // confirm valid high surrogate\n        if (code < 0xDC00 && i < end && source[i] != 0xffff) {\n          int utf32 = (int) source[i];\n          // confirm valid low surrogate and write pair\n          if (utf32 >= 0xDC00 && utf32 <= 0xDFFF) { \n            utf32 = ((code - 0xD7C0) << 10) + (utf32 & 0x3FF);\n            i++;\n            out[upto++] = (byte)(0xF0 | (utf32 >> 18));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 12) & 0x3F));\n            out[upto++] = (byte)(0x80 | ((utf32 >> 6) & 0x3F));\n            out[upto++] = (byte)(0x80 | (utf32 & 0x3F));\n            continue;\n          }\n        }\n        // replace unpaired surrogate or out-of-order low surrogate\n        // with substitution character\n        out[upto++] = (byte) 0xEF;\n        out[upto++] = (byte) 0xBF;\n        out[upto++] = (byte) 0xBD;\n      }\n    }\n    //assert matches(source, offset, length, out, upto);\n    result.length = upto;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"]},"commit2Childs":{"480d01e5b0ef8efb136d51670fec297ae5ae2c9c":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["480d01e5b0ef8efb136d51670fec297ae5ae2c9c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}