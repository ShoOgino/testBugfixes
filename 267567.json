{"path":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","commits":[{"id":"3e8715d826e588419327562287d5d6a8040d63d6","date":1427987148,"type":1,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    Path path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d2638f781be724518ff6c2263d14a48cf6e68017","date":1427989059,"type":1,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/BasePostingsFormatTestCase#testFull(IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  private void testFull(IndexOptions options, boolean withPayloads) throws Exception {\n    Path path = createTempDir(\"testPostingsFormat.testExact\");\n    Directory dir = newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"6bfe104fc023fadc9e709f8d17403d2cc61133fe","date":1454446396,"type":3,"author":"Mike McCandless","isMerge":false,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b470f36a9372c97283360b1304eacbde22df6c0d","date":1454765175,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"1e6acbaae7af722f17204ceccf0f7db5753eccf3","date":1454775255,"type":3,"author":"Mike McCandless","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a207d19eac354d649c3f0e2cce070017c78125e","date":1454776470,"type":3,"author":"Erick Erickson","isMerge":true,"pathNew":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","pathOld":"lucene/test-framework/src/java/org/apache/lucene/index/RandomPostingsTester#testFull(Codec,Path,IndexOptions,boolean).mjava","sourceNew":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n  }\n\n","sourceOld":"  /** Indexes all fields/terms at the specified\n   *  IndexOptions, and fully tests at that IndexOptions. */\n  public void testFull(Codec codec, Path path, IndexOptions options, boolean withPayloads) throws Exception {\n    Directory dir = LuceneTestCase.newFSDirectory(path);\n\n    // TODO test thread safety of buildIndex too\n    FieldsProducer fieldsProducer = buildIndex(codec, dir, options, withPayloads, true);\n\n    testFields(fieldsProducer);\n\n    IndexOptions[] allOptions = IndexOptions.values();\n    int maxIndexOption = Arrays.asList(allOptions).indexOf(options);\n\n    for(int i=0;i<=maxIndexOption;i++) {\n      testTerms(fieldsProducer, EnumSet.allOf(Option.class), allOptions[i], options, true);\n      if (withPayloads) {\n        // If we indexed w/ payloads, also test enums w/o accessing payloads:\n        testTerms(fieldsProducer, EnumSet.complementOf(EnumSet.of(Option.PAYLOADS)), allOptions[i], options, true);\n      }\n    }\n\n    fieldsProducer.close();\n    dir.close();\n    IOUtils.rm(path);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"5a207d19eac354d649c3f0e2cce070017c78125e":["3e8715d826e588419327562287d5d6a8040d63d6","b470f36a9372c97283360b1304eacbde22df6c0d"],"b470f36a9372c97283360b1304eacbde22df6c0d":["3e8715d826e588419327562287d5d6a8040d63d6","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":["3e8715d826e588419327562287d5d6a8040d63d6","b470f36a9372c97283360b1304eacbde22df6c0d"],"d2638f781be724518ff6c2263d14a48cf6e68017":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3e8715d826e588419327562287d5d6a8040d63d6"],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["3e8715d826e588419327562287d5d6a8040d63d6"],"3e8715d826e588419327562287d5d6a8040d63d6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a207d19eac354d649c3f0e2cce070017c78125e"]},"commit2Childs":{"5a207d19eac354d649c3f0e2cce070017c78125e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"b470f36a9372c97283360b1304eacbde22df6c0d":["5a207d19eac354d649c3f0e2cce070017c78125e","1e6acbaae7af722f17204ceccf0f7db5753eccf3"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2638f781be724518ff6c2263d14a48cf6e68017","3e8715d826e588419327562287d5d6a8040d63d6"],"1e6acbaae7af722f17204ceccf0f7db5753eccf3":[],"d2638f781be724518ff6c2263d14a48cf6e68017":[],"6bfe104fc023fadc9e709f8d17403d2cc61133fe":["b470f36a9372c97283360b1304eacbde22df6c0d"],"3e8715d826e588419327562287d5d6a8040d63d6":["5a207d19eac354d649c3f0e2cce070017c78125e","b470f36a9372c97283360b1304eacbde22df6c0d","1e6acbaae7af722f17204ceccf0f7db5753eccf3","d2638f781be724518ff6c2263d14a48cf6e68017","6bfe104fc023fadc9e709f8d17403d2cc61133fe"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["1e6acbaae7af722f17204ceccf0f7db5753eccf3","d2638f781be724518ff6c2263d14a48cf6e68017","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}