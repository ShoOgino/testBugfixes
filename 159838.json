{"path":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","commits":[{"id":"c35d3c01114129fff707f0777080210fa9deb2a7","date":1493219863,"type":0,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3162d8e0cdc5e009f5a488de4c57a8217d3b47a3","date":1496170306,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d1f5728f32a4a256b36cfabd7a2636452f599bb9","date":1496231774,"type":3,"author":"Karl Wright","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"44b289ba5434fa10782118c697fa706d6cf231df","date":1496249545,"type":3,"author":"Chris Hostetter","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"e9017cf144952056066919f1ebc7897ff9bd71b1","date":1496757600,"type":0,"author":"Shalin Shekhar Mangar","isMerge":true,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"/dev/null","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"5a209db4770770843a101e5dfe46086a63507fd3","date":1544624168,"type":3,"author":"Joel Bernstein","isMerge":false,"pathNew":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","pathOld":"solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/TimeSeriesStream#toExpression(StreamFactory).mjava","sourceNew":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    if(collection.indexOf(',') > -1) {\n      expression.addParameter(\"\\\"\"+collection+\"\\\"\");\n    } else {\n      expression.addParameter(collection);\n    }\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","sourceOld":"  @Override\n  public StreamExpressionParameter toExpression(StreamFactory factory) throws IOException {\n    // function name\n    StreamExpression expression = new StreamExpression(factory.getFunctionName(this.getClass()));\n    // collection\n    expression.addParameter(collection);\n\n    // parameters\n    ModifiableSolrParams tmpParams = new ModifiableSolrParams(params);\n\n    for (Entry<String, String[]> param : tmpParams.getMap().entrySet()) {\n      expression.addParameter(new StreamExpressionNamedParameter(param.getKey(),\n          String.join(\",\", param.getValue())));\n    }\n\n    // metrics\n    for(Metric metric : metrics){\n      expression.addParameter(metric.toExpression(factory));\n    }\n\n    expression.addParameter(new StreamExpressionNamedParameter(\"start\", start));\n    expression.addParameter(new StreamExpressionNamedParameter(\"end\", end));\n    expression.addParameter(new StreamExpressionNamedParameter(\"gap\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"field\", gap));\n    expression.addParameter(new StreamExpressionNamedParameter(\"format\", format));\n\n\n    // zkHost\n    expression.addParameter(new StreamExpressionNamedParameter(\"zkHost\", zkHost));\n\n    return expression;\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"e9017cf144952056066919f1ebc7897ff9bd71b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85","3162d8e0cdc5e009f5a488de4c57a8217d3b47a3"],"c35d3c01114129fff707f0777080210fa9deb2a7":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3162d8e0cdc5e009f5a488de4c57a8217d3b47a3":["c35d3c01114129fff707f0777080210fa9deb2a7"],"44b289ba5434fa10782118c697fa706d6cf231df":["c35d3c01114129fff707f0777080210fa9deb2a7","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"5a209db4770770843a101e5dfe46086a63507fd3":["d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["c35d3c01114129fff707f0777080210fa9deb2a7","3162d8e0cdc5e009f5a488de4c57a8217d3b47a3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["5a209db4770770843a101e5dfe46086a63507fd3"]},"commit2Childs":{"e9017cf144952056066919f1ebc7897ff9bd71b1":[],"c35d3c01114129fff707f0777080210fa9deb2a7":["3162d8e0cdc5e009f5a488de4c57a8217d3b47a3","44b289ba5434fa10782118c697fa706d6cf231df","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["e9017cf144952056066919f1ebc7897ff9bd71b1","c35d3c01114129fff707f0777080210fa9deb2a7"],"3162d8e0cdc5e009f5a488de4c57a8217d3b47a3":["e9017cf144952056066919f1ebc7897ff9bd71b1","d1f5728f32a4a256b36cfabd7a2636452f599bb9"],"44b289ba5434fa10782118c697fa706d6cf231df":[],"5a209db4770770843a101e5dfe46086a63507fd3":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d1f5728f32a4a256b36cfabd7a2636452f599bb9":["44b289ba5434fa10782118c697fa706d6cf231df","5a209db4770770843a101e5dfe46086a63507fd3"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["e9017cf144952056066919f1ebc7897ff9bd71b1","44b289ba5434fa10782118c697fa706d6cf231df","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}