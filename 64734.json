{"path":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","commits":[{"id":"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6","date":1184719927,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","pathOld":"/dev/null","sourceNew":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List tmp = new ArrayList(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"52ce7e961a8217faac8128e3c8fe67819eefdde9","date":1201979043,"type":3,"author":"Michael Busch","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List tmp = new ArrayList(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final BitSet bits = new BitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List tmp = new ArrayList(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ef82ff03e4016c705811b2658e81471a645c0e49","date":1255900293,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List tmp = new ArrayList(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"8a9e385641d717e641408d8fbbc62be8fc766357","date":1256746606,"type":3,"author":"Uwe Schindler","isMerge":false,"pathNew":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"9454a6510e2db155fb01faa5c049b06ece95fab9","date":1453508333,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","pathOld":"src/java/org/apache/lucene/search/SpanQueryFilter#bitSpans(IndexReader).mjava","sourceNew":"  @Override\n  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","sourceOld":"  @Override\n  public SpanFilterResult bitSpans(IndexReader reader) throws IOException {\n\n    final OpenBitSet bits = new OpenBitSet(reader.maxDoc());\n    Spans spans = query.getSpans(reader);\n    List<SpanFilterResult.PositionInfo> tmp = new ArrayList<SpanFilterResult.PositionInfo>(20);\n    int currentDoc = -1;\n    SpanFilterResult.PositionInfo currentInfo = null;\n    while (spans.next())\n    {\n      int doc = spans.doc();\n      bits.set(doc);\n      if (currentDoc != doc)\n      {\n        currentInfo = new SpanFilterResult.PositionInfo(doc);\n        tmp.add(currentInfo);\n        currentDoc = doc;\n      }\n      currentInfo.addPosition(spans.start(), spans.end());\n    }\n    return new SpanFilterResult(bits, tmp);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"8a9e385641d717e641408d8fbbc62be8fc766357":["ef82ff03e4016c705811b2658e81471a645c0e49"],"ef82ff03e4016c705811b2658e81471a645c0e49":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"9454a6510e2db155fb01faa5c049b06ece95fab9":["8a9e385641d717e641408d8fbbc62be8fc766357"]},"commit2Childs":{"8a9e385641d717e641408d8fbbc62be8fc766357":["9454a6510e2db155fb01faa5c049b06ece95fab9"],"ef82ff03e4016c705811b2658e81471a645c0e49":["8a9e385641d717e641408d8fbbc62be8fc766357"],"d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6":["52ce7e961a8217faac8128e3c8fe67819eefdde9"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d44db1ba2660a6fd3c112bc52a66be6ae1d5d9c6"],"52ce7e961a8217faac8128e3c8fe67819eefdde9":["ef82ff03e4016c705811b2658e81471a645c0e49"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"9454a6510e2db155fb01faa5c049b06ece95fab9":["cd5edd1f2b162a5cfa08efd17851a07373a96817"]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}