{"path":"src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","commits":[{"id":"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1","date":1263263734,"type":1,"author":"Ryan McKinley","isMerge":false,"pathNew":"src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/request/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","pathOld":"src/java/org/apache/solr/response/XMLWriter#writeResponse(Writer,SolrQueryRequest,SolrQueryResponse).mjava","sourceNew":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","sourceOld":"  public static void writeResponse(Writer writer, SolrQueryRequest req, SolrQueryResponse rsp) throws IOException {\n\n    String ver = req.getParams().get(CommonParams.VERSION);\n\n    writer.write(XML_START1);\n\n    String stylesheet = req.getParams().get(\"stylesheet\");\n    if (stylesheet != null && stylesheet.length() > 0) {\n      writer.write(XML_STYLESHEET);\n      writer.write(stylesheet);\n      writer.write(XML_STYLESHEET_END);\n    }\n\n    String noSchema = req.getParams().get(\"noSchema\");\n    // todo - change when schema becomes available?\n    if (false && noSchema == null)\n      writer.write(XML_START2_SCHEMA);\n    else\n      writer.write(XML_START2_NOSCHEMA);\n\n    // create an instance for each request to handle\n    // non-thread safe stuff (indentation levels, etc)\n    // and to encapsulate writer, schema, and searcher so\n    // they don't have to be passed around in every function.\n    //\n    XMLWriter xw = new XMLWriter(writer, req.getSchema(), req, ver);\n    xw.defaultFieldList = rsp.getReturnFields();\n\n    String indent = req.getParams().get(\"indent\");\n    if (indent != null) {\n      if (\"\".equals(indent) || \"off\".equals(indent)) {\n        xw.setIndent(false);\n      } else {\n        xw.setIndent(true);\n      }\n    }\n\n    // dump response values\n    NamedList lst = rsp.getValues();\n    Boolean omitHeader = req.getParams().getBool(CommonParams.OMIT_HEADER);\n    if(omitHeader != null && omitHeader) lst.remove(\"responseHeader\");\n    int sz = lst.size();\n    int start=0;\n\n    // special case the response header if the version is 2.1 or less    \n    if (xw.version<=2100 && sz>0) {\n      Object header = lst.getVal(0);\n      if (header instanceof NamedList && \"responseHeader\".equals(lst.getName(0))) {\n        writer.write(\"<responseHeader>\");\n        xw.incLevel();\n        NamedList nl = (NamedList)header;\n        for (int i=0; i<nl.size(); i++) {\n          String name = nl.getName(i);\n          Object val = nl.getVal(i);\n          if (\"status\".equals(name) || \"QTime\".equals(name)) {\n            xw.writePrim(name,null,val.toString(),false);\n          } else {\n            xw.writeVal(name,val);\n          }\n        }\n        xw.decLevel();\n        writer.write(\"</responseHeader>\");\n        start=1;\n      }\n    }\n\n    for (int i=start; i<sz; i++) {\n      xw.writeVal(lst.getName(i),lst.getVal(i));\n    }\n\n    writer.write(\"\\n</response>\\n\");\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"ae7b8ff75c872b3cc70dd939c7368b1327a93ee1":["ad94625fb8d088209f46650c8097196fec67f00c"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["ae7b8ff75c872b3cc70dd939c7368b1327a93ee1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}