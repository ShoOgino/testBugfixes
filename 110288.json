{"path":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","commits":[{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":1,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"7424161ac990ef8f959f09ee516148e4d12c48bc","date":1336236796,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    //System.out.println(\"D&P: field=\" + field.name);\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"76923f6a33f2c4bec7f584e3f251261afe7ea276","date":1337149711,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"615ddbd81799980d0fdd95e0238e1c498b6f47b0","date":1338233290,"type":3,"author":"Robert Muir","isMerge":true,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.indexOptions.compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"229505c4feb8aa5ff851983b26d4e9874e6ea0c8","date":1339003839,"type":3,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n    if (field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS) < 0) {\n      return null;\n    } else if (needsOffsets && field.getIndexOptions().compareTo(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS) < 0) {\n      return null;\n    }\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"322360ac5185a8446d3e0b530b2068bef67cd3d5","date":1343669494,"type":5,"author":"Michael McCandless","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,int).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               int flags) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              flags);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, flags);\n      }\n    }\n  }\n\n","sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","date":1343768312,"type":4,"author":"Michael McCandless","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"d6f074e73200c07d54f242d3880a8da5a35ff97b","date":1344507653,"type":4,"author":"Uwe Schindler","isMerge":true,"pathNew":"/dev/null","pathOld":"lucene/core/src/java/org/apache/lucene/codecs/pulsing/PulsingPostingsReader#docsAndPositions(FieldInfo,BlockTermState,Bits,DocsAndPositionsEnum,boolean).mjava","sourceNew":null,"sourceOld":"  @Override\n  public DocsAndPositionsEnum docsAndPositions(FieldInfo field, BlockTermState _termState, Bits liveDocs, DocsAndPositionsEnum reuse,\n                                               boolean needsOffsets) throws IOException {\n\n    final PulsingTermState termState = (PulsingTermState) _termState;\n\n    if (termState.postingsSize != -1) {\n      PulsingDocsAndPositionsEnum postings;\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        postings = (PulsingDocsAndPositionsEnum) reuse;\n        if (!postings.canReuse(field)) {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      } else {\n        // the 'reuse' is actually the wrapped enum\n        PulsingDocsAndPositionsEnum previous = (PulsingDocsAndPositionsEnum) getOther(reuse);\n        if (previous != null && previous.canReuse(field)) {\n          postings = previous;\n        } else {\n          postings = new PulsingDocsAndPositionsEnum(field);\n        }\n      }\n      if (reuse != postings) {\n        setOther(postings, reuse); // postings.other = reuse \n      }\n      return postings.reset(liveDocs, termState);\n    } else {\n      if (reuse instanceof PulsingDocsAndPositionsEnum) {\n        DocsAndPositionsEnum wrapped = wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, (DocsAndPositionsEnum) getOther(reuse),\n                                                                              needsOffsets);\n        setOther(wrapped, reuse); // wrapped.other = reuse\n        return wrapped;\n      } else {\n        return wrappedPostingsReader.docsAndPositions(field, termState.wrappedTermState, liveDocs, reuse, needsOffsets);\n      }\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["7424161ac990ef8f959f09ee516148e4d12c48bc","76923f6a33f2c4bec7f584e3f251261afe7ea276"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"d6f074e73200c07d54f242d3880a8da5a35ff97b":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"229505c4feb8aa5ff851983b26d4e9874e6ea0c8":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["322360ac5185a8446d3e0b530b2068bef67cd3d5"]},"commit2Childs":{"76923f6a33f2c4bec7f584e3f251261afe7ea276":["615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"615ddbd81799980d0fdd95e0238e1c498b6f47b0":["229505c4feb8aa5ff851983b26d4e9874e6ea0c8"],"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["7424161ac990ef8f959f09ee516148e4d12c48bc"],"7424161ac990ef8f959f09ee516148e4d12c48bc":["76923f6a33f2c4bec7f584e3f251261afe7ea276","615ddbd81799980d0fdd95e0238e1c498b6f47b0"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"],"b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f":[],"d6f074e73200c07d54f242d3880a8da5a35ff97b":[],"229505c4feb8aa5ff851983b26d4e9874e6ea0c8":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","322360ac5185a8446d3e0b530b2068bef67cd3d5"],"322360ac5185a8446d3e0b530b2068bef67cd3d5":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["b7cbfe9a112ef62d75f3289e4c79bbe274cb2a4f","d6f074e73200c07d54f242d3880a8da5a35ff97b","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}