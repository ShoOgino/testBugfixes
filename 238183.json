{"path":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","commits":[{"id":"a75028b56df82c87510ec21c236855cc806a39a1","date":1229226462,"type":0,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"/dev/null","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a34495372f0709e1ee7051e94886274dc993443","date":1234022561,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.id\", \"two\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"three\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b","date":1237658128,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"one\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.id\", \"two\",\n              \"ext.map.language\", \"extractedLanguage\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"three\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.id\", \"two\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"three\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"eecdad1988b0b00f74f945528b689ef1eebf763d","date":1247586785,"type":3,"author":"Yonik Seeley","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n              \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n              \"map.Author\", \"extractedAuthor\",\n              \"map.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"map.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"map.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"one\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.extractionLiteralMV\", \"one\",\n            \"ext.literal.extractionLiteralMV\", \"two\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n              \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n              \"ext.map.Author\", \"extractedAuthor\",\n              \"ext.def.fl\", \"extractedContent\",\n              \"ext.literal.id\", \"two\",\n              \"ext.map.language\", \"extractedLanguage\",\n              \"ext.literal.extractionLiteral\", \"one\",\n              \"ext.literal.extractionLiteral\", \"two\",\n              \"ext.map.Last-Modified\", \"extractedDate\"\n      );\n      assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"ext.map.created\", \"extractedDate\", \"ext.map.producer\", \"extractedProducer\",\n            \"ext.map.creator\", \"extractedCreator\", \"ext.map.Keywords\", \"extractedKeywords\",\n            \"ext.map.Author\", \"extractedAuthor\",\n            \"ext.def.fl\", \"extractedContent\",\n            \"ext.literal.id\", \"three\",\n            \"ext.map.language\", \"extractedLanguage\",\n            \"ext.literal.extractionLiteral\", \"one\",\n            \"ext.map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c156fce3696e4675bc1974f81364deb8b87858e1","date":1253114156,"type":3,"author":"Grant Ingersoll","isMerge":false,"pathNew":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"map.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n              \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n              \"map.Author\", \"extractedAuthor\",\n              \"map.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"map.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"map.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"map.created\", \"extractedDate\", \"map.producer\", \"extractedProducer\",\n            \"map.creator\", \"extractedCreator\", \"map.Keywords\", \"extractedKeywords\",\n            \"map.Author\", \"extractedAuthor\",\n            \"map.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"map.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"map.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"ad94625fb8d088209f46650c8097196fec67f00c","date":1453508319,"type":5,"author":"Dawid Weiss","isMerge":false,"pathNew":"solr/contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","pathOld":"contrib/extraction/src/test/java/org/apache/solr/handler/ExtractingRequestHandlerTest#testLiterals().mjava","sourceNew":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","sourceOld":"  public void testLiterals() throws Exception {\n    ExtractingRequestHandler handler = (ExtractingRequestHandler) h.getCore().getRequestHandler(\"/update/extract\");\n    assertTrue(\"handler is null and it shouldn't be\", handler != null);\n    //test literal\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"one\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteralMV\", \"one\",\n            \"literal.extractionLiteralMV\", \"two\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n\n    );\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='0']\");\n    assertU(commit());\n    assertQ(req(\"stream_name:version_control.xml\"), \"//*[@numFound='1']\");\n\n    assertQ(req(\"extractionLiteralMV:one\"), \"//*[@numFound='1']\");\n    assertQ(req(\"extractionLiteralMV:two\"), \"//*[@numFound='1']\");\n\n    try {\n      loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n              \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n              \"fmap.Author\", \"extractedAuthor\",\n              \"fmap.content\", \"extractedContent\",\n              \"literal.id\", \"two\",\n              \"fmap.language\", \"extractedLanguage\",\n              \"literal.extractionLiteral\", \"one\",\n              \"literal.extractionLiteral\", \"two\",\n              \"fmap.Last-Modified\", \"extractedDate\"\n      );\n      // TODO: original author did not specify why an exception should be thrown... how to fix?\n      // assertTrue(\"Exception should have been thrown\", false);\n    } catch (SolrException e) {\n      //nothing to see here, move along\n    }\n\n    loadLocal(\"version_control.xml\", \"fmap.created\", \"extractedDate\", \"fmap.producer\", \"extractedProducer\",\n            \"fmap.creator\", \"extractedCreator\", \"fmap.Keywords\", \"extractedKeywords\",\n            \"fmap.Author\", \"extractedAuthor\",\n            \"fmap.content\", \"extractedContent\",\n            \"literal.id\", \"three\",\n            \"fmap.language\", \"extractedLanguage\",\n            \"literal.extractionLiteral\", \"one\",\n            \"fmap.Last-Modified\", \"extractedDate\"\n    );\n    assertU(commit());\n    assertQ(req(\"extractionLiteral:one\"), \"//*[@numFound='1']\");\n\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b":["3a34495372f0709e1ee7051e94886274dc993443"],"a75028b56df82c87510ec21c236855cc806a39a1":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["251bde4a7736baddeb8c8f17b50f2c8076c8ac4b"],"3a34495372f0709e1ee7051e94886274dc993443":["a75028b56df82c87510ec21c236855cc806a39a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":[],"ad94625fb8d088209f46650c8097196fec67f00c":["c156fce3696e4675bc1974f81364deb8b87858e1"],"c156fce3696e4675bc1974f81364deb8b87858e1":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"]},"commit2Childs":{"251bde4a7736baddeb8c8f17b50f2c8076c8ac4b":["eecdad1988b0b00f74f945528b689ef1eebf763d"],"a75028b56df82c87510ec21c236855cc806a39a1":["3a34495372f0709e1ee7051e94886274dc993443"],"eecdad1988b0b00f74f945528b689ef1eebf763d":["c156fce3696e4675bc1974f81364deb8b87858e1"],"3a34495372f0709e1ee7051e94886274dc993443":["251bde4a7736baddeb8c8f17b50f2c8076c8ac4b"],"3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b":["a75028b56df82c87510ec21c236855cc806a39a1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"ad94625fb8d088209f46650c8097196fec67f00c":[],"c156fce3696e4675bc1974f81364deb8b87858e1":["ad94625fb8d088209f46650c8097196fec67f00c"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["ad94625fb8d088209f46650c8097196fec67f00c","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["3cdb369a6112bacd5f5fc1d4e022bed2f8bffb9b","a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}