{"path":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","commits":[{"id":"d2178aefcd4690bd53785e9673e2c918cdb64165","date":1587583605,"type":1,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger,boolean).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger, boolean newMergesFound) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"89697e7abc9807639c384eecf5a2a6eef1080426","date":1587733375,"type":5,"author":"Simon Willnauer","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(MergeSource,MergeTrigger).mjava","pathOld":"lucene/core/src/java/org/apache/lucene/index/SerialMergeScheduler#merge(IndexWriter,MergeTrigger).mjava","sourceNew":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(MergeSource mergeSource, MergeTrigger trigger) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = mergeSource.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      mergeSource.merge(merge);\n    }\n  }\n\n","sourceOld":"  /** Just do the merges in sequence. We do this\n   * \"synchronized\" so that even if the application is using\n   * multiple threads, only one merge may run at a time. */\n  @Override\n  synchronized public void merge(IndexWriter writer, MergeTrigger trigger) throws IOException {\n    while(true) {\n      MergePolicy.OneMerge merge = writer.getNextMerge();\n      if (merge == null) {\n        break;\n      }\n      writer.merge(merge);\n    }\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"89697e7abc9807639c384eecf5a2a6eef1080426":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["89697e7abc9807639c384eecf5a2a6eef1080426"]},"commit2Childs":{"89697e7abc9807639c384eecf5a2a6eef1080426":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"d2178aefcd4690bd53785e9673e2c918cdb64165":["89697e7abc9807639c384eecf5a2a6eef1080426"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["d2178aefcd4690bd53785e9673e2c918cdb64165"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}