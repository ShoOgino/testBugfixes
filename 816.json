{"path":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","commits":[{"id":"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1","date":1513252583,"type":0,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"/dev/null","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":["bb222a3f9d9421d5c95afce73013fbd8de07ea1f"],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"9c6c0dad4932399aec99b4818086cb1772773916","date":1520515900,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    waitForState(\"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","date":1527582939,"type":3,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 2);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<2', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"11d6f92dfa9251d9da6d80ec5963a9cbecc90180","date":1530559969,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26","date":1531589977,"type":3,"author":"Michael Braun","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","date":1531905561,"type":3,"author":"Alessandro Benedetti","isMerge":true,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"cdc53359111a5e3782f56300070ab2878ec82cb9","date":1534542016,"type":3,"author":"Erick Erickson","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null},{"id":"a6a5c1c40529f15b445e6720dfde1967e139bff1","date":1535375643,"type":5,"author":"Andrzej Bialecki","isMerge":false,"pathNew":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestSimComputePlanAction#testNodeAdded().mjava","pathOld":"solr/core/src/test/org/apache/solr/cloud/autoscaling/sim/TestComputePlanAction#testNodeAdded().mjava","sourceNew":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestSimComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","sourceOld":"  @Test\n  //17-Aug-2018 commented @LuceneTestCase.BadApple(bugUrl=\"https://issues.apache.org/jira/browse/SOLR-12028\") // 28-June-2018\n  public void testNodeAdded() throws Exception {\n    AssertingTriggerAction.expectedNode = null;\n    SolrClient solrClient = cluster.simGetSolrClient();\n    String setTriggerCommand = \"{\" +\n        \"'set-trigger' : {\" +\n        \"'name' : 'node_added_trigger',\" +\n        \"'event' : 'nodeAdded',\" +\n        \"'waitFor' : '1s',\" +\n        \"'enabled' : true,\" +\n        \"'actions' : [{'name':'compute_plan', 'class' : 'solr.ComputePlanAction'},\" +\n        \"{'name':'test','class':'\" + TestComputePlanAction.AssertingTriggerAction.class.getName() + \"'}]\" +\n        \"}}\";\n    SolrRequest req = createAutoScalingRequest(SolrRequest.METHOD.POST, setTriggerCommand);\n    NamedList<Object> response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // the default policy limits 1 replica per node, we need more right now\n    String setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<5', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    CollectionAdminRequest.Create create = CollectionAdminRequest.createCollection(\"testNodeAdded\",\n        \"conf\",1, 4);\n    create.process(solrClient);\n\n    CloudTestUtils.waitForState(cluster, \"Timed out waiting for replicas of new collection to be active\",\n        \"testNodeAdded\", (liveNodes, collectionState) -> collectionState.getReplicas().stream().allMatch(replica -> replica.isActive(liveNodes)));\n\n    // reset to the original policy which has only 1 replica per shard per node\n    setClusterPolicyCommand = \"{\" +\n        \" 'set-cluster-policy': [\" +\n        \"      {'cores':'<10', 'node':'#ANY'},\" +\n        \"      {'replica':'<3', 'shard': '#EACH', 'node': '#ANY'},\" +\n        \"      {'nodeRole':'overseer', 'replica':0}\" +\n        \"    ]\" +\n        \"}\";\n    req = createAutoScalingRequest(SolrRequest.METHOD.POST, setClusterPolicyCommand);\n    response = solrClient.request(req);\n    assertEquals(response.get(\"result\").toString(), \"success\");\n\n    // start a node so that the 'violation' created by the previous policy update is fixed\n    String newNode = cluster.simAddNode();\n    assertTrue(\"Trigger was not fired even after 5 seconds\", triggerFiredLatch.await(5, TimeUnit.SECONDS));\n    assertTrue(fired.get());\n    Map context = actionContextPropsRef.get();\n    assertNotNull(context);\n    log.info(\"Node values: \" + Utils.toJSONString(cluster.getSimNodeStateProvider().simGetAllNodeValues()));\n    log.info(\"Live nodes: \" + cluster.getClusterStateProvider().getLiveNodes() + \", collection state: \" + cluster.getClusterStateProvider().getClusterState().getCollection(\"testNodeAdded\"));\n    List<SolrRequest> operations = (List<SolrRequest>) context.get(\"operations\");\n    assertNotNull(\"The operations computed by ComputePlanAction should not be null\" + context, operations);\n    assertEquals(\"ComputePlanAction should have computed exactly 1 operation, but was: \" + operations, 1, operations.size());\n    SolrRequest request = operations.get(0);\n    SolrParams params = request.getParams();\n    assertEquals(\"Expected MOVEREPLICA action after adding node\", MOVEREPLICA, CollectionParams.CollectionAction.get(params.get(\"action\")));\n    String nodeAdded = params.get(\"targetNode\");\n    assertEquals(\"Unexpected node in computed operation\", newNode, nodeAdded);\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":true,"nexts":[],"revCommit":null}],"commit2Parents":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cdc53359111a5e3782f56300070ab2878ec82cb9"],"9c6c0dad4932399aec99b4818086cb1772773916":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["9c6c0dad4932399aec99b4818086cb1772773916"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a","11d6f92dfa9251d9da6d80ec5963a9cbecc90180"]},"commit2Childs":{"a6a5c1c40529f15b445e6720dfde1967e139bff1":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"9c6c0dad4932399aec99b4818086cb1772773916":["4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a"],"11d6f92dfa9251d9da6d80ec5963a9cbecc90180":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cdc53359111a5e3782f56300070ab2878ec82cb9","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"0efc9f2cae117418f13ba9035f5e1d516ea7a2b5":[],"4181b4cf0450ea3c6d1aff8dc3ad4ed9cd3eeb6a":["11d6f92dfa9251d9da6d80ec5963a9cbecc90180","0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"cdc53359111a5e3782f56300070ab2878ec82cb9":["a6a5c1c40529f15b445e6720dfde1967e139bff1"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["1d4bf9d5308dfef350829c28f2b3b2648df1e9b1"],"1d4bf9d5308dfef350829c28f2b3b2648df1e9b1":["9c6c0dad4932399aec99b4818086cb1772773916"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[],"7eeaaea0106c7d6a2de50acfc8d357121ef8bd26":[]},"heads":["0efc9f2cae117418f13ba9035f5e1d516ea7a2b5","cd5edd1f2b162a5cfa08efd17851a07373a96817","7eeaaea0106c7d6a2de50acfc8d357121ef8bd26"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}