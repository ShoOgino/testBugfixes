{"path":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","commits":[{"id":"955c32f886db6f6356c9fcdea6b1f1cb4effda24","date":1270581567,"type":0,"author":"Uwe Schindler","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"/dev/null","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value tha should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":null,"bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"c7235f072992928845d8cfd2dfc1c90362360e1e","date":1296426876,"type":3,"author":"Robert Muir","isMerge":false,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value tha should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"29ef99d61cda9641b6250bf9567329a6e65f901d","date":1297244127,"type":3,"author":"Simon Willnauer","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value tha should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"bde51b089eb7f86171eb3406e38a274743f9b7ac","date":1298336439,"type":3,"author":"Michael Busch","isMerge":true,"pathNew":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value tha should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null},{"id":"3a119bbc8703c10faa329ec201c654b3a35a1e3e","date":1328644745,"type":5,"author":"Steven Rowe","isMerge":false,"pathNew":"lucene/core/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","pathOld":"lucene/src/java/org/apache/lucene/util/packed/PackedInts#bitsRequired(long).mjava","sourceNew":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","sourceOld":"  /** Returns how many bits are required to hold values up\n   *  to and including maxValue\n   * @param maxValue the maximum value that should be representable.\n   * @return the amount of bits needed to represent values from 0 to maxValue.\n   * @lucene.internal\n   */\n  public static int bitsRequired(long maxValue) {\n    // Very high long values does not translate well to double, so we do an\n    // explicit check for the edge cases\n    if (maxValue > 0x3FFFFFFFFFFFFFFFL) {\n      return 63;\n    } if (maxValue > 0x1FFFFFFFFFFFFFFFL) {\n      return 62;\n    }\n    return Math.max(1, (int) Math.ceil(Math.log(1+maxValue)/Math.log(2.0)));\n  }\n\n","bugFix":null,"bugIntro":[],"isBuggy":false,"nexts":[],"revCommit":null}],"commit2Parents":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["c7235f072992928845d8cfd2dfc1c90362360e1e"],"29ef99d61cda9641b6250bf9567329a6e65f901d":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c7235f072992928845d8cfd2dfc1c90362360e1e"],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":[],"c7235f072992928845d8cfd2dfc1c90362360e1e":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":["955c32f886db6f6356c9fcdea6b1f1cb4effda24","c7235f072992928845d8cfd2dfc1c90362360e1e"],"cd5edd1f2b162a5cfa08efd17851a07373a96817":["3a119bbc8703c10faa329ec201c654b3a35a1e3e"]},"commit2Childs":{"3a119bbc8703c10faa329ec201c654b3a35a1e3e":["cd5edd1f2b162a5cfa08efd17851a07373a96817"],"29ef99d61cda9641b6250bf9567329a6e65f901d":[],"a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85":["955c32f886db6f6356c9fcdea6b1f1cb4effda24"],"c7235f072992928845d8cfd2dfc1c90362360e1e":["3a119bbc8703c10faa329ec201c654b3a35a1e3e","29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"955c32f886db6f6356c9fcdea6b1f1cb4effda24":["29ef99d61cda9641b6250bf9567329a6e65f901d","c7235f072992928845d8cfd2dfc1c90362360e1e","bde51b089eb7f86171eb3406e38a274743f9b7ac"],"bde51b089eb7f86171eb3406e38a274743f9b7ac":[],"cd5edd1f2b162a5cfa08efd17851a07373a96817":[]},"heads":["29ef99d61cda9641b6250bf9567329a6e65f901d","bde51b089eb7f86171eb3406e38a274743f9b7ac","cd5edd1f2b162a5cfa08efd17851a07373a96817"],"roots":["a0e7ee9d0d12370e8d2b5ae0a23b6e687e018d85"],"pathCommit":null}